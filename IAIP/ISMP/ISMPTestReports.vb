Imports Oracle.ManagedDataAccess.Client
Imports System.IO

Public Class ISMPTestReports
    Dim dsMethods As DataSet
    Dim daMethods As OracleDataAdapter
    Dim dsEngineer As DataSet
    Dim daEngineer As OracleDataAdapter
    Dim dsComplianceStatus As DataSet
    Dim daComplianceStatus As OracleDataAdapter
    Dim dsCCList As DataSet
    Dim daCCList As OracleDataAdapter
    Dim dsUnits As DataSet
    Dim daUnits As OracleDataAdapter
    Dim dsComplianceManager As DataSet
    Dim daComplianceManager As OracleDataAdapter
    Dim dsReportType As DataSet
    Dim daReportType As OracleDataAdapter
    Dim dsTestingFirm As DataSet
    Dim daTestingFirm As OracleDataAdapter
    Dim dsISMPUnits As DataSet
    Dim daISMPUnits As OracleDataAdapter
    Dim dsPollutants As DataSet
    Dim daPollutants As OracleDataAdapter
    Dim SQL As String
    Dim cmd As OracleCommand
    Dim dr As OracleDataReader
    Dim RecExist As Boolean
    Dim dsComplianceStaff As DataSet
    Dim daComplianceStaff As OracleDataAdapter
    Dim DocumentType As String
    Dim ApplicableRequirment As String
    Dim ReportComments As String
    Dim ReportStatus As String
    Dim ControlEquipment As String

    Public Property ReferenceNumber() As String
        Get
            If Me.ID = -1 Then
                Return ""
            Else
                Return Me.ID.ToString
            End If
        End Get
        Set(ByVal value As String)
            Dim i As Integer = -1
            If Integer.TryParse(value, i) Then
                Me.ID = i
            Else
                Me.ID = -1
            End If
        End Set
    End Property

    Private Sub ISMPTestReports_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        monitor.TrackFeature("Forms." & Me.Name)
        Try
            txtReferenceNumber.Text = Me.ReferenceNumber

            SCTestReports.SanelySetSplitterDistance(190)

            LoadDataSets()
            LoadCombos()

            If txtReferenceNumber.Text = "" Then
                DefaultTabs()
            Else
                LoadData(txtReferenceNumber.Text)
                LoadTestNotifications()
                If cboTestNotificationNumber.Text <> " " And cboTestNotificationNumber.Text <> "" Then
                    llbTestNotifiactionNumber.Visible = True
                    labTestNotificationNumber.Visible = False
                Else
                    llbTestNotifiactionNumber.Visible = False
                    labTestNotificationNumber.Visible = True
                End If
            End If

            LoadUserPermissions()
            If TCDocumentTypes.TabPages.Contains(TPSSCPWork) Then
                LoadSSCPData()
            End If
            If txtReferenceNumber.Text <> "" Then
                Me.Text = txtReferenceNumber.Text & " - Performance Monitoring Test Reports"
            Else
                Me.Text = "Performance Monitoring Test Reports"
            End If

            If DocumentType = "001" Then
                TCDocumentTypes.SelectedIndex = 0
                TCOneStack.SelectedIndex = 1
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
#Region "Page Load Functions"
    Sub LoadDataSets()
        Try
            dsMethods = New DataSet
            dsEngineer = New DataSet
            dsComplianceStatus = New DataSet
            dsCCList = New DataSet
            dsUnits = New DataSet
            dsComplianceManager = New DataSet
            dsReportType = New DataSet
            dsTestingFirm = New DataSet
            dsISMPUnits = New DataSet
            dsPollutants = New DataSet
            dsComplianceStaff = New DataSet

            SQL = "Select strMethodCode, " & _
            "strMethodDesc " & _
            "from AIRBRANCH.LookUpISMPMethods " & _
            "order by strMethodCode "

            daMethods = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "select " & _
            "case when numUserId = '0' then 'Not Witnessed'  " & _
            "else UserName " & _
            "End Username,  " & _
            "numUserID  " & _
            "from  " & _
            "(select  " & _
            "(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            "NumUserID  " & _
            "from AIRBRANCH.EPDUSerProfiles  " & _
            "where numProgram  = '3'  " & _
            "and numEmployeeStatus = '1'   " & _
            "and (numunit is null or numunit <> '14') " & _
            "union  " & _
            "select  " & _
            "distinct(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            "NumUserID  " & _
            "from AIRBRANCH.EPDUSerProfiles, AIRBRANCH.ismpreportinformation " & _
            "where AIRBRANCH.epdUserProfiles.numUserId = AIRBRANCH.ismpreportinformation.strWitnessingEngineer) "

            daEngineer = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "select strCompliancekey, strComplianceStatus from AIRBRANCH.LookUPISMPComplianceStatus"

            daComplianceStatus = New OracleDataAdapter(SQL, CurrentConnection)

            'SQL = "select " & _
            '"case when numUserID = '0' then 'No CC' " & _
            '"else UserName " & _
            '"End UserName,  " & _
            '"numUserId  " & _
            '"from  " & _
            '"(select  " & _
            '"(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            '"airbranch.epduserprofiles.numUserID  " & _
            '"from AIRBranch.EPDUserProfiles, AIRBranch.IAIPPermissions  " & _
            '"where AIRBranch.EPDUserProfiles.numUserId = AIRBranch.IAIPPermissions.numUserID  " & _
            '"and (strIAIPPermissions like '%(28)%' " & _
            '"or strIAIPPermissions like '%(31)%'  " & _
            '"or strIAIPPermissions like '%(33)%'  " & _
            '"or strIAIPPermissions like '%(35)%'  " & _
            '"or strIAIPPermissions like '%(37)%'  " & _
            '"or strIAIPPermissions like '%(39)%'  " & _
            '"or strIAIPPermissions like '%(19)%'  " & _
            '"or strIAIPPermissions like '%(27)%'  " & _
            '"or strIAIPPermissions like '%(21)%'  " & _
            '"or strIAIPPermissions like '%(23)%'  " & _
            '"or strIAIPPermissions like '%(25)%' ) " & _
            '"Union  " & _
            '"select  " & _
            '"distinct(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            '"numUserId  " & _
            '"from AIRBranch.EPDUserProfiles, AIRBranch.ISMPREportInformation " & _
            '"where AIRBranch.EPDUserProfiles.numUserID = AIRBranch.ISMPReportInformation.strCC) "

            SQL = <s><![CDATA[
SELECT (AIRBranch.EPDUserProfiles.STRLASTNAME
  || ', '
  || AIRBranch.EPDUserProfiles.STRFIRSTNAME) AS UserName,
  AIRBranch.EPDUserProfiles.NUMUSERID
FROM AIRBranch.EPDUserProfiles,
  AIRBranch.IAIPPermissions
WHERE AIRBranch.EPDUserProfiles.NUMUSERID = AIRBranch.IAIPPermissions.NUMUSERID
AND AIRBranch.EPDUserProfiles.NUMEMPLOYEESTATUS = '1'
AND ((AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(28)%')
OR (AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(19)%')
OR (AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(121)%')
OR (AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(114)%')
OR (AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(141)%'))
UNION
SELECT 'None', 0 FROM DUAL ORDER BY USERNAME
            ]]></s>.Value

            daCCList = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "select strUnitKey, strUnitDescription from AIRBRANCH.LookUPUnits order by strUnitDescription"

            daUnits = New OracleDataAdapter(SQL, CurrentConnection)

            ' SQL = "Select strUnitTitle, strMonitoringUnit from AIRBRANCH.LookUPMonitoringUnits"

            SQL = "select " & _
                "strUnitDesc, numUnitCode  " & _
                "from AIRBRANCH.LookUpEPDUnits  " & _
                "where numProgramCode = '3' or numProgramCode = '0' "
            
            daISMPUnits = New OracleDataAdapter(SQL, CurrentConnection)

            'SQL = "select " & _
            '"case when numUserID = '0' then 'No Manager'  " & _
            '"else UserName " & _
            '"End ComplianceManager,  " & _
            '"numUserId  " & _
            '"from  " & _
            '"(select  " & _
            '"distinct(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            '"airbranch.epduserprofiles.numUserID    " & _
            '"from AIRBranch.EPDUserProfiles, AIRBranch.IAIPPermissions  " & _
            '"where AIRBranch.EPDUserProfiles.numUserId = AIRBranch.IAIPPermissions.numUserID  " & _
            '"and numemployeestatus= '1' " & _
            '"and (strIAIPPermissions like '%(19)%'  " & _
            '"or strIAIPPermissions like '%(27)%'  " & _
            '"or strIAIPPermissions like '%(21)%'  " & _
            '"or strIAIPPermissions like '%(23)%'  " & _
            '"or strIAIPPermissions like '%(25)%' " & _
            '"or strIAIPPermissions like '%(79)%' " & _
            '"or strIAIPPermissions like '%(80)%' " & _
            '"or strIAIPPermissions like '%(81)%' " & _
            '"or strIAIPPermissions like '%(82)%' " & _
            '"or strIAIPPermissions like '%(83)%' " & _
            '"or strIAIPPermissions like '%(84)%' " & _
            '"or strIAIPPermissions like '%(85)%' " & _
            '"or strIAIPPermissions like '%(86)%' " & _
            '") " & _
            '"union  " & _
            '"select  " & _
            '"distinct(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            '"numUserId  " & _
            '"from AIRBranch.EPDUserProfiles, AIRBranch.ISMPREportInformation " & _
            '"where AIRBranch.EPDUserProfiles.numUserID = AIRBranch.ISMPReportInformation.strComplianceManager) "

            SQL = <s><![CDATA[
SELECT DISTINCT (AIRBranch.EPDUserProfiles.STRLASTNAME
    || ', '
    || AIRBranch.EPDUserProfiles.STRFIRSTNAME) AS ComplianceManager,
    AIRBranch.EPDUserProfiles.NUMUSERID
  FROM AIRBranch.EPDUserProfiles,
    AIRBranch.IAIPPermissions
  WHERE AIRBranch.EPDUserProfiles.NUMUSERID        = AIRBranch.IAIPPermissions.NUMUSERID
  AND (AIRBranch.EPDUserProfiles.NUMEMPLOYEESTATUS = '1'
  AND (AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(19)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(27)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(21)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(23)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(25)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(79)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(80)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(81)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(82)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(83)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(84)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(85)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(86)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(133)%'
  OR AIRBranch.IAIPPermissions.STRIAIPPERMISSIONS LIKE '%(114)%'))
  UNION
  SELECT 'None', 0 FROM DUAL 
  ORDER BY ComplianceManager
            ]]></s>.Value
            daComplianceManager = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "Select strTestingFirm, strTestingFirmKey from AIRBRANCH.LookUPTestingFirms order by strTestingFirm"
            daTestingFirm = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "Select strReportType, strKey from AIRBRANCH.ISMPReportType order by strReportType"
            daReportType = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "Select strPollutantCode, strPollutantDescription from AIRBRANCH.LookUPPollutants order by strPollutantDescription"
            daPollutants = New OracleDataAdapter(SQL, CurrentConnection)

            SQL = "Select " & _
            "case  " & _
            "when numUserID = '0' then 'No Compliance Staff'  " & _
            "else UserName " & _
            "end StaffName,  " & _
            "numUserID  " & _
            "from  " & _
            "(select  " & _
            "(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            "numUserID  " & _
            "from airbranch.EPDUserProfiles  " & _
            "where ((numProgram = '4'  or numbranch = '5' ) " & _
            "and numEmployeeStatus = '1')  " & _
            "or strLastName = 'District'  " & _
            "Union " & _
            "select staff as username, numuserID " & _
            "from AIRBranch.VW_ComplianceStaff) "



            '" & _
            '           "select  " & _
            '           "distinct(strLastName|| ', ' ||strFirstName) as UserName,  " & _
            '           "numUserID  " & _
            '           "from airbranch.EPDUserProfiles, airbranch.SSCP_AuditedEnforcement   " & _
            '           "where airbranch.EPDUserProfiles.numUserID = AIRBranch.SSCP_AuditedEnforcement.numStaffResponsible ) "




            daComplianceStaff = New OracleDataAdapter(SQL, CurrentConnection)

            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If

            daMethods.Fill(dsMethods, "Methods")
            daEngineer.Fill(dsEngineer, "Engineers")
            daComplianceStatus.Fill(dsComplianceStatus, "ComplianceStatus")
            daCCList.Fill(dsCCList, "CCList")
            daUnits.Fill(dsUnits, "Units")
            daComplianceManager.Fill(dsComplianceManager, "ComplianceManager")
            daTestingFirm.Fill(dsTestingFirm, "TestingFirm")
            daReportType.Fill(dsReportType, "ReportType")
            daISMPUnits.Fill(dsISMPUnits, "ISMPUnits")
            daPollutants.Fill(dsPollutants, "Pollutants")
            daComplianceStaff.Fill(dsComplianceStaff, "ComplianceStaff")


        Catch ex As Exception
            ErrorReport(ex, SQL, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadCombos()
        Try
            Dim dtMethods As New DataTable
            Dim dtEngineers As New DataTable
            Dim dtWitnessingEngineer As New DataTable
            Dim dtWitnessingEngineer2 As New DataTable
            Dim dtComplianceStatus As New DataTable
            Dim dtCCList As New DataTable
            Dim dtISMPUnits As New DataTable
            Dim dtComplianceManager As New DataTable
            Dim dtReportType As New DataTable
            Dim dtTestingFirm As New DataTable
            Dim dtPollutants As New DataTable
            Dim dtComplianceStaff As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsOneStack As New DataTable
            Dim dtOperatingCapacityUnitsOneStack As New DataTable
            Dim dtAllowableEmissionRateUnits1OneStack As New DataTable
            Dim dtAllowableEmissionRateUnits2OneStack As New DataTable
            Dim dtAllowableEmissionRateUnits3OneStack As New DataTable
            Dim dtPollConUnitOneStackTwoRun As New DataTable
            Dim dtEmissRateUnitOneStackTwoRun As New DataTable
            Dim dtPollConUnitOneStackThreeRun As New DataTable
            Dim dtEmissRateUnitOneStackThreeRun As New DataTable
            Dim dtPollConUnitOneStackFourRun As New DataTable
            Dim dtEmissRateUnitOneStackFourRun As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsLoadingRack As New DataTable
            Dim dtOperatingCapacityUnitsLoadingRack As New DataTable
            Dim dtAllowableEmissionRateUnits1LoadingRack As New DataTable
            Dim dtAllowableEmissionRateUnits2LoadingRack As New DataTable
            Dim dtAllowableEmissionRateUnits3LoadingRack As New DataTable
            Dim dtTestDurationUnitsLoadingRack As New DataTable
            Dim dtPollConUnitINLoadingRack As New DataTable
            Dim dtPollConUnitOUTLoadingRack As New DataTable
            Dim dtEmissRateUnitLoadingRack As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsPond As New DataTable
            Dim dtOperatingCapacityUnitsPond As New DataTable
            Dim dtAllowableEmissionRateUnits1Pond As New DataTable
            Dim dtAllowableEmissionRateUnits2Pond As New DataTable
            Dim dtAllowableEmissionRateUnits3Pond As New DataTable
            Dim dtPollConUnitPond As New DataTable
            Dim dtTreatmentRateUnitPond As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsGas As New DataTable
            Dim dtOperatingCapacityUnitsGas As New DataTable
            Dim dtAllowableEmissionRateUnits1Gas As New DataTable
            Dim dtAllowableEmissionRateUnits2Gas As New DataTable
            Dim dtAllowableEmissionRateUnits3Gas As New DataTable
            Dim dtPollConUnitGas As New DataTable
            Dim dtEmissRateUnitGas As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsFlare As New DataTable
            Dim dtOperatingCapacityUnitsFlare As New DataTable
            Dim dtHeatingValueUnits As New DataTable
            Dim dtVelocityUnitsFlare As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsMethod9Single As New DataTable
            Dim dtOperatingCapacityUnitsMethod9Single As New DataTable
            Dim dtAllowableEmissionRateUnits1Method9Single As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE As New DataTable
            Dim dtOperatingCapacityUnitsMemorandumPTE As New DataTable
            Dim dtAllowableEmissionRateUnits1MemorandumPTE As New DataTable
            Dim dtAllowableEmissionRateUnits2MemorandumPTE As New DataTable
            Dim dtAllowableEmissionRateUnits3MemorandumPTE As New DataTable
            Dim dtUnitsRata As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsTwoStack As New DataTable
            Dim dtOperatingCapacityUnitsTwoStack As New DataTable
            Dim dtAllowableEmissionRateUnits1TwoStack As New DataTable
            Dim dtAllowableEmissionRateUnits2TwoStack As New DataTable
            Dim dtAllowableEmissionRateUnits3TwoStack As New DataTable
            Dim dtPollConUnitTwoStackStandard As New DataTable
            Dim dtEmissRateUnitTwoStackStandard As New DataTable
            Dim dtPollConUnitTwoStackDRE As New DataTable
            Dim dtEmissRateUnitTwoStackDRE As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsMethod22 As New DataTable
            Dim dtOperatingCapacityUnitsMethod22 As New DataTable
            Dim dtMaximumExpectedOperatingCapacityUnitsMethod9Multi As New DataTable
            Dim dtOperatingCapacityUnitsMethod9Multi As New DataTable
            Dim dtAllowableEmissionRateUnitsMethod9Multi As New DataTable
            Dim dtDilutent As New DataTable
            Dim dtRataDilutent As New DataTable

            Dim drDSRow As DataRow
            Dim drNewRow As DataRow

            dtMethods.Columns.Add("strMethodCode", GetType(System.String))
            dtMethods.Columns.Add("strMethodDesc", GetType(System.String))

            drNewRow = dtMethods.NewRow()
            drNewRow("strMethodCode") = " "
            drNewRow("strMethodDesc") = " "
            dtMethods.Rows.Add(drNewRow)

            For Each drDSRow In dsMethods.Tables("Methods").Rows()
                drNewRow = dtMethods.NewRow
                drNewRow("strMethodCode") = drDSRow("strMethodCode")
                drNewRow("strMethodDesc") = drDSRow("strMethodDesc")
                dtMethods.Rows.Add(drNewRow)
            Next

            With cboMethodDetermined
                .DataSource = dtMethods
                .DisplayMember = "strMethodDesc"
                .ValueMember = "strMethodCode"
                .SelectedValue = 0
            End With

            dtEngineers.Columns.Add("numUserID", GetType(System.String))
            dtEngineers.Columns.Add("UserName", GetType(System.String))
            dtWitnessingEngineer.Columns.Add("numUserID", GetType(System.String))
            dtWitnessingEngineer.Columns.Add("UserName", GetType(System.String))
            dtWitnessingEngineer2.Columns.Add("numUserID", GetType(System.String))
            dtWitnessingEngineer2.Columns.Add("UserName", GetType(System.String))

            drNewRow = dtEngineers.NewRow()
            drNewRow("numUserID") = " "
            drNewRow("UserName") = " "
            dtEngineers.Rows.Add(drNewRow)

            drNewRow = dtWitnessingEngineer.NewRow()
            drNewRow("numUserID") = " "
            drNewRow("UserName") = " "
            dtWitnessingEngineer.Rows.Add(drNewRow)

            For Each drDSRow In dsEngineer.Tables("Engineers").Rows()
                drNewRow = dtEngineers.NewRow
                drNewRow("numUserID") = drDSRow("numUserID")
                drNewRow("UserName") = drDSRow("UserName")
                dtEngineers.Rows.Add(drNewRow)
            Next

            For Each drDSRow In dsEngineer.Tables("Engineers").Rows()
                drNewRow = dtWitnessingEngineer.NewRow
                drNewRow("numUserID") = drDSRow("numUserID")
                drNewRow("UserName") = drDSRow("UserName")
                dtWitnessingEngineer.Rows.Add(drNewRow)
            Next

            For Each drDSRow In dsEngineer.Tables("Engineers").Rows()
                drNewRow = dtWitnessingEngineer2.NewRow
                drNewRow("numUserID") = drDSRow("numUserID")
                drNewRow("UserName") = drDSRow("UserName")
                dtWitnessingEngineer2.Rows.Add(drNewRow)
            Next

            With cboReviewingEngineer
                .DataSource = dtEngineers
                .DisplayMember = "UserName"
                .ValueMember = "numUserID"
                .SelectedValue = 0
            End With

            With cboWitnessingEngineer
                .DataSource = dtWitnessingEngineer
                .DisplayMember = "UserName"
                .ValueMember = "numUserID"
                .SelectedValue = 0
            End With

            With clbWitnessingEngineers
                .DataSource = dtWitnessingEngineer2
                .DisplayMember = "UserName"
                .ValueMember = "numUserID"
                .SelectedValue = 0
            End With

            dtComplianceStatus.Columns.Add("strComplianceKey", GetType(System.String))
            dtComplianceStatus.Columns.Add("strComplianceStatus", GetType(System.String))

            drNewRow = dtComplianceStatus.NewRow()
            drNewRow("strComplianceKey") = " "
            drNewRow("strComplianceStatus") = " "
            dtComplianceStatus.Rows.Add(drNewRow)

            For Each drDSRow In dsComplianceStatus.Tables("ComplianceStatus").Rows()
                drNewRow = dtComplianceStatus.NewRow
                drNewRow("strComplianceKey") = drDSRow("strComplianceKey")
                drNewRow("strComplianceStatus") = drDSRow("strComplianceStatus")
                dtComplianceStatus.Rows.Add(drNewRow)
            Next

            With cboComplianceStatus
                .DataSource = dtComplianceStatus
                .DisplayMember = "strComplianceStatus"
                .ValueMember = "strComplianceKey"
                .SelectedValue = 0
            End With

            dtComplianceStaff.Columns.Add("numUserID", GetType(System.String))
            dtComplianceStaff.Columns.Add("StaffName", GetType(System.String))

            drNewRow = dtComplianceStaff.NewRow()
            drNewRow("numUserID") = " "
            drNewRow("StaffName") = " "
            dtComplianceStaff.Rows.Add(drNewRow)

            For Each drDSRow In dsComplianceStaff.Tables("ComplianceStaff").Rows()
                drNewRow = dtComplianceStaff.NewRow
                drNewRow("numUserID") = drDSRow("numUserID")
                drNewRow("StaffName") = drDSRow("StaffName")
                dtComplianceStaff.Rows.Add(drNewRow)
            Next

            With cboStaffResponsible
                .DataSource = dtComplianceStaff
                .DisplayMember = "StaffName"
                .ValueMember = "numUserID"
                .SelectedValue = 0
            End With

            dtCCList.Columns.Add("numUserID", GetType(System.String))
            dtCCList.Columns.Add("UserName", GetType(System.String))

            drNewRow = dtCCList.NewRow()
            drNewRow("numUserID") = " "
            drNewRow("UserName") = " "
            dtCCList.Rows.Add(drNewRow)

            For Each drDSRow In dsCCList.Tables("CCList").Rows()
                drNewRow = dtCCList.NewRow
                drNewRow("numUserID") = drDSRow("numUserID")
                drNewRow("UserName") = drDSRow("UserName")
                dtCCList.Rows.Add(drNewRow)
            Next

            With cboccBox
                .DataSource = dtCCList
                .DisplayMember = "UserName"
                .ValueMember = "numUserID"
                .SelectedValue = 0
            End With


            dtISMPUnits.Columns.Add("numUnitCode", GetType(System.String))
            dtISMPUnits.Columns.Add("strUnitDesc", GetType(System.String))

            drNewRow = dtISMPUnits.NewRow()
            drNewRow("numUnitCode") = " "
            drNewRow("strUnitDesc") = " "
            dtISMPUnits.Rows.Add(drNewRow)

            For Each drDSRow In dsISMPUnits.Tables("ISMPUnits").Rows()
                drNewRow = dtISMPUnits.NewRow
                drNewRow("numUnitCode") = drDSRow("numUnitCode")
                drNewRow("strUnitDesc") = drDSRow("strUnitDesc")
                dtISMPUnits.Rows.Add(drNewRow)
            Next

            With cboISMPUnit
                .DataSource = dtISMPUnits
                .DisplayMember = "strUnitDesc"
                .ValueMember = "numUnitCode"
                .SelectedValue = 0
            End With

            dtComplianceManager.Columns.Add("numUserID", GetType(System.String))
            dtComplianceManager.Columns.Add("ComplianceManager", GetType(System.String))

            drNewRow = dtComplianceManager.NewRow()
            drNewRow("numUserID") = " "
            drNewRow("ComplianceManager") = " "
            dtComplianceManager.Rows.Add(drNewRow)

            For Each drDSRow In dsComplianceManager.Tables("ComplianceManager").Rows()
                drNewRow = dtComplianceManager.NewRow
                drNewRow("numUserID") = drDSRow("numUserID")
                drNewRow("ComplianceManager") = drDSRow("ComplianceManager")
                dtComplianceManager.Rows.Add(drNewRow)
            Next

            With cboComplianceManager
                .DataSource = dtComplianceManager
                .DisplayMember = "ComplianceManager"
                .ValueMember = "numUserID"
                .SelectedValue = 0
            End With

            dtTestingFirm.Columns.Add("strTestingFirmKey", GetType(System.String))
            dtTestingFirm.Columns.Add("strTestingFirm", GetType(System.String))

            drNewRow = dtTestingFirm.NewRow()
            drNewRow("strTestingFirmKey") = " "
            drNewRow("strTestingFirm") = " "
            dtTestingFirm.Rows.Add(drNewRow)

            For Each drDSRow In dsTestingFirm.Tables("TestingFirm").Rows()
                drNewRow = dtTestingFirm.NewRow
                drNewRow("strTestingFirmKey") = drDSRow("strTestingFirmKey")
                drNewRow("strTestingFirm") = drDSRow("strTestingFirm")
                dtTestingFirm.Rows.Add(drNewRow)
            Next

            With cboTestingFirm
                .DataSource = dtTestingFirm
                .DisplayMember = "strTestingFirm"
                .ValueMember = "strTestingFirmKey"
                .SelectedValue = 0
            End With

            dtPollutants.Columns.Add("strPollutantCode", GetType(System.String))
            dtPollutants.Columns.Add("strPollutantDescription", GetType(System.String))

            drNewRow = dtPollutants.NewRow()
            drNewRow("strPollutantCode") = " "
            drNewRow("strPollutantDescription") = " "
            dtPollutants.Rows.Add(drNewRow)

            For Each drDSRow In dsPollutants.Tables("Pollutants").Rows()
                drNewRow = dtPollutants.NewRow
                drNewRow("strPollutantCode") = drDSRow("strPollutantCode")
                drNewRow("strPollutantDescription") = drDSRow("strPollutantDescription")
                dtPollutants.Rows.Add(drNewRow)
            Next

            With cboPollutantDetermined
                .DataSource = dtPollutants
                .DisplayMember = "strPollutantDescription"
                .ValueMember = "strPollutantCode"
                .SelectedValue = 0
            End With

            dtReportType.Columns.Add("strKey", GetType(System.String))
            dtReportType.Columns.Add("strReportType", GetType(System.String))

            drNewRow = dtReportType.NewRow()
            drNewRow("strKey") = " "
            drNewRow("strReportType") = " "
            dtReportType.Rows.Add(drNewRow)

            For Each drDSRow In dsReportType.Tables("ReportType").Rows()
                drNewRow = dtReportType.NewRow
                drNewRow("strKey") = drDSRow("strKey")
                drNewRow("strReportType") = drDSRow("strReportType")
                dtReportType.Rows.Add(drNewRow)
            Next

            With cboReportType
                .DataSource = dtReportType
                .DisplayMember = "strReportType"
                .ValueMember = "strKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsOneStack.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsOneStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsOneStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsOneStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsOneStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsOneStack.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsOneStack
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsOneStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsOneStack.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsOneStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsOneStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsOneStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsOneStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsOneStack.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsOneStack
                .DataSource = dtOperatingCapacityUnitsOneStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1OneStack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1OneStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1OneStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1OneStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1OneStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1OneStack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1OneStack
                .DataSource = dtAllowableEmissionRateUnits1OneStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits2OneStack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits2OneStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits2OneStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits2OneStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits2OneStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits2OneStack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits2OneStack
                .DataSource = dtAllowableEmissionRateUnits2OneStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits3OneStack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits3OneStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits3OneStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits3OneStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits3OneStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits3OneStack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits3OneStack
                .DataSource = dtAllowableEmissionRateUnits3OneStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitOneStackTwoRun.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitOneStackTwoRun.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitOneStackTwoRun.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitOneStackTwoRun.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitOneStackTwoRun.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitOneStackTwoRun.Rows.Add(drNewRow)
            Next

            With cboPollConUnitOneStackTwoRun
                .DataSource = dtPollConUnitOneStackTwoRun
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitOneStackTwoRun.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitOneStackTwoRun.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitOneStackTwoRun.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitOneStackTwoRun.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitOneStackTwoRun.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitOneStackTwoRun.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitOneStackTwoRun
                .DataSource = dtEmissRateUnitOneStackTwoRun
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitOneStackThreeRun.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitOneStackThreeRun.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitOneStackThreeRun.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitOneStackThreeRun.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitOneStackThreeRun.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitOneStackThreeRun.Rows.Add(drNewRow)
            Next

            With cboPollConUnitOneStackThreeRun
                .DataSource = dtPollConUnitOneStackThreeRun
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitOneStackThreeRun.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitOneStackThreeRun.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitOneStackThreeRun.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitOneStackThreeRun.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitOneStackThreeRun.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitOneStackThreeRun.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitOneStackThreeRun
                .DataSource = dtEmissRateUnitOneStackThreeRun
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitOneStackFourRun.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitOneStackFourRun.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitOneStackFourRun.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitOneStackFourRun.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitOneStackFourRun.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitOneStackFourRun.Rows.Add(drNewRow)
            Next

            With cboPollConUnitOneStackFourRun
                .DataSource = dtPollConUnitOneStackFourRun
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitOneStackFourRun.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitOneStackFourRun.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitOneStackFourRun.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitOneStackFourRun.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitOneStackFourRun.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitOneStackFourRun.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitOneStackFourRun
                .DataSource = dtEmissRateUnitOneStackFourRun
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsLoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsLoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsLoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsLoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsLoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsLoadingRack.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsLoadingRack
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsLoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsLoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsLoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsLoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsLoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsLoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsLoadingRack.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsLoadingRack
                .DataSource = dtOperatingCapacityUnitsLoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1LoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1LoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1LoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1LoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1LoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1LoadingRack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1LoadingRack
                .DataSource = dtAllowableEmissionRateUnits1LoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits2LoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits2LoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits2LoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits2LoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits2LoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits2LoadingRack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits2LoadingRack
                .DataSource = dtAllowableEmissionRateUnits2LoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits3LoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits3LoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits3LoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits3LoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits3LoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits3LoadingRack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits3LoadingRack
                .DataSource = dtAllowableEmissionRateUnits3LoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtTestDurationUnitsLoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtTestDurationUnitsLoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtTestDurationUnitsLoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtTestDurationUnitsLoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtTestDurationUnitsLoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtTestDurationUnitsLoadingRack.Rows.Add(drNewRow)
            Next

            With cboTestDurationUnitsLoadingRack
                .DataSource = dtTestDurationUnitsLoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitINLoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitINLoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitINLoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitINLoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitINLoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitINLoadingRack.Rows.Add(drNewRow)
            Next

            With cboPollConUnitINLoadingRack
                .DataSource = dtPollConUnitINLoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitOUTLoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitOUTLoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitOUTLoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitOUTLoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitOUTLoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitOUTLoadingRack.Rows.Add(drNewRow)
            Next

            With cboPollConUnitOUTLoadingRack
                .DataSource = dtPollConUnitOUTLoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitLoadingRack.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitLoadingRack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitLoadingRack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitLoadingRack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitLoadingRack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitLoadingRack.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitLoadingRack
                .DataSource = dtEmissRateUnitLoadingRack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsPond.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsPond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsPond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsPond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsPond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsPond.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsPond
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsPond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsPond.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsPond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsPond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsPond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsPond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsPond.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsPond
                .DataSource = dtOperatingCapacityUnitsPond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1Pond.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1Pond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1Pond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1Pond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1Pond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1Pond.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1Pond
                .DataSource = dtAllowableEmissionRateUnits1Pond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits2Pond.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits2Pond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits2Pond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits2Pond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits2Pond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits2Pond.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits2Pond
                .DataSource = dtAllowableEmissionRateUnits2Pond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits3Pond.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits3Pond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits3Pond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits3Pond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits3Pond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits3Pond.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits3Pond
                .DataSource = dtAllowableEmissionRateUnits3Pond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitPond.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitPond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitPond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitPond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitPond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitPond.Rows.Add(drNewRow)
            Next

            With cboPollConUnitPond
                .DataSource = dtPollConUnitPond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtTreatmentRateUnitPond.Columns.Add("strUnitKey", GetType(System.String))
            dtTreatmentRateUnitPond.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtTreatmentRateUnitPond.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtTreatmentRateUnitPond.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtTreatmentRateUnitPond.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtTreatmentRateUnitPond.Rows.Add(drNewRow)
            Next

            With cboTreatmentRateUnitPond
                .DataSource = dtTreatmentRateUnitPond
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsGas.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsGas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsGas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsGas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsGas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsGas.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsGas
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsGas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsGas.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsGas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsGas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsGas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsGas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsGas.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsGas
                .DataSource = dtOperatingCapacityUnitsGas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1Gas.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1Gas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1Gas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1Gas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1Gas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1Gas.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1Gas
                .DataSource = dtAllowableEmissionRateUnits1Gas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits2Gas.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits2Gas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits2Gas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits2Gas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits2Gas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits2Gas.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits2Gas
                .DataSource = dtAllowableEmissionRateUnits2Gas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits3Gas.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits3Gas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits3Gas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits3Gas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits3Gas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits3Gas.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits3Gas
                .DataSource = dtAllowableEmissionRateUnits3Gas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitGas.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitGas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitGas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitGas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitGas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitGas.Rows.Add(drNewRow)
            Next

            With cboPollConUnitGas
                .DataSource = dtPollConUnitGas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitGas.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitGas.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitGas.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitGas.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitGas.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitGas.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitGas
                .DataSource = dtEmissRateUnitGas
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsFlare.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsFlare.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsFlare.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsFlare.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsFlare.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsFlare.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsFlare
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsFlare
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsFlare.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsFlare.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsFlare.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsFlare.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsFlare.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsFlare.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsFlare
                .DataSource = dtOperatingCapacityUnitsFlare
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtHeatingValueUnits.Columns.Add("strUnitKey", GetType(System.String))
            dtHeatingValueUnits.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtHeatingValueUnits.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtHeatingValueUnits.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtHeatingValueUnits.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtHeatingValueUnits.Rows.Add(drNewRow)
            Next

            With cboHeatingValueUnits
                .DataSource = dtHeatingValueUnits
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtVelocityUnitsFlare.Columns.Add("strUnitKey", GetType(System.String))
            dtVelocityUnitsFlare.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtVelocityUnitsFlare.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtVelocityUnitsFlare.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtVelocityUnitsFlare.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtVelocityUnitsFlare.Rows.Add(drNewRow)
            Next

            With cboVelocityUnitsFlare
                .DataSource = dtVelocityUnitsFlare
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsMethod9Single.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsMethod9Single.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsMethod9Single.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsMethod9Single.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsMethod9Single.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsMethod9Single.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsMethod9Single
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsMethod9Single
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsMethod9Single.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsMethod9Single.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsMethod9Single.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsMethod9Single.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsMethod9Single.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsMethod9Single.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsMethod9Single
                .DataSource = dtOperatingCapacityUnitsMethod9Single
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1Method9Single.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1Method9Single.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1Method9Single.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1Method9Single.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1Method9Single.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1Method9Single.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1Method9Single
                .DataSource = dtAllowableEmissionRateUnits1Method9Single
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsMemorandumPTE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsMemorandumPTE.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsMemorandumPTE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsMemorandumPTE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsMemorandumPTE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsMemorandumPTE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsMemorandumPTE.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsMemorandumPTE
                .DataSource = dtOperatingCapacityUnitsMemorandumPTE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1MemorandumPTE.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1MemorandumPTE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1MemorandumPTE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1MemorandumPTE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1MemorandumPTE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1MemorandumPTE.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1MemorandumPTE
                .DataSource = dtAllowableEmissionRateUnits1MemorandumPTE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits2MemorandumPTE.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits2MemorandumPTE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits2MemorandumPTE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits2MemorandumPTE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits2MemorandumPTE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits2MemorandumPTE.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits2MemorandumPTE
                .DataSource = dtAllowableEmissionRateUnits2MemorandumPTE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits3MemorandumPTE.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits3MemorandumPTE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits3MemorandumPTE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits3MemorandumPTE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits3MemorandumPTE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits3MemorandumPTE.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits3MemorandumPTE
                .DataSource = dtAllowableEmissionRateUnits3MemorandumPTE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtUnitsRata.Columns.Add("strUnitKey", GetType(System.String))
            dtUnitsRata.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtUnitsRata.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtUnitsRata.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtUnitsRata.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtUnitsRata.Rows.Add(drNewRow)
            Next

            With cboUnitsRata
                .DataSource = dtUnitsRata
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsTwoStack.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsTwoStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsTwoStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsTwoStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsTwoStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsTwoStack.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsTwoStack
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsTwoStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsTwoStack.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsTwoStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsTwoStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsTwoStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsTwoStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsTwoStack.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsTwoStack
                .DataSource = dtOperatingCapacityUnitsTwoStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits1TwoStack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits1TwoStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits1TwoStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits1TwoStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits1TwoStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits1TwoStack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits1TwoStack
                .DataSource = dtAllowableEmissionRateUnits1TwoStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits2TwoStack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits2TwoStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits2TwoStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits2TwoStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits2TwoStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits2TwoStack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits2TwoStack
                .DataSource = dtAllowableEmissionRateUnits2TwoStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnits3TwoStack.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnits3TwoStack.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnits3TwoStack.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnits3TwoStack.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnits3TwoStack.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnits3TwoStack.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnits3TwoStack
                .DataSource = dtAllowableEmissionRateUnits3TwoStack
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitTwoStackStandard.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitTwoStackStandard.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitTwoStackStandard.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitTwoStackStandard.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitTwoStackStandard.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitTwoStackStandard.Rows.Add(drNewRow)
            Next

            With cboPollConUnitTwoStackStandard
                .DataSource = dtPollConUnitTwoStackStandard
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitTwoStackStandard.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitTwoStackStandard.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitTwoStackStandard.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitTwoStackStandard.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitTwoStackStandard.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitTwoStackStandard.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitTwoStackStandard
                .DataSource = dtEmissRateUnitTwoStackStandard
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtPollConUnitTwoStackDRE.Columns.Add("strUnitKey", GetType(System.String))
            dtPollConUnitTwoStackDRE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtPollConUnitTwoStackDRE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtPollConUnitTwoStackDRE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtPollConUnitTwoStackDRE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtPollConUnitTwoStackDRE.Rows.Add(drNewRow)
            Next

            With cboPollConUnitTwoStackDRE
                .DataSource = dtPollConUnitTwoStackDRE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtEmissRateUnitTwoStackDRE.Columns.Add("strUnitKey", GetType(System.String))
            dtEmissRateUnitTwoStackDRE.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtEmissRateUnitTwoStackDRE.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtEmissRateUnitTwoStackDRE.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtEmissRateUnitTwoStackDRE.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtEmissRateUnitTwoStackDRE.Rows.Add(drNewRow)
            Next

            With cboEmissRateUnitTwoStackDRE
                .DataSource = dtEmissRateUnitTwoStackDRE
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsMethod22.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsMethod22.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsMethod22.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsMethod22.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsMethod22.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsMethod22.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsMethod22
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsMethod22
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsMethod22.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsMethod22.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsMethod22.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsMethod22.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsMethod22.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsMethod22.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsMethod22
                .DataSource = dtOperatingCapacityUnitsMethod22
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtMaximumExpectedOperatingCapacityUnitsMethod9Multi.Columns.Add("strUnitKey", GetType(System.String))
            dtMaximumExpectedOperatingCapacityUnitsMethod9Multi.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtMaximumExpectedOperatingCapacityUnitsMethod9Multi.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtMaximumExpectedOperatingCapacityUnitsMethod9Multi.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtMaximumExpectedOperatingCapacityUnitsMethod9Multi.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtMaximumExpectedOperatingCapacityUnitsMethod9Multi.Rows.Add(drNewRow)
            Next

            With cboMaximumExpectedOperatingCapacityUnitsMethod9Multi
                .DataSource = dtMaximumExpectedOperatingCapacityUnitsMethod9Multi
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtOperatingCapacityUnitsMethod9Multi.Columns.Add("strUnitKey", GetType(System.String))
            dtOperatingCapacityUnitsMethod9Multi.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtOperatingCapacityUnitsMethod9Multi.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtOperatingCapacityUnitsMethod9Multi.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtOperatingCapacityUnitsMethod9Multi.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtOperatingCapacityUnitsMethod9Multi.Rows.Add(drNewRow)
            Next

            With cboOperatingCapacityUnitsMethod9Multi
                .DataSource = dtOperatingCapacityUnitsMethod9Multi
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtAllowableEmissionRateUnitsMethod9Multi.Columns.Add("strUnitKey", GetType(System.String))
            dtAllowableEmissionRateUnitsMethod9Multi.Columns.Add("strUnitDescription", GetType(System.String))

            drNewRow = dtAllowableEmissionRateUnitsMethod9Multi.NewRow()
            drNewRow("strUnitKey") = " "
            drNewRow("strUnitDescription") = " "
            dtAllowableEmissionRateUnitsMethod9Multi.Rows.Add(drNewRow)

            For Each drDSRow In dsUnits.Tables("Units").Rows()
                drNewRow = dtAllowableEmissionRateUnitsMethod9Multi.NewRow
                drNewRow("strUnitKey") = drDSRow("strUnitKey")
                drNewRow("strUnitDescription") = drDSRow("strUnitDescription")
                dtAllowableEmissionRateUnitsMethod9Multi.Rows.Add(drNewRow)
            Next

            With cboAllowableEmissionRateUnitsMethod9Multi
                .DataSource = dtAllowableEmissionRateUnitsMethod9Multi
                .DisplayMember = "strUnitDescription"
                .ValueMember = "strUnitKey"
                .SelectedValue = 0
            End With

            dtDilutent.Columns.Add("strDilutentCode", GetType(System.String))
            dtDilutent.Columns.Add("strDiluent", GetType(System.String))

            drNewRow = dtDilutent.NewRow()
            drNewRow("strDilutentCode") = " "
            drNewRow("strDiluent") = " "
            dtDilutent.Rows.Add(drNewRow)

            drNewRow = dtDilutent.NewRow()
            drNewRow("strDilutentCode") = "00012"
            drNewRow("strDiluent") = "N/A"
            dtDilutent.Rows.Add(drNewRow)

            drNewRow = dtDilutent.NewRow()
            drNewRow("strDilutentCode") = "00013"
            drNewRow("strDiluent") = "Oxygen"
            dtDilutent.Rows.Add(drNewRow)

            drNewRow = dtDilutent.NewRow()
            drNewRow("strDilutentCode") = "00036"
            drNewRow("strDiluent") = "Carbon Dioxide"
            dtDilutent.Rows.Add(drNewRow)

            drNewRow = dtDilutent.NewRow()
            drNewRow("strDilutentCode") = "00096"
            drNewRow("strDiluent") = "% Efficiency"
            dtDilutent.Rows.Add(drNewRow)

            With cboDilutentMonitoredRata
                .DataSource = dtDilutent
                .DisplayMember = "strDiluent"
                .ValueMember = "strDilutentCode"
                .SelectedValue = 0
            End With

            dtRataDilutent.Columns.Add("strDilutentCode", GetType(System.String))
            dtRataDilutent.Columns.Add("strDiluent", GetType(System.String))

            drNewRow = dtRataDilutent.NewRow()
            drNewRow("strDilutentCode") = " "
            drNewRow("strDiluent") = " "
            dtRataDilutent.Rows.Add(drNewRow)

            drNewRow = dtRataDilutent.NewRow()
            drNewRow("strDilutentCode") = "00012"
            drNewRow("strDiluent") = "N/A"
            dtRataDilutent.Rows.Add(drNewRow)

            drNewRow = dtRataDilutent.NewRow()
            drNewRow("strDilutentCode") = "00013"
            drNewRow("strDiluent") = "Oxygen"
            dtRataDilutent.Rows.Add(drNewRow)

            drNewRow = dtRataDilutent.NewRow()
            drNewRow("strDilutentCode") = "00036"
            drNewRow("strDiluent") = "Carbon Dioxide"
            dtRataDilutent.Rows.Add(drNewRow)

            With cboDiluentRata
                .DataSource = dtRataDilutent
                .DisplayMember = "strDiluent"
                .ValueMember = "strDilutentCode"
                .SelectedValue = 0
            End With

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub DefaultTabs()
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            TCDocumentTypes.TabPages.Add(TPOneStack)
            TCOneStack.TabPages.Remove(TPOneStackTwoRun)
            TCOneStack.TabPages.Remove(TPOneStackThreeRun)
            TCOneStack.TabPages.Remove(TPOneStackFourRun)
            TCOneStack.TabPages.Add(TPOneStackTwoRun)
            TCOneStack.TabPages.Add(TPOneStackThreeRun)
            TCOneStack.TabPages.Add(TPOneStackFourRun)

            TCDocumentTypes.TabPages.Add(TPLoadingRack)
            TCDocumentTypes.TabPages.Add(TPPondTreatment)
            TCDocumentTypes.TabPages.Add(TPGasConcentration)
            TCDocumentTypes.TabPages.Add(TPFlare)
            TCDocumentTypes.TabPages.Add(TPMethodNine)
            TCMethodNine.TabPages.Remove(TPMethodNineSingle)
            TCMethodNine.TabPages.Remove(TPMethodNineMultiple)
            TCMethodNine.TabPages.Remove(TPMethodNineMultiple2)
            TCMethodNine.TabPages.Add(TPMethodNineSingle)
            TCMethodNine.TabPages.Add(TPMethodNineMultiple)
            TCMethodNine.TabPages.Add(TPMethodNineMultiple2)

            TCDocumentTypes.TabPages.Add(TPMemorandum)
            TCMemorandum.TabPages.Remove(TPMemoStandard)
            TCMemorandum.TabPages.Remove(TPMemoToFile)
            TCMemorandum.TabPages.Remove(TPMemoPTE)
            TCMemorandum.TabPages.Add(TPMemoStandard)
            TCMemorandum.TabPages.Add(TPMemoToFile)
            TCMemorandum.TabPages.Add(TPMemoPTE)

            TCDocumentTypes.TabPages.Add(TPRata)
            TCDocumentTypes.TabPages.Add(TPTwoStack)
            TCTwoStack.TabPages.Remove(Me.TPTwoStackStandard)
            TCTwoStack.TabPages.Remove(Me.TPTwoStackDRE)
            TCTwoStack.TabPages.Add(TPTwoStackStandard)
            TCTwoStack.TabPages.Add(TPTwoStackDRE)

            TCDocumentTypes.TabPages.Add(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Add(TPSSCPWork)

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadData(ByVal RefNumber As String)
        Try
            Dim OtherWitnessingEng As String = "0"
            Dim ConfidentialData As String = "0"

            SQL = _
            "SELECT mas.STRREFERENCENUMBER , SUBSTR( mas.STRAIRSNUMBER, 5 ) " & _
            "  AS AIRSNumber , fac.STRFACILITYNAME , fac.STRFACILITYCITY , " & _
            "  fac.STRFACILITYSTATE , rep.STRPOLLUTANT , " & _
            "  rep.STREMISSIONSOURCE , rep.STRREPORTTYPE , " & _
            "  rep.STRDOCUMENTTYPE , rep.STRAPPLICABLEREQUIREMENT , " & _
            "  rep.STRTESTINGFIRM , rep.STRREVIEWINGENGINEER , " & _
            "  rep.STRWITNESSINGENGINEER , rep.STRREVIEWINGUNIT , TO_CHAR( " & _
            "  rep.DATREVIEWEDBYUNITMANAGER, 'dd-Mon-yyyy' ) AS " & _
            "  datReviewedByUnitManager , rep.STRCOMPLIANCEMANAGER , TO_CHAR " & _
            "  ( rep.DATRECEIVEDDATE, 'dd-Mon-yyyy' ) AS datReceivedDate , " & _
            "  TO_CHAR( rep.DATTESTDATESTART, 'dd-Mon-yyyy' ) AS " & _
            "  datTestDateStart , TO_CHAR( rep.DATTESTDATEEND, 'dd-Mon-yyyy' " & _
            "  ) AS datTestDateEnd , TO_CHAR( rep.DATCOMPLETEDATE, " & _
            "  'dd-Mon-yyyy' ) AS datCompleteDate , rep.MMOCOMMENTAREA , " & _
            "  rep.STRCLOSED , rep.STRPROGRAMMANAGER , " & _
            "  rep.STRCOMPLIANCESTATUS , rep.STRCC , TO_CHAR( " & _
            "  rep.DATRECEIVEDDATE - rep.DATTESTDATEEND ) AS DaysFromTest , " & _
            "  CASE WHEN rep.DATCOMPLETEDATE = '04-Jul-1776' THEN TO_CHAR( " & _
            "      SysDate - rep.DATRECEIVEDDATE ) ELSE TO_CHAR( " & _
            "      rep.DATCOMPLETEDATE - rep.DATRECEIVEDDATE ) END APBDays , " & _
            "  CASE WHEN rep.DATCOMPLETEDATE = '04-Jul-1776' THEN TO_CHAR( " & _
            "      SysDate - rep.DATREVIEWEDBYUNITMANAGER ) ELSE TO_CHAR( " & _
            "      rep.DATCOMPLETEDATE - rep.DATREVIEWEDBYUNITMANAGER ) END " & _
            "  EngineerDays , rep.STRDETERMINATIONMETHOD , " & _
            "  rep.STRCONTROLEQUIPMENTDATA , rep.STROTHERWITNESSINGENG , " & _
            "  rep.STRCONFIDENTIALDATA , CASE WHEN rep.NUMREVIEWINGMANAGER " & _
            "      IS NULL THEN 'None'        WHEN rep.NUMREVIEWINGMANAGER = " & _
            "      '0'     THEN 'None' ELSE( p1.STRLASTNAME || ', ' || " & _
            "      p1.STRFIRSTNAME ) END UnitManager , " & _
            "  rep.STRPRECOMPLIANCESTATUS , CASE                WHEN " & _
            "      rep.STRCOMPLIANCEMANAGER IS NULL THEN 'None' WHEN " & _
            "      rep.STRCOMPLIANCEMANAGER = '0'   THEN 'None' ELSE( " & _
            "      p2.STRLASTNAME || ', ' || p2.STRFIRSTNAME ) END " & _
            "  ComplianceManager , CASE WHEN rep.STRCC IS NULL THEN 'None' " & _
            "                           WHEN rep.STRCC = '0'   THEN 'None' " & _
            "    ELSE( p3.STRLASTNAME || ', ' || p3.STRFIRSTNAME ) END " & _
            "  CCName , rep.STRDELETE " & _
            "FROM AIRBRANCH.ISMPMaster mas " & _
            "INNER JOIN AIRBRANCH.ISMPReportInformation rep " & _
            "ON mas.STRREFERENCENUMBER = rep.STRREFERENCENUMBER " & _
            "LEFT JOIN AIRBRANCH.EPDUserProfiles p3 " & _
            "ON rep.STRCC = p3.NUMUSERID " & _
            "LEFT JOIN AIRBRANCH.EPDUSERPROFILES p2 " & _
            "ON rep.STRCOMPLIANCEMANAGER = p2.NUMUSERID " & _
            "LEFT JOIN AIRBRANCH.EPDUSERPROFILES p1 " & _
            "ON rep.NUMREVIEWINGMANAGER = p1.NUMUSERID " & _
            "INNER JOIN AIRBRANCH.APBFacilityInformation fac " & _
            "ON fac.STRAIRSNUMBER = mas.STRAIRSNUMBER " & _
            "WHERE mas.STRREFERENCENUMBER = :refnum"

            cmd = New OracleCommand(SQL, CurrentConnection)
            Dim parameter As OracleParameter = New OracleParameter("RefNumber", RefNumber)
            cmd.Parameters.Clear()
            cmd.Parameters.Add(parameter)

            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            If RecExist = True Then
                If IsDBNull(dr.Item("AIRSNumber")) Then
                    txtAirsNumber.Clear()
                Else
                    txtAirsNumber.Text = dr.Item("AIRSNumber")
                End If
                If IsDBNull(dr.Item("strFacilityName")) Then
                    txtFacilityName.Clear()
                Else
                    txtFacilityName.Text = dr.Item("strFacilityName")
                End If
                If IsDBNull(dr.Item("strFacilityCity")) Then
                    txtFacilityCity.Clear()
                Else
                    txtFacilityCity.Text = dr.Item("strFacilityCity")
                End If
                If IsDBNull(dr.Item("strFacilityState")) Then
                    txtFacilityState.Clear()
                Else
                    txtFacilityState.Text = dr.Item("strFacilityState")
                End If
                txtFacilityCity.Text = String.Join(", ", New String() {txtFacilityCity.Text, txtFacilityState.Text})
                If IsDBNull(dr.Item("strPollutant")) Then
                    cboPollutantDetermined.SelectedValue = 0
                Else
                    cboPollutantDetermined.SelectedValue = dr.Item("strPollutant")
                End If
                If IsDBNull(dr.Item("strEmissionSource")) Then
                    txtSourceTested.Clear()
                Else
                    txtSourceTested.Text = dr.Item("strEmissionSource")
                End If
                If IsDBNull(dr.Item("strReportType")) Then
                    cboReportType.SelectedValue = 0
                Else
                    cboReportType.SelectedValue = dr.Item("strReportType")
                End If
                If IsDBNull(dr.Item("strDocumentType")) Then
                    DocumentType = ""
                Else
                    DocumentType = dr.Item("strDocumentType")
                End If
                If IsDBNull(dr.Item("strApplicableRequirement")) Then
                    ApplicableRequirment = ""
                Else
                    ApplicableRequirment = dr.Item("strApplicableRequirement")
                End If
                If IsDBNull(dr.Item("strTestingFirm")) Then
                    cboTestingFirm.SelectedValue = 0
                Else
                    cboTestingFirm.SelectedValue = dr.Item("strTestingFirm")
                End If
                If IsDBNull(dr.Item("strReviewingEngineer")) Then
                    cboReviewingEngineer.SelectedValue = 0
                Else
                    If dr.Item("strReviewingEngineer") = "0" Then
                        cboReviewingEngineer.SelectedValue = 0
                    Else
                        cboReviewingEngineer.SelectedValue = dr.Item("strReviewingEngineer")
                    End If
                End If
                If IsDBNull(dr.Item("strWitnessingEngineer")) Then
                    cboWitnessingEngineer.SelectedValue = 0
                Else
                    If dr.Item("strWitnessingEngineer") = "0" Then
                        cboWitnessingEngineer.SelectedValue = 0
                    Else
                        cboWitnessingEngineer.SelectedValue = dr.Item("strWitnessingEngineer")
                    End If
                End If
                If IsDBNull(dr.Item("strReviewingunit")) Then
                    cboISMPUnit.SelectedValue = 0
                Else
                    If dr.Item("strReviewingUnit") = "O" Then
                        cboISMPUnit.SelectedValue = 0
                    Else
                        cboISMPUnit.SelectedValue = dr.Item("strReviewingUnit")
                    End If
                End If
                If IsDBNull(dr.Item("datReviewedByUnitManager")) Then
                    txtAssignedToEngineer.Clear()
                Else
                    txtAssignedToEngineer.Text = dr.Item("datReviewedByUnitManager")
                End If

                If IsDBNull(dr.Item("strComplianceManager")) OrElse dr.Item("strComplianceManager") = "0" Then
                    cboComplianceManager.SelectedValue = 0
                Else
                    ' The Compliance Manager combo box is filled with names according to a 
                    ' list of current specific IAIP permissions. Previously existing stack
                    ' tests may have already been assigned to users who no longer have the
                    ' correct permissions. So we have to add one additional row to the combo
                    ' box data source for the existing compliance manager assignment.
                    Dim CMComboBoxData As DataTable = cboComplianceManager.DataSource
                    Dim dr1 As DataRow
                    dr1 = CMComboBoxData.NewRow()
                    dr1("numUserID") = dr.Item("strComplianceManager")
                    dr1("ComplianceManager") = dr.Item("ComplianceManager")
                    CMComboBoxData.Rows.Add(dr1)

                    cboComplianceManager.SelectedValue = dr.Item("strComplianceManager")
                End If

                If IsDBNull(dr.Item("datReceivedDate")) Then
                    txtReceivedByAPB.Clear()
                Else
                    txtReceivedByAPB.Text = dr.Item("datReceivedDate")
                End If
                If IsDBNull(dr.Item("datTestDateStart")) Then
                    DTPTestDateStart.Value = OracleDate
                    DTPTestDateStart.Checked = False
                Else
                    DTPTestDateStart.Value = dr.Item("datTestDateStart")
                    DTPTestDateStart.Checked = True
                End If
                If IsDBNull(dr.Item("datTestDateEnd")) Then
                    DTPTestDateComplete.Value = OracleDate
                    DTPTestDateComplete.Checked = False
                Else
                    DTPTestDateComplete.Value = dr.Item("datTestDateEnd")
                    DTPTestDateComplete.Checked = True
                End If
                If IsDBNull(dr.Item("datCompleteDate")) Then
                    txtCompleteDate.Clear()
                Else
                    txtCompleteDate.Text = dr.Item("datCompleteDate")
                    If txtCompleteDate.Text = "04-Jul-1776" Then
                        txtCompleteDate.Clear()
                    End If
                End If
                If IsDBNull(dr.Item("mmoCommentArea")) Then
                    ReportComments = ""
                Else
                    ReportComments = dr.Item("mmoCommentArea")
                End If
                If IsDBNull(dr.Item("strClosed")) Then
                    ReportStatus = "False"
                Else
                    ReportStatus = dr.Item("strClosed")
                End If
                If IsDBNull(dr.Item("strProgramManager")) Then
                    txtProgramManager.Clear()
                Else
                    txtProgramManager.Text = dr.Item("strProgramManager")
                End If
                If IsDBNull(dr.Item("strComplianceStatus")) Then
                    cboComplianceStatus.SelectedValue = 0
                    cboComplianceStatus.BackColor = Color.White
                Else
                    cboComplianceStatus.SelectedValue = dr.Item("strComplianceStatus")
                End If

                If IsDBNull(dr.Item("strCC")) OrElse dr.Item("strCC") = "0" Then
                    cboccBox.SelectedValue = 0
                Else
                    ' The CCList combo box is filled with names according to a 
                    ' list of specific IAIP permissions. Previously existing stack
                    ' tests may have already been assigned to users who no longer have the
                    ' correct permissions. So we have to add one additional row to the combo
                    ' box data source for the existing CCList assignment.
                    Dim CCComboBoxData As DataTable = cboccBox.DataSource
                    Dim dr2 As DataRow
                    dr2 = CCComboBoxData.NewRow()
                    dr2("numUserID") = dr.Item("STRCC")
                    dr2("UserName") = dr.Item("CCName")
                    CCComboBoxData.Rows.Add(dr2)

                    cboccBox.SelectedValue = dr.Item("strCC")
                End If

                If IsDBNull(dr.Item("DaysFromTest")) Then
                    Me.txtDaysfromTestToAPB.Clear()
                Else
                    txtDaysfromTestToAPB.Text = dr.Item("DaysFromTest")
                    If txtDaysfromTestToAPB.Text < 1 And txtDaysfromTestToAPB.Text > 0 Then
                        txtDaysfromTestToAPB.Text = "0" & txtDaysfromTestToAPB.Text
                    End If
                    If txtDaysfromTestToAPB.Text.Contains(".") Then
                        txtDaysfromTestToAPB.Text = Mid(txtDaysfromTestToAPB.Text, 1, InStr(txtDaysfromTestToAPB.Text, ".", CompareMethod.Text) - 1)
                    End If
                    If CInt(txtDaysfromTestToAPB.Text) > 60 Then
                        txtDaysfromTestToAPB.BackColor = Color.Tomato
                    Else
                        txtDaysfromTestToAPB.BackColor = Color.LightBlue
                    End If
                End If
                If IsDBNull(dr.Item("APBDays")) Then
                    txtDaysInAPB.Clear()
                Else
                    txtDaysInAPB.Text = dr.Item("APBDays")
                    If txtDaysInAPB.Text < 1 And txtDaysInAPB.Text > 0 Then
                        txtDaysInAPB.Text = "0" & txtDaysInAPB.Text
                    End If
                    If txtDaysInAPB.Text.Contains(".") Then
                        txtDaysInAPB.Text = Mid(txtDaysInAPB.Text, 1, InStr(txtDaysInAPB.Text, ".", CompareMethod.Text) - 1)
                    End If
                    If CInt(txtDaysInAPB.Text) > 60 Then
                        txtDaysInAPB.BackColor = Color.Tomato
                    Else
                        txtDaysInAPB.BackColor = Color.LightBlue
                    End If
                End If
                If IsDBNull(dr.Item("EngineerDays")) Then
                    txtDaysAssigned.Clear()
                Else
                    txtDaysAssigned.Text = dr.Item("EngineerDays")
                    If txtDaysAssigned.Text < 1 And txtDaysAssigned.Text > 0 Then
                        txtDaysAssigned.Text = "0" & txtDaysAssigned.Text
                    End If
                    If txtDaysAssigned.Text.Contains(".") Then
                        txtDaysAssigned.Text = Mid(txtDaysAssigned.Text, 1, InStr(txtDaysAssigned.Text, ".", CompareMethod.Text) - 1)
                    End If
                    If CInt(txtDaysAssigned.Text) > 60 Then
                        txtDaysAssigned.BackColor = Color.Tomato
                    Else
                        txtDaysAssigned.BackColor = Color.LightBlue
                    End If
                End If
                If IsDBNull(dr.Item("UnitManager")) Then
                    txtUnitManager.Clear()
                Else
                    txtUnitManager.Text = dr.Item("UnitManager")
                End If
                If IsDBNull(dr.Item("strDeterminationMethod")) Then
                    Me.cboMethodDetermined.SelectedValue = 0
                Else
                    If dr.Item("strDeterminationMethod") = "00000" Then
                        cboMethodDetermined.SelectedValue = 0
                    Else
                        cboMethodDetermined.SelectedValue = dr.Item("strDeterminationMethod")
                    End If
                End If
                If IsDBNull(dr.Item("strControlEquipmentData")) Then
                    ControlEquipment = ""
                Else
                    ControlEquipment = dr.Item("strControlEquipmentData")
                End If
                If IsDBNull(dr.Item("strOtherWitnessingEng")) Then
                    OtherWitnessingEng = "0"
                Else
                    OtherWitnessingEng = dr.Item("strOtherWitnessingEng")
                End If
                If IsDBNull(dr.Item("strConfidentialData")) Then
                    ConfidentialData = "0"
                Else
                    ConfidentialData = dr.Item("strConfidentialData")
                End If

                If IsDBNull(dr.Item("strPreComplianceStatus")) Then
                    lblPreComplianceStatus.Visible = False
                Else
                    If dr.Item("strPreComplianceStatus") = "True" Then
                        lblPreComplianceStatus.Visible = True
                    Else
                        lblPreComplianceStatus.Visible = False
                    End If
                End If

                DeletedTestFlag.Visible = (Not IsDBNull(dr.Item("STRDELETE")) AndAlso dr.Item("STRDELETE") = "DELETE")

                cboComplianceStatus.BackColor = Color.White
                If cboComplianceStatus.SelectedValue = "05" Then
                    cboComplianceStatus.BackColor = Color.Tomato
                Else
                    If lblPreComplianceStatus.Visible = True And cboComplianceStatus.SelectedValue = "01" Then
                        cboComplianceStatus.BackColor = Color.Pink
                    End If
                End If
            Else

            End If
            dr.Close()

            If DocumentType <> "" Then
                Select Case DocumentType
                    Case "001"
                        TCDocumentTypes.TabPages.Remove(TPSSCPWork)
                        LoadDefaultComplianceManager()
                    Case "002"
                        LoadOneStack(txtReferenceNumber.Text)
                    Case "003"
                        LoadOneStack(txtReferenceNumber.Text)
                    Case "004"
                        LoadOneStack(txtReferenceNumber.Text)
                    Case "005"
                        LoadTwoStack(txtReferenceNumber.Text)
                    Case "006"
                        LoadTwoStack(txtReferenceNumber.Text)
                    Case "007"
                        LoadLoadingRack(txtReferenceNumber.Text)
                    Case "008"
                        LoadPondTreatment(txtReferenceNumber.Text)
                    Case "009"
                        LoadGasConcentration(txtReferenceNumber.Text)
                    Case "010"
                        LoadFlare(txtReferenceNumber.Text)
                    Case "011"
                        LoadRata(txtReferenceNumber.Text)
                    Case "012"
                        LoadMemo(txtReferenceNumber.Text)
                    Case "013"
                        LoadMemo(txtReferenceNumber.Text)
                    Case "014"
                        LoadMethod9(txtReferenceNumber.Text)
                    Case "015"
                        LoadMethod22(txtReferenceNumber.Text)
                    Case "016"
                        LoadMethod9(txtReferenceNumber.Text)
                    Case "018"
                        LoadMemo(txtReferenceNumber.Text)
                    Case Else
                        TCDocumentTypes.TabPages.Remove(TPSSCPWork)
                        LoadDefaultComplianceManager()
                End Select
            End If
            If OtherWitnessingEng <> "0" Then
                LoadOtherWitnessingEng()
            End If

            If ReportStatus = "True" Then 'Or AccountArray(69, 4) = "1" Then 'Add Compliance work if User has 'Special Permission 
                TCDocumentTypes.TabPages.Add(TPSSCPWork)
            Else
                TCDocumentTypes.TabPages.Remove(TPSSCPWork)
            End If

            If ConfidentialData.Contains("1") Then
                If Mid(ConfidentialData, 1, 1) = "1" Then
                    LoadConfidentialData(ConfidentialData)
                End If
            End If

            lblMemoEntered.Visible = False

            SQL = "Select " & _
            "* from AIRBranch.ISMPTestReportMemo " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            While dr.Read
                If IsDBNull(dr.Item("strReferenceNumber")) Then
                    lblMemoEntered.Visible = False
                Else
                    lblMemoEntered.Visible = True
                End If
            End While
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadOneStack(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "002"
                    TCOneStack.TabPages.Remove(TPOneStackThreeRun)
                    TCOneStack.TabPages.Remove(TPOneStackFourRun)
                    SQL = "select " & _
                    "strMaxoperatingCapacity,  " & _
                    "strMaxOperatingCapacityUnit,  " & _
                    "strOperatingCapacity,  " & _
                    "strOperatingCapacityUnit,  " & _
                    "strAllowableEmissionRate1,  " & _
                    "strAllowableEmissionRate2,  " & _
                    "strAllowableEmissionRate3,  " & _
                    "strAllowableEmissionRateUnit1,  " & _
                    "strAllowableEmissionRateUnit2,  " & _
                    "strAllowableEmissionRateUnit3,  " & _
                    "strRunNumber1A,  " & _
                    "strRunNumber1B,  " & _
                    "strGasTemperature1A,  " & _
                    "strGasTemperature1B,  " & _
                    "strGasMoisture1A,  " & _
                    "strGasMoisture1B,  " & _
                    "strGasFlowRateACFM1A,  " & _
                    "strGasFlowRateACFM1B,  " & _
                    "strgasFlowRateDSCFM1A,  " & _
                    "strgasFlowRateDSCFM1B,  " & _
                    "strPollutantConcentration1A,  " & _
                    "strPollutantConcentration1B,  " & _
                    "strPollutantConcentrationunit,  " & _
                    "strPollutantConcentrationAvg,  " & _
                    "strEmissionRate1a,  " & _
                    "strEmissionRate1b,  " & _
                    "strEmissionRateUnit,  " & _
                    "strEmissionRateAvg, " & _
                    "strPercentAllowable  " & _
                    "from AIRBRANCH.ISMPReportOneStack " & _
                    "where strReferenceNumber = '" & RefNum & "' "

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityOneStack.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityOneStack.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityOneStack.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityOneStack.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityOneStack.Clear()
                            Else
                                txtOperatingCapacityOneStack.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsOneStack.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsOneStack.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1OneStack.Clear()
                            Else
                                txtAllowableEmissionRate1OneStack.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2OneStack.Clear()
                            Else
                                txtAllowableEmissionRate2OneStack.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3OneStack.Clear()
                            Else
                                txtAllowableEmissionRate3OneStack.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataOneStack.Text = ControlEquipment
                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumOneStackTwoRun1A.Clear()
                        Else
                            txtRunNumOneStackTwoRun1A.Text = dr.Item("strRunNumber1A")
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumOneStackTwoRun1B.Clear()
                        Else
                            txtRunNumOneStackTwoRun1B.Text = dr.Item("strRunNumber1B")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1A")) Then
                            txtGasTempOneStackTwoRun1A.Clear()
                        Else
                            txtGasTempOneStackTwoRun1A.Text = dr.Item("strGasTemperature1A")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1B")) Then
                            txtGasTempOneStackTwoRun1B.Clear()
                        Else
                            txtGasTempOneStackTwoRun1B.Text = dr.Item("strGasTemperature1B")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1A")) Then
                            txtGasMoistOneStackTwoRun1A.Clear()
                        Else
                            txtGasMoistOneStackTwoRun1A.Text = dr.Item("strGasMoisture1A")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1B")) Then
                            txtGasMoistOneStackTwoRun1B.Clear()
                        Else
                            txtGasMoistOneStackTwoRun1B.Text = dr.Item("strGasMoisture1B")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1A")) Then
                            txtGasFlowACFMOneStackTwoRun1A.Clear()
                        Else
                            txtGasFlowACFMOneStackTwoRun1A.Text = dr.Item("strGasFlowRateACFM1A")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1B")) Then
                            txtGasFlowACFMOneStackTwoRun1B.Clear()
                        Else
                            txtGasFlowACFMOneStackTwoRun1B.Text = dr.Item("strGasFlowRateACFM1B")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1A")) Then
                            txtGasFlowDSCFMOneStackTwoRun1A.Clear()
                        Else
                            txtGasFlowDSCFMOneStackTwoRun1A.Text = dr.Item("strGasFlowRateDSCFM1A")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1B")) Then
                            txtGasFlowDSCFMOneStackTwoRun1B.Clear()
                        Else
                            txtGasFlowDSCFMOneStackTwoRun1B.Text = dr.Item("strGasFlowRateDSCFM1B")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcOneStackTwoRun1A.Clear()
                        Else
                            txtPollConcOneStackTwoRun1A.Text = dr.Item("strPollutantConcentration1A")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcOneStackTwoRun1B.Clear()
                        Else
                            txtPollConcOneStackTwoRun1B.Text = dr.Item("strPollutantConcentration1B")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1A")) Then
                            txtEmissRateOneStackTwoRun1A.Clear()
                        Else
                            txtEmissRateOneStackTwoRun1A.Text = dr.Item("strEmissionRate1A")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1B")) Then
                            txtEmissRateOneStackTwoRun1B.Clear()
                        Else
                            txtEmissRateOneStackTwoRun1B.Text = dr.Item("strEmissionRate1B")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitOneStackTwoRun.SelectedValue = 0
                        Else
                            cboPollConUnitOneStackTwoRun.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitOneStackTwoRun.SelectedValue = 0
                        Else
                            cboEmissRateUnitOneStackTwoRun.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If

                        If IsDBNull(dr.Item("strPollutantConcentrationAVG")) Then
                            txtPollConcAvgOneStackTwoRun.Clear()
                        Else
                            txtPollConcAvgOneStackTwoRun.Text = dr.Item("strPollutantConcentrationAVG")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg")) Then
                            txtEmissRateAvgOneStackTwoRun.Clear()
                        Else
                            txtEmissRateAvgOneStackTwoRun.Text = dr.Item("strEmissionRateAvg")
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtPercentAllowableOneStack.Clear()
                        Else
                            txtPercentAllowableOneStack.Text = dr.Item("strPercentAllowable")
                        End If
                    End If
                    dr.Close()
                    txtApplicableRegulationOneStack.Text = ApplicableRequirment
                    txtOtherInformationOneStack.Text = ReportComments

                Case "003"
                    TCOneStack.TabPages.Remove(TPOneStackTwoRun)
                    TCOneStack.TabPages.Remove(TPOneStackFourRun)
                    SQL = "select " & _
                    "strMaxoperatingCapacity,  " & _
                    "strMaxOperatingCapacityUnit,  " & _
                    "strOperatingCapacity,  " & _
                    "strOperatingCapacityUnit,  " & _
                    "strAllowableEmissionRate1,  " & _
                    "strAllowableEmissionRate2,  " & _
                    "strAllowableEmissionRate3,  " & _
                    "strAllowableEmissionRateUnit1,  " & _
                    "strAllowableEmissionRateUnit2,  " & _
                    "strAllowableEmissionRateUnit3,  " & _
                    "strRunNumber1A,  " & _
                    "strRunNumber1B,  " & _
                    "strRunNumber1C,  " & _
                    "strGasTemperature1A,  " & _
                    "strGasTemperature1B,  " & _
                    "strGasTemperature1C,  " & _
                    "strGasMoisture1A,  " & _
                    "strGasMoisture1B,  " & _
                    "strGasMoisture1C,  " & _
                    "strGasFlowRateACFM1A,  " & _
                    "strGasFlowRateACFM1B,  " & _
                    "strGasFlowRateACFM1C,  " & _
                    "strgasFlowRateDSCFM1A,  " & _
                    "strgasFlowRateDSCFM1B,  " & _
                    "strgasFlowRateDSCFM1C,  " & _
                    "strPollutantConcentration1A,  " & _
                    "strPollutantConcentration1B,  " & _
                    "strPollutantConcentration1C,  " & _
                    "strPollutantConcentrationunit,  " & _
                    "strPollutantConcentrationAvg,  " & _
                    "strEmissionRate1a,  " & _
                    "strEmissionRate1b,  " & _
                    "strEmissionRate1C,  " & _
                    "strEmissionRateUnit,  " & _
                    "strEmissionRateAvg, " & _
                    "strPercentAllowable  " & _
                    "from AIRBRANCH.ISMPReportOneStack " & _
                    "where strReferenceNumber = '" & RefNum & "' "

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityOneStack.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityOneStack.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityOneStack.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityOneStack.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityOneStack.Clear()
                            Else
                                txtOperatingCapacityOneStack.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsOneStack.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsOneStack.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1OneStack.Clear()
                            Else
                                txtAllowableEmissionRate1OneStack.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2OneStack.Clear()
                            Else
                                txtAllowableEmissionRate2OneStack.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3OneStack.Clear()
                            Else
                                txtAllowableEmissionRate3OneStack.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataOneStack.Text = ControlEquipment
                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumOneStackThreeRun1A.Clear()
                        Else
                            txtRunNumOneStackThreeRun1A.Text = dr.Item("strRunNumber1A")
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumOneStackThreeRun1B.Clear()
                        Else
                            txtRunNumOneStackThreeRun1B.Text = dr.Item("strRunNumber1B")
                        End If
                        If IsDBNull(dr.Item("strRunNumber1C")) Then
                            txtRunNumOneStackThreeRun1C.Clear()
                        Else
                            txtRunNumOneStackThreeRun1C.Text = dr.Item("strRunNumber1C")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1A")) Then
                            txtGasTempOneStackThreeRun1A.Clear()
                        Else
                            txtGasTempOneStackThreeRun1A.Text = dr.Item("strGasTemperature1A")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1B")) Then
                            txtGasTempOneStackThreeRun1B.Clear()
                        Else
                            txtGasTempOneStackThreeRun1B.Text = dr.Item("strGasTemperature1B")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1C")) Then
                            txtGasTempOneStackThreeRun1C.Clear()
                        Else
                            txtGasTempOneStackThreeRun1C.Text = dr.Item("strGasTemperature1C")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1A")) Then
                            txtGasMoistOneStackThreeRun1A.Clear()
                        Else
                            txtGasMoistOneStackThreeRun1A.Text = dr.Item("strGasMoisture1A")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1B")) Then
                            txtGasMoistOneStackThreeRun1B.Clear()
                        Else
                            txtGasMoistOneStackThreeRun1B.Text = dr.Item("strGasMoisture1B")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1C")) Then
                            txtGasMoistOneStackThreeRun1C.Clear()
                        Else
                            txtGasMoistOneStackThreeRun1C.Text = dr.Item("strGasMoisture1C")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1A")) Then
                            txtGasFlowACFMOneStackThreeRun1A.Clear()
                        Else
                            txtGasFlowACFMOneStackThreeRun1A.Text = dr.Item("strGasFlowRateACFM1A")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1B")) Then
                            txtGasFlowACFMOneStackThreeRun1B.Clear()
                        Else
                            txtGasFlowACFMOneStackThreeRun1B.Text = dr.Item("strGasFlowRateACFM1B")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1C")) Then
                            txtGasFlowACFMOneStackThreeRun1C.Clear()
                        Else
                            txtGasFlowACFMOneStackThreeRun1C.Text = dr.Item("strGasFlowRateACFM1C")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1A")) Then
                            txtGasFlowDSCFMOneStackThreeRun1A.Clear()
                        Else
                            txtGasFlowDSCFMOneStackThreeRun1A.Text = dr.Item("strGasFlowRateDSCFM1A")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1B")) Then
                            txtGasFlowDSCFMOneStackThreeRun1B.Clear()
                        Else
                            txtGasFlowDSCFMOneStackThreeRun1B.Text = dr.Item("strGasFlowRateDSCFM1B")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1C")) Then
                            txtGasFlowDSCFMOneStackThreeRun1C.Clear()
                        Else
                            txtGasFlowDSCFMOneStackThreeRun1C.Text = dr.Item("strGasFlowRateDSCFM1C")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcOneStackThreeRun1A.Clear()
                        Else
                            txtPollConcOneStackThreeRun1A.Text = dr.Item("strPollutantConcentration1A")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcOneStackThreeRun1B.Clear()
                        Else
                            txtPollConcOneStackThreeRun1B.Text = dr.Item("strPollutantConcentration1B")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1C")) Then
                            txtPollConcOneStackThreeRun1C.Clear()
                        Else
                            txtPollConcOneStackThreeRun1C.Text = dr.Item("strPollutantConcentration1C")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1A")) Then
                            txtEmissRateOneStackThreeRun1A.Clear()
                        Else
                            txtEmissRateOneStackThreeRun1A.Text = dr.Item("strEmissionRate1A")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1B")) Then
                            txtEmissRateOneStackThreeRun1B.Clear()
                        Else
                            txtEmissRateOneStackThreeRun1B.Text = dr.Item("strEmissionRate1B")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1C")) Then
                            txtEmissRateOneStackThreeRun1C.Clear()
                        Else
                            txtEmissRateOneStackThreeRun1C.Text = dr.Item("strEmissionRate1C")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitOneStackThreeRun.SelectedValue = 0
                        Else
                            cboPollConUnitOneStackThreeRun.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitOneStackThreeRun.SelectedValue = 0
                        Else
                            cboEmissRateUnitOneStackThreeRun.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG")) Then
                            txtPollConcAvgOneStackThreeRun.Clear()
                        Else
                            txtPollConcAvgOneStackThreeRun.Text = dr.Item("strPollutantConcentrationAVG")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg")) Then
                            txtEmissRateAvgOneStackThreeRun.Clear()
                        Else
                            txtEmissRateAvgOneStackThreeRun.Text = dr.Item("strEmissionRateAvg")
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtPercentAllowableOneStack.Clear()
                        Else
                            txtPercentAllowableOneStack.Text = dr.Item("strPercentAllowable")
                        End If
                    End If
                    dr.Close()
                    txtApplicableRegulationOneStack.Text = ApplicableRequirment
                    txtOtherInformationOneStack.Text = ReportComments
                Case "004"
                    TCOneStack.TabPages.Remove(TPOneStackTwoRun)
                    TCOneStack.TabPages.Remove(TPOneStackThreeRun)
                    SQL = "select " & _
                    "strMaxoperatingCapacity,  " & _
                    "strMaxOperatingCapacityUnit,  " & _
                    "strOperatingCapacity,  " & _
                    "strOperatingCapacityUnit,  " & _
                    "strAllowableEmissionRate1,  " & _
                    "strAllowableEmissionRate2,  " & _
                    "strAllowableEmissionRate3,  " & _
                    "strAllowableEmissionRateUnit1,  " & _
                    "strAllowableEmissionRateUnit2,  " & _
                    "strAllowableEmissionRateUnit3,  " & _
                    "strRunNumber1A,  " & _
                    "strRunNumber1B,  " & _
                    "strRunNumber1C,  " & _
                    "strRunNumber1D,  " & _
                    "strGasTemperature1A,  " & _
                    "strGasTemperature1B,  " & _
                    "strGasTemperature1C,  " & _
                    "strGasTemperature1D,  " & _
                    "strGasMoisture1A,  " & _
                    "strGasMoisture1B,  " & _
                    "strGasMoisture1C,  " & _
                    "strGasMoisture1D,  " & _
                    "strGasFlowRateACFM1A,  " & _
                    "strGasFlowRateACFM1B,  " & _
                    "strGasFlowRateACFM1C,  " & _
                    "strGasFlowRateACFM1D,  " & _
                    "strgasFlowRateDSCFM1A,  " & _
                    "strgasFlowRateDSCFM1B,  " & _
                    "strgasFlowRateDSCFM1C,  " & _
                    "strgasFlowRateDSCFM1D,  " & _
                    "strPollutantConcentration1A,  " & _
                    "strPollutantConcentration1B,  " & _
                    "strPollutantConcentration1C,  " & _
                    "strPollutantConcentration1D,  " & _
                    "strPollutantConcentrationunit,  " & _
                    "strPollutantConcentrationAvg,  " & _
                    "strEmissionRate1a,  " & _
                    "strEmissionRate1b,  " & _
                    "strEmissionRate1C,  " & _
                    "strEmissionRate1D,  " & _
                    "strEmissionRateUnit,  " & _
                    "strEmissionRateAvg, " & _
                    "strPercentAllowable  " & _
                    "from AIRBRANCH.ISMPReportOneStack " & _
                    "where strReferenceNumber = '" & RefNum & "' "

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityOneStack.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityOneStack.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityOneStack.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityOneStack.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityOneStack.Clear()
                            Else
                                txtOperatingCapacityOneStack.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsOneStack.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsOneStack.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1OneStack.Clear()
                            Else
                                txtAllowableEmissionRate1OneStack.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2OneStack.Clear()
                            Else
                                txtAllowableEmissionRate2OneStack.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3OneStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3OneStack.Clear()
                            Else
                                txtAllowableEmissionRate3OneStack.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3OneStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3OneStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataOneStack.Text = ControlEquipment
                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumOneStackFourRun1A.Clear()
                        Else
                            txtRunNumOneStackFourRun1A.Text = dr.Item("strRunNumber1A")
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumOneStackFourRun1B.Clear()
                        Else
                            txtRunNumOneStackFourRun1B.Text = dr.Item("strRunNumber1B")
                        End If
                        If IsDBNull(dr.Item("strRunNumber1C")) Then
                            txtRunNumOneStackFourRun1C.Clear()
                        Else
                            txtRunNumOneStackFourRun1C.Text = dr.Item("strRunNumber1C")
                        End If
                        If IsDBNull(dr.Item("strRunNumber1D")) Then
                            txtRunNumOneStackFourRun1D.Clear()
                        Else
                            txtRunNumOneStackFourRun1D.Text = dr.Item("strRunNumber1D")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1A")) Then
                            txtGasTempOneStackFourRun1A.Clear()
                        Else
                            txtGasTempOneStackFourRun1A.Text = dr.Item("strGasTemperature1A")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1B")) Then
                            txtGasTempOneStackFourRun1B.Clear()
                        Else
                            txtGasTempOneStackFourRun1B.Text = dr.Item("strGasTemperature1B")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1C")) Then
                            txtGasTempOneStackFourRun1C.Clear()
                        Else
                            txtGasTempOneStackFourRun1C.Text = dr.Item("strGasTemperature1C")
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1D")) Then
                            txtGasTempOneStackFourRun1D.Clear()
                        Else
                            txtGasTempOneStackFourRun1D.Text = dr.Item("strGasTemperature1D")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1A")) Then
                            txtGasMoistOneStackFourRun1A.Clear()
                        Else
                            txtGasMoistOneStackFourRun1A.Text = dr.Item("strGasMoisture1A")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1B")) Then
                            txtGasMoistOneStackFourRun1B.Clear()
                        Else
                            txtGasMoistOneStackFourRun1B.Text = dr.Item("strGasMoisture1B")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1C")) Then
                            txtGasMoistOneStackFourRun1C.Clear()
                        Else
                            txtGasMoistOneStackFourRun1C.Text = dr.Item("strGasMoisture1C")
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1D")) Then
                            txtGasMoistOneStackFourRun1D.Clear()
                        Else
                            txtGasMoistOneStackFourRun1D.Text = dr.Item("strGasMoisture1D")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1A")) Then
                            txtGasFlowACFMOneStackFourRun1A.Clear()
                        Else
                            txtGasFlowACFMOneStackFourRun1A.Text = dr.Item("strGasFlowRateACFM1A")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1B")) Then
                            txtGasFlowACFMOneStackFourRun1B.Clear()
                        Else
                            txtGasFlowACFMOneStackFourRun1B.Text = dr.Item("strGasFlowRateACFM1B")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1C")) Then
                            txtGasFlowACFMOneStackFourRun1C.Clear()
                        Else
                            txtGasFlowACFMOneStackFourRun1C.Text = dr.Item("strGasFlowRateACFM1C")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1D")) Then
                            txtGasFlowACFMOneStackFourRun1D.Clear()
                        Else
                            txtGasFlowACFMOneStackFourRun1D.Text = dr.Item("strGasFlowRateACFM1D")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1A")) Then
                            txtGasFlowDSCFMOneStackFourRun1A.Clear()
                        Else
                            txtGasFlowDSCFMOneStackFourRun1A.Text = dr.Item("strGasFlowRateDSCFM1A")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1B")) Then
                            txtGasFlowDSCFMOneStackFourRun1B.Clear()
                        Else
                            txtGasFlowDSCFMOneStackFourRun1B.Text = dr.Item("strGasFlowRateDSCFM1B")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1C")) Then
                            txtGasFlowDSCFMOneStackFourRun1C.Clear()
                        Else
                            txtGasFlowDSCFMOneStackFourRun1C.Text = dr.Item("strGasFlowRateDSCFM1C")
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1D")) Then
                            txtGasFlowDSCFMOneStackFourRun1D.Clear()
                        Else
                            txtGasFlowDSCFMOneStackFourRun1D.Text = dr.Item("strGasFlowRateDSCFM1D")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcOneStackFourRun1A.Clear()
                        Else
                            txtPollConcOneStackFourRun1A.Text = dr.Item("strPollutantConcentration1A")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcOneStackFourRun1B.Clear()
                        Else
                            txtPollConcOneStackFourRun1B.Text = dr.Item("strPollutantConcentration1B")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1C")) Then
                            txtPollConcOneStackFourRun1C.Clear()
                        Else
                            txtPollConcOneStackFourRun1C.Text = dr.Item("strPollutantConcentration1C")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1D")) Then
                            txtPollConcOneStackFourRun1D.Clear()
                        Else
                            txtPollConcOneStackFourRun1D.Text = dr.Item("strPollutantConcentration1D")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1A")) Then
                            txtEmissRateOneStackFourRun1A.Clear()
                        Else
                            txtEmissRateOneStackFourRun1A.Text = dr.Item("strEmissionRate1A")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1B")) Then
                            txtEmissRateOneStackFourRun1B.Clear()
                        Else
                            txtEmissRateOneStackFourRun1B.Text = dr.Item("strEmissionRate1B")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1C")) Then
                            txtEmissRateOneStackFourRun1C.Clear()
                        Else
                            txtEmissRateOneStackFourRun1C.Text = dr.Item("strEmissionRate1C")
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1D")) Then
                            txtEmissRateOneStackFourRun1D.Clear()
                        Else
                            txtEmissRateOneStackFourRun1D.Text = dr.Item("strEmissionRate1d")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitOneStackFourRun.SelectedValue = 0
                        Else
                            cboPollConUnitOneStackFourRun.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitOneStackFourRun.SelectedValue = 0
                        Else
                            cboEmissRateUnitOneStackFourRun.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If

                        If IsDBNull(dr.Item("strPollutantConcentrationAVG")) Then
                            txtPollConcAvgOneStackFourRun.Clear()
                        Else
                            txtPollConcAvgOneStackFourRun.Text = dr.Item("strPollutantConcentrationAVG")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg")) Then
                            txtEmissRateAvgOneStackFourRun.Clear()
                        Else
                            txtEmissRateAvgOneStackFourRun.Text = dr.Item("strEmissionRateAvg")
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtPercentAllowableOneStack.Clear()
                        Else
                            txtPercentAllowableOneStack.Text = dr.Item("strPercentAllowable")
                        End If
                    End If
                    dr.Close()
                    txtApplicableRegulationOneStack.Text = ApplicableRequirment
                    txtOtherInformationOneStack.Text = ReportComments

                Case Else

            End Select

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadTwoStack(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "005"
                    TCTwoStack.TabPages.Remove(Me.TPTwoStackDRE)
                    SQL = "Select strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity, strOperatingCapacityUnit, " & _
                    "strAllowableEmissionRate1, strAllowableEmissionRate2, " & _
                    "strAllowableEmissionRate3, strAllowableEmissionRateUnit1, " & _
                    "strAllowableEmissionRateUnit2, strAllowableEmissionRateUnit3, " & _
                    "strStackOneName, strStackTwoName, " & _
                    "strRunNumber1A, strRunNumber1B, strRunNumber1C, " & _
                    "strRunNumber2A, strRunNumber2B, strRunNumber2C, " & _
                    "strGasTemperature1A, strGasTemperature1B, strGasTemperature1C, " & _
                    "strGasTemperature2A, strGasTemperature2B, strGasTemperature2C, " & _
                    "strGasMoisture1A, strGasMoisture1B, strGasMoisture1C, " & _
                    "strGasMoisture2A, strGasMoisture2B, strGasMoisture2C, " & _
                    "strGasFlowRateACFM1A, strGasFlowRateACFM1B, strGasFlowRateACFM1C, " & _
                    "strGasFlowRateACFM2A, strGasFlowRateACFM2B, strGasFlowRateACFM2C, " & _
                    "strGasFlowRateDSCFM1A, strGasFlowRateDSCFM1B, strGasFlowRateDSCFM1C, " & _
                    "strGasFlowRateDSCFM2A, strGasFlowRateDSCFM2B, strGasFlowRateDSCFM2C, " & _
                    "strPollutantConcentration1A, strPollutantConcentration1B, strPollutantConcentration1C, " & _
                    "strPollutantConcentration2A, strPollutantConcentration2B, strPollutantConcentration2C, " & _
                    "strPollutantConcentrationUnit, strPollutantConcentrationAVG1, " & _
                    "strPollutantConcentrationAVG2, " & _
                    "strEmissionRate1A, strEmissionRate1B, strEmissionRate1C, " & _
                    "strEmissionRate2A, strEmissionRate2B, strEmissionRate2C, " & _
                    "strEmissionRateUnit, strEmissionRateAvg1, " & _
                     "strEmissionRateAvg2, " & _
                    "strEmissionRateTotal1, strEmissionRateTotal2, strEmissionRateTotal3, " & _
                    "strEmissionRateTotalAvg, " & _
                    "strPercentAllowable " & _
                    "from AIRBRANCH.ISMPReportTwoStack " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityTwoStack.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityTwoStack.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityTwoStack.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityTwoStack.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityTwoStack.Clear()
                            Else
                                txtOperatingCapacityTwoStack.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsTwoStack.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsTwoStack.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1TwoStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1TwoStack.Clear()
                            Else
                                txtAllowableEmissionRate1TwoStack.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2TwoStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2TwoStack.Clear()
                            Else
                                txtAllowableEmissionRate2TwoStack.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3TwoStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3TwoStack.Clear()
                            Else
                                txtAllowableEmissionRate3TwoStack.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1TwoStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1TwoStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2TwoStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2TwoStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3TwoStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3TwoStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataTwoStack.Text = ControlEquipment
                        txtApplicableRegulationTwoStack.Text = ApplicableRequirment
                        txtOtherInformationTwoStack.Text = ReportComments

                        If IsDBNull(dr.Item("strStackOneName")) Then
                            txtStackOneNameTwoStackStandard.Clear()
                        Else
                            If dr.Item("strStackOneName") = "N/A" Then
                                txtStackOneNameTwoStackStandard.Clear()
                            Else
                                txtStackOneNameTwoStackStandard.Text = dr.Item("strStackOneName")
                            End If
                        End If
                        If IsDBNull(dr.Item("strStackTwoName")) Then
                            txtStackTwoNameTwoStackStandard.Clear()
                        Else
                            If dr.Item("strStackTwoName") = "N/A" Then
                                txtStackTwoNameTwoStackStandard.Clear()
                            Else
                                txtStackTwoNameTwoStackStandard.Text = dr.Item("strStackTwoName")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strRunNumber1A") = "N/A" Then
                                txtRunNumTwoStackStandard1A.Clear()
                            Else
                                txtRunNumTwoStackStandard1A.Text = dr.Item("strRunNumber1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strRunNumber1B") = "N/A" Then
                                txtRunNumTwoStackStandard1B.Clear()
                            Else
                                txtRunNumTwoStackStandard1B.Text = dr.Item("strRunNumber1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1C")) Then
                            txtRunNumTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strRunNumber1C") = "N/A" Then
                                txtRunNumTwoStackStandard1C.Clear()
                            Else
                                txtRunNumTwoStackStandard1C.Text = dr.Item("strRunNumber1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber2A")) Then
                            txtRunNumTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strRunNumber2A") = "N/A" Then
                                txtRunNumTwoStackStandard2A.Clear()
                            Else
                                txtRunNumTwoStackStandard2A.Text = dr.Item("strRunNumber2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber2B")) Then
                            txtRunNumTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strRunNumber2B") = "N/A" Then
                                txtRunNumTwoStackStandard2B.Clear()
                            Else
                                txtRunNumTwoStackStandard2B.Text = dr.Item("strRunNumber2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber2C")) Then
                            txtRunNumTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strRunNumber2C") = "N/A" Then
                                txtRunNumTwoStackStandard2C.Clear()
                            Else
                                txtRunNumTwoStackStandard2C.Text = dr.Item("strRunNumber2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1A")) Then
                            txtGasTempTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strGasTemperature1A") = "N/A" Then
                                txtGasTempTwoStackStandard1A.Clear()
                            Else
                                txtGasTempTwoStackStandard1A.Text = dr.Item("strGasTemperature1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1B")) Then
                            txtGasTempTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strGasTemperature1B") = "N/A" Then
                                txtGasTempTwoStackStandard1B.Clear()
                            Else
                                txtGasTempTwoStackStandard1B.Text = dr.Item("strGasTemperature1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1C")) Then
                            txtGasTempTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strGasTemperature1C") = "N/A" Then
                                txtGasTempTwoStackStandard1C.Clear()
                            Else
                                txtGasTempTwoStackStandard1C.Text = dr.Item("strGasTemperature1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature2A")) Then
                            txtGasTempTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strGasTemperature2A") = "N/A" Then
                                txtGasTempTwoStackStandard2A.Clear()
                            Else
                                txtGasTempTwoStackStandard2A.Text = dr.Item("strGasTemperature2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature2B")) Then
                            txtGasTempTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strGasTemperature2B") = "N/A" Then
                                txtGasTempTwoStackStandard2B.Clear()
                            Else
                                txtGasTempTwoStackStandard2B.Text = dr.Item("strGasTemperature2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature2C")) Then
                            txtGasTempTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strGasTemperature2C") = "N/A" Then
                                txtGasTempTwoStackStandard2C.Clear()
                            Else
                                txtGasTempTwoStackStandard2C.Text = dr.Item("strGasTemperature2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1A")) Then
                            txtGasMoistTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strGasMoisture1A") = "N/A" Then
                                txtGasMoistTwoStackStandard1A.Clear()
                            Else
                                txtGasMoistTwoStackStandard1A.Text = dr.Item("strGasMoisture1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1B")) Then
                            txtGasMoistTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strGasMoisture1B") = "N/A" Then
                                txtGasMoistTwoStackStandard1B.Clear()
                            Else
                                txtGasMoistTwoStackStandard1B.Text = dr.Item("strGasMoisture1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1C")) Then
                            txtGasMoistTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strGasMoisture1C") = "N/A" Then
                                txtGasMoistTwoStackStandard1C.Clear()
                            Else
                                txtGasMoistTwoStackStandard1C.Text = dr.Item("strGasMoisture1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture2A")) Then
                            txtGasMoistTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strGasMoisture2A") = "N/A" Then
                                txtGasMoistTwoStackStandard2A.Clear()
                            Else
                                txtGasMoistTwoStackStandard2A.Text = dr.Item("strGasMoisture2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture2B")) Then
                            txtGasMoistTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strGasMoisture2B") = "N/A" Then
                                txtGasMoistTwoStackStandard2B.Clear()
                            Else
                                txtGasMoistTwoStackStandard2B.Text = dr.Item("strGasMoisture2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture2C")) Then
                            txtGasMoistTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strGasMoisture2C") = "N/A" Then
                                txtGasMoistTwoStackStandard2C.Clear()
                            Else
                                txtGasMoistTwoStackStandard2C.Text = dr.Item("strGasMoisture2C")
                            End If
                        End If

                        If IsDBNull(dr.Item("strGasFlowRateACFM1A")) Then
                            txtGasFlowACFMTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM1A") = "N/A" Then
                                txtGasFlowACFMTwoStackStandard1A.Clear()
                            Else
                                txtGasFlowACFMTwoStackStandard1A.Text = dr.Item("strGasFlowRateACFM1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1B")) Then
                            txtGasFlowACFMTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM1B") = "N/A" Then
                                txtGasFlowACFMTwoStackStandard1B.Clear()
                            Else
                                txtGasFlowACFMTwoStackStandard1B.Text = dr.Item("strGasFlowRateACFM1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1C")) Then
                            txtGasFlowACFMTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM1C") = "N/A" Then
                                txtGasFlowACFMTwoStackStandard1C.Clear()
                            Else
                                txtGasFlowACFMTwoStackStandard1C.Text = dr.Item("strGasFlowRateACFM1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM2A")) Then
                            txtGasFlowACFMTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM2A") = "N/A" Then
                                txtGasFlowACFMTwoStackStandard2A.Clear()
                            Else
                                txtGasFlowACFMTwoStackStandard2A.Text = dr.Item("strGasFlowRateACFM2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM2B")) Then
                            txtGasFlowACFMTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM2B") = "N/A" Then
                                txtGasFlowACFMTwoStackStandard2B.Clear()
                            Else
                                txtGasFlowACFMTwoStackStandard2B.Text = dr.Item("strGasFlowRateACFM2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM2C")) Then
                            txtGasFlowACFMTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM2C") = "N/A" Then
                                txtGasFlowACFMTwoStackStandard2C.Clear()
                            Else
                                txtGasFlowACFMTwoStackStandard2C.Text = dr.Item("strGasFlowRateACFM2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1A")) Then
                            txtGasFlowDSCFMTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM1A") = "N/A" Then
                                txtGasFlowDSCFMTwoStackStandard1A.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackStandard1A.Text = dr.Item("strGasFlowRateDSCFM1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1B")) Then
                            txtGasFlowDSCFMTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM1b") = "N/A" Then
                                txtGasFlowDSCFMTwoStackStandard1B.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackStandard1B.Text = dr.Item("strGasFlowRateDSCFM1b")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1C")) Then
                            txtGasFlowDSCFMTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM1C") = "N/A" Then
                                txtGasFlowDSCFMTwoStackStandard1C.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackStandard1C.Text = dr.Item("strGasFlowRateDSCFM1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM2A")) Then
                            txtGasFlowDSCFMTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM2A") = "N/A" Then
                                txtGasFlowDSCFMTwoStackStandard2A.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackStandard2A.Text = dr.Item("strGasFlowRateDSCFM2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM2B")) Then
                            txtGasFlowDSCFMTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM2b") = "N/A" Then
                                txtGasFlowDSCFMTwoStackStandard2B.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackStandard2B.Text = dr.Item("strGasFlowRateDSCFM2b")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM2C")) Then
                            txtGasFlowDSCFMTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM2C") = "N/A" Then
                                txtGasFlowDSCFMTwoStackStandard2C.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackStandard2C.Text = dr.Item("strGasFlowRateDSCFM2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1A") = "N/A" Then
                                txtPollConcTwoStackStandard1A.Clear()
                            Else
                                txtPollConcTwoStackStandard1A.Text = dr.Item("strPollutantConcentration1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1B") = "N/A" Then
                                txtPollConcTwoStackStandard1B.Clear()
                            Else
                                txtPollConcTwoStackStandard1B.Text = dr.Item("strPollutantConcentration1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1C")) Then
                            txtPollConcTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1C") = "N/A" Then
                                txtPollConcTwoStackStandard1C.Clear()
                            Else
                                txtPollConcTwoStackStandard1C.Text = dr.Item("strPollutantConcentration1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration2A")) Then
                            txtPollConcTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strPollutantConcentration2A") = "N/A" Then
                                txtPollConcTwoStackStandard2A.Clear()
                            Else
                                txtPollConcTwoStackStandard2A.Text = dr.Item("strPollutantConcentration2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration2B")) Then
                            txtPollConcTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strPollutantConcentration2B") = "N/A" Then
                                txtPollConcTwoStackStandard2B.Clear()
                            Else
                                txtPollConcTwoStackStandard2B.Text = dr.Item("strPollutantConcentration2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration2C")) Then
                            txtPollConcTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strPollutantConcentration2C") = "N/A" Then
                                txtPollConcTwoStackStandard2C.Clear()
                            Else
                                txtPollConcTwoStackStandard2C.Text = dr.Item("strPollutantConcentration2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitTwoStackStandard.SelectedValue = 0
                        Else
                            cboPollConUnitTwoStackStandard.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG1")) Then
                            txtPollConcAvgTwoStackStandard1.Clear()
                        Else
                            If dr.Item("strPollutantConcentrationAVG1") = "N/A" Then
                                txtPollConcAvgTwoStackStandard1.Clear()
                            Else
                                txtPollConcAvgTwoStackStandard1.Text = dr.Item("strPollutantConcentrationAVG1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG2")) Then
                            txtPollConcAvgTwoStackStandard2.Clear()
                        Else
                            If dr.Item("strPollutantConcentrationAVG2") = "N/A" Then
                                txtPollConcAvgTwoStackStandard2.Clear()
                            Else
                                txtPollConcAvgTwoStackStandard2.Text = dr.Item("strPollutantConcentrationAVG2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1A")) Then
                            txtEmissRateTwoStackStandard1A.Clear()
                        Else
                            If dr.Item("strEmissionRate1A") = "N/A" Then
                                txtEmissRateTwoStackStandard1A.Clear()
                            Else
                                txtEmissRateTwoStackStandard1A.Text = dr.Item("strEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1B")) Then
                            txtEmissRateTwoStackStandard1B.Clear()
                        Else
                            If dr.Item("strEmissionRate1B") = "N/A" Then
                                txtEmissRateTwoStackStandard1B.Clear()
                            Else
                                txtEmissRateTwoStackStandard1B.Text = dr.Item("strEmissionRate1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1C")) Then
                            txtEmissRateTwoStackStandard1C.Clear()
                        Else
                            If dr.Item("strEmissionRate1C") = "N/A" Then
                                txtEmissRateTwoStackStandard1C.Clear()
                            Else
                                txtEmissRateTwoStackStandard1C.Text = dr.Item("strEmissionRate1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate2A")) Then
                            txtEmissRateTwoStackStandard2A.Clear()
                        Else
                            If dr.Item("strEmissionRate2A") = "N/A" Then
                                txtEmissRateTwoStackStandard2A.Clear()
                            Else
                                txtEmissRateTwoStackStandard2A.Text = dr.Item("strEmissionRate2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate2B")) Then
                            txtEmissRateTwoStackStandard2B.Clear()
                        Else
                            If dr.Item("strEmissionRate2B") = "N/A" Then
                                txtEmissRateTwoStackStandard2B.Clear()
                            Else
                                txtEmissRateTwoStackStandard2B.Text = dr.Item("strEmissionRate2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate2C")) Then
                            txtEmissRateTwoStackStandard2C.Clear()
                        Else
                            If dr.Item("strEmissionRate2C") = "N/A" Then
                                txtEmissRateTwoStackStandard2C.Clear()
                            Else
                                txtEmissRateTwoStackStandard2C.Text = dr.Item("strEmissionRate2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitTwoStackStandard.SelectedValue = 0
                        Else
                            cboEmissRateUnitTwoStackStandard.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg1")) Then
                            txtEmissRateAvgTwoStackStandard1.Clear()
                        Else
                            If dr.Item("strEmissionRateAvg1") = "N/A" Then
                                txtEmissRateAvgTwoStackStandard1.Clear()
                            Else
                                txtEmissRateAvgTwoStackStandard1.Text = dr.Item("strEmissionRateAvg1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg2")) Then
                            txtEmissRateAvgTwoStackStandard2.Clear()
                        Else
                            If dr.Item("strEmissionRateAvg2") = "N/A" Then
                                txtEmissRateAvgTwoStackStandard2.Clear()
                            Else
                                txtEmissRateAvgTwoStackStandard2.Text = dr.Item("strEmissionRateAvg2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateTotal1")) Then
                            txtEmissRateTotalTwoStackStandard1.Clear()
                        Else
                            If dr.Item("strEmissionRateTotal1") = "N/A" Then
                                txtEmissRateTotalTwoStackStandard1.Clear()
                            Else
                                txtEmissRateTotalTwoStackStandard1.Text = dr.Item("strEmissionRateTotal1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateTotal2")) Then
                            txtEmissRateTotalTwoStackStandard2.Clear()
                        Else
                            If dr.Item("strEmissionRateTotal2") = "N/A" Then
                                txtEmissRateTotalTwoStackStandard2.Clear()
                            Else
                                txtEmissRateTotalTwoStackStandard2.Text = dr.Item("strEmissionRateTotal2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateTotal3")) Then
                            txtEmissRateTotalTwoStackStandard3.Clear()
                        Else
                            If dr.Item("strEmissionRateTotal3") = "N/A" Then
                                txtEmissRateTotalTwoStackStandard3.Clear()
                            Else
                                txtEmissRateTotalTwoStackStandard3.Text = dr.Item("strEmissionRateTotal3")
                            End If
                        End If

                        If IsDBNull(dr.Item("strEmissionRateTotalAvg")) Then
                            txtEmissRateTotalAvgTwoStackStandard.Clear()
                        Else
                            If dr.Item("strEmissionRateTotalAvg") = "N/A" Then
                                txtEmissRateTotalAvgTwoStackStandard.Clear()
                            Else
                                txtEmissRateTotalAvgTwoStackStandard.Text = dr.Item("strEmissionRateTotalAvg")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtPercentAllowableTwoStack.Clear()
                        Else
                            If dr.Item("strPercentAllowable") = "N/A" Then
                                txtPercentAllowableTwoStack.Clear()
                            Else
                                txtPercentAllowableTwoStack.Text = dr.Item("strPercentAllowable")
                            End If
                        End If
                    End If
                Case "006"
                    TCTwoStack.TabPages.Remove(Me.TPTwoStackStandard)
                    SQL = "Select strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                     "strOperatingCapacity, strOperatingCapacityUnit, " & _
                     "strAllowableEmissionRate1, strAllowableEmissionRate2, " & _
                     "strAllowableEmissionRate3, strAllowableEmissionRateUnit1, " & _
                     "strAllowableEmissionRateUnit2, strAllowableEmissionRateUnit3, " & _
                     "strStackOneName, strStackTwoName, " & _
                     "strRunNumber1A, strRunNumber1B, strRunNumber1C, " & _
                     "strRunNumber2A, strRunNumber2B, strRunNumber2C, " & _
                     "strGasTemperature1A, strGasTemperature1B, strGasTemperature1C, " & _
                     "strGasTemperature2A, strGasTemperature2B, strGasTemperature2C, " & _
                     "strGasMoisture1A, strGasMoisture1B, strGasMoisture1C, " & _
                     "strGasMoisture2A, strGasMoisture2B, strGasMoisture2C, " & _
                     "strGasFlowRateACFM1A, strGasFlowRateACFM1B, strGasFlowRateACFM1C, " & _
                     "strGasFlowRateACFM2A, strGasFlowRateACFM2B, strGasFlowRateACFM2C, " & _
                     "strGasFlowRateDSCFM1A, strGasFlowRateDSCFM1B, strGasFlowRateDSCFM1C, " & _
                     "strGasFlowRateDSCFM2A, strGasFlowRateDSCFM2B, strGasFlowRateDSCFM2C, " & _
                     "strPollutantConcentration1A, strPollutantConcentration1B, strPollutantConcentration1C, " & _
                     "strPollutantConcentration2A, strPollutantConcentration2B, strPollutantConcentration2C, " & _
                     "strPollutantConcentrationUnit, strPollutantConcentrationAVG1, " & _
                     "strPollutantConcentrationAVG2, " & _
                     "strEmissionRate1A, strEmissionRate1B, strEmissionRate1C, " & _
                     "strEmissionRate2A, strEmissionRate2B, strEmissionRate2C, " & _
                     "strEmissionRateUnit, strEmissionRateAvg1, " & _
                     "strEmissionRateAvg2, " & _
                     "strDestructionPercent " & _
                     "from AIRBRANCH.ISMPReportTwoStack " & _
                     "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityTwoStack.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityTwoStack.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityTwoStack.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityTwoStack.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityTwoStack.Clear()
                            Else
                                txtOperatingCapacityTwoStack.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsTwoStack.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsTwoStack.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1TwoStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1TwoStack.Clear()
                            Else
                                txtAllowableEmissionRate1TwoStack.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2TwoStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2TwoStack.Clear()
                            Else
                                txtAllowableEmissionRate2TwoStack.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3TwoStack.Clear()
                        Else
                            If dr.Item("strAllowableemissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3TwoStack.Clear()
                            Else
                                txtAllowableEmissionRate3TwoStack.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1TwoStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1TwoStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2TwoStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2TwoStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3TwoStack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3TwoStack.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataTwoStack.Text = ControlEquipment
                        txtApplicableRegulationTwoStack.Text = ApplicableRequirment
                        txtOtherInformationTwoStack.Text = ReportComments

                        If IsDBNull(dr.Item("strStackOneName")) Then
                            txtStackOneNameTwoStackDRE.Clear()
                        Else
                            If dr.Item("strStackOneName") = "N/A" Then
                                txtStackOneNameTwoStackDRE.Clear()
                            Else
                                txtStackOneNameTwoStackDRE.Text = dr.Item("strStackOneName")
                            End If
                        End If
                        If IsDBNull(dr.Item("strStackTwoName")) Then
                            txtStackTwoNameTwoStackDRE.Clear()
                        Else
                            If dr.Item("strStackTwoName") = "N/A" Then
                                txtStackTwoNameTwoStackDRE.Clear()
                            Else
                                txtStackTwoNameTwoStackDRE.Text = dr.Item("strStackTwoName")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strRunNumber1A") = "N/A" Then
                                txtRunNumTwoStackDRE1A.Clear()
                            Else
                                txtRunNumTwoStackDRE1A.Text = dr.Item("strRunNumber1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strRunNumber1B") = "N/A" Then
                                txtRunNumTwoStackDRE1B.Clear()
                            Else
                                txtRunNumTwoStackDRE1B.Text = dr.Item("strRunNumber1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1C")) Then
                            txtRunNumTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strRunNumber1C") = "N/A" Then
                                txtRunNumTwoStackDRE1C.Clear()
                            Else
                                txtRunNumTwoStackDRE1C.Text = dr.Item("strRunNumber1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber2A")) Then
                            txtRunNumTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strRunNumber2A") = "N/A" Then
                                txtRunNumTwoStackDRE2A.Clear()
                            Else
                                txtRunNumTwoStackDRE2A.Text = dr.Item("strRunNumber2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber2B")) Then
                            txtRunNumTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strRunNumber2B") = "N/A" Then
                                txtRunNumTwoStackDRE2B.Clear()
                            Else
                                txtRunNumTwoStackDRE2B.Text = dr.Item("strRunNumber2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber2C")) Then
                            txtRunNumTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strRunNumber2C") = "N/A" Then
                                txtRunNumTwoStackDRE2C.Clear()
                            Else
                                txtRunNumTwoStackDRE2C.Text = dr.Item("strRunNumber2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1A")) Then
                            txtGasTempTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strGasTemperature1A") = "N/A" Then
                                txtGasTempTwoStackDRE1A.Clear()
                            Else
                                txtGasTempTwoStackDRE1A.Text = dr.Item("strGasTemperature1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1B")) Then
                            txtGasTempTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strGasTemperature1B") = "N/A" Then
                                txtGasTempTwoStackDRE1B.Clear()
                            Else
                                txtGasTempTwoStackDRE1B.Text = dr.Item("strGasTemperature1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature1C")) Then
                            txtGasTempTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strGasTemperature1C") = "N/A" Then
                                txtGasTempTwoStackDRE1C.Clear()
                            Else
                                txtGasTempTwoStackDRE1C.Text = dr.Item("strGasTemperature1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature2A")) Then
                            txtGasTempTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strGasTemperature2A") = "N/A" Then
                                txtGasTempTwoStackDRE2A.Clear()
                            Else
                                txtGasTempTwoStackDRE2A.Text = dr.Item("strGasTemperature2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature2B")) Then
                            txtGasTempTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strGasTemperature2B") = "N/A" Then
                                txtGasTempTwoStackDRE2B.Clear()
                            Else
                                txtGasTempTwoStackDRE2B.Text = dr.Item("strGasTemperature2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasTemperature2C")) Then
                            txtGasTempTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strGasTemperature2C") = "N/A" Then
                                txtGasTempTwoStackDRE2C.Clear()
                            Else
                                txtGasTempTwoStackDRE2C.Text = dr.Item("strGasTemperature2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1A")) Then
                            txtGasMoistTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strGasMoisture1A") = "N/A" Then
                                txtGasMoistTwoStackDRE1A.Clear()
                            Else
                                txtGasMoistTwoStackDRE1A.Text = dr.Item("strGasMoisture1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1B")) Then
                            txtGasMoistTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strGasMoisture1B") = "N/A" Then
                                txtGasMoistTwoStackDRE1B.Clear()
                            Else
                                txtGasMoistTwoStackDRE1B.Text = dr.Item("strGasMoisture1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture1C")) Then
                            txtGasMoistTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strGasMoisture1C") = "N/A" Then
                                txtGasMoistTwoStackDRE1C.Clear()
                            Else
                                txtGasMoistTwoStackDRE1C.Text = dr.Item("strGasMoisture1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture2A")) Then
                            txtGasMoistTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strGasMoisture2A") = "N/A" Then
                                txtGasMoistTwoStackDRE2A.Clear()
                            Else
                                txtGasMoistTwoStackDRE2A.Text = dr.Item("strGasMoisture2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture2B")) Then
                            txtGasMoistTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strGasMoisture2B") = "N/A" Then
                                txtGasMoistTwoStackDRE2B.Clear()
                            Else
                                txtGasMoistTwoStackDRE2B.Text = dr.Item("strGasMoisture2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasMoisture2C")) Then
                            txtGasMoistTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strGasMoisture2C") = "N/A" Then
                                txtGasMoistTwoStackDRE2C.Clear()
                            Else
                                txtGasMoistTwoStackDRE2C.Text = dr.Item("strGasMoisture2C")
                            End If
                        End If

                        If IsDBNull(dr.Item("strGasFlowRateACFM1A")) Then
                            txtGasFlowACFMTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM1A") = "N/A" Then
                                txtGasFlowACFMTwoStackDRE1A.Clear()
                            Else
                                txtGasFlowACFMTwoStackDRE1A.Text = dr.Item("strGasFlowRateACFM1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1B")) Then
                            txtGasFlowACFMTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM1B") = "N/A" Then
                                txtGasFlowACFMTwoStackDRE1B.Clear()
                            Else
                                txtGasFlowACFMTwoStackDRE1B.Text = dr.Item("strGasFlowRateACFM1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM1C")) Then
                            txtGasFlowACFMTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM1C") = "N/A" Then
                                txtGasFlowACFMTwoStackDRE1C.Clear()
                            Else
                                txtGasFlowACFMTwoStackDRE1C.Text = dr.Item("strGasFlowRateACFM1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM2A")) Then
                            txtGasFlowACFMTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM2A") = "N/A" Then
                                txtGasFlowACFMTwoStackDRE2A.Clear()
                            Else
                                txtGasFlowACFMTwoStackDRE2A.Text = dr.Item("strGasFlowRateACFM2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM2B")) Then
                            txtGasFlowACFMTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM2B") = "N/A" Then
                                txtGasFlowACFMTwoStackDRE2B.Clear()
                            Else
                                txtGasFlowACFMTwoStackDRE2B.Text = dr.Item("strGasFlowRateACFM2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateACFM2C")) Then
                            txtGasFlowACFMTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strGasFlowRateACFM2C") = "N/A" Then
                                txtGasFlowACFMTwoStackDRE2C.Clear()
                            Else
                                txtGasFlowACFMTwoStackDRE2C.Text = dr.Item("strGasFlowRateACFM2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1A")) Then
                            txtGasFlowDSCFMTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM1A") = "N/A" Then
                                txtGasFlowDSCFMTwoStackDRE1A.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackDRE1A.Text = dr.Item("strGasFlowRateDSCFM1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1B")) Then
                            txtGasFlowDSCFMTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM1B") = "N/A" Then
                                txtGasFlowDSCFMTwoStackDRE1B.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackDRE1B.Text = dr.Item("strGasFlowRateDSCFM1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM1C")) Then
                            txtGasFlowDSCFMTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM1C") = "N/A" Then
                                txtGasFlowDSCFMTwoStackDRE1C.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackDRE1C.Text = dr.Item("strGasFlowRateDSCFM1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM2A")) Then
                            txtGasFlowDSCFMTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM2A") = "N/A" Then
                                txtGasFlowDSCFMTwoStackDRE2A.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackDRE2A.Text = dr.Item("strGasFlowRateDSCFM2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM2B")) Then
                            txtGasFlowDSCFMTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM2B") = "N/A" Then
                                txtGasFlowDSCFMTwoStackDRE2B.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackDRE2B.Text = dr.Item("strGasFlowRateDSCFM2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strGasFlowRateDSCFM2C")) Then
                            txtGasFlowDSCFMTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strGasFlowRateDSCFM2C") = "N/A" Then
                                txtGasFlowDSCFMTwoStackDRE2C.Clear()
                            Else
                                txtGasFlowDSCFMTwoStackDRE2C.Text = dr.Item("strGasFlowRateDSCFM2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1A") = "N/A" Then
                                txtPollConcTwoStackDRE1A.Clear()
                            Else
                                txtPollConcTwoStackDRE1A.Text = dr.Item("strPollutantConcentration1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1B") = "N/A" Then
                                txtPollConcTwoStackDRE1B.Clear()
                            Else
                                txtPollConcTwoStackDRE1B.Text = dr.Item("strPollutantConcentration1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1C")) Then
                            txtPollConcTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1C") = "N/A" Then
                                txtPollConcTwoStackDRE1C.Clear()
                            Else
                                txtPollConcTwoStackDRE1C.Text = dr.Item("strPollutantConcentration1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration2A")) Then
                            txtPollConcTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strPollutantConcentration2A") = "N/A" Then
                                txtPollConcTwoStackDRE2A.Clear()
                            Else
                                txtPollConcTwoStackDRE2A.Text = dr.Item("strPollutantConcentration2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration2B")) Then
                            txtPollConcTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strPollutantConcentration2B") = "N/A" Then
                                txtPollConcTwoStackDRE2B.Clear()
                            Else
                                txtPollConcTwoStackDRE2B.Text = dr.Item("strPollutantConcentration2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration2C")) Then
                            txtPollConcTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strPollutantConcentration2C") = "N/A" Then
                                txtPollConcTwoStackDRE2C.Clear()
                            Else
                                txtPollConcTwoStackDRE2C.Text = dr.Item("strPollutantConcentration2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitTwoStackDRE.SelectedValue = 0
                        Else
                            cboPollConUnitTwoStackDRE.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG1")) Then
                            txtPollConcAvgTwoStackDRE1.Clear()
                        Else
                            If dr.Item("strPollutantConcentrationAVG1") = "N/A" Then
                                txtPollConcAvgTwoStackDRE1.Clear()
                            Else
                                txtPollConcAvgTwoStackDRE1.Text = dr.Item("strPollutantConcentrationAVG1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG2")) Then
                            txtPollConcAvgTwoStackDRE2.Clear()
                        Else
                            If dr.Item("strPollutantConcentrationAVG2") = "N/A" Then
                                txtPollConcAvgTwoStackDRE2.Clear()
                            Else
                                txtPollConcAvgTwoStackDRE2.Text = dr.Item("strPollutantConcentrationAVG2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1A")) Then
                            txtEmissRateTwoStackDRE1A.Clear()
                        Else
                            If dr.Item("strEmissionRate1A") = "N/A" Then
                                txtEmissRateTwoStackDRE1A.Clear()
                            Else
                                txtEmissRateTwoStackDRE1A.Text = dr.Item("strEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1B")) Then
                            txtEmissRateTwoStackDRE1B.Clear()
                        Else
                            If dr.Item("strEmissionRate1B") = "N/A" Then
                                txtEmissRateTwoStackDRE1B.Clear()
                            Else
                                txtEmissRateTwoStackDRE1B.Text = dr.Item("strEmissionRate1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1C")) Then
                            txtEmissRateTwoStackDRE1C.Clear()
                        Else
                            If dr.Item("strEmissionRate1C") = "N/A" Then
                                txtEmissRateTwoStackDRE1C.Clear()
                            Else
                                txtEmissRateTwoStackDRE1C.Text = dr.Item("strEmissionRate1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate2A")) Then
                            txtEmissRateTwoStackDRE2A.Clear()
                        Else
                            If dr.Item("strEmissionRate2A") = "N/A" Then
                                txtEmissRateTwoStackDRE2A.Clear()
                            Else
                                txtEmissRateTwoStackDRE2A.Text = dr.Item("strEmissionRate2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate2B")) Then
                            txtEmissRateTwoStackDRE2B.Clear()
                        Else
                            If dr.Item("strEmissionRate2B") = "N/A" Then
                                txtEmissRateTwoStackDRE2B.Clear()
                            Else
                                txtEmissRateTwoStackDRE2B.Text = dr.Item("strEmissionRate2B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate2C")) Then
                            txtEmissRateTwoStackDRE2C.Clear()
                        Else
                            If dr.Item("strEmissionRate2C") = "N/A" Then
                                txtEmissRateTwoStackDRE2C.Clear()
                            Else
                                txtEmissRateTwoStackDRE2C.Text = dr.Item("strEmissionRate2C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitTwoStackDRE.SelectedValue = 0
                        Else
                            cboEmissRateUnitTwoStackDRE.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg1")) Then
                            txtEmissRateAvgTwoStackDRE1.Clear()
                        Else
                            If dr.Item("strEmissionRateAvg1") = "N/A" Then
                                txtEmissRateAvgTwoStackDRE1.Clear()
                            Else
                                txtEmissRateAvgTwoStackDRE1.Text = dr.Item("strEmissionRateAvg1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg2")) Then
                            txtEmissRateAvgTwoStackDRE2.Clear()
                        Else
                            If dr.Item("strEmissionRateAvg2") = "N/A" Then
                                txtEmissRateAvgTwoStackDRE2.Clear()
                            Else
                                txtEmissRateAvgTwoStackDRE2.Text = dr.Item("strEmissionRateAvg2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strDestructionPercent")) Then
                            txtDestructionEfficiencyTwoStackDRE.Clear()
                        Else
                            If dr.Item("strDestructionPercent") = "N/A" Then
                                txtDestructionEfficiencyTwoStackDRE.Clear()
                            Else
                                txtDestructionEfficiencyTwoStackDRE.Text = dr.Item("strDestructionPercent")
                            End If
                        End If
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadLoadingRack(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "007"
                    SQL = "Select " & _
                    "strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity, strOperatingCapacityUnit, " & _
                    "strLimitationVelocity, strLimitationHeatCapacity, " & _
                    "strAllowableEmissionRate1A, strAllowableEmissionRate2A, " & _
                    "strAllowableEmissionRate3A, " & _
                    "strAllowEmissionRateUnit1A, strAllowEmissionRateUnit2A, " & _
                    "strAllowEmissionRateUnit3A, " & _
                    "strTestDuration, strTestDurationUnit, strPollutantConcenIn, " & _
                    "strPollutantConcenUnitIn, strPollutantConcenOut, strPollutantConcenUnitOut, " & _
                    "strEmissionRate, strEmissionRateUnit, strDestructionEfficiency, " & _
                    "strPercentAllowable " & _
                    "from AIRBRANCH.ISMPReportFlare " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityLoadingRack.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityLoadingRack.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityLoadingRack.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsLoadingRack.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsLoadingRack.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityLoadingRack.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityLoadingRack.Clear()
                            Else
                                txtOperatingCapacityLoadingRack.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsLoadingRack.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsLoadingRack.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1A")) Then
                            txtAllowableEmissionRate1LoadingRack.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1A") = "N/A" Then
                                txtAllowableEmissionRate1LoadingRack.Clear()
                            Else
                                txtAllowableEmissionRate1LoadingRack.Text = dr.Item("strAllowableEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2A")) Then
                            txtAllowableEmissionRate2LoadingRack.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate2A") = "N/A" Then
                                txtAllowableEmissionRate2LoadingRack.Clear()
                            Else
                                txtAllowableEmissionRate2LoadingRack.Text = dr.Item("strAllowableEmissionRate2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3A")) Then
                            txtAllowableEmissionRate3LoadingRack.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate3A") = "N/A" Then
                                txtAllowableEmissionRate3LoadingRack.Clear()
                            Else
                                txtAllowableEmissionRate3LoadingRack.Text = dr.Item("strAllowableEmissionRate3A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowEmissionRateUnit1A")) Then
                            cboAllowableEmissionRateUnits1LoadingRack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1LoadingRack.SelectedValue = dr.Item("strAllowEmissionRateUnit1A")
                        End If
                        If IsDBNull(dr.Item("strAllowEmissionRateUnit2A")) Then
                            cboAllowableEmissionRateUnits2LoadingRack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2LoadingRack.SelectedValue = dr.Item("strAllowEmissionRateUnit2A")
                        End If
                        If IsDBNull(dr.Item("strAllowEmissionRateUnit3A")) Then
                            cboAllowableEmissionRateUnits3LoadingRack.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3LoadingRack.SelectedValue = dr.Item("strAllowEmissionRateUnit3A")
                        End If
                        txtControlEquipmentOperatingDataLoadingRack.Text = ControlEquipment
                        txtApplicableRegulationLoadingRack.Text = ApplicableRequirment
                        txtOtherInformationLoadingRack.Text = ReportComments

                        If IsDBNull(dr.Item("strTestDuration")) Then
                            txtTestDurationLoadingRack.Clear()
                        Else
                            If dr.Item("strTestDuration") = "N/A" Then
                                txtTestDurationLoadingRack.Clear()
                            Else
                                txtTestDurationLoadingRack.Text = dr.Item("strTestDuration")
                            End If
                        End If
                        If IsDBNull(dr.Item("strTestDurationUnit")) Then
                            cboTestDurationUnitsLoadingRack.SelectedValue = 0
                        Else
                            cboTestDurationUnitsLoadingRack.SelectedValue = dr.Item("strTestDurationUnit")
                        End If

                        If IsDBNull(dr.Item("strPollutantConcenIn")) Then
                            txtPollConcINLoadingRack.Clear()
                        Else
                            If dr.Item("strPollutantConcenIn") = "N/A" Then
                                txtPollConcINLoadingRack.Clear()
                            Else
                                txtPollConcINLoadingRack.Text = dr.Item("strPollutantConcenIn")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcenUnitIn")) Then
                            cboPollConUnitINLoadingRack.SelectedValue = 0
                        Else
                            cboPollConUnitINLoadingRack.SelectedValue = dr.Item("strPollutantConcenUnitIn")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcenOut")) Then
                            txtPollConcOUTLoadingRack.Clear()
                        Else
                            If dr.Item("strPollutantConcenOut") = "N/A" Then
                                txtPollConcOUTLoadingRack.Clear()
                            Else
                                txtPollConcOUTLoadingRack.Text = dr.Item("strPollutantConcenOut")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcenUnitOut")) Then
                            cboPollConUnitOUTLoadingRack.SelectedValue = 0
                        Else
                            cboPollConUnitOUTLoadingRack.SelectedValue = dr.Item("strPollutantConcenUnitOut")
                        End If

                        If IsDBNull(dr.Item("strEmissionRate")) Then
                            txtEmissRateLoadingRack.Clear()
                        Else
                            If dr.Item("strEmissionRate") = "N/A" Then
                                txtEmissRateLoadingRack.Clear()
                            Else
                                txtEmissRateLoadingRack.Text = dr.Item("strEmissionRate")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitLoadingRack.SelectedValue = 0
                        Else
                            cboEmissRateUnitLoadingRack.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If
                        If IsDBNull(dr.Item("strDestructionEfficiency")) Then
                            txtDestructionEfficiencyLoadingRack.Clear()
                        Else
                            If dr.Item("strDestructionEfficiency") = "N/A" Then
                                txtDestructionEfficiencyLoadingRack.Clear()
                            Else
                                txtDestructionEfficiencyLoadingRack.Text = dr.Item("strDestructionEfficiency")
                            End If
                        End If
                    End If
                Case Else

            End Select

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadPondTreatment(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "008"
                    SQL = "Select strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity, strOperatingCapacityUnit, " & _
                    "strAllowableEmissionRate1, strAllowableEmissionRate2, " & _
                    "strAllowableEmissionRate3, strAllowableEmissionRateUnit1, " & _
                    "strAllowableEmissionRateUnit2, strAllowableEmissionRateUnit3, " & _
                    "strRunNumber1A, strRunNumber1B, strRunNumber1C, " & _
                    "strPollutantConcentration1A, strPollutantConcentration1B, strPollutantConcentration1C, " & _
                    "strPollutantConcentrationUnit, strPollutantConcentrationAVG, " & _
                    "strTreatmentRate1A, strTreatmentRate1B, strTreatmentRate1C, " & _
                    "strTreatmentRateUnit, strTreatmentRateAvg, " & _
                    "strPercentAllowable " & _
                    "from AIRBRANCH.ISMPReportPondAndGas " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityPond.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityPond.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityPond.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsPond.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsPond.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityPond.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityPond.Clear()
                            Else
                                txtOperatingCapacityPond.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsPond.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsPond.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1Pond.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1Pond.Clear()
                            Else
                                txtAllowableEmissionRate1Pond.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2Pond.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2Pond.Clear()
                            Else
                                txtAllowableEmissionRate2Pond.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3Pond.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3Pond.Clear()
                            Else
                                txtAllowableEmissionRate3Pond.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1Pond.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1Pond.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2Pond.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2Pond.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3Pond.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3Pond.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataPond.Text = ControlEquipment
                        txtApplicableRegulationPond.Text = ApplicableRequirment
                        txtOtherInformationPond.Text = ReportComments

                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumPond1A.Clear()
                        Else
                            If dr.Item("strRunNumber1A") = "N/A" Then
                                txtRunNumPond1A.Clear()
                            Else
                                txtRunNumPond1A.Text = dr.Item("strRunNumber1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumPond1B.Clear()
                        Else
                            If dr.Item("strRunNumber1B") = "N/A" Then
                                txtRunNumPond1B.Clear()
                            Else
                                txtRunNumPond1B.Text = dr.Item("strRunNumber1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1C")) Then
                            txtRunNumPond1C.Clear()
                        Else
                            If dr.Item("strRunNumber1C") = "N/A" Then
                                txtRunNumPond1C.Clear()
                            Else
                                txtRunNumPond1C.Text = dr.Item("strRunNumber1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcPond1A.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1A") = "N/A" Then
                                txtPollConcPond1A.Clear()
                            Else
                                txtPollConcPond1A.Text = dr.Item("strPollutantConcentration1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcPond1B.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1B") = "N/A" Then
                                txtPollConcPond1B.Clear()
                            Else
                                txtPollConcPond1B.Text = dr.Item("strPollutantConcentration1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1C")) Then
                            txtPollConcPond1C.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1C") = "N/A" Then
                                txtPollConcPond1C.Clear()
                            Else
                                txtPollConcPond1C.Text = dr.Item("strPollutantConcentration1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitPond.SelectedValue = 0
                        Else
                            cboPollConUnitPond.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG")) Then
                            txtPollConcAvgPond.Clear()
                        Else
                            If dr.Item("strPollutantConcentrationAVG") = "N/A" Then
                                txtPollConcAvgPond.Clear()
                            Else
                                txtPollConcAvgPond.Text = dr.Item("strPollutantConcentrationAVG")
                            End If
                        End If

                        If IsDBNull(dr.Item("strTreatmentRate1A")) Then
                            txtTreatmentRatePond1A.Clear()
                        Else
                            If dr.Item("strTreatmentRate1A") = "N/A" Then
                                txtTreatmentRatePond1A.Clear()
                            Else
                                txtTreatmentRatePond1A.Text = dr.Item("strTreatmentRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strTreatmentRate1B")) Then
                            txtTreatmentRatePond1B.Clear()
                        Else
                            If dr.Item("strTreatmentRate1B") = "N/A" Then
                                txtTreatmentRatePond1B.Clear()
                            Else
                                txtTreatmentRatePond1B.Text = dr.Item("strTreatmentRate1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strTreatmentRate1C")) Then
                            txtTreatmentRatePond1C.Clear()
                        Else
                            If dr.Item("strTreatmentRate1C") = "N/A" Then
                                txtTreatmentRatePond1C.Clear()
                            Else
                                txtTreatmentRatePond1C.Text = dr.Item("strTreatmentRate1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strTreatmentRateUnit")) Then
                            cboTreatmentRateUnitPond.SelectedValue = 0
                        Else
                            cboTreatmentRateUnitPond.SelectedValue = dr.Item("strTreatmentRateUnit")
                        End If
                        If IsDBNull(dr.Item("strTreatmentRateAvg")) Then
                            txtTreatmentRateAvgPond.Clear()
                        Else
                            If dr.Item("strTreatmentRateAvg") = "N/A" Then
                                txtTreatmentRateAvgPond.Clear()
                            Else
                                txtTreatmentRateAvgPond.Text = dr.Item("strTreatmentRateAvg")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtDestructionEfficancyPond.Clear()
                        Else
                            If dr.Item("strPercentAllowable") = "N/A" Then
                                txtDestructionEfficancyPond.Clear()
                            Else
                                txtDestructionEfficancyPond.Text = dr.Item("strPercentAllowable")
                            End If
                        End If
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadGasConcentration(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "009"
                    SQL = "Select " & _
                    "strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity, strOperatingCapacityUnit, " & _
                    "strAllowableEmissionRate1, strAllowableEmissionRate2, " & _
                    "strAllowableEmissionRate3, strAllowableEmissionRateUnit1, " & _
                    "strAllowableEmissionRateUnit2, strAllowableEmissionRateUnit3, " & _
                    "strRunNumber1A, strRunNumber1B, strRunNumber1C, " & _
                    "strPollutantConcentration1A, strPollutantConcentration1B, strPollutantConcentration1C, " & _
                    "strPollutantConcentrationUnit, strPollutantConcentrationAVG, " & _
                    "strEmissionRate1A, strEmissionRate1B, strEmissionRate1C, " & _
                    "strEmissionRateUnit, strEmissionRateAvg, " & _
                    "strPercentAllowable " & _
                    "from AIRBRANCH.ISMPReportPondAndGas " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityGas.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityGas.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityGas.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsGas.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsGas.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityGas.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityGas.Clear()
                            Else
                                txtOperatingCapacityGas.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsGas.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsGas.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1")) Then
                            txtAllowableEmissionRate1Gas.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1") = "N/A" Then
                                txtAllowableEmissionRate1Gas.Clear()
                            Else
                                txtAllowableEmissionRate1Gas.Text = dr.Item("strAllowableEmissionRate1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2")) Then
                            txtAllowableEmissionRate2Gas.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate2") = "N/A" Then
                                txtAllowableEmissionRate2Gas.Clear()
                            Else
                                txtAllowableEmissionRate2Gas.Text = dr.Item("strAllowableEmissionRate2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3")) Then
                            txtAllowableEmissionRate3Gas.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate3") = "N/A" Then
                                txtAllowableEmissionRate3Gas.Clear()
                            Else
                                txtAllowableEmissionRate3Gas.Text = dr.Item("strAllowableEmissionRate3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1")) Then
                            cboAllowableEmissionRateUnits1Gas.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1Gas.SelectedValue = dr.Item("strAllowableEmissionRateUnit1")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit2")) Then
                            cboAllowableEmissionRateUnits2Gas.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2Gas.SelectedValue = dr.Item("strAllowableEmissionRateUnit2")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit3")) Then
                            cboAllowableEmissionRateUnits3Gas.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3Gas.SelectedValue = dr.Item("strAllowableEmissionRateUnit3")
                        End If
                        txtControlEquipmentOperatingDataGas.Text = ControlEquipment
                        txtApplicableRegulationGas.Text = ApplicableRequirment
                        txtOtherInformationGas.Text = ReportComments

                        If IsDBNull(dr.Item("strRunNumber1A")) Then
                            txtRunNumGas1A.Clear()
                        Else
                            If dr.Item("strRunNumber1A") = "N/A" Then
                                txtRunNumGas1A.Clear()
                            Else
                                txtRunNumGas1A.Text = dr.Item("strRunNumber1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1B")) Then
                            txtRunNumGas1B.Clear()
                        Else
                            If dr.Item("strRunNumber1B") = "N/A" Then
                                txtRunNumGas1B.Clear()
                            Else
                                txtRunNumGas1B.Text = dr.Item("strRunNumber1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunNumber1C")) Then
                            txtRunNumGas1C.Clear()
                        Else
                            If dr.Item("strRunNumber1C") = "N/A" Then
                                txtRunNumGas1C.Clear()
                            Else
                                txtRunNumGas1C.Text = dr.Item("strRunNumber1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1A")) Then
                            txtPollConcGas1A.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1A") = "N/A" Then
                                txtPollConcGas1A.Clear()
                            Else
                                txtPollConcGas1A.Text = dr.Item("strPollutantConcentration1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1B")) Then
                            txtPollConcGas1B.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1B") = "N/A" Then
                                txtPollConcGas1B.Clear()
                            Else
                                txtPollConcGas1B.Text = dr.Item("strPollutantConcentration1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentration1C")) Then
                            txtPollConcGas1C.Clear()
                        Else
                            If dr.Item("strPollutantConcentration1C") = "N/A" Then
                                txtPollConcGas1C.Clear()
                            Else
                                txtPollConcGas1C.Text = dr.Item("strPollutantConcentration1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationUnit")) Then
                            cboPollConUnitGas.SelectedValue = 0
                        Else
                            cboPollConUnitGas.SelectedValue = dr.Item("strPollutantConcentrationUnit")
                        End If
                        If IsDBNull(dr.Item("strPollutantConcentrationAVG")) Then
                            txtPollConcAvgGas.Clear()
                        Else
                            If dr.Item("strPollutantConcentrationAVG") = "N/A" Then
                                txtPollConcAvgGas.Clear()
                            Else
                                txtPollConcAvgGas.Text = dr.Item("strPollutantConcentrationAVG")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1A")) Then
                            txtEmissRateGas1A.Clear()
                        Else
                            If dr.Item("strEmissionRate1A") = "N/A" Then
                                txtEmissRateGas1A.Clear()
                            Else
                                txtEmissRateGas1A.Text = dr.Item("strEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1B")) Then
                            txtEmissRateGas1B.Clear()
                        Else
                            If dr.Item("strEmissionRate1B") = "N/A" Then
                                txtEmissRateGas1B.Clear()
                            Else
                                txtEmissRateGas1B.Text = dr.Item("strEmissionRate1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRate1C")) Then
                            txtEmissRateGas1C.Clear()
                        Else
                            If dr.Item("strEmissionRate1C") = "N/A" Then
                                txtEmissRateGas1C.Clear()
                            Else
                                txtEmissRateGas1C.Text = dr.Item("strEmissionRate1C")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEmissionRateUnit")) Then
                            cboEmissRateUnitGas.SelectedValue = 0
                        Else
                            cboEmissRateUnitGas.SelectedValue = dr.Item("strEmissionRateUnit")
                        End If
                        If IsDBNull(dr.Item("strEmissionRateAvg")) Then
                            txtEmissRateAvgGas.Clear()
                        Else
                            If dr.Item("strEmissionRateAvg") = "N/A" Then
                                txtEmissRateAvgGas.Clear()
                            Else
                                txtEmissRateAvgGas.Text = dr.Item("strEmissionRateAvg")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtPercentAllowableGas.Clear()
                        Else
                            If dr.Item("strPercentAllowable") = "N/A" Then
                                txtPercentAllowableGas.Clear()
                            Else
                                txtPercentAllowableGas.Text = dr.Item("strPercentAllowable")
                            End If
                        End If
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadFlare(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "010"
                    SQL = "Select " & _
                    "strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity, strOperatingCapacityUnit, " & _
                    "strLimitationVelocity, strLimitationHeatCapacity, " & _
                    "strHeatingValue1A, strHeatingValue2A, strHeatingValue3A, " & _
                    "strHeatingValueUnits, strHeatingValueAvg, " & _
                    "strVelocity1A, strVelocity2A, strVelocity3A, " & _
                    "strVelocityUnits, strVelocityAvg, " & _
                    "strPercentAllowable " & _
                    "from AIRBRANCH.ISMPReportFlare " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityFlare.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityFlare.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityFlare.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsFlare.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsFlare.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityFlare.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityFlare.Clear()
                            Else
                                txtOperatingCapacityFlare.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsFlare.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsFlare.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        txtMonitoringDataFlare.Text = ControlEquipment
                        txtApplicableRegulationFlare.Text = ApplicableRequirment
                        txtOtherInformationFlare.Text = ReportComments

                        If IsDBNull(dr.Item("strLimitationVelocity")) Then
                            txtVelocityFlare.Clear()
                        Else
                            If dr.Item("strLimitationVelocity") = "N/A" Then
                                txtVelocityFlare.Clear()
                            Else
                                txtVelocityFlare.Text = dr.Item("strLimitationVelocity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strLimitationHeatCapacity")) Then
                            txtHeatContentFlare.Clear()
                        Else
                            If dr.Item("strLimitationHeatCapacity") = "N/A" Then
                                txtHeatContentFlare.Clear()
                            Else
                                txtHeatContentFlare.Text = dr.Item("strLimitationHeatCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strHeatingValue1A")) Then
                            txtHeatingValue1AFlare.Clear()
                        Else
                            If dr.Item("strHeatingValue1A") = "N/A" Then
                                txtHeatingValue1AFlare.Clear()
                            Else
                                txtHeatingValue1AFlare.Text = dr.Item("strHeatingValue1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strHeatingValue2A")) Then
                            txtHeatingValue1BFlare.Clear()
                        Else
                            If dr.Item("strHeatingValue2A") = "N/A" Then
                                txtHeatingValue1BFlare.Clear()
                            Else
                                txtHeatingValue1BFlare.Text = dr.Item("strHeatingValue2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strHeatingValue3A")) Then
                            txtHeatingValue1CFlare.Clear()
                        Else
                            If dr.Item("strHeatingValue3A") = "N/A" Then
                                txtHeatingValue1CFlare.Clear()
                            Else
                                txtHeatingValue1CFlare.Text = dr.Item("strHeatingValue3A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strHeatingValueUnits")) Then
                            cboHeatingValueUnits.SelectedValue = 0
                        Else
                            cboHeatingValueUnits.SelectedValue = dr.Item("strHeatingValueUnits")
                        End If
                        If IsDBNull(dr.Item("strHeatingValue3A")) Then
                            txtHeatingValue1CFlare.Clear()
                        Else
                            If dr.Item("strHeatingValueAvg") = "N/A" Then
                                txtHeatingValuesAvgFlare.Clear()
                            Else
                                txtHeatingValuesAvgFlare.Text = dr.Item("strHeatingValueAvg")
                            End If
                        End If
                        If IsDBNull(dr.Item("strVelocity1A")) Then
                            txtVelocity1AFlare.Clear()
                        Else
                            If dr.Item("strVelocity1A") = "N/A" Then
                                txtVelocity1AFlare.Clear()
                            Else
                                txtVelocity1AFlare.Text = dr.Item("strVelocity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strVelocity2A")) Then
                            txtVelocity1BFlare.Clear()
                        Else
                            If dr.Item("strVelocity2A") = "N/A" Then
                                txtVelocity1BFlare.Clear()
                            Else
                                txtVelocity1BFlare.Text = dr.Item("strVelocity2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strVelocity3A")) Then
                            txtVelocity1CFlare.Clear()
                        Else
                            If dr.Item("strVelocity3A") = "N/A" Then
                                txtVelocity1CFlare.Clear()
                            Else
                                txtVelocity1CFlare.Text = dr.Item("strVelocity3A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strVelocityUnits")) Then
                            cboVelocityUnitsFlare.SelectedValue = 0
                        Else
                            cboVelocityUnitsFlare.SelectedValue = dr.Item("strVelocityUnits")
                        End If
                        If IsDBNull(dr.Item("strVelocityAvg")) Then
                            txtVelocityAvgFlare.Clear()
                        Else
                            If dr.Item("strVelocityAvg") = "N/A" Then
                                txtVelocityAvgFlare.Clear()
                            Else
                                txtVelocityAvgFlare.Text = dr.Item("strVelocityAvg")
                            End If
                        End If
                        If IsDBNull(dr.Item("strPercentAllowable")) Then
                            txtPercentAllowableFlare.Clear()
                        Else
                            If dr.Item("strPercentAllowable") = "N/A" Then
                                txtPercentAllowableFlare.Clear()
                            Else
                                txtPercentAllowableFlare.Text = dr.Item("strPercentAllowable")
                            End If
                        End If
                    End If
                Case Else
            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadRata(ByVal RefNum As String)
        Try
            Dim OmitRuns As String = ""

            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "011"
                    SQL = "Select " & _
                    "strDiluent, strApplicableStandard, strRelativeAccuracyPercent, " & _
                    "strReferenceMethod1, strReferenceMethod2, strReferenceMethod3, " & _
                    "strReferenceMethod4, strReferenceMethod5, strReferenceMethod6, " & _
                    "strReferenceMethod7, strReferenceMethod8, strReferenceMethod9, " & _
                    "strReferenceMethod10, strReferenceMethod11, strReferenceMethod12, " & _
                    "strRataUnits, StrCMS1, strCms2, StrCMS3, StrCMS4, " & _
                    "StrCMS5, StrCMS6, StrCMS7, StrCMS8, StrCMS9, StrCMS10, " & _
                    "StrCMS11, StrCMS12, " & _
                    "strAccuracyChoice, strAccuracyRequiredPercent, " & _
                    "strAccuracyREquiredStatement, strRunsINcludedKey " & _
                    "from AIRBRANCH.ISMPReportRATA " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strDiluent")) Then
                            cboDilutentMonitoredRata.SelectedValue = 0
                        Else
                            cboDilutentMonitoredRata.SelectedValue = dr.Item("strDiluent")
                        End If
                        If IsDBNull(dr.Item("strApplicableStandard")) Then
                            txtApplicableStandardRata.Clear()
                        Else
                            If dr.Item("strApplicableStandard") = "N/A" Then
                                txtApplicableStandardRata.Clear()
                            Else
                                txtApplicableStandardRata.Text = dr.Item("strApplicableStandard")
                            End If
                        End If
                        txtApplicableRegulationRata.Text = ApplicableRequirment
                        txtOtherInformationRata.Text = ReportComments
                        If IsDBNull(dr.Item("strRelativeAccuracyPercent")) Then
                            txtRelativeAccuracy.Clear()
                        Else
                            If dr.Item("strRelativeAccuracyPercent") = "N/A" Then
                                txtRelativeAccuracy.Clear()
                            Else
                                txtRelativeAccuracy.Text = dr.Item("strRelativeAccuracyPercent")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod1")) Then
                            txtRefMethodRata1.Clear()
                        Else
                            If dr.Item("strReferenceMethod1") = "N/A" Then
                                txtRefMethodRata1.Clear()
                            Else
                                txtRefMethodRata1.Text = dr.Item("strReferenceMethod1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod2")) Then
                            txtRefMethodRata2.Clear()
                        Else
                            If dr.Item("strReferenceMethod2") = "N/A" Then
                                txtRefMethodRata2.Clear()
                            Else
                                txtRefMethodRata2.Text = dr.Item("strReferenceMethod2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod3")) Then
                            txtRefMethodRata3.Clear()
                        Else
                            If dr.Item("strReferenceMethod3") = "N/A" Then
                                txtRefMethodRata3.Clear()
                            Else
                                txtRefMethodRata3.Text = dr.Item("strReferenceMethod3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod4")) Then
                            txtRefMethodRata4.Clear()
                        Else
                            If dr.Item("strReferenceMethod4") = "N/A" Then
                                txtRefMethodRata4.Clear()
                            Else
                                txtRefMethodRata4.Text = dr.Item("strReferenceMethod4")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod5")) Then
                            txtRefMethodRata5.Clear()
                        Else
                            If dr.Item("strReferenceMethod5") = "N/A" Then
                                txtRefMethodRata5.Clear()
                            Else
                                txtRefMethodRata5.Text = dr.Item("strReferenceMethod5")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod6")) Then
                            txtRefMethodRata6.Clear()
                        Else
                            If dr.Item("strReferenceMethod6") = "N/A" Then
                                txtRefMethodRata6.Clear()
                            Else
                                txtRefMethodRata6.Text = dr.Item("strReferenceMethod6")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod7")) Then
                            txtRefMethodRata7.Clear()
                        Else
                            If dr.Item("strReferenceMethod7") = "N/A" Then
                                txtRefMethodRata7.Clear()
                            Else
                                txtRefMethodRata7.Text = dr.Item("strReferenceMethod7")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod8")) Then
                            txtRefMethodRata8.Clear()
                        Else
                            If dr.Item("strReferenceMethod8") = "N/A" Then
                                txtRefMethodRata8.Clear()
                            Else
                                txtRefMethodRata8.Text = dr.Item("strReferenceMethod8")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod9")) Then
                            txtRefMethodRata9.Clear()
                        Else
                            If dr.Item("strReferenceMethod9") = "N/A" Then
                                txtRefMethodRata9.Clear()
                            Else
                                txtRefMethodRata9.Text = dr.Item("strReferenceMethod9")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod10")) Then
                            txtRefMethodRata10.Clear()
                        Else
                            If dr.Item("strReferenceMethod10") = "N/A" Then
                                txtRefMethodRata10.Clear()
                            Else
                                txtRefMethodRata10.Text = dr.Item("strReferenceMethod10")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod11")) Then
                            txtRefMethodRata11.Clear()
                        Else
                            If dr.Item("strReferenceMethod11") = "N/A" Then
                                txtRefMethodRata11.Clear()
                            Else
                                txtRefMethodRata11.Text = dr.Item("strReferenceMethod11")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReferenceMethod12")) Then
                            txtRefMethodRata12.Clear()
                        Else
                            If dr.Item("strReferenceMethod12") = "N/A" Then
                                txtRefMethodRata12.Clear()
                            Else
                                txtRefMethodRata12.Text = dr.Item("strReferenceMethod12")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRataUnits")) Then
                            cboUnitsRata.SelectedValue = 0
                        Else
                            cboUnitsRata.SelectedValue = dr.Item("strRataUnits")
                        End If
                        If IsDBNull(dr.Item("StrCMS1")) Then
                            txtCMSRata1.Clear()
                        Else
                            If dr.Item("StrCMS1") = "N/A" Then
                                txtCMSRata1.Clear()
                            Else
                                txtCMSRata1.Text = dr.Item("StrCMS1")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS2")) Then
                            txtCMSRata2.Clear()
                        Else
                            If dr.Item("StrCMS2") = "N/A" Then
                                txtCMSRata2.Clear()
                            Else
                                txtCMSRata2.Text = dr.Item("StrCMS2")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS3")) Then
                            txtCMSRata3.Clear()
                        Else
                            If dr.Item("StrCMS3") = "N/A" Then
                                txtCMSRata3.Clear()
                            Else
                                txtCMSRata3.Text = dr.Item("StrCMS3")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS4")) Then
                            txtCMSRata4.Clear()
                        Else
                            If dr.Item("StrCMS4") = "N/A" Then
                                txtCMSRata4.Clear()
                            Else
                                txtCMSRata4.Text = dr.Item("StrCMS4")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS5")) Then
                            txtCMSRata5.Clear()
                        Else
                            If dr.Item("StrCMS5") = "N/A" Then
                                txtCMSRata5.Clear()
                            Else
                                txtCMSRata5.Text = dr.Item("StrCMS5")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS6")) Then
                            txtCMSRata6.Clear()
                        Else
                            If dr.Item("StrCMS6") = "N/A" Then
                                txtCMSRata6.Clear()
                            Else
                                txtCMSRata6.Text = dr.Item("StrCMS6")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS7")) Then
                            txtCMSRata7.Clear()
                        Else
                            If dr.Item("StrCMS7") = "N/A" Then
                                txtCMSRata7.Clear()
                            Else
                                txtCMSRata7.Text = dr.Item("StrCMS7")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS8")) Then
                            txtCMSRata8.Clear()
                        Else
                            If dr.Item("StrCMS8") = "N/A" Then
                                txtCMSRata8.Clear()
                            Else
                                txtCMSRata8.Text = dr.Item("StrCMS8")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS9")) Then
                            txtCMSRata9.Clear()
                        Else
                            If dr.Item("StrCMS9") = "N/A" Then
                                txtCMSRata9.Clear()
                            Else
                                txtCMSRata9.Text = dr.Item("StrCMS9")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS10")) Then
                            txtCMSRata10.Clear()
                        Else
                            If dr.Item("StrCMS10") = "N/A" Then
                                txtCMSRata10.Clear()
                            Else
                                txtCMSRata10.Text = dr.Item("StrCMS10")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS11")) Then
                            txtCMSRata11.Clear()
                        Else
                            If dr.Item("StrCMS11") = "N/A" Then
                                txtCMSRata11.Clear()
                            Else
                                txtCMSRata11.Text = dr.Item("StrCMS11")
                            End If
                        End If
                        If IsDBNull(dr.Item("StrCMS12")) Then
                            txtCMSRata12.Clear()
                        Else
                            If dr.Item("StrCMS12") = "N/A" Then
                                txtCMSRata12.Clear()
                            Else
                                txtCMSRata12.Text = dr.Item("StrCMS12")
                            End If
                        End If
                        If IsDBNull(dr.Item("strRunsIncludedKey")) Then
                            OmitRuns = "000000000000000"
                        Else
                            OmitRuns = dr.Item("strRunsINcludedKey")
                        End If

                        If Mid(OmitRuns, 1, 1) = "1" Then
                            chbOmitRunRata1.Checked = True
                        Else
                            chbOmitRunRata1.Checked = False
                        End If
                        If Mid(OmitRuns, 2, 1) = "1" Then
                            chbOmitRunRata2.Checked = True
                        Else
                            chbOmitRunRata2.Checked = False
                        End If
                        If Mid(OmitRuns, 3, 1) = "1" Then
                            chbOmitRunRata3.Checked = True
                        Else
                            chbOmitRunRata3.Checked = False
                        End If
                        If Mid(OmitRuns, 4, 1) = "1" Then
                            chbOmitRunRata4.Checked = True
                        Else
                            chbOmitRunRata4.Checked = False
                        End If
                        If Mid(OmitRuns, 5, 1) = "1" Then
                            chbOmitRunRata5.Checked = True
                        Else
                            chbOmitRunRata5.Checked = False
                        End If
                        If Mid(OmitRuns, 6, 1) = "1" Then
                            chbOmitRunRata6.Checked = True
                        Else
                            chbOmitRunRata6.Checked = False
                        End If
                        If Mid(OmitRuns, 7, 1) = "1" Then
                            chbOmitRunRata7.Checked = True
                        Else
                            chbOmitRunRata7.Checked = False
                        End If
                        If Mid(OmitRuns, 8, 1) = "1" Then
                            chbOmitRunRata8.Checked = True
                        Else
                            chbOmitRunRata8.Checked = False
                        End If
                        If Mid(OmitRuns, 9, 1) = "1" Then
                            chbOmitRunRata9.Checked = True
                        Else
                            chbOmitRunRata9.Checked = False
                        End If
                        If Mid(OmitRuns, 10, 1) = "1" Then
                            chbOmitRunRata10.Checked = True
                        Else
                            chbOmitRunRata10.Checked = False
                        End If
                        If Mid(OmitRuns, 11, 1) = "1" Then
                            chbOmitRunRata11.Checked = True
                        Else
                            chbOmitRunRata11.Checked = False
                        End If
                        If Mid(OmitRuns, 12, 1) = "1" Then
                            chbOmitRunRata12.Checked = True
                        Else
                            chbOmitRunRata12.Checked = False
                        End If

                        txtRelativeAccuracy.Text = dr.Item("strRElativeAccuracyPercent")
                        If txtRelativeAccuracy.Text = "N/A" Then
                            txtRelativeAccuracy.Clear()
                        End If
                        Dim temp As String
                        If IsDBNull(dr.Item("strAccuracyChoice")) Then
                            temp = "N/A"
                        Else
                            temp = dr.Item("strAccuracyChoice")
                        End If
                        Select Case temp
                            Case "N/A"
                                txtRefMethodPercentRata.Text = ""
                                txtApplicableStandardPercentRata.Text = ""
                                cboDiluentRata.Text = ""
                                txtPart75Statement.Text = ""
                            Case "RefMethod"
                                txtRefMethodPercentRata.Text = dr.Item("strAccuracyRequiredPercent")
                            Case "AppStandard"
                                txtApplicableStandardPercentRata.Text = dr.Item("strAccuracyRequiredPercent")
                            Case "Diluent"
                                cboDiluentRata.Text = dr.Item("strAccuracyREquiredStatement")
                            Case "Part75"
                                txtPart75Statement.Text = dr.Item("strAccuracyRequiredPercent")
                        End Select
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadMemo(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            'TCMemorandum
            Select Case DocumentType
                Case "012"
                    TCMemorandum.TabPages.Remove(Me.TPMemoPTE)
                    TCMemorandum.TabPages.Remove(Me.TPMemoToFile)

                    SQL = "Select " & _
                    "strMemorandumField " & _
                    "from AIRBRANCH.ISMPREportMemo " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMemorandumField")) Then
                            txtMemorandumStandard.Clear()
                        Else
                            If dr.Item("strMemorandumField") = "N/A" Then
                                txtMemorandumStandard.Clear()
                            Else
                                txtMemorandumStandard.Text = dr.Item("strMemorandumField")
                            End If
                        End If
                        txtApplicableRegulationMemorandum.Text = ApplicableRequirment
                    End If
                Case "013"
                    TCMemorandum.TabPages.Remove(Me.TPMemoPTE)
                    TCMemorandum.TabPages.Remove(Me.TPMemoStandard)

                    SQL = "Select " & _
                    "strMemorandumField, strMonitorManufactureAndModel, " & _
                    "strMonitorSerialNumber " & _
                    "from AIRBRANCH.ISMPREportMemo " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMemorandumField")) Then
                            txtMemorandumToFile.Clear()
                        Else
                            If dr.Item("strMemorandumField") = "N/A" Then
                                txtMemorandumToFile.Clear()
                            Else
                                txtMemorandumToFile.Text = dr.Item("strMemorandumField")
                            End If
                        End If

                        If IsDBNull(dr.Item("strMonitorManufactureAndModel")) Then
                            txtModelMemorandumToFile.Clear()
                        Else
                            If dr.Item("strMonitorManufactureAndModel") = "N/A" Then
                                txtModelMemorandumToFile.Clear()
                            Else
                                txtModelMemorandumToFile.Text = dr.Item("strMonitorManufactureAndModel")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMonitorSerialNumber")) Then
                            txtSerialNumberMemorandumToFile.Clear()
                        Else
                            If dr.Item("strMonitorSerialNumber") = "N/A" Then
                                txtSerialNumberMemorandumToFile.Clear()
                            Else
                                txtSerialNumberMemorandumToFile.Text = dr.Item("strMonitorSerialNumber")
                            End If
                        End If
                        txtApplicableRegulationMemorandum.Text = ApplicableRequirment
                    End If
                Case "018"
                    TCMemorandum.TabPages.Remove(Me.TPMemoStandard)
                    TCMemorandum.TabPages.Remove(Me.TPMemoToFile)

                    SQL = "Select " & _
                    "strMemorandumField, " & _
                    "strMaxOperatingCapacity, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity, strOperatingCapacityUnit, " & _
                    "strAllowableEmissionRate1A, strAllowableEmissionRate1B, " & _
                    "strAllowableEmissionRate1C, strAllowableEmissionRateUnit1A, " & _
                    "strAllowableEmissionRateUnit1B, strAllowableEmissionRateUnit1C " & _
                    "from AIRBRANCH.ISMPREportMemo " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMemorandumField")) Then
                            txtMemorandumPTE.Clear()
                        Else
                            If dr.Item("strMemorandumField") = "N/A" Then
                                txtMemorandumPTE.Clear()
                            Else
                                txtMemorandumPTE.Text = dr.Item("strMemorandumField")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacity")) Then
                            txtMaximumExpectedOperatingCapacityMemorandumPTE.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMemorandumPTE.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMemorandumPTE.Text = dr.Item("strMaxOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity")) Then
                            txtOperatingCapacityMemorandumPTE.Clear()
                        Else
                            If dr.Item("strOperatingCapacity") = "N/A" Then
                                txtOperatingCapacityMemorandumPTE.Clear()
                            Else
                                txtOperatingCapacityMemorandumPTE.Text = dr.Item("strOperatingCapacity")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsMemorandumPTE.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsMemorandumPTE.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If

                        If IsDBNull(dr.Item("strAllowableEmissionRate1A")) Then
                            txtAllowableEmissionRate1MemorandumPTE.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1A") = "N/A" Then
                                txtAllowableEmissionRate1MemorandumPTE.Clear()
                            Else
                                txtAllowableEmissionRate1MemorandumPTE.Text = dr.Item("strAllowableEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1B")) Then
                            txtAllowableEmissionRate2MemorandumPTE.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1B") = "N/A" Then
                                txtAllowableEmissionRate2MemorandumPTE.Clear()
                            Else
                                txtAllowableEmissionRate2MemorandumPTE.Text = dr.Item("strAllowableEmissionRate1B")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1C")) Then
                            txtAllowableEmissionRate3MemorandumPTE.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1C") = "N/A" Then
                                txtAllowableEmissionRate3MemorandumPTE.Clear()
                            Else
                                txtAllowableEmissionRate3MemorandumPTE.Text = dr.Item("strAllowableEmissionRate1C")
                            End If
                        End If

                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1A")) Then
                            cboAllowableEmissionRateUnits1MemorandumPTE.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1MemorandumPTE.SelectedValue = dr.Item("strAllowableEmissionRateUnit1A")
                        End If

                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1B")) Then
                            cboAllowableEmissionRateUnits2MemorandumPTE.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits2MemorandumPTE.SelectedValue = dr.Item("strAllowableEmissionRateUnit1B")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit1C")) Then
                            cboAllowableEmissionRateUnits3MemorandumPTE.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits3MemorandumPTE.SelectedValue = dr.Item("strAllowableEmissionRateUnit1C")
                        End If
                        txtApplicableRegulationMemorandum.Text = ApplicableRequirment
                        txtControlEquipmentOperatingDataMemorandumPTE.Text = ControlEquipment
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadMethod9(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "016"
                    TCMethodNine.TabPages.Remove(Me.TPMethodNineMultiple)
                    TCMethodNine.TabPages.Remove(Me.TPMethodNineMultiple2)

                    SQL = "Select " & _
                    "strMaxOperatingCapacity1A, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity1A, strOperatingCapacityUnit, " & _
                    "strAllowableEmissionRate1A, strAllowableEmissionRateUnit, " & _
                    "strOpacityTestDuration, " & _
                    "strOpacityPointA, strOpacityStandard  " & _
                    "from AIRBRANCH.ISMPREportOpacity " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity1A")) Then
                            txtMaximumExpectedOperatingCapacityMethod9Single.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity1A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod9Single.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod9Single.Text = dr.Item("strMaxOperatingCapacity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsMethod9Single.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsMethod9Single.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity1A")) Then
                            txtOperatingCapacityMethod9Single.Clear()
                        Else
                            If dr.Item("strOperatingCapacity1A") = "N/A" Then
                                txtOperatingCapacityMethod9Single.Clear()
                            Else
                                txtOperatingCapacityMethod9Single.Text = dr.Item("strOperatingCapacity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsMethod9Single.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsMethod9Single.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1A")) Then
                            txtAllowableEmissionRate1Method9Single.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1A") = "N/A" Then
                                txtAllowableEmissionRate1Method9Single.Clear()
                            Else
                                txtAllowableEmissionRate1Method9Single.Text = dr.Item("strAllowableEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit")) Then
                            cboAllowableEmissionRateUnits1Method9Single.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnits1Method9Single.SelectedValue = dr.Item("strAllowableEmissionRateUnit")
                        End If
                        txtApplicableRegulationMethod9Single.Text = ApplicableRequirment
                        txtControlEquipmentOperatingDataMethod9Single.Text = ControlEquipment
                        txtOtherInformationMethod9.Text = ReportComments

                        If IsDBNull(dr.Item("strOpacityTestDuration")) Then
                            txtTestDurationMethod9Single.Clear()
                        Else
                            If dr.Item("strOpacityTestDuration") = "N/A" Then
                                txtTestDurationMethod9Single.Clear()
                            Else
                                txtTestDurationMethod9Single.Text = dr.Item("strOpacityTestDuration")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityPointA")) Then
                            txtOpacityMethod9Single.Clear()
                        Else
                            If dr.Item("strOpacityPointA") = "N/A" Then
                                txtOpacityMethod9Single.Clear()
                            Else
                                txtOpacityMethod9Single.Text = dr.Item("strOpacityPointA")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityStandard")) Then
                            rdbMethod9Average30.Checked = False
                            rdbMethod9HighestAvg.Checked = True
                        Else
                            If dr.Item("strOpacityStandard") = "6" Then
                                rdbMethod9HighestAvg.Checked = True
                            Else
                                rdbMethod9Average30.Checked = True
                            End If
                        End If
                    End If
                Case "014"
                    TCMethodNine.TabPages.Remove(Me.TPMethodNineSingle)

                    SQL = "Select " & _
                    "strMaxOperatingCapacity1A, strMaxOperatingCapacity2A, " & _
                    "strMaxOperatingCapacity3A, strMaxOperatingCapacity4A, " & _
                    "strMaxOperatingCapacity5A, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity1A, strOperatingCapacity2A, " & _
                    "strOperatingCapacity3A, strOperatingCapacity4A, " & _
                    "strOperatingCapacity5A, strOperatingCapacityUnit, " & _
                    "strAllowableEmissionRate1A, strAllowableEmissionRate2A, " & _
                    "strAllowableEmissionRate3A, strAllowableEmissionRate4A, " & _
                    "strAllowableEmissionRate5A, strAllowableEmissionRateUnit, " & _
                    "strOpacityPointA, strOpacityPointB, " & _
                    "strOpacityPointC, strOpacityPointD, " & _
                    "strOpacityPointE, strEquipmentItem1, " & _
                    "strEquipmentItem2, strEquipmentItem3, " & _
                    "strEquipmentItem4, strEquipmentItem5, " & _
                    "strOpacityStandard " & _
                    "from AIRBRANCH.ISMPREportOpacity " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity1A")) Then
                            txtMaximumExpectedOperatingCapacityMethod9Multi1.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity1A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod9Multi1.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod9Multi1.Text = dr.Item("strMaxOperatingCapacity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacity2A")) Then
                            txtMaximumExpectedOperatingCapacityMethod9Multi2.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity2A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod9Multi2.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod9Multi2.Text = dr.Item("strMaxOperatingCapacity2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacity3A")) Then
                            txtMaximumExpectedOperatingCapacityMethod9Multi3.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity3A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod9Multi3.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod9Multi3.Text = dr.Item("strMaxOperatingCapacity3A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacity4A")) Then
                            txtMaximumExpectedOperatingCapacityMethod9Multi4.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity4A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod9Multi4.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod9Multi4.Text = dr.Item("strMaxOperatingCapacity4A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacity5A")) Then
                            txtMaximumExpectedOperatingCapacityMethod9Multi5.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity5A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod9Multi5.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod9Multi5.Text = dr.Item("strMaxOperatingCapacity5A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity1A")) Then
                            txtOperatingCapacityMethod9Multi1.Clear()
                        Else
                            If dr.Item("strOperatingCapacity1A") = "N/A" Then
                                txtOperatingCapacityMethod9Multi1.Clear()
                            Else
                                txtOperatingCapacityMethod9Multi1.Text = dr.Item("strOperatingCapacity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity2A")) Then
                            txtOperatingCapacityMethod9Multi2.Clear()
                        Else
                            If dr.Item("strOperatingCapacity2A") = "N/A" Then
                                txtOperatingCapacityMethod9Multi2.Clear()
                            Else
                                txtOperatingCapacityMethod9Multi2.Text = dr.Item("strOperatingCapacity2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity3A")) Then
                            txtOperatingCapacityMethod9Multi3.Clear()
                        Else
                            If dr.Item("strOperatingCapacity3A") = "N/A" Then
                                txtOperatingCapacityMethod9Multi3.Clear()
                            Else
                                txtOperatingCapacityMethod9Multi3.Text = dr.Item("strOperatingCapacity3A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity4A")) Then
                            txtOperatingCapacityMethod9Multi4.Clear()
                        Else
                            If dr.Item("strOperatingCapacity4A") = "N/A" Then
                                txtOperatingCapacityMethod9Multi4.Clear()
                            Else
                                txtOperatingCapacityMethod9Multi4.Text = dr.Item("strOperatingCapacity4A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity5A")) Then
                            txtOperatingCapacityMethod9Multi5.Clear()
                        Else
                            If dr.Item("strOperatingCapacity5A") = "N/A" Then
                                txtOperatingCapacityMethod9Multi5.Clear()
                            Else
                                txtOperatingCapacityMethod9Multi5.Text = dr.Item("strOperatingCapacity5A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsMethod9Multi.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsMethod9Multi.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate1A")) Then
                            txtAllowableEmissionRate1Method9Multi.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate1A") = "N/A" Then
                                txtAllowableEmissionRate1Method9Multi.Clear()
                            Else
                                txtAllowableEmissionRate1Method9Multi.Text = dr.Item("strAllowableEmissionRate1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate2A")) Then
                            txtAllowableEmissionRate2Method9Multi.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate2A") = "N/A" Then
                                txtAllowableEmissionRate2Method9Multi.Clear()
                            Else
                                txtAllowableEmissionRate2Method9Multi.Text = dr.Item("strAllowableEmissionRate2A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate3A")) Then
                            txtAllowableEmissionRate3Method9Multi.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate3A") = "N/A" Then
                                txtAllowableEmissionRate3Method9Multi.Clear()
                            Else
                                txtAllowableEmissionRate3Method9Multi.Text = dr.Item("strAllowableEmissionRate3A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate4A")) Then
                            txtAllowableEmissionRate4Method9Multi.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate4A") = "N/A" Then
                                txtAllowableEmissionRate4Method9Multi.Clear()
                            Else
                                txtAllowableEmissionRate4Method9Multi.Text = dr.Item("strAllowableEmissionRate4A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRate5A")) Then
                            txtAllowableEmissionRate5Method9Multi.Clear()
                        Else
                            If dr.Item("strAllowableEmissionRate5A") = "N/A" Then
                                txtAllowableEmissionRate5Method9Multi.Clear()
                            Else
                                txtAllowableEmissionRate5Method9Multi.Text = dr.Item("strAllowableEmissionRate5A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAllowableEmissionRateUnit")) Then
                            cboAllowableEmissionRateUnitsMethod9Multi.SelectedValue = 0
                        Else
                            cboAllowableEmissionRateUnitsMethod9Multi.SelectedValue = dr.Item("strAllowableEmissionRateUnit")
                        End If
                        If IsDBNull(dr.Item("strOpacityPointA")) Then
                            txt6minuteAvg1AMethod9Multi.Clear()
                        Else
                            If dr.Item("strOpacityPointA") = "N/A" Then
                                txt6minuteAvg1AMethod9Multi.Clear()
                            Else
                                txt6minuteAvg1AMethod9Multi.Text = dr.Item("strOpacityPointA")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityPointB")) Then
                            txt6minuteAvg1BMethod9Multi.Clear()
                        Else
                            If dr.Item("strOpacityPointB") = "N/A" Then
                                txt6minuteAvg1BMethod9Multi.Clear()
                            Else
                                txt6minuteAvg1BMethod9Multi.Text = dr.Item("strOpacityPointB")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityPointC")) Then
                            txt6minuteAvg1CMethod9Multi.Clear()
                        Else
                            If dr.Item("strOpacityPointC") = "N/A" Then
                                txt6minuteAvg1CMethod9Multi.Clear()
                            Else
                                txt6minuteAvg1CMethod9Multi.Text = dr.Item("strOpacityPointC")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityPointD")) Then
                            txt6minuteAvg1DMethod9Multi.Clear()
                        Else
                            If dr.Item("strOpacityPointD") = "N/A" Then
                                txt6minuteAvg1DMethod9Multi.Clear()
                            Else
                                txt6minuteAvg1DMethod9Multi.Text = dr.Item("strOpacityPointD")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityPointE")) Then
                            txt6minuteAvg1EMethod9Multi.Clear()
                        Else
                            If dr.Item("strOpacityPointE") = "N/A" Then
                                txt6minuteAvg1EMethod9Multi.Clear()
                            Else
                                txt6minuteAvg1EMethod9Multi.Text = dr.Item("strOpacityPointE")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEquipmentItem1")) Then
                            txtEquipmentItem1AMethod9Multi.Clear()
                        Else
                            If dr.Item("strEquipmentItem1") = "N/A" Then
                                txtEquipmentItem1AMethod9Multi.Clear()
                            Else
                                txtEquipmentItem1AMethod9Multi.Text = dr.Item("strEquipmentItem1")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEquipmentItem2")) Then
                            txtEquipmentItem1BMethod9Multi.Clear()
                        Else
                            If dr.Item("strEquipmentItem2") = "N/A" Then
                                txtEquipmentItem1BMethod9Multi.Clear()
                            Else
                                txtEquipmentItem1BMethod9Multi.Text = dr.Item("strEquipmentItem2")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEquipmentItem3")) Then
                            txtEquipmentItem1CMethod9Multi.Clear()
                        Else
                            If dr.Item("strEquipmentItem3") = "N/A" Then
                                txtEquipmentItem1CMethod9Multi.Clear()
                            Else
                                txtEquipmentItem1CMethod9Multi.Text = dr.Item("strEquipmentItem3")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEquipmentItem4")) Then
                            txtEquipmentItem1DMethod9Multi.Clear()
                        Else
                            If dr.Item("strEquipmentItem4") = "N/A" Then
                                txtEquipmentItem1DMethod9Multi.Clear()
                            Else
                                txtEquipmentItem1DMethod9Multi.Text = dr.Item("strEquipmentItem4")
                            End If
                        End If
                        If IsDBNull(dr.Item("strEquipmentItem5")) Then
                            txtEquipmentItem1EMethod9Multi.Clear()
                        Else
                            If dr.Item("strEquipmentItem5") = "N/A" Then
                                txtEquipmentItem1EMethod9Multi.Clear()
                            Else
                                txtEquipmentItem1EMethod9Multi.Text = dr.Item("strEquipmentItem5")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityStandard")) Then
                            rdbMethod9Average30.Checked = False
                            rdbMethod9HighestAvg.Checked = True
                        Else
                            If dr.Item("strOpacityStandard") = "6" Then
                                rdbMethod9MultiHighestAvg.Checked = True
                            Else
                                rdbMethod9MultiAverage30.Checked = True
                            End If
                        End If

                        txtApplicableRegulationMethod9Multi.Text = ApplicableRequirment
                        txtControlEquipmentOperatingDataMethod9Multi.Text = ControlEquipment
                        txtOtherInformationMethod9.Text = ReportComments
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadMethod22(ByVal RefNum As String)
        Try
            TCDocumentTypes.TabPages.Remove(TPOneStack)
            TCDocumentTypes.TabPages.Remove(TPLoadingRack)
            TCDocumentTypes.TabPages.Remove(TPPondTreatment)
            TCDocumentTypes.TabPages.Remove(TPGasConcentration)
            TCDocumentTypes.TabPages.Remove(TPFlare)
            TCDocumentTypes.TabPages.Remove(TPMethodNine)
            TCDocumentTypes.TabPages.Remove(TPMemorandum)
            TCDocumentTypes.TabPages.Remove(TPRata)
            TCDocumentTypes.TabPages.Remove(TPTwoStack)
            TCDocumentTypes.TabPages.Remove(TPSSCPWork)

            Select Case DocumentType
                Case "015"
                    SQL = "Select " & _
                    "strMaxOperatingCapacity1A, strMaxOperatingCapacityUnit, " & _
                    "strOperatingCapacity1A, strOperatingCapacityUnit, " & _
                     "STRALLOWABLEEMISSIONRATE22, " & _
                    "strOpacityTestDuration, strAccumulatedEmissionTime " & _
                    "from AIRBRANCH.ISMPREportOpacity " & _
                    "where strReferenceNumber = '" & RefNum & "'"

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("strMaxOperatingCapacity1A")) Then
                            txtMaximumExpectedOperatingCapacityMethod22.Clear()
                        Else
                            If dr.Item("strMaxOperatingCapacity1A") = "N/A" Then
                                txtMaximumExpectedOperatingCapacityMethod22.Clear()
                            Else
                                txtMaximumExpectedOperatingCapacityMethod22.Text = dr.Item("strMaxOperatingCapacity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strMaxOperatingCapacityUnit")) Then
                            cboMaximumExpectedOperatingCapacityUnitsMethod22.SelectedValue = 0
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsMethod22.SelectedValue = dr.Item("strMaxOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacity1A")) Then
                            txtOperatingCapacityMethod22.Clear()
                        Else
                            If dr.Item("strOperatingCapacity1A") = "N/A" Then
                                txtOperatingCapacityMethod22.Clear()
                            Else
                                txtOperatingCapacityMethod22.Text = dr.Item("strOperatingCapacity1A")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOperatingCapacityUnit")) Then
                            cboOperatingCapacityUnitsMethod22.SelectedValue = 0
                        Else
                            cboOperatingCapacityUnitsMethod22.SelectedValue = dr.Item("strOperatingCapacityUnit")
                        End If
                        If IsDBNull(dr.Item("STRALLOWABLEEMISSIONRATE22")) Then
                            txtAllowableEmissionRateMethod22.Clear()
                        Else
                            If dr.Item("STRALLOWABLEEMISSIONRATE22") = "N/A" Then
                                txtAllowableEmissionRateMethod22.Clear()
                            Else
                                txtAllowableEmissionRateMethod22.Text = dr.Item("STRALLOWABLEEMISSIONRATE22")
                            End If
                        End If
                        If IsDBNull(dr.Item("strOpacityTestDuration")) Then
                            txtTestDurationMethod22.Clear()
                        Else
                            If dr.Item("strOpacityTestDuration") = "N/A" Then
                                txtTestDurationMethod22.Clear()
                            Else
                                txtTestDurationMethod22.Text = dr.Item("strOpacityTestDuration")
                            End If
                        End If
                        If IsDBNull(dr.Item("strAccumulatedEmissionTime")) Then
                            txtAccumulatedEmissionMethod22.Clear()
                        Else
                            If dr.Item("strAccumulatedEmissionTime") = "N/A" Then
                                txtAccumulatedEmissionMethod22.Clear()
                            Else
                                txtAccumulatedEmissionMethod22.Text = dr.Item("strAccumulatedEmissionTime")
                            End If
                        End If
                        txtApplicableRegulationMethod22.Text = ApplicableRequirment
                        txtOtherInformationMethod22.Text = ReportComments
                    End If
                Case Else

            End Select
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadUserPermissions()
        Try
            If AccountFormAccess(69, 1) = "1" Or AccountFormAccess(69, 2) = "1" Or AccountFormAccess(69, 3) = "1" Or AccountFormAccess(69, 4) = "1" Then
            Else
                tsbSave.Visible = False
                mmiSave.Visible = False
                btnSaveSSCPData.Visible = False
                tsbPrePopulate.Visible = False
                tsbTestLogLink.Visible = False
                tsbMemo.Visible = False
                tsbConfidentialData.Visible = False
                mmiOpenTestLogNotification.Visible = False
                mmiOpenExcelFile.Visible = False
                tsbDelete.Visible = False
                If txtEnforcementNumber.Text = "" Or txtEnforcementNumber.Text = "N/A" Then
                    btnEnforcementProcess.Visible = False
                End If
                If txtCompleteDate.Text = "" Then
                    TCDocumentTypes.Visible = False
                End If
            End If

            If AccountFormAccess(69, 3) = "1" Then
                mmiPrintNonConf.Visible = True
                mmiPrePopulate.Visible = True
                mmiDefaultCompliance.Visible = True
            Else
                mmiPrintNonConf.Visible = False
                mmiPrePopulate.Visible = False
                mmiDefaultCompliance.Visible = False
            End If

            If AccountFormAccess(69, 3) = "1" And ReportStatus <> "True" Then
                txtSourceTested.ReadOnly = False
                cboPollutantDetermined.Enabled = True
                cboMethodDetermined.Enabled = True
                cboReportType.Enabled = True
                cboTestingFirm.Enabled = True
                cboComplianceStatus.Enabled = True
                cboReviewingEngineer.Enabled = True
                cboWitnessingEngineer.Enabled = True
                cboISMPUnit.Enabled = True
                clbWitnessingEngineers.Enabled = True
                DTPTestDateStart.Enabled = True
                DTPTestDateComplete.Enabled = True
                cboComplianceManager.Enabled = True
                cboccBox.Enabled = True

                Select Case DocumentType
                    Case "001"
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False
                        txtRunNumOneStackTwoRun1A.ReadOnly = False
                        txtRunNumOneStackTwoRun1B.ReadOnly = False
                        txtGasTempOneStackTwoRun1A.ReadOnly = False
                        txtGasTempOneStackTwoRun1B.ReadOnly = False
                        txtGasMoistOneStackTwoRun1A.ReadOnly = False
                        txtGasMoistOneStackTwoRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackTwoRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackTwoRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackTwoRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackTwoRun1B.ReadOnly = False
                        txtPollConcOneStackTwoRun1A.ReadOnly = False
                        txtPollConcOneStackTwoRun1B.ReadOnly = False
                        cboPollConUnitOneStackTwoRun.Enabled = True
                        txtPollConcAvgOneStackTwoRun.ReadOnly = False
                        txtEmissRateOneStackTwoRun1A.ReadOnly = False
                        txtEmissRateOneStackTwoRun1B.ReadOnly = False
                        cboEmissRateUnitOneStackTwoRun.Enabled = True
                        txtEmissRateAvgOneStackTwoRun.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False
                        txtRunNumOneStackThreeRun1A.ReadOnly = False
                        txtRunNumOneStackThreeRun1B.ReadOnly = False
                        txtRunNumOneStackThreeRun1C.ReadOnly = False
                        txtGasTempOneStackThreeRun1A.ReadOnly = False
                        txtGasTempOneStackThreeRun1B.ReadOnly = False
                        txtGasTempOneStackThreeRun1C.ReadOnly = False
                        txtGasMoistOneStackThreeRun1A.ReadOnly = False
                        txtGasMoistOneStackThreeRun1B.ReadOnly = False
                        txtGasMoistOneStackThreeRun1C.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1C.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1C.ReadOnly = False
                        txtPollConcOneStackThreeRun1A.ReadOnly = False
                        txtPollConcOneStackThreeRun1B.ReadOnly = False
                        txtPollConcOneStackThreeRun1C.ReadOnly = False
                        cboPollConUnitOneStackThreeRun.Enabled = True
                        txtPollConcAvgOneStackThreeRun.ReadOnly = False
                        txtEmissRateOneStackThreeRun1A.ReadOnly = False
                        txtEmissRateOneStackThreeRun1B.ReadOnly = False
                        txtEmissRateOneStackThreeRun1C.ReadOnly = False
                        cboEmissRateUnitOneStackThreeRun.Enabled = True
                        txtEmissRateAvgOneStackThreeRun.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False
                        txtRunNumOneStackFourRun1A.ReadOnly = False
                        txtRunNumOneStackFourRun1B.ReadOnly = False
                        txtRunNumOneStackFourRun1C.ReadOnly = False
                        txtRunNumOneStackFourRun1D.ReadOnly = False
                        txtGasTempOneStackFourRun1A.ReadOnly = False
                        txtGasTempOneStackFourRun1B.ReadOnly = False
                        txtGasTempOneStackFourRun1C.ReadOnly = False
                        txtGasTempOneStackFourRun1D.ReadOnly = False
                        txtGasMoistOneStackFourRun1A.ReadOnly = False
                        txtGasMoistOneStackFourRun1B.ReadOnly = False
                        txtGasMoistOneStackFourRun1C.ReadOnly = False
                        txtGasMoistOneStackFourRun1D.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1C.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1D.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1C.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1D.ReadOnly = False
                        txtPollConcOneStackFourRun1A.ReadOnly = False
                        txtPollConcOneStackFourRun1B.ReadOnly = False
                        txtPollConcOneStackFourRun1C.ReadOnly = False
                        txtPollConcOneStackFourRun1D.ReadOnly = False
                        cboPollConUnitOneStackFourRun.Enabled = True
                        txtPollConcAvgOneStackFourRun.ReadOnly = False
                        txtEmissRateOneStackFourRun1A.ReadOnly = False
                        txtEmissRateOneStackFourRun1B.ReadOnly = False
                        txtEmissRateOneStackFourRun1C.ReadOnly = False
                        txtEmissRateOneStackFourRun1D.ReadOnly = False
                        cboEmissRateUnitOneStackFourRun.Enabled = True
                        txtEmissRateAvgOneStackFourRun.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = True
                        txtOperatingCapacityTwoStack.ReadOnly = False
                        cboOperatingCapacityUnitsTwoStack.Enabled = True
                        txtAllowableEmissionRate1TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = True
                        txtAllowableEmissionRate2TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = True
                        txtAllowableEmissionRate3TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = True
                        txtApplicableRegulationTwoStack.ReadOnly = False
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = False
                        txtOtherInformationTwoStack.ReadOnly = False
                        txtStackOneNameTwoStackStandard.ReadOnly = False
                        txtStackTwoNameTwoStackStandard.ReadOnly = False
                        txtRunNumTwoStackStandard1A.ReadOnly = False
                        txtRunNumTwoStackStandard1B.ReadOnly = False
                        txtRunNumTwoStackStandard1C.ReadOnly = False
                        txtRunNumTwoStackStandard2A.ReadOnly = False
                        txtRunNumTwoStackStandard2B.ReadOnly = False
                        txtRunNumTwoStackStandard2C.ReadOnly = False
                        txtGasTempTwoStackStandard1A.ReadOnly = False
                        txtGasTempTwoStackStandard1B.ReadOnly = False
                        txtGasTempTwoStackStandard1C.ReadOnly = False
                        txtGasTempTwoStackStandard2A.ReadOnly = False
                        txtGasTempTwoStackStandard2B.ReadOnly = False
                        txtGasTempTwoStackStandard2C.ReadOnly = False
                        txtGasMoistTwoStackStandard1A.ReadOnly = False
                        txtGasMoistTwoStackStandard1B.ReadOnly = False
                        txtGasMoistTwoStackStandard1C.ReadOnly = False
                        txtGasMoistTwoStackStandard2A.ReadOnly = False
                        txtGasMoistTwoStackStandard2B.ReadOnly = False
                        txtGasMoistTwoStackStandard2C.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1A.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1B.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1C.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2A.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2B.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2C.ReadOnly = False
                        txtPollConcTwoStackStandard1A.ReadOnly = False
                        txtPollConcTwoStackStandard1B.ReadOnly = False
                        txtPollConcTwoStackStandard1C.ReadOnly = False
                        txtPollConcTwoStackStandard2A.ReadOnly = False
                        txtPollConcTwoStackStandard2B.ReadOnly = False
                        txtPollConcTwoStackStandard2C.ReadOnly = False
                        cboPollConUnitTwoStackStandard.Enabled = True
                        txtPollConcAvgTwoStackStandard1.ReadOnly = False
                        txtPollConcAvgTwoStackStandard2.ReadOnly = False
                        txtEmissRateTwoStackStandard1A.ReadOnly = False
                        txtEmissRateTwoStackStandard1B.ReadOnly = False
                        txtEmissRateTwoStackStandard1C.ReadOnly = False
                        txtEmissRateTwoStackStandard2A.ReadOnly = False
                        txtEmissRateTwoStackStandard2B.ReadOnly = False
                        txtEmissRateTwoStackStandard2C.ReadOnly = False
                        cboEmissRateUnitTwoStackStandard.Enabled = True
                        txtEmissRateAvgTwoStackStandard1.ReadOnly = False
                        txtEmissRateAvgTwoStackStandard2.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard1.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard2.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard3.ReadOnly = False
                        txtEmissRateTotalAvgTwoStackStandard.ReadOnly = False
                        txtPercentAllowableTwoStack.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = True
                        txtOperatingCapacityTwoStack.ReadOnly = False
                        cboOperatingCapacityUnitsTwoStack.Enabled = True
                        txtAllowableEmissionRate1TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = True
                        txtAllowableEmissionRate2TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = True
                        txtAllowableEmissionRate3TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = True
                        txtApplicableRegulationTwoStack.ReadOnly = False
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = False
                        txtOtherInformationTwoStack.ReadOnly = False
                        txtStackOneNameTwoStackDRE.ReadOnly = False
                        txtStackTwoNameTwoStackDRE.ReadOnly = False
                        txtRunNumTwoStackDRE1A.ReadOnly = False
                        txtRunNumTwoStackDRE1B.ReadOnly = False
                        txtRunNumTwoStackDRE1C.ReadOnly = False
                        txtRunNumTwoStackDRE2A.ReadOnly = False
                        txtRunNumTwoStackDRE2B.ReadOnly = False
                        txtRunNumTwoStackDRE2C.ReadOnly = False
                        txtGasTempTwoStackDRE1A.ReadOnly = False
                        txtGasTempTwoStackDRE1B.ReadOnly = False
                        txtGasTempTwoStackDRE1C.ReadOnly = False
                        txtGasTempTwoStackDRE2A.ReadOnly = False
                        txtGasTempTwoStackDRE2B.ReadOnly = False
                        txtGasTempTwoStackDRE2C.ReadOnly = False
                        txtGasMoistTwoStackDRE1A.ReadOnly = False
                        txtGasMoistTwoStackDRE1B.ReadOnly = False
                        txtGasMoistTwoStackDRE1C.ReadOnly = False
                        txtGasMoistTwoStackDRE2A.ReadOnly = False
                        txtGasMoistTwoStackDRE2B.ReadOnly = False
                        txtGasMoistTwoStackDRE2C.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1A.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1B.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1C.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2A.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2B.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2C.ReadOnly = False
                        txtPollConcTwoStackDRE1A.ReadOnly = False
                        txtPollConcTwoStackDRE1B.ReadOnly = False
                        txtPollConcTwoStackDRE1C.ReadOnly = False
                        txtPollConcTwoStackDRE2A.ReadOnly = False
                        txtPollConcTwoStackDRE2B.ReadOnly = False
                        txtPollConcTwoStackDRE2C.ReadOnly = False
                        cboPollConUnitTwoStackDRE.Enabled = True
                        txtPollConcAvgTwoStackDRE1.ReadOnly = False
                        txtPollConcAvgTwoStackDRE2.ReadOnly = False
                        txtEmissRateTwoStackDRE1A.ReadOnly = False
                        txtEmissRateTwoStackDRE1B.ReadOnly = False
                        txtEmissRateTwoStackDRE1C.ReadOnly = False
                        txtEmissRateTwoStackDRE2A.ReadOnly = False
                        txtEmissRateTwoStackDRE2B.ReadOnly = False
                        txtEmissRateTwoStackDRE2C.ReadOnly = False
                        cboEmissRateUnitTwoStackDRE.Enabled = True
                        txtEmissRateAvgTwoStackDRE1.ReadOnly = False
                        txtEmissRateAvgTwoStackDRE2.ReadOnly = False
                        txtDestructionEfficiencyTwoStackDRE.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityLoadingRack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Enabled = True
                        txtOperatingCapacityLoadingRack.ReadOnly = False
                        cboOperatingCapacityUnitsLoadingRack.Enabled = True
                        txtAllowableEmissionRate1LoadingRack.ReadOnly = False
                        txtAllowableEmissionRate2LoadingRack.ReadOnly = False
                        txtAllowableEmissionRate3LoadingRack.ReadOnly = False
                        cboAllowableEmissionRateUnits1LoadingRack.Enabled = True
                        cboAllowableEmissionRateUnits2LoadingRack.Enabled = True
                        cboAllowableEmissionRateUnits3LoadingRack.Enabled = True
                        txtApplicableRegulationLoadingRack.ReadOnly = False
                        txtControlEquipmentOperatingDataLoadingRack.ReadOnly = False
                        txtTestDurationLoadingRack.ReadOnly = False
                        cboTestDurationUnitsLoadingRack.Enabled = True
                        txtPollConcINLoadingRack.ReadOnly = False
                        cboPollConUnitINLoadingRack.Enabled = True
                        txtPollConcOUTLoadingRack.ReadOnly = False
                        cboPollConUnitOUTLoadingRack.Enabled = True
                        txtDestructionEfficiencyLoadingRack.ReadOnly = False
                        txtEmissRateLoadingRack.ReadOnly = False
                        cboEmissRateUnitLoadingRack.Enabled = True
                        txtOtherInformationLoadingRack.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityPond.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsPond.Enabled = True
                        txtOperatingCapacityPond.ReadOnly = False
                        cboOperatingCapacityUnitsPond.Enabled = True
                        txtAllowableEmissionRate1Pond.ReadOnly = False
                        txtAllowableEmissionRate2Pond.ReadOnly = False
                        txtAllowableEmissionRate3Pond.ReadOnly = False
                        cboAllowableEmissionRateUnits1Pond.Enabled = True
                        cboAllowableEmissionRateUnits2Pond.Enabled = True
                        cboAllowableEmissionRateUnits3Pond.Enabled = True
                        txtApplicableRegulationPond.ReadOnly = False
                        txtControlEquipmentOperatingDataPond.ReadOnly = False
                        txtRunNumPond1A.ReadOnly = False
                        txtRunNumPond1B.ReadOnly = False
                        txtRunNumPond1C.ReadOnly = False
                        txtPollConcPond1A.ReadOnly = False
                        txtPollConcPond1B.ReadOnly = False
                        txtPollConcPond1C.ReadOnly = False
                        cboPollConUnitPond.Enabled = True
                        txtPollConcAvgPond.ReadOnly = False
                        txtTreatmentRatePond1A.ReadOnly = False
                        txtTreatmentRatePond1B.ReadOnly = False
                        txtTreatmentRatePond1C.ReadOnly = False
                        cboTreatmentRateUnitPond.Enabled = True
                        txtTreatmentRateAvgPond.ReadOnly = False
                        txtDestructionEfficancyPond.ReadOnly = False
                        txtOtherInformationPond.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityGas.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsGas.Enabled = True
                        txtOperatingCapacityGas.ReadOnly = False
                        cboOperatingCapacityUnitsGas.Enabled = True
                        txtAllowableEmissionRate1Gas.ReadOnly = False
                        txtAllowableEmissionRate2Gas.ReadOnly = False
                        txtAllowableEmissionRate3Gas.ReadOnly = False
                        cboAllowableEmissionRateUnits1Gas.Enabled = True
                        cboAllowableEmissionRateUnits2Gas.Enabled = True
                        cboAllowableEmissionRateUnits3Gas.Enabled = True
                        txtApplicableRegulationGas.ReadOnly = False
                        txtControlEquipmentOperatingDataGas.ReadOnly = False
                        txtRunNumGas1A.ReadOnly = False
                        txtRunNumGas1B.ReadOnly = False
                        txtRunNumGas1C.ReadOnly = False
                        txtPollConcGas1A.ReadOnly = False
                        txtPollConcGas1B.ReadOnly = False
                        txtPollConcGas1C.ReadOnly = False
                        cboPollConUnitGas.Enabled = True
                        txtPollConcAvgGas.ReadOnly = False
                        txtEmissRateGas1A.ReadOnly = False
                        txtEmissRateGas1B.ReadOnly = False
                        txtEmissRateGas1C.ReadOnly = False
                        cboEmissRateUnitGas.Enabled = True
                        txtEmissRateAvgGas.ReadOnly = False
                        txtPercentAllowableGas.ReadOnly = False
                        txtOtherInformationGas.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityFlare.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsFlare.Enabled = True
                        txtOperatingCapacityFlare.ReadOnly = False
                        cboOperatingCapacityUnitsFlare.Enabled = True
                        txtVelocityFlare.ReadOnly = False
                        txtHeatContentFlare.ReadOnly = False
                        txtApplicableRegulationFlare.ReadOnly = False
                        txtMonitoringDataFlare.ReadOnly = False
                        txtHeatingValue1AFlare.ReadOnly = False
                        txtHeatingValue1BFlare.ReadOnly = False
                        txtHeatingValue1CFlare.ReadOnly = False
                        cboHeatingValueUnits.Enabled = True
                        txtHeatingValuesAvgFlare.ReadOnly = False
                        txtVelocity1AFlare.ReadOnly = False
                        txtVelocity1BFlare.ReadOnly = False
                        txtVelocity1CFlare.ReadOnly = False
                        cboVelocityUnitsFlare.Enabled = True
                        txtVelocityAvgFlare.ReadOnly = False
                        txtPercentAllowableFlare.ReadOnly = False
                        txtOtherInformationFlare.ReadOnly = False
                        txtApplicableStandardRata.ReadOnly = False
                        cboDilutentMonitoredRata.Enabled = True
                        txtApplicableRegulationRata.ReadOnly = False
                        txtRefMethodRata1.ReadOnly = False
                        txtRefMethodRata2.ReadOnly = False
                        txtRefMethodRata3.ReadOnly = False
                        txtRefMethodRata4.ReadOnly = False
                        txtRefMethodRata5.ReadOnly = False
                        txtRefMethodRata6.ReadOnly = False
                        txtRefMethodRata7.ReadOnly = False
                        txtRefMethodRata8.ReadOnly = False
                        txtRefMethodRata9.ReadOnly = False
                        txtRefMethodRata10.ReadOnly = False
                        txtRefMethodRata11.ReadOnly = False
                        txtRefMethodRata12.ReadOnly = False
                        txtCMSRata1.ReadOnly = False
                        txtCMSRata2.ReadOnly = False
                        txtCMSRata3.ReadOnly = False
                        txtCMSRata4.ReadOnly = False
                        txtCMSRata5.ReadOnly = False
                        txtCMSRata6.ReadOnly = False
                        txtCMSRata7.ReadOnly = False
                        txtCMSRata8.ReadOnly = False
                        txtCMSRata9.ReadOnly = False
                        txtCMSRata10.ReadOnly = False
                        txtCMSRata11.ReadOnly = False
                        txtCMSRata12.ReadOnly = False
                        chbOmitRunRata1.Enabled = True
                        chbOmitRunRata2.Enabled = True
                        chbOmitRunRata3.Enabled = True
                        chbOmitRunRata4.Enabled = True
                        chbOmitRunRata5.Enabled = True
                        chbOmitRunRata6.Enabled = True
                        chbOmitRunRata7.Enabled = True
                        chbOmitRunRata8.Enabled = True
                        chbOmitRunRata9.Enabled = True
                        chbOmitRunRata10.Enabled = True
                        chbOmitRunRata11.Enabled = True
                        chbOmitRunRata12.Enabled = True
                        cboUnitsRata.Enabled = True
                        txtRelativeAccuracy.ReadOnly = False
                        txtRefMethodPercentRata.ReadOnly = False
                        txtApplicableStandardPercentRata.ReadOnly = False
                        txtPart75Statement.ReadOnly = False
                        cboDiluentRata.Enabled = True
                        txtOtherInformationRata.ReadOnly = False
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtMemorandumStandard.ReadOnly = False
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtModelMemorandumToFile.ReadOnly = False
                        txtSerialNumberMemorandumToFile.ReadOnly = False
                        txtMemorandumToFile.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi1.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi2.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi3.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi4.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi5.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Enabled = True
                        txtOperatingCapacityMethod9Multi1.ReadOnly = False
                        txtOperatingCapacityMethod9Multi2.ReadOnly = False
                        txtOperatingCapacityMethod9Multi3.ReadOnly = False
                        txtOperatingCapacityMethod9Multi4.ReadOnly = False
                        txtOperatingCapacityMethod9Multi5.ReadOnly = False
                        cboOperatingCapacityUnitsMethod9Multi.Enabled = True
                        txtAllowableEmissionRate1Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate2Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate3Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate4Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate5Method9Multi.ReadOnly = False
                        cboAllowableEmissionRateUnitsMethod9Multi.Enabled = True
                        txtApplicableRegulationMethod9Multi.ReadOnly = False
                        txtControlEquipmentOperatingDataMethod9Multi.ReadOnly = False
                        txt6minuteAvg1AMethod9Multi.ReadOnly = False
                        txt6minuteAvg1BMethod9Multi.ReadOnly = False
                        txt6minuteAvg1CMethod9Multi.ReadOnly = False
                        txt6minuteAvg1DMethod9Multi.ReadOnly = False
                        txt6minuteAvg1EMethod9Multi.ReadOnly = False
                        txtOtherInformationMethod9.ReadOnly = False
                        txtEquipmentItem1AMethod9Multi.ReadOnly = False
                        txtEquipmentItem1BMethod9Multi.ReadOnly = False
                        txtEquipmentItem1CMethod9Multi.ReadOnly = False
                        txtEquipmentItem1DMethod9Multi.ReadOnly = False
                        txtEquipmentItem1EMethod9Multi.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod22.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod22.Enabled = True
                        txtOperatingCapacityMethod22.ReadOnly = False
                        cboOperatingCapacityUnitsMethod22.Enabled = True
                        txtAllowableEmissionRateMethod22.ReadOnly = False
                        txtApplicableRegulationMethod22.ReadOnly = False
                        txtTestDurationMethod22.ReadOnly = False
                        txtAccumulatedEmissionMethod22.ReadOnly = False
                        txtOtherInformationMethod22.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Single.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Enabled = True
                        txtOperatingCapacityMethod9Single.ReadOnly = False
                        cboOperatingCapacityUnitsMethod9Single.Enabled = True
                        txtAllowableEmissionRate1Method9Single.ReadOnly = False
                        cboAllowableEmissionRateUnits1Method9Single.Enabled = True
                        txtApplicableRegulationMethod9Single.ReadOnly = False
                        txtControlEquipmentOperatingDataMethod9Single.ReadOnly = False
                        txtTestDurationMethod9Single.ReadOnly = False
                        txtOpacityMethod9Single.ReadOnly = False
                        txtOtherInformationMethod9.ReadOnly = False
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMemorandumPTE.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Enabled = True
                        txtOperatingCapacityMemorandumPTE.ReadOnly = False
                        cboOperatingCapacityUnitsMemorandumPTE.Enabled = True
                        txtAllowableEmissionRate1MemorandumPTE.ReadOnly = False
                        txtAllowableEmissionRate2MemorandumPTE.ReadOnly = False
                        txtAllowableEmissionRate3MemorandumPTE.ReadOnly = False
                        cboAllowableEmissionRateUnits1MemorandumPTE.Enabled = True
                        cboAllowableEmissionRateUnits2MemorandumPTE.Enabled = True
                        cboAllowableEmissionRateUnits3MemorandumPTE.Enabled = True
                        txtControlEquipmentOperatingDataMemorandumPTE.ReadOnly = False
                        txtMemorandumPTE.ReadOnly = False

                    Case "002" 'One Stack Two Run
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False

                        txtRunNumOneStackTwoRun1A.ReadOnly = False
                        txtRunNumOneStackTwoRun1B.ReadOnly = False
                        txtGasTempOneStackTwoRun1A.ReadOnly = False
                        txtGasTempOneStackTwoRun1B.ReadOnly = False
                        txtGasMoistOneStackTwoRun1A.ReadOnly = False
                        txtGasMoistOneStackTwoRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackTwoRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackTwoRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackTwoRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackTwoRun1B.ReadOnly = False
                        txtPollConcOneStackTwoRun1A.ReadOnly = False
                        txtPollConcOneStackTwoRun1B.ReadOnly = False
                        cboPollConUnitOneStackTwoRun.Enabled = True
                        txtPollConcAvgOneStackTwoRun.ReadOnly = False
                        txtEmissRateOneStackTwoRun1A.ReadOnly = False
                        txtEmissRateOneStackTwoRun1B.ReadOnly = False
                        cboEmissRateUnitOneStackTwoRun.Enabled = True
                        txtEmissRateAvgOneStackTwoRun.ReadOnly = False

                    Case "003" 'One Stack Three Run
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False

                        txtRunNumOneStackThreeRun1A.ReadOnly = False
                        txtRunNumOneStackThreeRun1B.ReadOnly = False
                        txtRunNumOneStackThreeRun1C.ReadOnly = False
                        txtGasTempOneStackThreeRun1A.ReadOnly = False
                        txtGasTempOneStackThreeRun1B.ReadOnly = False
                        txtGasTempOneStackThreeRun1C.ReadOnly = False
                        txtGasMoistOneStackThreeRun1A.ReadOnly = False
                        txtGasMoistOneStackThreeRun1B.ReadOnly = False
                        txtGasMoistOneStackThreeRun1C.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1C.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1C.ReadOnly = False
                        txtPollConcOneStackThreeRun1A.ReadOnly = False
                        txtPollConcOneStackThreeRun1B.ReadOnly = False
                        txtPollConcOneStackThreeRun1C.ReadOnly = False
                        cboPollConUnitOneStackThreeRun.Enabled = True
                        txtPollConcAvgOneStackThreeRun.ReadOnly = False
                        txtEmissRateOneStackThreeRun1A.ReadOnly = False
                        txtEmissRateOneStackThreeRun1B.ReadOnly = False
                        txtEmissRateOneStackThreeRun1C.ReadOnly = False
                        cboEmissRateUnitOneStackThreeRun.Enabled = True
                        txtEmissRateAvgOneStackThreeRun.ReadOnly = False

                    Case "004" 'One Stack Four Run
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False

                        txtRunNumOneStackFourRun1A.ReadOnly = False
                        txtRunNumOneStackFourRun1B.ReadOnly = False
                        txtRunNumOneStackFourRun1C.ReadOnly = False
                        txtRunNumOneStackFourRun1D.ReadOnly = False
                        txtGasTempOneStackFourRun1A.ReadOnly = False
                        txtGasTempOneStackFourRun1B.ReadOnly = False
                        txtGasTempOneStackFourRun1C.ReadOnly = False
                        txtGasTempOneStackFourRun1D.ReadOnly = False
                        txtGasMoistOneStackFourRun1A.ReadOnly = False
                        txtGasMoistOneStackFourRun1B.ReadOnly = False
                        txtGasMoistOneStackFourRun1C.ReadOnly = False
                        txtGasMoistOneStackFourRun1D.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1C.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1D.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1C.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1D.ReadOnly = False
                        txtPollConcOneStackFourRun1A.ReadOnly = False
                        txtPollConcOneStackFourRun1B.ReadOnly = False
                        txtPollConcOneStackFourRun1C.ReadOnly = False
                        txtPollConcOneStackFourRun1D.ReadOnly = False
                        cboPollConUnitOneStackFourRun.Enabled = True
                        txtPollConcAvgOneStackFourRun.ReadOnly = False
                        txtEmissRateOneStackFourRun1A.ReadOnly = False
                        txtEmissRateOneStackFourRun1B.ReadOnly = False
                        txtEmissRateOneStackFourRun1C.ReadOnly = False
                        txtEmissRateOneStackFourRun1D.ReadOnly = False
                        cboEmissRateUnitOneStackFourRun.Enabled = True
                        txtEmissRateAvgOneStackFourRun.ReadOnly = False

                    Case "005" 'Two Stack Standard 
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = True
                        txtOperatingCapacityTwoStack.ReadOnly = False
                        cboOperatingCapacityUnitsTwoStack.Enabled = True
                        txtAllowableEmissionRate1TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = True
                        txtAllowableEmissionRate2TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = True
                        txtAllowableEmissionRate3TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = True
                        txtApplicableRegulationTwoStack.ReadOnly = False
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = False
                        txtOtherInformationTwoStack.ReadOnly = False

                        txtStackOneNameTwoStackStandard.ReadOnly = False
                        txtStackTwoNameTwoStackStandard.ReadOnly = False
                        txtRunNumTwoStackStandard1A.ReadOnly = False
                        txtRunNumTwoStackStandard1B.ReadOnly = False
                        txtRunNumTwoStackStandard1C.ReadOnly = False
                        txtRunNumTwoStackStandard2A.ReadOnly = False
                        txtRunNumTwoStackStandard2B.ReadOnly = False
                        txtRunNumTwoStackStandard2C.ReadOnly = False
                        txtGasTempTwoStackStandard1A.ReadOnly = False
                        txtGasTempTwoStackStandard1B.ReadOnly = False
                        txtGasTempTwoStackStandard1C.ReadOnly = False
                        txtGasTempTwoStackStandard2A.ReadOnly = False
                        txtGasTempTwoStackStandard2B.ReadOnly = False
                        txtGasTempTwoStackStandard2C.ReadOnly = False
                        txtGasMoistTwoStackStandard1A.ReadOnly = False
                        txtGasMoistTwoStackStandard1B.ReadOnly = False
                        txtGasMoistTwoStackStandard1C.ReadOnly = False
                        txtGasMoistTwoStackStandard2A.ReadOnly = False
                        txtGasMoistTwoStackStandard2B.ReadOnly = False
                        txtGasMoistTwoStackStandard2C.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1A.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1B.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1C.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2A.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2B.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2C.ReadOnly = False
                        txtPollConcTwoStackStandard1A.ReadOnly = False
                        txtPollConcTwoStackStandard1B.ReadOnly = False
                        txtPollConcTwoStackStandard1C.ReadOnly = False
                        txtPollConcTwoStackStandard2A.ReadOnly = False
                        txtPollConcTwoStackStandard2B.ReadOnly = False
                        txtPollConcTwoStackStandard2C.ReadOnly = False
                        cboPollConUnitTwoStackStandard.Enabled = True
                        txtPollConcAvgTwoStackStandard1.ReadOnly = False
                        txtPollConcAvgTwoStackStandard2.ReadOnly = False
                        txtEmissRateTwoStackStandard1A.ReadOnly = False
                        txtEmissRateTwoStackStandard1B.ReadOnly = False
                        txtEmissRateTwoStackStandard1C.ReadOnly = False
                        txtEmissRateTwoStackStandard2A.ReadOnly = False
                        txtEmissRateTwoStackStandard2B.ReadOnly = False
                        txtEmissRateTwoStackStandard2C.ReadOnly = False
                        cboEmissRateUnitTwoStackStandard.Enabled = True
                        txtEmissRateAvgTwoStackStandard1.ReadOnly = False
                        txtEmissRateAvgTwoStackStandard2.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard1.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard2.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard3.ReadOnly = False
                        txtEmissRateTotalAvgTwoStackStandard.ReadOnly = False
                        txtPercentAllowableTwoStack.ReadOnly = False

                    Case "006" 'Two Stack DRE
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = True
                        txtOperatingCapacityTwoStack.ReadOnly = False
                        cboOperatingCapacityUnitsTwoStack.Enabled = True
                        txtAllowableEmissionRate1TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = True
                        txtAllowableEmissionRate2TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = True
                        txtAllowableEmissionRate3TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = True
                        txtApplicableRegulationTwoStack.ReadOnly = False
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = False
                        txtOtherInformationTwoStack.ReadOnly = False

                        txtStackOneNameTwoStackDRE.ReadOnly = False
                        txtStackTwoNameTwoStackDRE.ReadOnly = False
                        txtRunNumTwoStackDRE1A.ReadOnly = False
                        txtRunNumTwoStackDRE1B.ReadOnly = False
                        txtRunNumTwoStackDRE1C.ReadOnly = False
                        txtRunNumTwoStackDRE2A.ReadOnly = False
                        txtRunNumTwoStackDRE2B.ReadOnly = False
                        txtRunNumTwoStackDRE2C.ReadOnly = False
                        txtGasTempTwoStackDRE1A.ReadOnly = False
                        txtGasTempTwoStackDRE1B.ReadOnly = False
                        txtGasTempTwoStackDRE1C.ReadOnly = False
                        txtGasTempTwoStackDRE2A.ReadOnly = False
                        txtGasTempTwoStackDRE2B.ReadOnly = False
                        txtGasTempTwoStackDRE2C.ReadOnly = False
                        txtGasMoistTwoStackDRE1A.ReadOnly = False
                        txtGasMoistTwoStackDRE1B.ReadOnly = False
                        txtGasMoistTwoStackDRE1C.ReadOnly = False
                        txtGasMoistTwoStackDRE2A.ReadOnly = False
                        txtGasMoistTwoStackDRE2B.ReadOnly = False
                        txtGasMoistTwoStackDRE2C.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1A.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1B.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1C.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2A.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2B.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2C.ReadOnly = False
                        txtPollConcTwoStackDRE1A.ReadOnly = False
                        txtPollConcTwoStackDRE1B.ReadOnly = False
                        txtPollConcTwoStackDRE1C.ReadOnly = False
                        txtPollConcTwoStackDRE2A.ReadOnly = False
                        txtPollConcTwoStackDRE2B.ReadOnly = False
                        txtPollConcTwoStackDRE2C.ReadOnly = False
                        cboPollConUnitTwoStackDRE.Enabled = True
                        txtPollConcAvgTwoStackDRE1.ReadOnly = False
                        txtPollConcAvgTwoStackDRE2.ReadOnly = False
                        txtEmissRateTwoStackDRE1A.ReadOnly = False
                        txtEmissRateTwoStackDRE1B.ReadOnly = False
                        txtEmissRateTwoStackDRE1C.ReadOnly = False
                        txtEmissRateTwoStackDRE2A.ReadOnly = False
                        txtEmissRateTwoStackDRE2B.ReadOnly = False
                        txtEmissRateTwoStackDRE2C.ReadOnly = False
                        cboEmissRateUnitTwoStackDRE.Enabled = True
                        txtEmissRateAvgTwoStackDRE1.ReadOnly = False
                        txtEmissRateAvgTwoStackDRE2.ReadOnly = False
                        txtDestructionEfficiencyTwoStackDRE.ReadOnly = False

                    Case "007" 'Loading Rack
                        txtMaximumExpectedOperatingCapacityLoadingRack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Enabled = True
                        txtOperatingCapacityLoadingRack.ReadOnly = False
                        cboOperatingCapacityUnitsLoadingRack.Enabled = True
                        txtAllowableEmissionRate1LoadingRack.ReadOnly = False
                        txtAllowableEmissionRate2LoadingRack.ReadOnly = False
                        txtAllowableEmissionRate3LoadingRack.ReadOnly = False
                        cboAllowableEmissionRateUnits1LoadingRack.Enabled = True
                        cboAllowableEmissionRateUnits2LoadingRack.Enabled = True
                        cboAllowableEmissionRateUnits3LoadingRack.Enabled = True
                        txtApplicableRegulationLoadingRack.ReadOnly = False
                        txtControlEquipmentOperatingDataLoadingRack.ReadOnly = False
                        txtTestDurationLoadingRack.ReadOnly = False
                        cboTestDurationUnitsLoadingRack.Enabled = True
                        txtPollConcINLoadingRack.ReadOnly = False
                        cboPollConUnitINLoadingRack.Enabled = True
                        txtPollConcOUTLoadingRack.ReadOnly = False
                        cboPollConUnitOUTLoadingRack.Enabled = True
                        txtDestructionEfficiencyLoadingRack.ReadOnly = False
                        txtEmissRateLoadingRack.ReadOnly = False
                        cboEmissRateUnitLoadingRack.Enabled = True
                        txtOtherInformationLoadingRack.ReadOnly = False

                    Case "008" 'Pond Treatment 
                        txtMaximumExpectedOperatingCapacityPond.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsPond.Enabled = True
                        txtOperatingCapacityPond.ReadOnly = False
                        cboOperatingCapacityUnitsPond.Enabled = True
                        txtAllowableEmissionRate1Pond.ReadOnly = False
                        txtAllowableEmissionRate2Pond.ReadOnly = False
                        txtAllowableEmissionRate3Pond.ReadOnly = False
                        cboAllowableEmissionRateUnits1Pond.Enabled = True
                        cboAllowableEmissionRateUnits2Pond.Enabled = True
                        cboAllowableEmissionRateUnits3Pond.Enabled = True
                        txtApplicableRegulationPond.ReadOnly = False
                        txtControlEquipmentOperatingDataPond.ReadOnly = False
                        txtRunNumPond1A.ReadOnly = False
                        txtRunNumPond1B.ReadOnly = False
                        txtRunNumPond1C.ReadOnly = False
                        txtPollConcPond1A.ReadOnly = False
                        txtPollConcPond1B.ReadOnly = False
                        txtPollConcPond1C.ReadOnly = False
                        cboPollConUnitPond.Enabled = True
                        txtPollConcAvgPond.ReadOnly = False
                        txtTreatmentRatePond1A.ReadOnly = False
                        txtTreatmentRatePond1B.ReadOnly = False
                        txtTreatmentRatePond1C.ReadOnly = False
                        cboTreatmentRateUnitPond.Enabled = True
                        txtTreatmentRateAvgPond.ReadOnly = False
                        txtDestructionEfficancyPond.ReadOnly = False
                        txtOtherInformationPond.ReadOnly = False

                    Case "009" 'Gas Concentration 
                        txtMaximumExpectedOperatingCapacityGas.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsGas.Enabled = True
                        txtOperatingCapacityGas.ReadOnly = False
                        cboOperatingCapacityUnitsGas.Enabled = True
                        txtAllowableEmissionRate1Gas.ReadOnly = False
                        txtAllowableEmissionRate2Gas.ReadOnly = False
                        txtAllowableEmissionRate3Gas.ReadOnly = False
                        cboAllowableEmissionRateUnits1Gas.Enabled = True
                        cboAllowableEmissionRateUnits2Gas.Enabled = True
                        cboAllowableEmissionRateUnits3Gas.Enabled = True
                        txtApplicableRegulationGas.ReadOnly = False
                        txtControlEquipmentOperatingDataGas.ReadOnly = False
                        txtRunNumGas1A.ReadOnly = False
                        txtRunNumGas1B.ReadOnly = False
                        txtRunNumGas1C.ReadOnly = False
                        txtPollConcGas1A.ReadOnly = False
                        txtPollConcGas1B.ReadOnly = False
                        txtPollConcGas1C.ReadOnly = False
                        cboPollConUnitGas.Enabled = True
                        txtPollConcAvgGas.ReadOnly = False
                        txtEmissRateGas1A.ReadOnly = False
                        txtEmissRateGas1B.ReadOnly = False
                        txtEmissRateGas1C.ReadOnly = False
                        cboEmissRateUnitGas.Enabled = True
                        txtEmissRateAvgGas.ReadOnly = False
                        txtPercentAllowableGas.ReadOnly = False
                        txtOtherInformationGas.ReadOnly = False

                    Case "010" 'Flare
                        txtMaximumExpectedOperatingCapacityFlare.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsFlare.Enabled = True
                        txtOperatingCapacityFlare.ReadOnly = False
                        cboOperatingCapacityUnitsFlare.Enabled = True
                        txtVelocityFlare.ReadOnly = False
                        txtHeatContentFlare.ReadOnly = False
                        txtApplicableRegulationFlare.ReadOnly = False
                        txtMonitoringDataFlare.ReadOnly = False
                        txtHeatingValue1AFlare.ReadOnly = False
                        txtHeatingValue1BFlare.ReadOnly = False
                        txtHeatingValue1CFlare.ReadOnly = False
                        cboHeatingValueUnits.Enabled = True
                        txtHeatingValuesAvgFlare.ReadOnly = False
                        txtVelocity1AFlare.ReadOnly = False
                        txtVelocity1BFlare.ReadOnly = False
                        txtVelocity1CFlare.ReadOnly = False
                        cboVelocityUnitsFlare.Enabled = True
                        txtVelocityAvgFlare.ReadOnly = False
                        txtPercentAllowableFlare.ReadOnly = False
                        txtOtherInformationFlare.ReadOnly = False

                    Case "011" 'RATA 
                        txtApplicableStandardRata.ReadOnly = False
                        cboDilutentMonitoredRata.Enabled = True
                        txtApplicableRegulationRata.ReadOnly = False
                        txtRefMethodRata1.ReadOnly = False
                        txtRefMethodRata2.ReadOnly = False
                        txtRefMethodRata3.ReadOnly = False
                        txtRefMethodRata4.ReadOnly = False
                        txtRefMethodRata5.ReadOnly = False
                        txtRefMethodRata6.ReadOnly = False
                        txtRefMethodRata7.ReadOnly = False
                        txtRefMethodRata8.ReadOnly = False
                        txtRefMethodRata9.ReadOnly = False
                        txtRefMethodRata10.ReadOnly = False
                        txtRefMethodRata11.ReadOnly = False
                        txtRefMethodRata12.ReadOnly = False
                        txtCMSRata1.ReadOnly = False
                        txtCMSRata2.ReadOnly = False
                        txtCMSRata3.ReadOnly = False
                        txtCMSRata4.ReadOnly = False
                        txtCMSRata5.ReadOnly = False
                        txtCMSRata6.ReadOnly = False
                        txtCMSRata7.ReadOnly = False
                        txtCMSRata8.ReadOnly = False
                        txtCMSRata9.ReadOnly = False
                        txtCMSRata10.ReadOnly = False
                        txtCMSRata11.ReadOnly = False
                        txtCMSRata12.ReadOnly = False
                        chbOmitRunRata1.Enabled = True
                        chbOmitRunRata2.Enabled = True
                        chbOmitRunRata3.Enabled = True
                        chbOmitRunRata4.Enabled = True
                        chbOmitRunRata5.Enabled = True
                        chbOmitRunRata6.Enabled = True
                        chbOmitRunRata7.Enabled = True
                        chbOmitRunRata8.Enabled = True
                        chbOmitRunRata9.Enabled = True
                        chbOmitRunRata10.Enabled = True
                        chbOmitRunRata11.Enabled = True
                        chbOmitRunRata12.Enabled = True
                        cboUnitsRata.Enabled = True
                        txtRelativeAccuracy.ReadOnly = False
                        txtRefMethodPercentRata.ReadOnly = False
                        txtApplicableStandardPercentRata.ReadOnly = False
                        cboDiluentRata.Enabled = True
                        txtPart75Statement.ReadOnly = False
                        txtOtherInformationRata.ReadOnly = False

                    Case "012" 'Memo Standard 
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtMemorandumStandard.ReadOnly = False

                    Case "013" 'Memo To File
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtModelMemorandumToFile.ReadOnly = False
                        txtSerialNumberMemorandumToFile.ReadOnly = False
                        txtMemorandumToFile.ReadOnly = False

                    Case "014" 'Method 9 Multi 
                        txtMaximumExpectedOperatingCapacityMethod9Multi1.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi2.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi3.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi4.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi5.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Enabled = True
                        txtOperatingCapacityMethod9Multi1.ReadOnly = False
                        txtOperatingCapacityMethod9Multi2.ReadOnly = False
                        txtOperatingCapacityMethod9Multi3.ReadOnly = False
                        txtOperatingCapacityMethod9Multi4.ReadOnly = False
                        txtOperatingCapacityMethod9Multi5.ReadOnly = False
                        cboOperatingCapacityUnitsMethod9Multi.Enabled = True
                        txtAllowableEmissionRate1Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate2Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate3Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate4Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate5Method9Multi.ReadOnly = False
                        cboAllowableEmissionRateUnitsMethod9Multi.Enabled = True
                        txtApplicableRegulationMethod9Multi.ReadOnly = False
                        txtControlEquipmentOperatingDataMethod9Multi.ReadOnly = False
                        txt6minuteAvg1AMethod9Multi.ReadOnly = False
                        txt6minuteAvg1BMethod9Multi.ReadOnly = False
                        txt6minuteAvg1CMethod9Multi.ReadOnly = False
                        txt6minuteAvg1DMethod9Multi.ReadOnly = False
                        txt6minuteAvg1EMethod9Multi.ReadOnly = False
                        txtOtherInformationMethod9.ReadOnly = False
                        txtEquipmentItem1AMethod9Multi.ReadOnly = False
                        txtEquipmentItem1BMethod9Multi.ReadOnly = False
                        txtEquipmentItem1CMethod9Multi.ReadOnly = False
                        txtEquipmentItem1DMethod9Multi.ReadOnly = False
                        txtEquipmentItem1EMethod9Multi.ReadOnly = False

                    Case "015" 'Method 22 
                        txtMaximumExpectedOperatingCapacityMethod22.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod22.Enabled = True
                        txtOperatingCapacityMethod22.ReadOnly = False
                        cboOperatingCapacityUnitsMethod22.Enabled = True
                        txtAllowableEmissionRateMethod22.ReadOnly = False
                        txtApplicableRegulationMethod22.ReadOnly = False
                        txtTestDurationMethod22.ReadOnly = False
                        txtAccumulatedEmissionMethod22.ReadOnly = False
                        txtOtherInformationMethod22.ReadOnly = False

                    Case "016" 'Method 9 Single
                        txtMaximumExpectedOperatingCapacityMethod9Single.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Enabled = True
                        txtOperatingCapacityMethod9Single.ReadOnly = False
                        cboOperatingCapacityUnitsMethod9Single.Enabled = True
                        txtAllowableEmissionRate1Method9Single.ReadOnly = False
                        cboAllowableEmissionRateUnits1Method9Single.Enabled = True
                        txtApplicableRegulationMethod9Single.ReadOnly = False
                        txtControlEquipmentOperatingDataMethod9Single.ReadOnly = False
                        txtTestDurationMethod9Single.ReadOnly = False
                        txtOpacityMethod9Single.ReadOnly = False
                        txtOtherInformationMethod9.ReadOnly = False

                    Case "018" 'Memo PTE 
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMemorandumPTE.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Enabled = True
                        txtOperatingCapacityMemorandumPTE.ReadOnly = False
                        cboOperatingCapacityUnitsMemorandumPTE.Enabled = True
                        txtAllowableEmissionRate1MemorandumPTE.ReadOnly = False
                        txtAllowableEmissionRate2MemorandumPTE.ReadOnly = False
                        txtAllowableEmissionRate3MemorandumPTE.ReadOnly = False
                        cboAllowableEmissionRateUnits1MemorandumPTE.Enabled = True
                        cboAllowableEmissionRateUnits2MemorandumPTE.Enabled = True
                        cboAllowableEmissionRateUnits3MemorandumPTE.Enabled = True
                        txtControlEquipmentOperatingDataMemorandumPTE.ReadOnly = False
                        txtMemorandumPTE.ReadOnly = False

                    Case Else
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False
                        txtRunNumOneStackTwoRun1A.ReadOnly = False
                        txtRunNumOneStackTwoRun1B.ReadOnly = False
                        txtGasTempOneStackTwoRun1A.ReadOnly = False
                        txtGasTempOneStackTwoRun1B.ReadOnly = False
                        txtGasMoistOneStackTwoRun1A.ReadOnly = False
                        txtGasMoistOneStackTwoRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackTwoRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackTwoRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackTwoRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackTwoRun1B.ReadOnly = False
                        txtPollConcOneStackTwoRun1A.ReadOnly = False
                        txtPollConcOneStackTwoRun1B.ReadOnly = False
                        cboPollConUnitOneStackTwoRun.Enabled = True
                        txtPollConcAvgOneStackTwoRun.ReadOnly = False
                        txtEmissRateOneStackTwoRun1A.ReadOnly = False
                        txtEmissRateOneStackTwoRun1B.ReadOnly = False
                        cboEmissRateUnitOneStackTwoRun.Enabled = True
                        txtEmissRateAvgOneStackTwoRun.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False
                        txtRunNumOneStackThreeRun1A.ReadOnly = False
                        txtRunNumOneStackThreeRun1B.ReadOnly = False
                        txtRunNumOneStackThreeRun1C.ReadOnly = False
                        txtGasTempOneStackThreeRun1A.ReadOnly = False
                        txtGasTempOneStackThreeRun1B.ReadOnly = False
                        txtGasTempOneStackThreeRun1C.ReadOnly = False
                        txtGasMoistOneStackThreeRun1A.ReadOnly = False
                        txtGasMoistOneStackThreeRun1B.ReadOnly = False
                        txtGasMoistOneStackThreeRun1C.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackThreeRun1C.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackThreeRun1C.ReadOnly = False
                        txtPollConcOneStackThreeRun1A.ReadOnly = False
                        txtPollConcOneStackThreeRun1B.ReadOnly = False
                        txtPollConcOneStackThreeRun1C.ReadOnly = False
                        cboPollConUnitOneStackThreeRun.Enabled = True
                        txtPollConcAvgOneStackThreeRun.ReadOnly = False
                        txtEmissRateOneStackThreeRun1A.ReadOnly = False
                        txtEmissRateOneStackThreeRun1B.ReadOnly = False
                        txtEmissRateOneStackThreeRun1C.ReadOnly = False
                        cboEmissRateUnitOneStackThreeRun.Enabled = True
                        txtEmissRateAvgOneStackThreeRun.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = True
                        txtOperatingCapacityOneStack.ReadOnly = False
                        cboOperatingCapacityUnitsOneStack.Enabled = True
                        txtAllowableEmissionRate1OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1OneStack.Enabled = True
                        txtAllowableEmissionRate2OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2OneStack.Enabled = True
                        txtAllowableEmissionRate3OneStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3OneStack.Enabled = True
                        txtApplicableRegulationOneStack.ReadOnly = False
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = False
                        txtPercentAllowableOneStack.ReadOnly = False
                        txtOtherInformationOneStack.ReadOnly = False
                        txtRunNumOneStackFourRun1A.ReadOnly = False
                        txtRunNumOneStackFourRun1B.ReadOnly = False
                        txtRunNumOneStackFourRun1C.ReadOnly = False
                        txtRunNumOneStackFourRun1D.ReadOnly = False
                        txtGasTempOneStackFourRun1A.ReadOnly = False
                        txtGasTempOneStackFourRun1B.ReadOnly = False
                        txtGasTempOneStackFourRun1C.ReadOnly = False
                        txtGasTempOneStackFourRun1D.ReadOnly = False
                        txtGasMoistOneStackFourRun1A.ReadOnly = False
                        txtGasMoistOneStackFourRun1B.ReadOnly = False
                        txtGasMoistOneStackFourRun1C.ReadOnly = False
                        txtGasMoistOneStackFourRun1D.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1A.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1B.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1C.ReadOnly = False
                        txtGasFlowACFMOneStackFourRun1D.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1A.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1B.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1C.ReadOnly = False
                        txtGasFlowDSCFMOneStackFourRun1D.ReadOnly = False
                        txtPollConcOneStackFourRun1A.ReadOnly = False
                        txtPollConcOneStackFourRun1B.ReadOnly = False
                        txtPollConcOneStackFourRun1C.ReadOnly = False
                        txtPollConcOneStackFourRun1D.ReadOnly = False
                        cboPollConUnitOneStackFourRun.Enabled = True
                        txtPollConcAvgOneStackFourRun.ReadOnly = False
                        txtEmissRateOneStackFourRun1A.ReadOnly = False
                        txtEmissRateOneStackFourRun1B.ReadOnly = False
                        txtEmissRateOneStackFourRun1C.ReadOnly = False
                        txtEmissRateOneStackFourRun1D.ReadOnly = False
                        cboEmissRateUnitOneStackFourRun.Enabled = True
                        txtEmissRateAvgOneStackFourRun.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = True
                        txtOperatingCapacityTwoStack.ReadOnly = False
                        cboOperatingCapacityUnitsTwoStack.Enabled = True
                        txtAllowableEmissionRate1TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = True
                        txtAllowableEmissionRate2TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = True
                        txtAllowableEmissionRate3TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = True
                        txtApplicableRegulationTwoStack.ReadOnly = False
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = False
                        txtOtherInformationTwoStack.ReadOnly = False
                        txtStackOneNameTwoStackStandard.ReadOnly = False
                        txtStackTwoNameTwoStackStandard.ReadOnly = False
                        txtRunNumTwoStackStandard1A.ReadOnly = False
                        txtRunNumTwoStackStandard1B.ReadOnly = False
                        txtRunNumTwoStackStandard1C.ReadOnly = False
                        txtRunNumTwoStackStandard2A.ReadOnly = False
                        txtRunNumTwoStackStandard2B.ReadOnly = False
                        txtRunNumTwoStackStandard2C.ReadOnly = False
                        txtGasTempTwoStackStandard1A.ReadOnly = False
                        txtGasTempTwoStackStandard1B.ReadOnly = False
                        txtGasTempTwoStackStandard1C.ReadOnly = False
                        txtGasTempTwoStackStandard2A.ReadOnly = False
                        txtGasTempTwoStackStandard2B.ReadOnly = False
                        txtGasTempTwoStackStandard2C.ReadOnly = False
                        txtGasMoistTwoStackStandard1A.ReadOnly = False
                        txtGasMoistTwoStackStandard1B.ReadOnly = False
                        txtGasMoistTwoStackStandard1C.ReadOnly = False
                        txtGasMoistTwoStackStandard2A.ReadOnly = False
                        txtGasMoistTwoStackStandard2B.ReadOnly = False
                        txtGasMoistTwoStackStandard2C.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1A.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1B.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard1C.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2A.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2B.ReadOnly = False
                        txtGasFlowACFMTwoStackStandard2C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard1C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackStandard2C.ReadOnly = False
                        txtPollConcTwoStackStandard1A.ReadOnly = False
                        txtPollConcTwoStackStandard1B.ReadOnly = False
                        txtPollConcTwoStackStandard1C.ReadOnly = False
                        txtPollConcTwoStackStandard2A.ReadOnly = False
                        txtPollConcTwoStackStandard2B.ReadOnly = False
                        txtPollConcTwoStackStandard2C.ReadOnly = False
                        cboPollConUnitTwoStackStandard.Enabled = True
                        txtPollConcAvgTwoStackStandard1.ReadOnly = False
                        txtPollConcAvgTwoStackStandard2.ReadOnly = False
                        txtEmissRateTwoStackStandard1A.ReadOnly = False
                        txtEmissRateTwoStackStandard1B.ReadOnly = False
                        txtEmissRateTwoStackStandard1C.ReadOnly = False
                        txtEmissRateTwoStackStandard2A.ReadOnly = False
                        txtEmissRateTwoStackStandard2B.ReadOnly = False
                        txtEmissRateTwoStackStandard2C.ReadOnly = False
                        cboEmissRateUnitTwoStackStandard.Enabled = True
                        txtEmissRateAvgTwoStackStandard1.ReadOnly = False
                        txtEmissRateAvgTwoStackStandard2.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard1.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard2.ReadOnly = False
                        txtEmissRateTotalTwoStackStandard3.ReadOnly = False
                        txtEmissRateTotalAvgTwoStackStandard.ReadOnly = False
                        txtPercentAllowableTwoStack.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = True
                        txtOperatingCapacityTwoStack.ReadOnly = False
                        cboOperatingCapacityUnitsTwoStack.Enabled = True
                        txtAllowableEmissionRate1TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = True
                        txtAllowableEmissionRate2TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = True
                        txtAllowableEmissionRate3TwoStack.ReadOnly = False
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = True
                        txtApplicableRegulationTwoStack.ReadOnly = False
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = False
                        txtOtherInformationTwoStack.ReadOnly = False
                        txtStackOneNameTwoStackDRE.ReadOnly = False
                        txtStackTwoNameTwoStackDRE.ReadOnly = False
                        txtRunNumTwoStackDRE1A.ReadOnly = False
                        txtRunNumTwoStackDRE1B.ReadOnly = False
                        txtRunNumTwoStackDRE1C.ReadOnly = False
                        txtRunNumTwoStackDRE2A.ReadOnly = False
                        txtRunNumTwoStackDRE2B.ReadOnly = False
                        txtRunNumTwoStackDRE2C.ReadOnly = False
                        txtGasTempTwoStackDRE1A.ReadOnly = False
                        txtGasTempTwoStackDRE1B.ReadOnly = False
                        txtGasTempTwoStackDRE1C.ReadOnly = False
                        txtGasTempTwoStackDRE2A.ReadOnly = False
                        txtGasTempTwoStackDRE2B.ReadOnly = False
                        txtGasTempTwoStackDRE2C.ReadOnly = False
                        txtGasMoistTwoStackDRE1A.ReadOnly = False
                        txtGasMoistTwoStackDRE1B.ReadOnly = False
                        txtGasMoistTwoStackDRE1C.ReadOnly = False
                        txtGasMoistTwoStackDRE2A.ReadOnly = False
                        txtGasMoistTwoStackDRE2B.ReadOnly = False
                        txtGasMoistTwoStackDRE2C.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1A.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1B.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE1C.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2A.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2B.ReadOnly = False
                        txtGasFlowACFMTwoStackDRE2C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE1C.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2A.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2B.ReadOnly = False
                        txtGasFlowDSCFMTwoStackDRE2C.ReadOnly = False
                        txtPollConcTwoStackDRE1A.ReadOnly = False
                        txtPollConcTwoStackDRE1B.ReadOnly = False
                        txtPollConcTwoStackDRE1C.ReadOnly = False
                        txtPollConcTwoStackDRE2A.ReadOnly = False
                        txtPollConcTwoStackDRE2B.ReadOnly = False
                        txtPollConcTwoStackDRE2C.ReadOnly = False
                        cboPollConUnitTwoStackDRE.Enabled = True
                        txtPollConcAvgTwoStackDRE1.ReadOnly = False
                        txtPollConcAvgTwoStackDRE2.ReadOnly = False
                        txtEmissRateTwoStackDRE1A.ReadOnly = False
                        txtEmissRateTwoStackDRE1B.ReadOnly = False
                        txtEmissRateTwoStackDRE1C.ReadOnly = False
                        txtEmissRateTwoStackDRE2A.ReadOnly = False
                        txtEmissRateTwoStackDRE2B.ReadOnly = False
                        txtEmissRateTwoStackDRE2C.ReadOnly = False
                        cboEmissRateUnitTwoStackDRE.Enabled = True
                        txtEmissRateAvgTwoStackDRE1.ReadOnly = False
                        txtEmissRateAvgTwoStackDRE2.ReadOnly = False
                        txtDestructionEfficiencyTwoStackDRE.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityLoadingRack.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Enabled = True
                        txtOperatingCapacityLoadingRack.ReadOnly = False
                        cboOperatingCapacityUnitsLoadingRack.Enabled = True
                        txtAllowableEmissionRate1LoadingRack.ReadOnly = False
                        txtAllowableEmissionRate2LoadingRack.ReadOnly = False
                        txtAllowableEmissionRate3LoadingRack.ReadOnly = False
                        cboAllowableEmissionRateUnits1LoadingRack.Enabled = True
                        cboAllowableEmissionRateUnits2LoadingRack.Enabled = True
                        cboAllowableEmissionRateUnits3LoadingRack.Enabled = True
                        txtApplicableRegulationLoadingRack.ReadOnly = False
                        txtControlEquipmentOperatingDataLoadingRack.ReadOnly = False
                        txtTestDurationLoadingRack.ReadOnly = False
                        cboTestDurationUnitsLoadingRack.Enabled = True
                        txtPollConcINLoadingRack.ReadOnly = False
                        cboPollConUnitINLoadingRack.Enabled = True
                        txtPollConcOUTLoadingRack.ReadOnly = False
                        cboPollConUnitOUTLoadingRack.Enabled = True
                        txtDestructionEfficiencyLoadingRack.ReadOnly = False
                        txtEmissRateLoadingRack.ReadOnly = False
                        cboEmissRateUnitLoadingRack.Enabled = True
                        txtOtherInformationLoadingRack.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityPond.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsPond.Enabled = True
                        txtOperatingCapacityPond.ReadOnly = False
                        cboOperatingCapacityUnitsPond.Enabled = True
                        txtAllowableEmissionRate1Pond.ReadOnly = False
                        txtAllowableEmissionRate2Pond.ReadOnly = False
                        txtAllowableEmissionRate3Pond.ReadOnly = False
                        cboAllowableEmissionRateUnits1Pond.Enabled = True
                        cboAllowableEmissionRateUnits2Pond.Enabled = True
                        cboAllowableEmissionRateUnits3Pond.Enabled = True
                        txtApplicableRegulationPond.ReadOnly = False
                        txtControlEquipmentOperatingDataPond.ReadOnly = False
                        txtRunNumPond1A.ReadOnly = False
                        txtRunNumPond1B.ReadOnly = False
                        txtRunNumPond1C.ReadOnly = False
                        txtPollConcPond1A.ReadOnly = False
                        txtPollConcPond1B.ReadOnly = False
                        txtPollConcPond1C.ReadOnly = False
                        cboPollConUnitPond.Enabled = True
                        txtPollConcAvgPond.ReadOnly = False
                        txtTreatmentRatePond1A.ReadOnly = False
                        txtTreatmentRatePond1B.ReadOnly = False
                        txtTreatmentRatePond1C.ReadOnly = False
                        cboTreatmentRateUnitPond.Enabled = True
                        txtTreatmentRateAvgPond.ReadOnly = False
                        txtDestructionEfficancyPond.ReadOnly = False
                        txtOtherInformationPond.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityGas.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsGas.Enabled = True
                        txtOperatingCapacityGas.ReadOnly = False
                        cboOperatingCapacityUnitsGas.Enabled = True
                        txtAllowableEmissionRate1Gas.ReadOnly = False
                        txtAllowableEmissionRate2Gas.ReadOnly = False
                        txtAllowableEmissionRate3Gas.ReadOnly = False
                        cboAllowableEmissionRateUnits1Gas.Enabled = True
                        cboAllowableEmissionRateUnits2Gas.Enabled = True
                        cboAllowableEmissionRateUnits3Gas.Enabled = True
                        txtApplicableRegulationGas.ReadOnly = False
                        txtControlEquipmentOperatingDataGas.ReadOnly = False
                        txtRunNumGas1A.ReadOnly = False
                        txtRunNumGas1B.ReadOnly = False
                        txtRunNumGas1C.ReadOnly = False
                        txtPollConcGas1A.ReadOnly = False
                        txtPollConcGas1B.ReadOnly = False
                        txtPollConcGas1C.ReadOnly = False
                        cboPollConUnitGas.Enabled = True
                        txtPollConcAvgGas.ReadOnly = False
                        txtEmissRateGas1A.ReadOnly = False
                        txtEmissRateGas1B.ReadOnly = False
                        txtEmissRateGas1C.ReadOnly = False
                        cboEmissRateUnitGas.Enabled = True
                        txtEmissRateAvgGas.ReadOnly = False
                        txtPercentAllowableGas.ReadOnly = False
                        txtOtherInformationGas.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityFlare.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsFlare.Enabled = True
                        txtOperatingCapacityFlare.ReadOnly = False
                        cboOperatingCapacityUnitsFlare.Enabled = True
                        txtVelocityFlare.ReadOnly = False
                        txtHeatContentFlare.ReadOnly = False
                        txtApplicableRegulationFlare.ReadOnly = False
                        txtMonitoringDataFlare.ReadOnly = False
                        txtHeatingValue1AFlare.ReadOnly = False
                        txtHeatingValue1BFlare.ReadOnly = False
                        txtHeatingValue1CFlare.ReadOnly = False
                        cboHeatingValueUnits.Enabled = True
                        txtHeatingValuesAvgFlare.ReadOnly = False
                        txtVelocity1AFlare.ReadOnly = False
                        txtVelocity1BFlare.ReadOnly = False
                        txtVelocity1CFlare.ReadOnly = False
                        cboVelocityUnitsFlare.Enabled = True
                        txtVelocityAvgFlare.ReadOnly = False
                        txtPercentAllowableFlare.ReadOnly = False
                        txtOtherInformationFlare.ReadOnly = False
                        txtApplicableStandardRata.ReadOnly = False
                        cboDilutentMonitoredRata.Enabled = True
                        txtApplicableRegulationRata.ReadOnly = False
                        txtRefMethodRata1.ReadOnly = False
                        txtRefMethodRata2.ReadOnly = False
                        txtRefMethodRata3.ReadOnly = False
                        txtRefMethodRata4.ReadOnly = False
                        txtRefMethodRata5.ReadOnly = False
                        txtRefMethodRata6.ReadOnly = False
                        txtRefMethodRata7.ReadOnly = False
                        txtRefMethodRata8.ReadOnly = False
                        txtRefMethodRata9.ReadOnly = False
                        txtRefMethodRata10.ReadOnly = False
                        txtRefMethodRata11.ReadOnly = False
                        txtRefMethodRata12.ReadOnly = False
                        txtCMSRata1.ReadOnly = False
                        txtCMSRata2.ReadOnly = False
                        txtCMSRata3.ReadOnly = False
                        txtCMSRata4.ReadOnly = False
                        txtCMSRata5.ReadOnly = False
                        txtCMSRata6.ReadOnly = False
                        txtCMSRata7.ReadOnly = False
                        txtCMSRata8.ReadOnly = False
                        txtCMSRata9.ReadOnly = False
                        txtCMSRata10.ReadOnly = False
                        txtCMSRata11.ReadOnly = False
                        txtCMSRata12.ReadOnly = False
                        chbOmitRunRata1.Enabled = True
                        chbOmitRunRata2.Enabled = True
                        chbOmitRunRata3.Enabled = True
                        chbOmitRunRata4.Enabled = True
                        chbOmitRunRata5.Enabled = True
                        chbOmitRunRata6.Enabled = True
                        chbOmitRunRata7.Enabled = True
                        chbOmitRunRata8.Enabled = True
                        chbOmitRunRata9.Enabled = True
                        chbOmitRunRata10.Enabled = True
                        chbOmitRunRata11.Enabled = True
                        chbOmitRunRata12.Enabled = True
                        cboUnitsRata.Enabled = True
                        txtRelativeAccuracy.ReadOnly = False
                        txtRefMethodPercentRata.ReadOnly = False
                        txtApplicableStandardPercentRata.ReadOnly = False
                        cboDiluentRata.Enabled = True
                        txtPart75Statement.ReadOnly = False
                        txtOtherInformationRata.ReadOnly = False
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtMemorandumStandard.ReadOnly = False
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtModelMemorandumToFile.ReadOnly = False
                        txtSerialNumberMemorandumToFile.ReadOnly = False
                        txtMemorandumToFile.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi1.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi2.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi3.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi4.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Multi5.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Enabled = True
                        txtOperatingCapacityMethod9Multi1.ReadOnly = False
                        txtOperatingCapacityMethod9Multi2.ReadOnly = False
                        txtOperatingCapacityMethod9Multi3.ReadOnly = False
                        txtOperatingCapacityMethod9Multi4.ReadOnly = False
                        txtOperatingCapacityMethod9Multi5.ReadOnly = False
                        cboOperatingCapacityUnitsMethod9Multi.Enabled = True
                        txtAllowableEmissionRate1Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate2Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate3Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate4Method9Multi.ReadOnly = False
                        txtAllowableEmissionRate5Method9Multi.ReadOnly = False
                        cboAllowableEmissionRateUnitsMethod9Multi.Enabled = True
                        txtApplicableRegulationMethod9Multi.ReadOnly = False
                        txtControlEquipmentOperatingDataMethod9Multi.ReadOnly = False
                        txt6minuteAvg1AMethod9Multi.ReadOnly = False
                        txt6minuteAvg1BMethod9Multi.ReadOnly = False
                        txt6minuteAvg1CMethod9Multi.ReadOnly = False
                        txt6minuteAvg1DMethod9Multi.ReadOnly = False
                        txt6minuteAvg1EMethod9Multi.ReadOnly = False
                        txtOtherInformationMethod9.ReadOnly = False
                        txtEquipmentItem1AMethod9Multi.ReadOnly = False
                        txtEquipmentItem1BMethod9Multi.ReadOnly = False
                        txtEquipmentItem1CMethod9Multi.ReadOnly = False
                        txtEquipmentItem1DMethod9Multi.ReadOnly = False
                        txtEquipmentItem1EMethod9Multi.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod22.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod22.Enabled = True
                        txtOperatingCapacityMethod22.ReadOnly = False
                        cboOperatingCapacityUnitsMethod22.Enabled = True
                        txtAllowableEmissionRateMethod22.ReadOnly = False
                        txtApplicableRegulationMethod22.ReadOnly = False
                        txtTestDurationMethod22.ReadOnly = False
                        txtAccumulatedEmissionMethod22.ReadOnly = False
                        txtOtherInformationMethod22.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMethod9Single.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Enabled = True
                        txtOperatingCapacityMethod9Single.ReadOnly = False
                        cboOperatingCapacityUnitsMethod9Single.Enabled = True
                        txtAllowableEmissionRate1Method9Single.ReadOnly = False
                        cboAllowableEmissionRateUnits1Method9Single.Enabled = True
                        txtApplicableRegulationMethod9Single.ReadOnly = False
                        txtControlEquipmentOperatingDataMethod9Single.ReadOnly = False
                        txtTestDurationMethod9Single.ReadOnly = False
                        txtOpacityMethod9Single.ReadOnly = False
                        txtOtherInformationMethod9.ReadOnly = False
                        txtApplicableRegulationMemorandum.ReadOnly = False
                        txtMaximumExpectedOperatingCapacityMemorandumPTE.ReadOnly = False
                        cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Enabled = True
                        txtOperatingCapacityMemorandumPTE.ReadOnly = False
                        cboOperatingCapacityUnitsMemorandumPTE.Enabled = True
                        txtAllowableEmissionRate1MemorandumPTE.ReadOnly = False
                        txtAllowableEmissionRate2MemorandumPTE.ReadOnly = False
                        txtAllowableEmissionRate3MemorandumPTE.ReadOnly = False
                        cboAllowableEmissionRateUnits1MemorandumPTE.Enabled = True
                        cboAllowableEmissionRateUnits2MemorandumPTE.Enabled = True
                        cboAllowableEmissionRateUnits3MemorandumPTE.Enabled = True
                        txtControlEquipmentOperatingDataMemorandumPTE.ReadOnly = False
                        txtMemorandumPTE.ReadOnly = False
                End Select
                Me.cboTestNotificationNumber.Enabled = True
            Else
                txtSourceTested.ReadOnly = True
                mmiPrePopulate.Visible = False
                mmiDefaultCompliance.Visible = False
                cboPollutantDetermined.Enabled = False
                cboMethodDetermined.Enabled = False
                cboReportType.Enabled = False
                cboTestingFirm.Enabled = False
                cboComplianceStatus.Enabled = False
                cboReviewingEngineer.Enabled = False
                cboWitnessingEngineer.Enabled = False
                clbWitnessingEngineers.Enabled = False
                cboISMPUnit.Enabled = False
                DTPTestDateStart.Enabled = False
                DTPTestDateComplete.Enabled = False
                cboComplianceManager.Enabled = False
                cboccBox.Enabled = False
                cboTestNotificationNumber.Enabled = False
                Select Case DocumentType
                    Case "001"
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True
                        txtRunNumOneStackTwoRun1A.ReadOnly = True
                        txtRunNumOneStackTwoRun1B.ReadOnly = True
                        txtGasTempOneStackTwoRun1A.ReadOnly = True
                        txtGasTempOneStackTwoRun1B.ReadOnly = True
                        txtGasMoistOneStackTwoRun1A.ReadOnly = True
                        txtGasMoistOneStackTwoRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackTwoRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackTwoRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackTwoRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackTwoRun1B.ReadOnly = True
                        txtPollConcOneStackTwoRun1A.ReadOnly = True
                        txtPollConcOneStackTwoRun1B.ReadOnly = True
                        cboPollConUnitOneStackTwoRun.Enabled = False
                        txtPollConcAvgOneStackTwoRun.ReadOnly = True
                        txtEmissRateOneStackTwoRun1A.ReadOnly = True
                        txtEmissRateOneStackTwoRun1B.ReadOnly = True
                        cboEmissRateUnitOneStackTwoRun.Enabled = False
                        txtEmissRateAvgOneStackTwoRun.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True
                        txtRunNumOneStackThreeRun1A.ReadOnly = True
                        txtRunNumOneStackThreeRun1B.ReadOnly = True
                        txtRunNumOneStackThreeRun1C.ReadOnly = True
                        txtGasTempOneStackThreeRun1A.ReadOnly = True
                        txtGasTempOneStackThreeRun1B.ReadOnly = True
                        txtGasTempOneStackThreeRun1C.ReadOnly = True
                        txtGasMoistOneStackThreeRun1A.ReadOnly = True
                        txtGasMoistOneStackThreeRun1B.ReadOnly = True
                        txtGasMoistOneStackThreeRun1C.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1C.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1C.ReadOnly = True
                        txtPollConcOneStackThreeRun1A.ReadOnly = True
                        txtPollConcOneStackThreeRun1B.ReadOnly = True
                        txtPollConcOneStackThreeRun1C.ReadOnly = True
                        cboPollConUnitOneStackThreeRun.Enabled = False
                        txtPollConcAvgOneStackThreeRun.ReadOnly = True
                        txtEmissRateOneStackThreeRun1A.ReadOnly = True
                        txtEmissRateOneStackThreeRun1B.ReadOnly = True
                        txtEmissRateOneStackThreeRun1C.ReadOnly = True
                        cboEmissRateUnitOneStackThreeRun.Enabled = False
                        txtEmissRateAvgOneStackThreeRun.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True
                        txtRunNumOneStackFourRun1A.ReadOnly = True
                        txtRunNumOneStackFourRun1B.ReadOnly = True
                        txtRunNumOneStackFourRun1C.ReadOnly = True
                        txtRunNumOneStackFourRun1D.ReadOnly = True
                        txtGasTempOneStackFourRun1A.ReadOnly = True
                        txtGasTempOneStackFourRun1B.ReadOnly = True
                        txtGasTempOneStackFourRun1C.ReadOnly = True
                        txtGasTempOneStackFourRun1D.ReadOnly = True
                        txtGasMoistOneStackFourRun1A.ReadOnly = True
                        txtGasMoistOneStackFourRun1B.ReadOnly = True
                        txtGasMoistOneStackFourRun1C.ReadOnly = True
                        txtGasMoistOneStackFourRun1D.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1C.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1D.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1C.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1D.ReadOnly = True
                        txtPollConcOneStackFourRun1A.ReadOnly = True
                        txtPollConcOneStackFourRun1B.ReadOnly = True
                        txtPollConcOneStackFourRun1C.ReadOnly = True
                        txtPollConcOneStackFourRun1D.ReadOnly = True
                        cboPollConUnitOneStackFourRun.Enabled = False
                        txtPollConcAvgOneStackFourRun.ReadOnly = True
                        txtEmissRateOneStackFourRun1A.ReadOnly = True
                        txtEmissRateOneStackFourRun1B.ReadOnly = True
                        txtEmissRateOneStackFourRun1C.ReadOnly = True
                        txtEmissRateOneStackFourRun1D.ReadOnly = True
                        cboEmissRateUnitOneStackFourRun.Enabled = False
                        txtEmissRateAvgOneStackFourRun.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = False
                        txtOperatingCapacityTwoStack.ReadOnly = True
                        cboOperatingCapacityUnitsTwoStack.Enabled = False
                        txtAllowableEmissionRate1TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = False
                        txtAllowableEmissionRate2TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = False
                        txtAllowableEmissionRate3TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = False
                        txtApplicableRegulationTwoStack.ReadOnly = True
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = True
                        txtOtherInformationTwoStack.ReadOnly = True
                        txtStackOneNameTwoStackStandard.ReadOnly = True
                        txtStackTwoNameTwoStackStandard.ReadOnly = True
                        txtRunNumTwoStackStandard1A.ReadOnly = True
                        txtRunNumTwoStackStandard1B.ReadOnly = True
                        txtRunNumTwoStackStandard1C.ReadOnly = True
                        txtRunNumTwoStackStandard2A.ReadOnly = True
                        txtRunNumTwoStackStandard2B.ReadOnly = True
                        txtRunNumTwoStackStandard2C.ReadOnly = True
                        txtGasTempTwoStackStandard1A.ReadOnly = True
                        txtGasTempTwoStackStandard1B.ReadOnly = True
                        txtGasTempTwoStackStandard1C.ReadOnly = True
                        txtGasTempTwoStackStandard2A.ReadOnly = True
                        txtGasTempTwoStackStandard2B.ReadOnly = True
                        txtGasTempTwoStackStandard2C.ReadOnly = True
                        txtGasMoistTwoStackStandard1A.ReadOnly = True
                        txtGasMoistTwoStackStandard1B.ReadOnly = True
                        txtGasMoistTwoStackStandard1C.ReadOnly = True
                        txtGasMoistTwoStackStandard2A.ReadOnly = True
                        txtGasMoistTwoStackStandard2B.ReadOnly = True
                        txtGasMoistTwoStackStandard2C.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1A.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1B.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1C.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2A.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2B.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2C.ReadOnly = True
                        txtPollConcTwoStackStandard1A.ReadOnly = True
                        txtPollConcTwoStackStandard1B.ReadOnly = True
                        txtPollConcTwoStackStandard1C.ReadOnly = True
                        txtPollConcTwoStackStandard2A.ReadOnly = True
                        txtPollConcTwoStackStandard2B.ReadOnly = True
                        txtPollConcTwoStackStandard2C.ReadOnly = True
                        cboPollConUnitTwoStackStandard.Enabled = False
                        txtPollConcAvgTwoStackStandard1.ReadOnly = True
                        txtPollConcAvgTwoStackStandard2.ReadOnly = True
                        txtEmissRateTwoStackStandard1A.ReadOnly = True
                        txtEmissRateTwoStackStandard1B.ReadOnly = True
                        txtEmissRateTwoStackStandard1C.ReadOnly = True
                        txtEmissRateTwoStackStandard2A.ReadOnly = True
                        txtEmissRateTwoStackStandard2B.ReadOnly = True
                        txtEmissRateTwoStackStandard2C.ReadOnly = True
                        cboEmissRateUnitTwoStackStandard.Enabled = False
                        txtEmissRateAvgTwoStackStandard1.ReadOnly = True
                        txtEmissRateAvgTwoStackStandard2.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard1.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard2.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard3.ReadOnly = True
                        txtEmissRateTotalAvgTwoStackStandard.ReadOnly = True
                        txtPercentAllowableTwoStack.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = False
                        txtOperatingCapacityTwoStack.ReadOnly = True
                        cboOperatingCapacityUnitsTwoStack.Enabled = False
                        txtAllowableEmissionRate1TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = False
                        txtAllowableEmissionRate2TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = False
                        txtAllowableEmissionRate3TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = False
                        txtApplicableRegulationTwoStack.ReadOnly = True
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = True
                        txtOtherInformationTwoStack.ReadOnly = True
                        txtStackOneNameTwoStackDRE.ReadOnly = True
                        txtStackTwoNameTwoStackDRE.ReadOnly = True
                        txtRunNumTwoStackDRE1A.ReadOnly = True
                        txtRunNumTwoStackDRE1B.ReadOnly = True
                        txtRunNumTwoStackDRE1C.ReadOnly = True
                        txtRunNumTwoStackDRE2A.ReadOnly = True
                        txtRunNumTwoStackDRE2B.ReadOnly = True
                        txtRunNumTwoStackDRE2C.ReadOnly = True
                        txtGasTempTwoStackDRE1A.ReadOnly = True
                        txtGasTempTwoStackDRE1B.ReadOnly = True
                        txtGasTempTwoStackDRE1C.ReadOnly = True
                        txtGasTempTwoStackDRE2A.ReadOnly = True
                        txtGasTempTwoStackDRE2B.ReadOnly = True
                        txtGasTempTwoStackDRE2C.ReadOnly = True
                        txtGasMoistTwoStackDRE1A.ReadOnly = True
                        txtGasMoistTwoStackDRE1B.ReadOnly = True
                        txtGasMoistTwoStackDRE1C.ReadOnly = True
                        txtGasMoistTwoStackDRE2A.ReadOnly = True
                        txtGasMoistTwoStackDRE2B.ReadOnly = True
                        txtGasMoistTwoStackDRE2C.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1A.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1B.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1C.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2A.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2B.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2C.ReadOnly = True
                        txtPollConcTwoStackDRE1A.ReadOnly = True
                        txtPollConcTwoStackDRE1B.ReadOnly = True
                        txtPollConcTwoStackDRE1C.ReadOnly = True
                        txtPollConcTwoStackDRE2A.ReadOnly = True
                        txtPollConcTwoStackDRE2B.ReadOnly = True
                        txtPollConcTwoStackDRE2C.ReadOnly = True
                        cboPollConUnitTwoStackDRE.Enabled = False
                        txtPollConcAvgTwoStackDRE1.ReadOnly = True
                        txtPollConcAvgTwoStackDRE2.ReadOnly = True
                        txtEmissRateTwoStackDRE1A.ReadOnly = True
                        txtEmissRateTwoStackDRE1B.ReadOnly = True
                        txtEmissRateTwoStackDRE1C.ReadOnly = True
                        txtEmissRateTwoStackDRE2A.ReadOnly = True
                        txtEmissRateTwoStackDRE2B.ReadOnly = True
                        txtEmissRateTwoStackDRE2C.ReadOnly = True
                        cboEmissRateUnitTwoStackDRE.Enabled = False
                        txtEmissRateAvgTwoStackDRE1.ReadOnly = True
                        txtEmissRateAvgTwoStackDRE2.ReadOnly = True
                        txtDestructionEfficiencyTwoStackDRE.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityLoadingRack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Enabled = False
                        txtOperatingCapacityLoadingRack.ReadOnly = True
                        cboOperatingCapacityUnitsLoadingRack.Enabled = False
                        txtAllowableEmissionRate1LoadingRack.ReadOnly = True
                        txtAllowableEmissionRate2LoadingRack.ReadOnly = True
                        txtAllowableEmissionRate3LoadingRack.ReadOnly = True
                        cboAllowableEmissionRateUnits1LoadingRack.Enabled = False
                        cboAllowableEmissionRateUnits2LoadingRack.Enabled = False
                        cboAllowableEmissionRateUnits3LoadingRack.Enabled = False
                        txtApplicableRegulationLoadingRack.ReadOnly = True
                        txtControlEquipmentOperatingDataLoadingRack.ReadOnly = True
                        txtTestDurationLoadingRack.ReadOnly = True
                        cboTestDurationUnitsLoadingRack.Enabled = False
                        txtPollConcINLoadingRack.ReadOnly = True
                        cboPollConUnitINLoadingRack.Enabled = False
                        txtPollConcOUTLoadingRack.ReadOnly = True
                        cboPollConUnitOUTLoadingRack.Enabled = False
                        txtDestructionEfficiencyLoadingRack.ReadOnly = True
                        txtEmissRateLoadingRack.ReadOnly = True
                        cboEmissRateUnitLoadingRack.Enabled = False
                        txtOtherInformationLoadingRack.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityPond.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsPond.Enabled = False
                        txtOperatingCapacityPond.ReadOnly = True
                        cboOperatingCapacityUnitsPond.Enabled = False
                        txtAllowableEmissionRate1Pond.ReadOnly = True
                        txtAllowableEmissionRate2Pond.ReadOnly = True
                        txtAllowableEmissionRate3Pond.ReadOnly = True
                        cboAllowableEmissionRateUnits1Pond.Enabled = False
                        cboAllowableEmissionRateUnits2Pond.Enabled = False
                        cboAllowableEmissionRateUnits3Pond.Enabled = False
                        txtApplicableRegulationPond.ReadOnly = True
                        txtControlEquipmentOperatingDataPond.ReadOnly = True
                        txtRunNumPond1A.ReadOnly = True
                        txtRunNumPond1B.ReadOnly = True
                        txtRunNumPond1C.ReadOnly = True
                        txtPollConcPond1A.ReadOnly = True
                        txtPollConcPond1B.ReadOnly = True
                        txtPollConcPond1C.ReadOnly = True
                        cboPollConUnitPond.Enabled = False
                        txtPollConcAvgPond.ReadOnly = True
                        txtTreatmentRatePond1A.ReadOnly = True
                        txtTreatmentRatePond1B.ReadOnly = True
                        txtTreatmentRatePond1C.ReadOnly = True
                        cboTreatmentRateUnitPond.Enabled = False
                        txtTreatmentRateAvgPond.ReadOnly = True
                        txtDestructionEfficancyPond.ReadOnly = True
                        txtOtherInformationPond.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityGas.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsGas.Enabled = False
                        txtOperatingCapacityGas.ReadOnly = True
                        cboOperatingCapacityUnitsGas.Enabled = False
                        txtAllowableEmissionRate1Gas.ReadOnly = True
                        txtAllowableEmissionRate2Gas.ReadOnly = True
                        txtAllowableEmissionRate3Gas.ReadOnly = True
                        cboAllowableEmissionRateUnits1Gas.Enabled = False
                        cboAllowableEmissionRateUnits2Gas.Enabled = False
                        cboAllowableEmissionRateUnits3Gas.Enabled = False
                        txtApplicableRegulationGas.ReadOnly = True
                        txtControlEquipmentOperatingDataGas.ReadOnly = True
                        txtRunNumGas1A.ReadOnly = True
                        txtRunNumGas1B.ReadOnly = True
                        txtRunNumGas1C.ReadOnly = True
                        txtPollConcGas1A.ReadOnly = True
                        txtPollConcGas1B.ReadOnly = True
                        txtPollConcGas1C.ReadOnly = True
                        cboPollConUnitGas.Enabled = False
                        txtPollConcAvgGas.ReadOnly = True
                        txtEmissRateGas1A.ReadOnly = True
                        txtEmissRateGas1B.ReadOnly = True
                        txtEmissRateGas1C.ReadOnly = True
                        cboEmissRateUnitGas.Enabled = False
                        txtEmissRateAvgGas.ReadOnly = True
                        txtPercentAllowableGas.ReadOnly = True
                        txtOtherInformationGas.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityFlare.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsFlare.Enabled = False
                        txtOperatingCapacityFlare.ReadOnly = True
                        cboOperatingCapacityUnitsFlare.Enabled = False
                        txtVelocityFlare.ReadOnly = True
                        txtHeatContentFlare.ReadOnly = True
                        txtApplicableRegulationFlare.ReadOnly = True
                        txtMonitoringDataFlare.ReadOnly = True
                        txtHeatingValue1AFlare.ReadOnly = True
                        txtHeatingValue1BFlare.ReadOnly = True
                        txtHeatingValue1CFlare.ReadOnly = True
                        cboHeatingValueUnits.Enabled = False
                        txtHeatingValuesAvgFlare.ReadOnly = True
                        txtVelocity1AFlare.ReadOnly = True
                        txtVelocity1BFlare.ReadOnly = True
                        txtVelocity1CFlare.ReadOnly = True
                        cboVelocityUnitsFlare.Enabled = False
                        txtVelocityAvgFlare.ReadOnly = True
                        txtPercentAllowableFlare.ReadOnly = True
                        txtOtherInformationFlare.ReadOnly = True
                        txtApplicableStandardRata.ReadOnly = True
                        cboDilutentMonitoredRata.Enabled = False
                        txtApplicableRegulationRata.ReadOnly = True
                        txtRefMethodRata1.ReadOnly = True
                        txtRefMethodRata2.ReadOnly = True
                        txtRefMethodRata3.ReadOnly = True
                        txtRefMethodRata4.ReadOnly = True
                        txtRefMethodRata5.ReadOnly = True
                        txtRefMethodRata6.ReadOnly = True
                        txtRefMethodRata7.ReadOnly = True
                        txtRefMethodRata8.ReadOnly = True
                        txtRefMethodRata9.ReadOnly = True
                        txtRefMethodRata10.ReadOnly = True
                        txtRefMethodRata11.ReadOnly = True
                        txtRefMethodRata12.ReadOnly = True
                        txtCMSRata1.ReadOnly = True
                        txtCMSRata2.ReadOnly = True
                        txtCMSRata3.ReadOnly = True
                        txtCMSRata4.ReadOnly = True
                        txtCMSRata5.ReadOnly = True
                        txtCMSRata6.ReadOnly = True
                        txtCMSRata7.ReadOnly = True
                        txtCMSRata8.ReadOnly = True
                        txtCMSRata9.ReadOnly = True
                        txtCMSRata10.ReadOnly = True
                        txtCMSRata11.ReadOnly = True
                        txtCMSRata12.ReadOnly = True
                        chbOmitRunRata1.Enabled = False
                        chbOmitRunRata2.Enabled = False
                        chbOmitRunRata3.Enabled = False
                        chbOmitRunRata4.Enabled = False
                        chbOmitRunRata5.Enabled = False
                        chbOmitRunRata6.Enabled = False
                        chbOmitRunRata7.Enabled = False
                        chbOmitRunRata8.Enabled = False
                        chbOmitRunRata9.Enabled = False
                        chbOmitRunRata10.Enabled = False
                        chbOmitRunRata11.Enabled = False
                        chbOmitRunRata12.Enabled = False
                        cboUnitsRata.Enabled = False
                        txtRelativeAccuracy.ReadOnly = True
                        txtRefMethodPercentRata.ReadOnly = True
                        txtApplicableStandardPercentRata.ReadOnly = True
                        cboDiluentRata.Enabled = False
                        txtPart75Statement.ReadOnly = True
                        txtOtherInformationRata.ReadOnly = True
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtMemorandumStandard.ReadOnly = True
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtModelMemorandumToFile.ReadOnly = True
                        txtSerialNumberMemorandumToFile.ReadOnly = True
                        txtMemorandumToFile.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi1.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi2.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi3.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi4.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi5.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Enabled = False
                        txtOperatingCapacityMethod9Multi1.ReadOnly = True
                        txtOperatingCapacityMethod9Multi2.ReadOnly = True
                        txtOperatingCapacityMethod9Multi3.ReadOnly = True
                        txtOperatingCapacityMethod9Multi4.ReadOnly = True
                        txtOperatingCapacityMethod9Multi5.ReadOnly = True
                        cboOperatingCapacityUnitsMethod9Multi.Enabled = False
                        txtAllowableEmissionRate1Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate2Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate3Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate4Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate5Method9Multi.ReadOnly = True
                        cboAllowableEmissionRateUnitsMethod9Multi.Enabled = False
                        txtApplicableRegulationMethod9Multi.ReadOnly = True
                        txtControlEquipmentOperatingDataMethod9Multi.ReadOnly = True
                        txt6minuteAvg1AMethod9Multi.ReadOnly = True
                        txt6minuteAvg1BMethod9Multi.ReadOnly = True
                        txt6minuteAvg1CMethod9Multi.ReadOnly = True
                        txt6minuteAvg1DMethod9Multi.ReadOnly = True
                        txt6minuteAvg1EMethod9Multi.ReadOnly = True
                        txtOtherInformationMethod9.ReadOnly = True
                        txtEquipmentItem1AMethod9Multi.ReadOnly = True
                        txtEquipmentItem1BMethod9Multi.ReadOnly = True
                        txtEquipmentItem1CMethod9Multi.ReadOnly = True
                        txtEquipmentItem1DMethod9Multi.ReadOnly = True
                        txtEquipmentItem1EMethod9Multi.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod22.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod22.Enabled = False
                        txtOperatingCapacityMethod22.ReadOnly = True
                        cboOperatingCapacityUnitsMethod22.Enabled = False
                        txtAllowableEmissionRateMethod22.ReadOnly = True
                        txtApplicableRegulationMethod22.ReadOnly = True
                        txtTestDurationMethod22.ReadOnly = True
                        txtAccumulatedEmissionMethod22.ReadOnly = True
                        txtOtherInformationMethod22.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Single.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Enabled = False
                        txtOperatingCapacityMethod9Single.ReadOnly = True
                        cboOperatingCapacityUnitsMethod9Single.Enabled = False
                        txtAllowableEmissionRate1Method9Single.ReadOnly = True
                        cboAllowableEmissionRateUnits1Method9Single.Enabled = False
                        txtApplicableRegulationMethod9Single.ReadOnly = True
                        txtControlEquipmentOperatingDataMethod9Single.ReadOnly = True
                        txtTestDurationMethod9Single.ReadOnly = True
                        txtOpacityMethod9Single.ReadOnly = True
                        txtOtherInformationMethod9.ReadOnly = True
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMemorandumPTE.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Enabled = False
                        txtOperatingCapacityMemorandumPTE.ReadOnly = True
                        cboOperatingCapacityUnitsMemorandumPTE.Enabled = False
                        txtAllowableEmissionRate1MemorandumPTE.ReadOnly = True
                        txtAllowableEmissionRate2MemorandumPTE.ReadOnly = True
                        txtAllowableEmissionRate3MemorandumPTE.ReadOnly = True
                        cboAllowableEmissionRateUnits1MemorandumPTE.Enabled = False
                        cboAllowableEmissionRateUnits2MemorandumPTE.Enabled = False
                        cboAllowableEmissionRateUnits3MemorandumPTE.Enabled = False
                        txtControlEquipmentOperatingDataMemorandumPTE.ReadOnly = True
                        txtMemorandumPTE.ReadOnly = True

                    Case "002" 'One Stack Two Run
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True

                        txtRunNumOneStackTwoRun1A.ReadOnly = True
                        txtRunNumOneStackTwoRun1B.ReadOnly = True
                        txtGasTempOneStackTwoRun1A.ReadOnly = True
                        txtGasTempOneStackTwoRun1B.ReadOnly = True
                        txtGasMoistOneStackTwoRun1A.ReadOnly = True
                        txtGasMoistOneStackTwoRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackTwoRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackTwoRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackTwoRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackTwoRun1B.ReadOnly = True
                        txtPollConcOneStackTwoRun1A.ReadOnly = True
                        txtPollConcOneStackTwoRun1B.ReadOnly = True
                        cboPollConUnitOneStackTwoRun.Enabled = False
                        txtPollConcAvgOneStackTwoRun.ReadOnly = True
                        txtEmissRateOneStackTwoRun1A.ReadOnly = True
                        txtEmissRateOneStackTwoRun1B.ReadOnly = True
                        cboEmissRateUnitOneStackTwoRun.Enabled = False
                        txtEmissRateAvgOneStackTwoRun.ReadOnly = True

                    Case "003" 'One Stack Three Run
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True

                        txtRunNumOneStackThreeRun1A.ReadOnly = True
                        txtRunNumOneStackThreeRun1B.ReadOnly = True
                        txtRunNumOneStackThreeRun1C.ReadOnly = True
                        txtGasTempOneStackThreeRun1A.ReadOnly = True
                        txtGasTempOneStackThreeRun1B.ReadOnly = True
                        txtGasTempOneStackThreeRun1C.ReadOnly = True
                        txtGasMoistOneStackThreeRun1A.ReadOnly = True
                        txtGasMoistOneStackThreeRun1B.ReadOnly = True
                        txtGasMoistOneStackThreeRun1C.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1C.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1C.ReadOnly = True
                        txtPollConcOneStackThreeRun1A.ReadOnly = True
                        txtPollConcOneStackThreeRun1B.ReadOnly = True
                        txtPollConcOneStackThreeRun1C.ReadOnly = True
                        cboPollConUnitOneStackThreeRun.Enabled = False
                        txtPollConcAvgOneStackThreeRun.ReadOnly = True
                        txtEmissRateOneStackThreeRun1A.ReadOnly = True
                        txtEmissRateOneStackThreeRun1B.ReadOnly = True
                        txtEmissRateOneStackThreeRun1C.ReadOnly = True
                        cboEmissRateUnitOneStackThreeRun.Enabled = False
                        txtEmissRateAvgOneStackThreeRun.ReadOnly = True

                    Case "004" 'One Stack Four Run
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True

                        txtRunNumOneStackFourRun1A.ReadOnly = True
                        txtRunNumOneStackFourRun1B.ReadOnly = True
                        txtRunNumOneStackFourRun1C.ReadOnly = True
                        txtRunNumOneStackFourRun1D.ReadOnly = True
                        txtGasTempOneStackFourRun1A.ReadOnly = True
                        txtGasTempOneStackFourRun1B.ReadOnly = True
                        txtGasTempOneStackFourRun1C.ReadOnly = True
                        txtGasTempOneStackFourRun1D.ReadOnly = True
                        txtGasMoistOneStackFourRun1A.ReadOnly = True
                        txtGasMoistOneStackFourRun1B.ReadOnly = True
                        txtGasMoistOneStackFourRun1C.ReadOnly = True
                        txtGasMoistOneStackFourRun1D.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1C.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1D.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1C.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1D.ReadOnly = True
                        txtPollConcOneStackFourRun1A.ReadOnly = True
                        txtPollConcOneStackFourRun1B.ReadOnly = True
                        txtPollConcOneStackFourRun1C.ReadOnly = True
                        txtPollConcOneStackFourRun1D.ReadOnly = True
                        cboPollConUnitOneStackFourRun.Enabled = False
                        txtPollConcAvgOneStackFourRun.ReadOnly = True
                        txtEmissRateOneStackFourRun1A.ReadOnly = True
                        txtEmissRateOneStackFourRun1B.ReadOnly = True
                        txtEmissRateOneStackFourRun1C.ReadOnly = True
                        txtEmissRateOneStackFourRun1D.ReadOnly = True
                        cboEmissRateUnitOneStackFourRun.Enabled = False
                        txtEmissRateAvgOneStackFourRun.ReadOnly = True

                    Case "005" 'Two Stack Standard 
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = False
                        txtOperatingCapacityTwoStack.ReadOnly = True
                        cboOperatingCapacityUnitsTwoStack.Enabled = False
                        txtAllowableEmissionRate1TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = False
                        txtAllowableEmissionRate2TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = False
                        txtAllowableEmissionRate3TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = False
                        txtApplicableRegulationTwoStack.ReadOnly = True
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = True
                        txtOtherInformationTwoStack.ReadOnly = True

                        txtStackOneNameTwoStackStandard.ReadOnly = True
                        txtStackTwoNameTwoStackStandard.ReadOnly = True
                        txtRunNumTwoStackStandard1A.ReadOnly = True
                        txtRunNumTwoStackStandard1B.ReadOnly = True
                        txtRunNumTwoStackStandard1C.ReadOnly = True
                        txtRunNumTwoStackStandard2A.ReadOnly = True
                        txtRunNumTwoStackStandard2B.ReadOnly = True
                        txtRunNumTwoStackStandard2C.ReadOnly = True
                        txtGasTempTwoStackStandard1A.ReadOnly = True
                        txtGasTempTwoStackStandard1B.ReadOnly = True
                        txtGasTempTwoStackStandard1C.ReadOnly = True
                        txtGasTempTwoStackStandard2A.ReadOnly = True
                        txtGasTempTwoStackStandard2B.ReadOnly = True
                        txtGasTempTwoStackStandard2C.ReadOnly = True
                        txtGasMoistTwoStackStandard1A.ReadOnly = True
                        txtGasMoistTwoStackStandard1B.ReadOnly = True
                        txtGasMoistTwoStackStandard1C.ReadOnly = True
                        txtGasMoistTwoStackStandard2A.ReadOnly = True
                        txtGasMoistTwoStackStandard2B.ReadOnly = True
                        txtGasMoistTwoStackStandard2C.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1A.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1B.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1C.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2A.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2B.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2C.ReadOnly = True
                        txtPollConcTwoStackStandard1A.ReadOnly = True
                        txtPollConcTwoStackStandard1B.ReadOnly = True
                        txtPollConcTwoStackStandard1C.ReadOnly = True
                        txtPollConcTwoStackStandard2A.ReadOnly = True
                        txtPollConcTwoStackStandard2B.ReadOnly = True
                        txtPollConcTwoStackStandard2C.ReadOnly = True
                        cboPollConUnitTwoStackStandard.Enabled = False
                        txtPollConcAvgTwoStackStandard1.ReadOnly = True
                        txtPollConcAvgTwoStackStandard2.ReadOnly = True
                        txtEmissRateTwoStackStandard1A.ReadOnly = True
                        txtEmissRateTwoStackStandard1B.ReadOnly = True
                        txtEmissRateTwoStackStandard1C.ReadOnly = True
                        txtEmissRateTwoStackStandard2A.ReadOnly = True
                        txtEmissRateTwoStackStandard2B.ReadOnly = True
                        txtEmissRateTwoStackStandard2C.ReadOnly = True
                        cboEmissRateUnitTwoStackStandard.Enabled = False
                        txtEmissRateAvgTwoStackStandard1.ReadOnly = True
                        txtEmissRateAvgTwoStackStandard2.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard1.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard2.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard3.ReadOnly = True
                        txtEmissRateTotalAvgTwoStackStandard.ReadOnly = True
                        txtPercentAllowableTwoStack.ReadOnly = True

                    Case "006" 'Two Stack DRE
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = False
                        txtOperatingCapacityTwoStack.ReadOnly = True
                        cboOperatingCapacityUnitsTwoStack.Enabled = False
                        txtAllowableEmissionRate1TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = False
                        txtAllowableEmissionRate2TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = False
                        txtAllowableEmissionRate3TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = False
                        txtApplicableRegulationTwoStack.ReadOnly = True
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = True
                        txtOtherInformationTwoStack.ReadOnly = True

                        txtStackOneNameTwoStackDRE.ReadOnly = True
                        txtStackTwoNameTwoStackDRE.ReadOnly = True
                        txtRunNumTwoStackDRE1A.ReadOnly = True
                        txtRunNumTwoStackDRE1B.ReadOnly = True
                        txtRunNumTwoStackDRE1C.ReadOnly = True
                        txtRunNumTwoStackDRE2A.ReadOnly = True
                        txtRunNumTwoStackDRE2B.ReadOnly = True
                        txtRunNumTwoStackDRE2C.ReadOnly = True
                        txtGasTempTwoStackDRE1A.ReadOnly = True
                        txtGasTempTwoStackDRE1B.ReadOnly = True
                        txtGasTempTwoStackDRE1C.ReadOnly = True
                        txtGasTempTwoStackDRE2A.ReadOnly = True
                        txtGasTempTwoStackDRE2B.ReadOnly = True
                        txtGasTempTwoStackDRE2C.ReadOnly = True
                        txtGasMoistTwoStackDRE1A.ReadOnly = True
                        txtGasMoistTwoStackDRE1B.ReadOnly = True
                        txtGasMoistTwoStackDRE1C.ReadOnly = True
                        txtGasMoistTwoStackDRE2A.ReadOnly = True
                        txtGasMoistTwoStackDRE2B.ReadOnly = True
                        txtGasMoistTwoStackDRE2C.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1A.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1B.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1C.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2A.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2B.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2C.ReadOnly = True
                        txtPollConcTwoStackDRE1A.ReadOnly = True
                        txtPollConcTwoStackDRE1B.ReadOnly = True
                        txtPollConcTwoStackDRE1C.ReadOnly = True
                        txtPollConcTwoStackDRE2A.ReadOnly = True
                        txtPollConcTwoStackDRE2B.ReadOnly = True
                        txtPollConcTwoStackDRE2C.ReadOnly = True
                        cboPollConUnitTwoStackDRE.Enabled = False
                        txtPollConcAvgTwoStackDRE1.ReadOnly = True
                        txtPollConcAvgTwoStackDRE2.ReadOnly = True
                        txtEmissRateTwoStackDRE1A.ReadOnly = True
                        txtEmissRateTwoStackDRE1B.ReadOnly = True
                        txtEmissRateTwoStackDRE1C.ReadOnly = True
                        txtEmissRateTwoStackDRE2A.ReadOnly = True
                        txtEmissRateTwoStackDRE2B.ReadOnly = True
                        txtEmissRateTwoStackDRE2C.ReadOnly = True
                        cboEmissRateUnitTwoStackDRE.Enabled = False
                        txtEmissRateAvgTwoStackDRE1.ReadOnly = True
                        txtEmissRateAvgTwoStackDRE2.ReadOnly = True
                        txtDestructionEfficiencyTwoStackDRE.ReadOnly = True

                    Case "007" 'Loading Rack
                        txtMaximumExpectedOperatingCapacityLoadingRack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Enabled = False
                        txtOperatingCapacityLoadingRack.ReadOnly = True
                        cboOperatingCapacityUnitsLoadingRack.Enabled = False
                        txtAllowableEmissionRate1LoadingRack.ReadOnly = True
                        txtAllowableEmissionRate2LoadingRack.ReadOnly = True
                        txtAllowableEmissionRate3LoadingRack.ReadOnly = True
                        cboAllowableEmissionRateUnits1LoadingRack.Enabled = False
                        cboAllowableEmissionRateUnits2LoadingRack.Enabled = False
                        cboAllowableEmissionRateUnits3LoadingRack.Enabled = False
                        txtApplicableRegulationLoadingRack.ReadOnly = True
                        txtControlEquipmentOperatingDataLoadingRack.ReadOnly = True
                        txtTestDurationLoadingRack.ReadOnly = True
                        cboTestDurationUnitsLoadingRack.Enabled = False
                        txtPollConcINLoadingRack.ReadOnly = True
                        cboPollConUnitINLoadingRack.Enabled = False
                        txtPollConcOUTLoadingRack.ReadOnly = True
                        cboPollConUnitOUTLoadingRack.Enabled = False
                        txtDestructionEfficiencyLoadingRack.ReadOnly = True
                        txtEmissRateLoadingRack.ReadOnly = True
                        cboEmissRateUnitLoadingRack.Enabled = False
                        txtOtherInformationLoadingRack.ReadOnly = True

                    Case "008" 'Pond Treatment 
                        txtMaximumExpectedOperatingCapacityPond.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsPond.Enabled = False
                        txtOperatingCapacityPond.ReadOnly = True
                        cboOperatingCapacityUnitsPond.Enabled = False
                        txtAllowableEmissionRate1Pond.ReadOnly = True
                        txtAllowableEmissionRate2Pond.ReadOnly = True
                        txtAllowableEmissionRate3Pond.ReadOnly = True
                        cboAllowableEmissionRateUnits1Pond.Enabled = False
                        cboAllowableEmissionRateUnits2Pond.Enabled = False
                        cboAllowableEmissionRateUnits3Pond.Enabled = False
                        txtApplicableRegulationPond.ReadOnly = True
                        txtControlEquipmentOperatingDataPond.ReadOnly = True
                        txtRunNumPond1A.ReadOnly = True
                        txtRunNumPond1B.ReadOnly = True
                        txtRunNumPond1C.ReadOnly = True
                        txtPollConcPond1A.ReadOnly = True
                        txtPollConcPond1B.ReadOnly = True
                        txtPollConcPond1C.ReadOnly = True
                        cboPollConUnitPond.Enabled = False
                        txtPollConcAvgPond.ReadOnly = True
                        txtTreatmentRatePond1A.ReadOnly = True
                        txtTreatmentRatePond1B.ReadOnly = True
                        txtTreatmentRatePond1C.ReadOnly = True
                        cboTreatmentRateUnitPond.Enabled = False
                        txtTreatmentRateAvgPond.ReadOnly = True
                        txtDestructionEfficancyPond.ReadOnly = True
                        txtOtherInformationPond.ReadOnly = True

                    Case "009" 'Gas Concentration 
                        txtMaximumExpectedOperatingCapacityGas.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsGas.Enabled = False
                        txtOperatingCapacityGas.ReadOnly = True
                        cboOperatingCapacityUnitsGas.Enabled = False
                        txtAllowableEmissionRate1Gas.ReadOnly = True
                        txtAllowableEmissionRate2Gas.ReadOnly = True
                        txtAllowableEmissionRate3Gas.ReadOnly = True
                        cboAllowableEmissionRateUnits1Gas.Enabled = False
                        cboAllowableEmissionRateUnits2Gas.Enabled = False
                        cboAllowableEmissionRateUnits3Gas.Enabled = False
                        txtApplicableRegulationGas.ReadOnly = True
                        txtControlEquipmentOperatingDataGas.ReadOnly = True
                        txtRunNumGas1A.ReadOnly = True
                        txtRunNumGas1B.ReadOnly = True
                        txtRunNumGas1C.ReadOnly = True
                        txtPollConcGas1A.ReadOnly = True
                        txtPollConcGas1B.ReadOnly = True
                        txtPollConcGas1C.ReadOnly = True
                        cboPollConUnitGas.Enabled = False
                        txtPollConcAvgGas.ReadOnly = True
                        txtEmissRateGas1A.ReadOnly = True
                        txtEmissRateGas1B.ReadOnly = True
                        txtEmissRateGas1C.ReadOnly = True
                        cboEmissRateUnitGas.Enabled = False
                        txtEmissRateAvgGas.ReadOnly = True
                        txtPercentAllowableGas.ReadOnly = True
                        txtOtherInformationGas.ReadOnly = True

                    Case "010" 'Flare
                        txtMaximumExpectedOperatingCapacityFlare.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsFlare.Enabled = False
                        txtOperatingCapacityFlare.ReadOnly = True
                        cboOperatingCapacityUnitsFlare.Enabled = False
                        txtVelocityFlare.ReadOnly = True
                        txtHeatContentFlare.ReadOnly = True
                        txtApplicableRegulationFlare.ReadOnly = True
                        txtMonitoringDataFlare.ReadOnly = True
                        txtHeatingValue1AFlare.ReadOnly = True
                        txtHeatingValue1BFlare.ReadOnly = True
                        txtHeatingValue1CFlare.ReadOnly = True
                        cboHeatingValueUnits.Enabled = False
                        txtHeatingValuesAvgFlare.ReadOnly = True
                        txtVelocity1AFlare.ReadOnly = True
                        txtVelocity1BFlare.ReadOnly = True
                        txtVelocity1CFlare.ReadOnly = True
                        cboVelocityUnitsFlare.Enabled = False
                        txtVelocityAvgFlare.ReadOnly = True
                        txtPercentAllowableFlare.ReadOnly = True
                        txtOtherInformationFlare.ReadOnly = True

                    Case "011" 'RATA 
                        txtApplicableStandardRata.ReadOnly = True
                        cboDilutentMonitoredRata.Enabled = False
                        txtApplicableRegulationRata.ReadOnly = True
                        txtRefMethodRata1.ReadOnly = True
                        txtRefMethodRata2.ReadOnly = True
                        txtRefMethodRata3.ReadOnly = True
                        txtRefMethodRata4.ReadOnly = True
                        txtRefMethodRata5.ReadOnly = True
                        txtRefMethodRata6.ReadOnly = True
                        txtRefMethodRata7.ReadOnly = True
                        txtRefMethodRata8.ReadOnly = True
                        txtRefMethodRata9.ReadOnly = True
                        txtRefMethodRata10.ReadOnly = True
                        txtRefMethodRata11.ReadOnly = True
                        txtRefMethodRata12.ReadOnly = True
                        txtCMSRata1.ReadOnly = True
                        txtCMSRata2.ReadOnly = True
                        txtCMSRata3.ReadOnly = True
                        txtCMSRata4.ReadOnly = True
                        txtCMSRata5.ReadOnly = True
                        txtCMSRata6.ReadOnly = True
                        txtCMSRata7.ReadOnly = True
                        txtCMSRata8.ReadOnly = True
                        txtCMSRata9.ReadOnly = True
                        txtCMSRata10.ReadOnly = True
                        txtCMSRata11.ReadOnly = True
                        txtCMSRata12.ReadOnly = True
                        chbOmitRunRata1.Enabled = False
                        chbOmitRunRata2.Enabled = False
                        chbOmitRunRata3.Enabled = False
                        chbOmitRunRata4.Enabled = False
                        chbOmitRunRata5.Enabled = False
                        chbOmitRunRata6.Enabled = False
                        chbOmitRunRata7.Enabled = False
                        chbOmitRunRata8.Enabled = False
                        chbOmitRunRata9.Enabled = False
                        chbOmitRunRata10.Enabled = False
                        chbOmitRunRata11.Enabled = False
                        chbOmitRunRata12.Enabled = False
                        cboUnitsRata.Enabled = False
                        txtRelativeAccuracy.ReadOnly = True
                        txtRefMethodPercentRata.ReadOnly = True
                        txtApplicableStandardPercentRata.ReadOnly = True
                        cboDiluentRata.Enabled = False
                        txtPart75Statement.ReadOnly = True
                        txtOtherInformationRata.ReadOnly = True

                    Case "012" 'Memo Standard 
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtMemorandumStandard.ReadOnly = True

                    Case "013" 'Memo To File
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtModelMemorandumToFile.ReadOnly = True
                        txtSerialNumberMemorandumToFile.ReadOnly = True
                        txtMemorandumToFile.ReadOnly = True

                    Case "014" 'Method 9 Multi 
                        txtMaximumExpectedOperatingCapacityMethod9Multi1.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi2.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi3.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi4.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi5.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Enabled = False
                        txtOperatingCapacityMethod9Multi1.ReadOnly = True
                        txtOperatingCapacityMethod9Multi2.ReadOnly = True
                        txtOperatingCapacityMethod9Multi3.ReadOnly = True
                        txtOperatingCapacityMethod9Multi4.ReadOnly = True
                        txtOperatingCapacityMethod9Multi5.ReadOnly = True
                        cboOperatingCapacityUnitsMethod9Multi.Enabled = False
                        txtAllowableEmissionRate1Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate2Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate3Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate4Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate5Method9Multi.ReadOnly = True
                        cboAllowableEmissionRateUnitsMethod9Multi.Enabled = False
                        txtApplicableRegulationMethod9Multi.ReadOnly = True
                        txtControlEquipmentOperatingDataMethod9Multi.ReadOnly = True
                        txt6minuteAvg1AMethod9Multi.ReadOnly = True
                        txt6minuteAvg1BMethod9Multi.ReadOnly = True
                        txt6minuteAvg1CMethod9Multi.ReadOnly = True
                        txt6minuteAvg1DMethod9Multi.ReadOnly = True
                        txt6minuteAvg1EMethod9Multi.ReadOnly = True
                        txtOtherInformationMethod9.ReadOnly = True
                        txtEquipmentItem1AMethod9Multi.ReadOnly = True
                        txtEquipmentItem1BMethod9Multi.ReadOnly = True
                        txtEquipmentItem1CMethod9Multi.ReadOnly = True
                        txtEquipmentItem1DMethod9Multi.ReadOnly = True
                        txtEquipmentItem1EMethod9Multi.ReadOnly = True

                    Case "015" 'Method 22 
                        txtMaximumExpectedOperatingCapacityMethod22.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod22.Enabled = False
                        txtOperatingCapacityMethod22.ReadOnly = True
                        cboOperatingCapacityUnitsMethod22.Enabled = False
                        txtAllowableEmissionRateMethod22.ReadOnly = True
                        txtApplicableRegulationMethod22.ReadOnly = True
                        txtTestDurationMethod22.ReadOnly = True
                        txtAccumulatedEmissionMethod22.ReadOnly = True
                        txtOtherInformationMethod22.ReadOnly = True

                    Case "016" 'Method 9 Single
                        txtMaximumExpectedOperatingCapacityMethod9Single.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Enabled = False
                        txtOperatingCapacityMethod9Single.ReadOnly = True
                        cboOperatingCapacityUnitsMethod9Single.Enabled = False
                        txtAllowableEmissionRate1Method9Single.ReadOnly = True
                        cboAllowableEmissionRateUnits1Method9Single.Enabled = False
                        txtApplicableRegulationMethod9Single.ReadOnly = True
                        txtControlEquipmentOperatingDataMethod9Single.ReadOnly = True
                        txtTestDurationMethod9Single.ReadOnly = True
                        txtOpacityMethod9Single.ReadOnly = True
                        txtOtherInformationMethod9.ReadOnly = True

                    Case "018" 'Memo PTE 
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMemorandumPTE.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Enabled = False
                        txtOperatingCapacityMemorandumPTE.ReadOnly = True
                        cboOperatingCapacityUnitsMemorandumPTE.Enabled = False
                        txtAllowableEmissionRate1MemorandumPTE.ReadOnly = True
                        txtAllowableEmissionRate2MemorandumPTE.ReadOnly = True
                        txtAllowableEmissionRate3MemorandumPTE.ReadOnly = True
                        cboAllowableEmissionRateUnits1MemorandumPTE.Enabled = False
                        cboAllowableEmissionRateUnits2MemorandumPTE.Enabled = False
                        cboAllowableEmissionRateUnits3MemorandumPTE.Enabled = False
                        txtControlEquipmentOperatingDataMemorandumPTE.ReadOnly = True
                        txtMemorandumPTE.ReadOnly = True

                    Case Else
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True
                        txtRunNumOneStackTwoRun1A.ReadOnly = True
                        txtRunNumOneStackTwoRun1B.ReadOnly = True
                        txtGasTempOneStackTwoRun1A.ReadOnly = True
                        txtGasTempOneStackTwoRun1B.ReadOnly = True
                        txtGasMoistOneStackTwoRun1A.ReadOnly = True
                        txtGasMoistOneStackTwoRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackTwoRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackTwoRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackTwoRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackTwoRun1B.ReadOnly = True
                        txtPollConcOneStackTwoRun1A.ReadOnly = True
                        txtPollConcOneStackTwoRun1B.ReadOnly = True
                        cboPollConUnitOneStackTwoRun.Enabled = False
                        txtPollConcAvgOneStackTwoRun.ReadOnly = True
                        txtEmissRateOneStackTwoRun1A.ReadOnly = True
                        txtEmissRateOneStackTwoRun1B.ReadOnly = True
                        cboEmissRateUnitOneStackTwoRun.Enabled = False
                        txtEmissRateAvgOneStackTwoRun.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True
                        txtRunNumOneStackThreeRun1A.ReadOnly = True
                        txtRunNumOneStackThreeRun1B.ReadOnly = True
                        txtRunNumOneStackThreeRun1C.ReadOnly = True
                        txtGasTempOneStackThreeRun1A.ReadOnly = True
                        txtGasTempOneStackThreeRun1B.ReadOnly = True
                        txtGasTempOneStackThreeRun1C.ReadOnly = True
                        txtGasMoistOneStackThreeRun1A.ReadOnly = True
                        txtGasMoistOneStackThreeRun1B.ReadOnly = True
                        txtGasMoistOneStackThreeRun1C.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackThreeRun1C.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackThreeRun1C.ReadOnly = True
                        txtPollConcOneStackThreeRun1A.ReadOnly = True
                        txtPollConcOneStackThreeRun1B.ReadOnly = True
                        txtPollConcOneStackThreeRun1C.ReadOnly = True
                        cboPollConUnitOneStackThreeRun.Enabled = False
                        txtPollConcAvgOneStackThreeRun.ReadOnly = True
                        txtEmissRateOneStackThreeRun1A.ReadOnly = True
                        txtEmissRateOneStackThreeRun1B.ReadOnly = True
                        txtEmissRateOneStackThreeRun1C.ReadOnly = True
                        cboEmissRateUnitOneStackThreeRun.Enabled = False
                        txtEmissRateAvgOneStackThreeRun.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityOneStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsOneStack.Enabled = False
                        txtOperatingCapacityOneStack.ReadOnly = True
                        cboOperatingCapacityUnitsOneStack.Enabled = False
                        txtAllowableEmissionRate1OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1OneStack.Enabled = False
                        txtAllowableEmissionRate2OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2OneStack.Enabled = False
                        txtAllowableEmissionRate3OneStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3OneStack.Enabled = False
                        txtApplicableRegulationOneStack.ReadOnly = True
                        txtControlEquipmentOperatingDataOneStack.ReadOnly = True
                        txtPercentAllowableOneStack.ReadOnly = True
                        txtOtherInformationOneStack.ReadOnly = True
                        txtRunNumOneStackFourRun1A.ReadOnly = True
                        txtRunNumOneStackFourRun1B.ReadOnly = True
                        txtRunNumOneStackFourRun1C.ReadOnly = True
                        txtRunNumOneStackFourRun1D.ReadOnly = True
                        txtGasTempOneStackFourRun1A.ReadOnly = True
                        txtGasTempOneStackFourRun1B.ReadOnly = True
                        txtGasTempOneStackFourRun1C.ReadOnly = True
                        txtGasTempOneStackFourRun1D.ReadOnly = True
                        txtGasMoistOneStackFourRun1A.ReadOnly = True
                        txtGasMoistOneStackFourRun1B.ReadOnly = True
                        txtGasMoistOneStackFourRun1C.ReadOnly = True
                        txtGasMoistOneStackFourRun1D.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1A.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1B.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1C.ReadOnly = True
                        txtGasFlowACFMOneStackFourRun1D.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1A.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1B.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1C.ReadOnly = True
                        txtGasFlowDSCFMOneStackFourRun1D.ReadOnly = True
                        txtPollConcOneStackFourRun1A.ReadOnly = True
                        txtPollConcOneStackFourRun1B.ReadOnly = True
                        txtPollConcOneStackFourRun1C.ReadOnly = True
                        txtPollConcOneStackFourRun1D.ReadOnly = True
                        cboPollConUnitOneStackFourRun.Enabled = False
                        txtPollConcAvgOneStackFourRun.ReadOnly = True
                        txtEmissRateOneStackFourRun1A.ReadOnly = True
                        txtEmissRateOneStackFourRun1B.ReadOnly = True
                        txtEmissRateOneStackFourRun1C.ReadOnly = True
                        txtEmissRateOneStackFourRun1D.ReadOnly = True
                        cboEmissRateUnitOneStackFourRun.Enabled = False
                        txtEmissRateAvgOneStackFourRun.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = False
                        txtOperatingCapacityTwoStack.ReadOnly = True
                        cboOperatingCapacityUnitsTwoStack.Enabled = False
                        txtAllowableEmissionRate1TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = False
                        txtAllowableEmissionRate2TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = False
                        txtAllowableEmissionRate3TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = False
                        txtApplicableRegulationTwoStack.ReadOnly = True
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = True
                        txtOtherInformationTwoStack.ReadOnly = True
                        txtStackOneNameTwoStackStandard.ReadOnly = True
                        txtStackTwoNameTwoStackStandard.ReadOnly = True
                        txtRunNumTwoStackStandard1A.ReadOnly = True
                        txtRunNumTwoStackStandard1B.ReadOnly = True
                        txtRunNumTwoStackStandard1C.ReadOnly = True
                        txtRunNumTwoStackStandard2A.ReadOnly = True
                        txtRunNumTwoStackStandard2B.ReadOnly = True
                        txtRunNumTwoStackStandard2C.ReadOnly = True
                        txtGasTempTwoStackStandard1A.ReadOnly = True
                        txtGasTempTwoStackStandard1B.ReadOnly = True
                        txtGasTempTwoStackStandard1C.ReadOnly = True
                        txtGasTempTwoStackStandard2A.ReadOnly = True
                        txtGasTempTwoStackStandard2B.ReadOnly = True
                        txtGasTempTwoStackStandard2C.ReadOnly = True
                        txtGasMoistTwoStackStandard1A.ReadOnly = True
                        txtGasMoistTwoStackStandard1B.ReadOnly = True
                        txtGasMoistTwoStackStandard1C.ReadOnly = True
                        txtGasMoistTwoStackStandard2A.ReadOnly = True
                        txtGasMoistTwoStackStandard2B.ReadOnly = True
                        txtGasMoistTwoStackStandard2C.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1A.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1B.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard1C.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2A.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2B.ReadOnly = True
                        txtGasFlowACFMTwoStackStandard2C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard1C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackStandard2C.ReadOnly = True
                        txtPollConcTwoStackStandard1A.ReadOnly = True
                        txtPollConcTwoStackStandard1B.ReadOnly = True
                        txtPollConcTwoStackStandard1C.ReadOnly = True
                        txtPollConcTwoStackStandard2A.ReadOnly = True
                        txtPollConcTwoStackStandard2B.ReadOnly = True
                        txtPollConcTwoStackStandard2C.ReadOnly = True
                        cboPollConUnitTwoStackStandard.Enabled = False
                        txtPollConcAvgTwoStackStandard1.ReadOnly = True
                        txtPollConcAvgTwoStackStandard2.ReadOnly = True
                        txtEmissRateTwoStackStandard1A.ReadOnly = True
                        txtEmissRateTwoStackStandard1B.ReadOnly = True
                        txtEmissRateTwoStackStandard1C.ReadOnly = True
                        txtEmissRateTwoStackStandard2A.ReadOnly = True
                        txtEmissRateTwoStackStandard2B.ReadOnly = True
                        txtEmissRateTwoStackStandard2C.ReadOnly = True
                        cboEmissRateUnitTwoStackStandard.Enabled = False
                        txtEmissRateAvgTwoStackStandard1.ReadOnly = True
                        txtEmissRateAvgTwoStackStandard2.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard1.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard2.ReadOnly = True
                        txtEmissRateTotalTwoStackStandard3.ReadOnly = True
                        txtEmissRateTotalAvgTwoStackStandard.ReadOnly = True
                        txtPercentAllowableTwoStack.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityTwoStack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsTwoStack.Enabled = False
                        txtOperatingCapacityTwoStack.ReadOnly = True
                        cboOperatingCapacityUnitsTwoStack.Enabled = False
                        txtAllowableEmissionRate1TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits1TwoStack.Enabled = False
                        txtAllowableEmissionRate2TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits2TwoStack.Enabled = False
                        txtAllowableEmissionRate3TwoStack.ReadOnly = True
                        cboAllowableEmissionRateUnits3TwoStack.Enabled = False
                        txtApplicableRegulationTwoStack.ReadOnly = True
                        txtControlEquipmentOperatingDataTwoStack.ReadOnly = True
                        txtOtherInformationTwoStack.ReadOnly = True
                        txtStackOneNameTwoStackDRE.ReadOnly = True
                        txtStackTwoNameTwoStackDRE.ReadOnly = True
                        txtRunNumTwoStackDRE1A.ReadOnly = True
                        txtRunNumTwoStackDRE1B.ReadOnly = True
                        txtRunNumTwoStackDRE1C.ReadOnly = True
                        txtRunNumTwoStackDRE2A.ReadOnly = True
                        txtRunNumTwoStackDRE2B.ReadOnly = True
                        txtRunNumTwoStackDRE2C.ReadOnly = True
                        txtGasTempTwoStackDRE1A.ReadOnly = True
                        txtGasTempTwoStackDRE1B.ReadOnly = True
                        txtGasTempTwoStackDRE1C.ReadOnly = True
                        txtGasTempTwoStackDRE2A.ReadOnly = True
                        txtGasTempTwoStackDRE2B.ReadOnly = True
                        txtGasTempTwoStackDRE2C.ReadOnly = True
                        txtGasMoistTwoStackDRE1A.ReadOnly = True
                        txtGasMoistTwoStackDRE1B.ReadOnly = True
                        txtGasMoistTwoStackDRE1C.ReadOnly = True
                        txtGasMoistTwoStackDRE2A.ReadOnly = True
                        txtGasMoistTwoStackDRE2B.ReadOnly = True
                        txtGasMoistTwoStackDRE2C.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1A.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1B.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE1C.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2A.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2B.ReadOnly = True
                        txtGasFlowACFMTwoStackDRE2C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE1C.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2A.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2B.ReadOnly = True
                        txtGasFlowDSCFMTwoStackDRE2C.ReadOnly = True
                        txtPollConcTwoStackDRE1A.ReadOnly = True
                        txtPollConcTwoStackDRE1B.ReadOnly = True
                        txtPollConcTwoStackDRE1C.ReadOnly = True
                        txtPollConcTwoStackDRE2A.ReadOnly = True
                        txtPollConcTwoStackDRE2B.ReadOnly = True
                        txtPollConcTwoStackDRE2C.ReadOnly = True
                        cboPollConUnitTwoStackDRE.Enabled = False
                        txtPollConcAvgTwoStackDRE1.ReadOnly = True
                        txtPollConcAvgTwoStackDRE2.ReadOnly = True
                        txtEmissRateTwoStackDRE1A.ReadOnly = True
                        txtEmissRateTwoStackDRE1B.ReadOnly = True
                        txtEmissRateTwoStackDRE1C.ReadOnly = True
                        txtEmissRateTwoStackDRE2A.ReadOnly = True
                        txtEmissRateTwoStackDRE2B.ReadOnly = True
                        txtEmissRateTwoStackDRE2C.ReadOnly = True
                        cboEmissRateUnitTwoStackDRE.Enabled = False
                        txtEmissRateAvgTwoStackDRE1.ReadOnly = True
                        txtEmissRateAvgTwoStackDRE2.ReadOnly = True
                        txtDestructionEfficiencyTwoStackDRE.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityLoadingRack.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Enabled = False
                        txtOperatingCapacityLoadingRack.ReadOnly = True
                        cboOperatingCapacityUnitsLoadingRack.Enabled = False
                        txtAllowableEmissionRate1LoadingRack.ReadOnly = True
                        txtAllowableEmissionRate2LoadingRack.ReadOnly = True
                        txtAllowableEmissionRate3LoadingRack.ReadOnly = True
                        cboAllowableEmissionRateUnits1LoadingRack.Enabled = False
                        cboAllowableEmissionRateUnits2LoadingRack.Enabled = False
                        cboAllowableEmissionRateUnits3LoadingRack.Enabled = False
                        txtApplicableRegulationLoadingRack.ReadOnly = True
                        txtControlEquipmentOperatingDataLoadingRack.ReadOnly = True
                        txtTestDurationLoadingRack.ReadOnly = True
                        cboTestDurationUnitsLoadingRack.Enabled = False
                        txtPollConcINLoadingRack.ReadOnly = True
                        cboPollConUnitINLoadingRack.Enabled = False
                        txtPollConcOUTLoadingRack.ReadOnly = True
                        cboPollConUnitOUTLoadingRack.Enabled = False
                        txtDestructionEfficiencyLoadingRack.ReadOnly = True
                        txtEmissRateLoadingRack.ReadOnly = True
                        cboEmissRateUnitLoadingRack.Enabled = False
                        txtOtherInformationLoadingRack.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityPond.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsPond.Enabled = False
                        txtOperatingCapacityPond.ReadOnly = True
                        cboOperatingCapacityUnitsPond.Enabled = False
                        txtAllowableEmissionRate1Pond.ReadOnly = True
                        txtAllowableEmissionRate2Pond.ReadOnly = True
                        txtAllowableEmissionRate3Pond.ReadOnly = True
                        cboAllowableEmissionRateUnits1Pond.Enabled = False
                        cboAllowableEmissionRateUnits2Pond.Enabled = False
                        cboAllowableEmissionRateUnits3Pond.Enabled = False
                        txtApplicableRegulationPond.ReadOnly = True
                        txtControlEquipmentOperatingDataPond.ReadOnly = True
                        txtRunNumPond1A.ReadOnly = True
                        txtRunNumPond1B.ReadOnly = True
                        txtRunNumPond1C.ReadOnly = True
                        txtPollConcPond1A.ReadOnly = True
                        txtPollConcPond1B.ReadOnly = True
                        txtPollConcPond1C.ReadOnly = True
                        cboPollConUnitPond.Enabled = False
                        txtPollConcAvgPond.ReadOnly = True
                        txtTreatmentRatePond1A.ReadOnly = True
                        txtTreatmentRatePond1B.ReadOnly = True
                        txtTreatmentRatePond1C.ReadOnly = True
                        cboTreatmentRateUnitPond.Enabled = False
                        txtTreatmentRateAvgPond.ReadOnly = True
                        txtDestructionEfficancyPond.ReadOnly = True
                        txtOtherInformationPond.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityGas.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsGas.Enabled = False
                        txtOperatingCapacityGas.ReadOnly = True
                        cboOperatingCapacityUnitsGas.Enabled = False
                        txtAllowableEmissionRate1Gas.ReadOnly = True
                        txtAllowableEmissionRate2Gas.ReadOnly = True
                        txtAllowableEmissionRate3Gas.ReadOnly = True
                        cboAllowableEmissionRateUnits1Gas.Enabled = False
                        cboAllowableEmissionRateUnits2Gas.Enabled = False
                        cboAllowableEmissionRateUnits3Gas.Enabled = False
                        txtApplicableRegulationGas.ReadOnly = True
                        txtControlEquipmentOperatingDataGas.ReadOnly = True
                        txtRunNumGas1A.ReadOnly = True
                        txtRunNumGas1B.ReadOnly = True
                        txtRunNumGas1C.ReadOnly = True
                        txtPollConcGas1A.ReadOnly = True
                        txtPollConcGas1B.ReadOnly = True
                        txtPollConcGas1C.ReadOnly = True
                        cboPollConUnitGas.Enabled = False
                        txtPollConcAvgGas.ReadOnly = True
                        txtEmissRateGas1A.ReadOnly = True
                        txtEmissRateGas1B.ReadOnly = True
                        txtEmissRateGas1C.ReadOnly = True
                        cboEmissRateUnitGas.Enabled = False
                        txtEmissRateAvgGas.ReadOnly = True
                        txtPercentAllowableGas.ReadOnly = True
                        txtOtherInformationGas.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityFlare.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsFlare.Enabled = False
                        txtOperatingCapacityFlare.ReadOnly = True
                        cboOperatingCapacityUnitsFlare.Enabled = False
                        txtVelocityFlare.ReadOnly = True
                        txtHeatContentFlare.ReadOnly = True
                        txtApplicableRegulationFlare.ReadOnly = True
                        txtMonitoringDataFlare.ReadOnly = True
                        txtHeatingValue1AFlare.ReadOnly = True
                        txtHeatingValue1BFlare.ReadOnly = True
                        txtHeatingValue1CFlare.ReadOnly = True
                        cboHeatingValueUnits.Enabled = False
                        txtHeatingValuesAvgFlare.ReadOnly = True
                        txtVelocity1AFlare.ReadOnly = True
                        txtVelocity1BFlare.ReadOnly = True
                        txtVelocity1CFlare.ReadOnly = True
                        cboVelocityUnitsFlare.Enabled = False
                        txtVelocityAvgFlare.ReadOnly = True
                        txtPercentAllowableFlare.ReadOnly = True
                        txtOtherInformationFlare.ReadOnly = True
                        txtApplicableStandardRata.ReadOnly = True
                        cboDilutentMonitoredRata.Enabled = False
                        txtApplicableRegulationRata.ReadOnly = True
                        txtRefMethodRata1.ReadOnly = True
                        txtRefMethodRata2.ReadOnly = True
                        txtRefMethodRata3.ReadOnly = True
                        txtRefMethodRata4.ReadOnly = True
                        txtRefMethodRata5.ReadOnly = True
                        txtRefMethodRata6.ReadOnly = True
                        txtRefMethodRata7.ReadOnly = True
                        txtRefMethodRata8.ReadOnly = True
                        txtRefMethodRata9.ReadOnly = True
                        txtRefMethodRata10.ReadOnly = True
                        txtRefMethodRata11.ReadOnly = True
                        txtRefMethodRata12.ReadOnly = True
                        txtCMSRata1.ReadOnly = True
                        txtCMSRata2.ReadOnly = True
                        txtCMSRata3.ReadOnly = True
                        txtCMSRata4.ReadOnly = True
                        txtCMSRata5.ReadOnly = True
                        txtCMSRata6.ReadOnly = True
                        txtCMSRata7.ReadOnly = True
                        txtCMSRata8.ReadOnly = True
                        txtCMSRata9.ReadOnly = True
                        txtCMSRata10.ReadOnly = True
                        txtCMSRata11.ReadOnly = True
                        txtCMSRata12.ReadOnly = True
                        chbOmitRunRata1.Enabled = False
                        chbOmitRunRata2.Enabled = False
                        chbOmitRunRata3.Enabled = False
                        chbOmitRunRata4.Enabled = False
                        chbOmitRunRata5.Enabled = False
                        chbOmitRunRata6.Enabled = False
                        chbOmitRunRata7.Enabled = False
                        chbOmitRunRata8.Enabled = False
                        chbOmitRunRata9.Enabled = False
                        chbOmitRunRata10.Enabled = False
                        chbOmitRunRata11.Enabled = False
                        chbOmitRunRata12.Enabled = False
                        cboUnitsRata.Enabled = False
                        txtRelativeAccuracy.ReadOnly = True
                        txtRefMethodPercentRata.ReadOnly = True
                        txtApplicableStandardPercentRata.ReadOnly = True
                        cboDiluentRata.Enabled = False
                        txtPart75Statement.ReadOnly = True
                        txtOtherInformationRata.ReadOnly = True
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtMemorandumStandard.ReadOnly = True
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtModelMemorandumToFile.ReadOnly = True
                        txtSerialNumberMemorandumToFile.ReadOnly = True
                        txtMemorandumToFile.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi1.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi2.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi3.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi4.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Multi5.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Enabled = False
                        txtOperatingCapacityMethod9Multi1.ReadOnly = True
                        txtOperatingCapacityMethod9Multi2.ReadOnly = True
                        txtOperatingCapacityMethod9Multi3.ReadOnly = True
                        txtOperatingCapacityMethod9Multi4.ReadOnly = True
                        txtOperatingCapacityMethod9Multi5.ReadOnly = True
                        cboOperatingCapacityUnitsMethod9Multi.Enabled = False
                        txtAllowableEmissionRate1Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate2Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate3Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate4Method9Multi.ReadOnly = True
                        txtAllowableEmissionRate5Method9Multi.ReadOnly = True
                        cboAllowableEmissionRateUnitsMethod9Multi.Enabled = False
                        txtApplicableRegulationMethod9Multi.ReadOnly = True
                        txtControlEquipmentOperatingDataMethod9Multi.ReadOnly = True
                        txt6minuteAvg1AMethod9Multi.ReadOnly = True
                        txt6minuteAvg1BMethod9Multi.ReadOnly = True
                        txt6minuteAvg1CMethod9Multi.ReadOnly = True
                        txt6minuteAvg1DMethod9Multi.ReadOnly = True
                        txt6minuteAvg1EMethod9Multi.ReadOnly = True
                        txtOtherInformationMethod9.ReadOnly = True
                        txtEquipmentItem1AMethod9Multi.ReadOnly = True
                        txtEquipmentItem1BMethod9Multi.ReadOnly = True
                        txtEquipmentItem1CMethod9Multi.ReadOnly = True
                        txtEquipmentItem1DMethod9Multi.ReadOnly = True
                        txtEquipmentItem1EMethod9Multi.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod22.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod22.Enabled = False
                        txtOperatingCapacityMethod22.ReadOnly = True
                        cboOperatingCapacityUnitsMethod22.Enabled = False
                        txtAllowableEmissionRateMethod22.ReadOnly = True
                        txtApplicableRegulationMethod22.ReadOnly = True
                        txtTestDurationMethod22.ReadOnly = True
                        txtAccumulatedEmissionMethod22.ReadOnly = True
                        txtOtherInformationMethod22.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMethod9Single.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Enabled = False
                        txtOperatingCapacityMethod9Single.ReadOnly = True
                        cboOperatingCapacityUnitsMethod9Single.Enabled = False
                        txtAllowableEmissionRate1Method9Single.ReadOnly = True
                        cboAllowableEmissionRateUnits1Method9Single.Enabled = False
                        txtApplicableRegulationMethod9Single.ReadOnly = True
                        txtControlEquipmentOperatingDataMethod9Single.ReadOnly = True
                        txtTestDurationMethod9Single.ReadOnly = True
                        txtOpacityMethod9Single.ReadOnly = True
                        txtOtherInformationMethod9.ReadOnly = True
                        txtApplicableRegulationMemorandum.ReadOnly = True
                        txtMaximumExpectedOperatingCapacityMemorandumPTE.ReadOnly = True
                        cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Enabled = False
                        txtOperatingCapacityMemorandumPTE.ReadOnly = True
                        cboOperatingCapacityUnitsMemorandumPTE.Enabled = False
                        txtAllowableEmissionRate1MemorandumPTE.ReadOnly = True
                        txtAllowableEmissionRate2MemorandumPTE.ReadOnly = True
                        txtAllowableEmissionRate3MemorandumPTE.ReadOnly = True
                        cboAllowableEmissionRateUnits1MemorandumPTE.Enabled = False
                        cboAllowableEmissionRateUnits2MemorandumPTE.Enabled = False
                        cboAllowableEmissionRateUnits3MemorandumPTE.Enabled = False
                        txtControlEquipmentOperatingDataMemorandumPTE.ReadOnly = True
                        txtMemorandumPTE.ReadOnly = True

                End Select
            End If

            If AccountFormAccess(69, 4) = "1" Then
                chbEventComplete.Enabled = True
                DTPEventCompleteDate.Enabled = True
                cboStaffResponsible.Enabled = True
                chbAcknoledgmentLetterSent.Enabled = True
                DTPAcknoledgmentLetterSent.Enabled = True
                DTPTestReportNewDueDate.Enabled = True
                chbTestReportChangeDueDate.Enabled = True
                DTPTestReportDueDate.Enabled = True
                txtTestReportComments.ReadOnly = False
                rdbTestReportFollowUpYes.Enabled = True
                rdbTestReportFollowUpNo.Enabled = True
                btnSaveSSCPData.Enabled = True
            Else
                chbEventComplete.Enabled = False
                DTPEventCompleteDate.Enabled = False
                txtTrackingNumber.ReadOnly = True
                txtEnforcementNumber.ReadOnly = True
                cboStaffResponsible.Enabled = False
                chbAcknoledgmentLetterSent.Enabled = False
                DTPAcknoledgmentLetterSent.Enabled = False
                txtTestReportReceivedbySSCPDate.ReadOnly = True
                txtTestReportDueDate.ReadOnly = True
                DTPTestReportNewDueDate.Enabled = False
                chbTestReportChangeDueDate.Enabled = False
                DTPTestReportDueDate.Enabled = False
                txtTestReportComments.ReadOnly = True
                rdbTestReportFollowUpYes.Enabled = False
                rdbTestReportFollowUpNo.Enabled = False
                btnSaveSSCPData.Enabled = False
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadOtherWitnessingEng()
        Try
            SQL = "select strWitnessingEngineer " & _
            "From AIRBRANCH.ISMPWitnessingEng " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            Dim temp As String = " "
            Dim x As Integer = 0

            While dr.Read
                temp = dr.Item("strWitnessingEngineer")
                clbWitnessingEngineers.SelectedValue = temp
                x = clbWitnessingEngineers.SelectedIndex
                If x <> -1 Then
                    clbWitnessingEngineers.SetItemCheckState(x, CheckState.Checked)
                End If
                clbWitnessingEngineers.SelectedValue = 0
            End While
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadSSCPData()
        Try
            If txtAirsNumber.Text <> "" Then
                SQL = "Select " & _
                "AIRBRANCH.SSCPTestReports.strTrackingNumber, " & _
                "datTestReportDue, strTestReportComments, " & _
                "strTestReportFollowUp, datREceivedDate, " & _
                "strResponsibleStaff, datCompleteDate, " & _
                "datAcknoledgmentLetterSent " & _
                "from AIRBRANCH.SSCPTestReports, " & _
                "AIRBRANCH.SSCPItemMaster  " & _
                "where AIRBRANCH.SSCPTestReports.strTrackingNumber = AIRBRANCH.SSCPItemMaster.strTrackingNumber " & _
                "and strReferenceNumber = '" & txtReferenceNumber.Text & "' "

                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                While dr.Read
                    If IsDBNull(dr.Item("strTrackingNumber")) Then
                        txtTrackingNumber.Text = ""
                    Else
                        txtTrackingNumber.Text = dr.Item("strTrackingNumber")
                    End If
                    If IsDBNull(dr.Item("datTestReportDue")) Then
                        txtTestReportDueDate.Text = ""
                        DTPTestReportDueDate.Text = OracleDate
                    Else
                        txtTestReportDueDate.Text = Format(dr.Item("datTestReportDue"), "dd-MMM-yyyy")
                        DTPTestReportDueDate.Text = Format(dr.Item("datTestReportDue"), "dd-MMM-yyyy")
                    End If
                    If IsDBNull(dr.Item("strTestReportComments")) Then
                        txtTestReportComments.Text = ""
                    Else
                        txtTestReportComments.Text = dr.Item("strTestReportComments")
                    End If
                    If IsDBNull(dr.Item("strTestReportFollowup")) Then
                        rdbTestReportFollowUpYes.Checked = False
                        rdbTestReportFollowUpNo.Checked = False
                    Else
                        If dr.Item("strTestReportFollowUp") = "False" Then
                            rdbTestReportFollowUpYes.Checked = False
                            rdbTestReportFollowUpNo.Checked = True
                        Else
                            rdbTestReportFollowUpYes.Checked = True
                            rdbTestReportFollowUpNo.Checked = False
                        End If
                    End If
                    If IsDBNull(dr.Item("datCompleteDate")) Then
                        DTPEventCompleteDate.Text = ""
                        chbEventComplete.Checked = False
                    Else
                        DTPEventCompleteDate.Text = Format(dr.Item("datCompleteDate"), "dd-MMM-yyyy")
                        chbEventComplete.Checked = True
                    End If

                    If IsDBNull(dr.Item("datAcknoledgmentLetterSent")) Then
                        DTPAcknoledgmentLetterSent.Text = ""
                        chbAcknoledgmentLetterSent.Checked = False
                        DTPAcknoledgmentLetterSent.Visible = False
                    Else
                        DTPAcknoledgmentLetterSent.Text = Format(dr.Item("datAcknoledgmentLetterSent"), "dd-MMM-yyyy")
                        chbAcknoledgmentLetterSent.Checked = True
                        DTPAcknoledgmentLetterSent.Visible = True
                    End If
                    If IsDBNull(dr.Item("strResponsibleStaff")) Then
                        cboStaffResponsible.SelectedValue = "0"
                    Else
                        cboStaffResponsible.SelectedValue = dr.Item("strResponsibleStaff")
                    End If
                    If IsDBNull(dr.Item("datReceivedDate")) Then
                        txtTestReportReceivedbySSCPDate.Text = Format(DTPTestDateComplete.Text, "dd-MMM-yyyy")
                    Else
                        txtTestReportReceivedbySSCPDate.Text = Format(dr.Item("datReceivedDate"), "dd-MMM-yyyy")
                    End If
                End While
                dr.Close()
                DTPTestReportDueDate.Visible = False
                chbTestReportChangeDueDate.Checked = False
                'DTPAcknoledgmentLetterSent.Visible = False
                'chbAcknoledgmentLetterSent.Checked = False
                DTPEventCompleteDate.Enabled = False

                If AccountFormAccess(69, 4) = "1" Then
                    If chbEventComplete.Checked = False Then
                        CloseSSCPWork(False)
                    Else
                        CloseSSCPWork(True)
                    End If
                End If

                SQL = "Select strEnforcementNumber " & _
                "from AIRBRANCH.SSCP_AuditedEnforcement " & _
                "where strTrackingNumber = '" & txtTrackingNumber.Text & "' "
                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                RecExist = dr.Read
                If RecExist = True Then
                    If IsDBNull(dr.Item("strEnforcementNumber")) Then
                        txtEnforcementNumber.Text = ""
                        txtEnforcementNumber.Visible = False
                    Else
                        txtEnforcementNumber.Text = dr.Item("strEnforcementNumber")
                        txtEnforcementNumber.Visible = True
                    End If
                Else
                    txtEnforcementNumber.Text = ""
                    txtEnforcementNumber.Visible = False
                End If
                dr.Close()

                SQL = "Select datSSCPTestReportDue " & _
                "from AIRBRANCH.APBSupplamentalData " & _
                "where strAIRSNumber = '0413" & txtAirsNumber.Text & "' "
                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                RecExist = dr.Read
                If RecExist = True Then
                    If IsDBNull(dr.Item("datSSCPTestReportDue")) Then
                        DTPTestReportNewDueDate.Text = OracleDate
                    Else
                        DTPTestReportNewDueDate.Text = Format(dr.Item("datSSCPTestReportDue"), "dd-MMM-yyyy")
                    End If
                Else
                    DTPTestReportNewDueDate.Text = OracleDate
                End If
                dr.Close()

            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub CloseSSCPWork(ByVal Status As Boolean)
        Try
            If Status = True Then
                cboStaffResponsible.Enabled = False
                txtTestReportComments.ReadOnly = True
                rdbTestReportFollowUpYes.Enabled = False
                rdbTestReportFollowUpNo.Enabled = False
                chbAcknoledgmentLetterSent.Enabled = False
                DTPAcknoledgmentLetterSent.Enabled = False
                chbTestReportChangeDueDate.Enabled = False
                DTPTestReportDueDate.Enabled = False
                DTPTestReportNewDueDate.Enabled = False
                DTPEventCompleteDate.Enabled = True
            Else
                cboStaffResponsible.Enabled = True
                txtTestReportComments.ReadOnly = False
                rdbTestReportFollowUpYes.Enabled = True
                rdbTestReportFollowUpNo.Enabled = True
                chbAcknoledgmentLetterSent.Enabled = True
                DTPAcknoledgmentLetterSent.Enabled = True
                chbTestReportChangeDueDate.Enabled = True
                DTPTestReportDueDate.Enabled = True
                DTPTestReportNewDueDate.Enabled = True
                DTPEventCompleteDate.Enabled = False
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Sub LoadTestNotifications()
        Try
            Dim SQL As String

            SQL = "select " & _
            "(LogNumber|| ' --> ' ||StartDate) as LogNumber " & _
            "from  " & _
            "(Select (AIRBRANCH.ISMPTESTNotification.strTestLogNumber) as LogNumber, " & _
            "to_char(datProposedStartDate) as StartDate " & _
            "from  AIRBRANCH.ISMPTESTNotification  " & _
            "where not exists(select AIRBRANCH.ISMPTestLogLink.strTestLogNumber  " & _
            "from AIRBRANCH.ISMPTestLogLink " & _
            "where AIRBRANCH.ISMPTestNotification.strTestLogNumber = AIRBRANCH.ISMPTestLogLink.strTestLogNumber)  " & _
            "and strAIRSNumber = '0413" & txtAirsNumber.Text & "') NonLinked  " & _
            "UNION  " & _
            "select " & _
            "(LogNumber|| ' --> ' ||StartDate) as LogNumber " & _
            "from  " & _
            "(select (AIRBRANCH.ISMPTestLogLink.strTestLogNumber) as LogNumber, " & _
            "' ' as StartDate " & _
            "from AIRBRANCH.ISMPTestLogLink  " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "') CurrentLink " & _
            "Union " & _
            "select  " & _
            "(LogNumber || ' --> ' ||StartDate) as LogNumber " & _
            "from (select distinct(AIRBRANCH.ISMPTestLogLink.strTestLogNumber) as LogNumber,  " & _
            "' ' as StartDate " & _
            "from AIRBRANCH.ISMPTestLogLink, AIRBRANCH.ISMPReportInformation,  " & _
            "AIRBRANCH.ISMPMaster " & _
            "where AIRBRANCH.ISMPTEstLogLink.strReferenceNumber = AIRBRANCH.ISMPREportInformation.strReferenceNumber  " & _
            "and AIRBRANCH.ISMPMaster.strReferenceNumber = AIRBRANCH.ISMPReportInformation.strReferenceNumber  " & _
            "and strAIRSNumber = '0413" & txtAirsNumber.Text & "'  " & _
            "and strClosed <> 'True') UnclosedLinks "

            SQL = "select " & _
            "(LogNumber|| ' --> ' ||StartDate) as LogNumber " & _
            "from  (Select (AIRBRANCH.ISMPTESTNotification.strTestLogNumber) as LogNumber, " & _
            "to_char(datProposedStartDate) as StartDate " & _
            "from  AIRBRANCH.ISMPTESTNotification  " & _
            "where not exists(select AIRBRANCH.ISMPTestLogLink.strTestLogNumber  " & _
            "from AIRBRANCH.ISMPTestLogLink " & _
            "where AIRBRANCH.ISMPTestNotification.strTestLogNumber = AIRBRANCH.ISMPTestLogLink.strTestLogNumber)  " & _
            "and strAIRSNumber = '0413" & txtAirsNumber.Text & "') NonLinked  " & _
            "UNION  " & _
            "select " & _
            "LogNumber " & _
            "from (select " & _
            "(AIRBRANCH.ISMPTestLogLink.strTestLogNumber|| ' --> ' ||datProposedStartDate) as LogNumber " & _
            "from AIRBRANCH.ISMPTestLogLink, AIRBranch.ISMPTestNotification " & _
            "where AIRBRANCH.ISMPTestLogLink.strTestLogNumber = AIRBRANCH.ISMPTestNotification.strTestLogNumber " & _
            "and strReferenceNumber = '" & txtReferenceNumber.Text & "') CurrentLink " & _
            "Union " & _
            "select  (LogNumber || ' --> ' ||StartDate) as LogNumber " & _
            "from " & _
            "(select distinct(AIRBRANCH.ISMPTestLogLink.strTestLogNumber) as LogNumber,  " & _
            "datProposedstartdate as StartDate " & _
            "from AIRBRANCH.ISMPTestLogLink, AIRBRANCH.ISMPReportInformation,  " & _
            "AIRBRANCH.ISMPMaster, AIRBRANCH.ISMPTestNotification  " & _
            "where AIRBRANCH.ISMPTEstLogLink.strReferenceNumber = AIRBRANCH.ISMPREportInformation.strReferenceNumber  " & _
            "and AIRBRANCH.ISMPMaster.strReferenceNumber = AIRBRANCH.ISMPReportInformation.strReferenceNumber  " & _
            "and AIRBRANCH.ISMPTestLogLink.strTestLogNumber = AIRBRANCH.ISMPTestNotification.strTestLogNumber  " & _
            "and AIRBRANCH.ISMPMaster.strAIRSNumber = '0413" & txtAirsNumber.Text & "'  " & _
            "and strClosed <> 'True') UnclosedLinks "


            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            cboTestNotificationNumber.Items.Add(" ")
            While dr.Read
                cboTestNotificationNumber.Items.Add(dr.Item("LogNumber"))
            End While
            dr.Close()

            SQL = "select " & _
            "(AIRBRANCH.ISMPTestLogLink.strTestLogNumber|| ' --> ' ||datProposedStartDate) as LogNumber " & _
            "from AIRBRANCH.ISMPTestLogLink, AIRBRANCH.ISMPTestNotification " & _
            "where AIRBRANCH.ISMPTestLogLink.strTestLogNumber = AIRBRANCH.ISMPTestNotification.strTestLogNumber " & _
            "and strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            If RecExist = True Then
                If IsDBNull(dr.Item("LogNumber")) Then
                    cboTestNotificationNumber.Text = " "
                Else
                    If cboTestNotificationNumber.Items.Contains(dr.Item("LogNumber")) Then
                        cboTestNotificationNumber.Text = dr.Item("LogNumber")
                    End If
                End If
            End If
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub LoadDefaultComplianceManager()
        Try
            Dim ComplianceManager As String = ""
            Dim DistrictManager As String = ""

            SQL = "select max(INTYEAR), strAssigningManager " & _
                  "from AIRBRANCH.SSCPINSPECTIONSREQUIRED, " & _
                   "(select max(intyear) as MaxYear, AIRBRANCH.SSCPINSPECTIONSREQUIRED.STRAIRSNUMBER  " & _
                      "from AIRBRANCH.SSCPINSPECTIONSREQUIRED " & _
                      "where AIRBRANCH.SSCPINSPECTIONSREQUIRED.STRAIRSNUMBER = '0413" & txtAirsNumber.Text & "' " & _
                      "group by AIRBRANCH.SSCPINSPECTIONSREQUIRED.STRAIRSNUMBER ) MaxResults " & _
                  "where AIRBRANCH.SSCPINSPECTIONSREQUIRED.STRAIRSNUMBER = '0413" & txtAirsNumber.Text & "' " & _
                  " and AIRBRANCH.SSCPINSPECTIONSREQUIRED.intyear = maxresults.maxyear " & _
                  "group by strAssigningManager "

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            If RecExist = True Then
                If IsDBNull(dr.Item("strAssigningManager")) Then
                    ComplianceManager = ""
                Else
                    ComplianceManager = dr.Item("strAssigningManager")
                End If
            Else
                ComplianceManager = ""
            End If
            dr.Close()

            SQL = "select " & _
            "strDistrictManager  " & _
            "from AIRBRANCH.SSCPDistrictResponsible,  " & _
            "AIRBRANCH.LookUpDistricts,  " & _
            "AIRBRANCH.LookUpDistrictInformation   " & _
            "where strDistrictResponsible = 'True'  " & _
            "and AIRBRANCH.LookUpDistricts.strDistrictCode = AIRBRANCH.LookUpDistrictInformation.strDistrictCode   " & _
            "and AIRBRANCH.LookUpDistrictInformation.strDistrictCounty = substr(AIRBRANCH.SSCPDistrictResponsible.strAIRSNumber, 5, 3) " & _
            "and AIRBRANCH.SSCPDistrictResponsible.strAIRSNumber = '0413" & txtAirsNumber.Text & "' "

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            If RecExist = True Then
                If IsDBNull(dr.Item("strDistrictManager")) Then
                    DistrictManager = ""
                Else
                    DistrictManager = dr.Item("strDistrictManager")
                End If
            Else
                DistrictManager = ""
            End If
            dr.Close()

            If DistrictManager <> "" Then
                cboComplianceManager.SelectedValue = DistrictManager
                If ComplianceManager <> "001" Then
                    cboccBox.SelectedValue = ComplianceManager
                End If
            Else
                If ComplianceManager <> "" Then
                    cboComplianceManager.SelectedValue = ComplianceManager
                Else
                    cboComplianceManager.SelectedValue = "001"
                End If
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
#End Region
#Region "Subs and Functions"
    Sub ClearAll()
        Try
            txtReferenceNumber.Clear()
            txtAirsNumber.Clear()
            txtFacilityName.Clear()
            txtFacilityCity.Clear()
            txtFacilityState.Clear()
            txtReceivedByAPB.Clear()
            txtAssignedToEngineer.Clear()
            txtCompleteDate.Clear()
            txtProgramManager.Clear()
            txtUnitManager.Clear()
            txtSourceTested.Clear()
            cboPollutantDetermined.SelectedValue = 0
            cboMethodDetermined.SelectedValue = 0
            cboReportType.SelectedValue = 0
            cboTestingFirm.SelectedValue = 0
            cboComplianceStatus.SelectedValue = 0
            cboReviewingEngineer.SelectedValue = 0
            cboWitnessingEngineer.SelectedValue = 0
            If clbWitnessingEngineers.CheckedItems.Count > 0 Then
                For x As Integer = 0 To clbWitnessingEngineers.Items.Count - 1
                    clbWitnessingEngineers.SetItemCheckState(x, CheckState.Unchecked)
                Next
            End If
            cboISMPUnit.SelectedValue = 0
            DTPTestDateStart.Text = OracleDate
            DTPTestDateComplete.Text = OracleDate
            txtDaysInAPB.Clear()
            txtDaysAssigned.Clear()
            cboComplianceManager.SelectedValue = 0
            cboccBox.SelectedValue = 0
            txtMaximumExpectedOperatingCapacityOneStack.Clear()
            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = 0
            txtOperatingCapacityOneStack.Clear()
            cboOperatingCapacityUnitsOneStack.SelectedValue = 0
            txtAllowableEmissionRate1OneStack.Clear()
            cboAllowableEmissionRateUnits1OneStack.SelectedValue = 0
            txtAllowableEmissionRate2OneStack.Clear()
            cboAllowableEmissionRateUnits2OneStack.SelectedValue = 0
            txtAllowableEmissionRate3OneStack.Clear()
            cboAllowableEmissionRateUnits3OneStack.SelectedValue = 0
            txtApplicableRegulationOneStack.Clear()
            txtControlEquipmentOperatingDataOneStack.Clear()
            txtPercentAllowableOneStack.Clear()
            txtOtherInformationOneStack.Clear()
            txtRunNumOneStackTwoRun1A.Clear()
            txtRunNumOneStackTwoRun1B.Clear()
            txtGasTempOneStackTwoRun1A.Clear()
            txtGasTempOneStackTwoRun1B.Clear()
            txtGasMoistOneStackTwoRun1A.Clear()
            txtGasMoistOneStackTwoRun1B.Clear()
            txtGasFlowACFMOneStackTwoRun1A.Clear()
            txtGasFlowACFMOneStackTwoRun1B.Clear()
            txtGasFlowDSCFMOneStackTwoRun1A.Clear()
            txtGasFlowDSCFMOneStackTwoRun1B.Clear()
            txtPollConcOneStackTwoRun1A.Clear()
            txtPollConcOneStackTwoRun1B.Clear()
            cboPollConUnitOneStackTwoRun.SelectedValue = 0
            txtPollConcAvgOneStackTwoRun.Clear()
            txtEmissRateOneStackTwoRun1A.Clear()
            txtEmissRateOneStackTwoRun1B.Clear()
            cboEmissRateUnitOneStackTwoRun.SelectedValue = 0
            txtEmissRateAvgOneStackTwoRun.Clear()
            txtMaximumExpectedOperatingCapacityOneStack.Clear()
            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = 0
            txtOperatingCapacityOneStack.Clear()
            cboOperatingCapacityUnitsOneStack.SelectedValue = 0
            txtAllowableEmissionRate1OneStack.Clear()
            cboAllowableEmissionRateUnits1OneStack.SelectedValue = 0
            txtAllowableEmissionRate2OneStack.Clear()
            cboAllowableEmissionRateUnits2OneStack.SelectedValue = 0
            txtAllowableEmissionRate3OneStack.Clear()
            cboAllowableEmissionRateUnits3OneStack.SelectedValue = 0
            txtApplicableRegulationOneStack.Clear()
            txtControlEquipmentOperatingDataOneStack.Clear()
            txtPercentAllowableOneStack.Clear()
            txtOtherInformationOneStack.Clear()
            txtRunNumOneStackThreeRun1A.Clear()
            txtRunNumOneStackThreeRun1B.Clear()
            txtRunNumOneStackThreeRun1C.Clear()
            txtGasTempOneStackThreeRun1A.Clear()
            txtGasTempOneStackThreeRun1B.Clear()
            txtGasTempOneStackThreeRun1C.Clear()
            txtGasMoistOneStackThreeRun1A.Clear()
            txtGasMoistOneStackThreeRun1B.Clear()
            txtGasMoistOneStackThreeRun1C.Clear()
            txtGasFlowACFMOneStackThreeRun1A.Clear()
            txtGasFlowACFMOneStackThreeRun1B.Clear()
            txtGasFlowACFMOneStackThreeRun1C.Clear()
            txtGasFlowDSCFMOneStackThreeRun1A.Clear()
            txtGasFlowDSCFMOneStackThreeRun1B.Clear()
            txtGasFlowDSCFMOneStackThreeRun1C.Clear()
            txtPollConcOneStackThreeRun1A.Clear()
            txtPollConcOneStackThreeRun1B.Clear()
            txtPollConcOneStackThreeRun1C.Clear()
            cboPollConUnitOneStackThreeRun.SelectedValue = 0
            txtPollConcAvgOneStackThreeRun.Clear()
            txtEmissRateOneStackThreeRun1A.Clear()
            txtEmissRateOneStackThreeRun1B.Clear()
            txtEmissRateOneStackThreeRun1C.Clear()
            cboEmissRateUnitOneStackThreeRun.SelectedValue = 0
            txtEmissRateAvgOneStackThreeRun.Clear()
            txtMaximumExpectedOperatingCapacityOneStack.Clear()
            cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue = 0
            txtOperatingCapacityOneStack.Clear()
            cboOperatingCapacityUnitsOneStack.SelectedValue = 0
            txtAllowableEmissionRate1OneStack.Clear()
            cboAllowableEmissionRateUnits1OneStack.SelectedValue = 0
            txtAllowableEmissionRate2OneStack.Clear()
            cboAllowableEmissionRateUnits2OneStack.SelectedValue = 0
            txtAllowableEmissionRate3OneStack.Clear()
            cboAllowableEmissionRateUnits3OneStack.SelectedValue = 0
            txtApplicableRegulationOneStack.Clear()
            txtControlEquipmentOperatingDataOneStack.Clear()
            txtPercentAllowableOneStack.Clear()
            txtOtherInformationOneStack.Clear()
            txtRunNumOneStackFourRun1A.Clear()
            txtRunNumOneStackFourRun1B.Clear()
            txtRunNumOneStackFourRun1C.Clear()
            txtRunNumOneStackFourRun1D.Clear()
            txtGasTempOneStackFourRun1A.Clear()
            txtGasTempOneStackFourRun1B.Clear()
            txtGasTempOneStackFourRun1C.Clear()
            txtGasTempOneStackFourRun1D.Clear()
            txtGasMoistOneStackFourRun1A.Clear()
            txtGasMoistOneStackFourRun1B.Clear()
            txtGasMoistOneStackFourRun1C.Clear()
            txtGasMoistOneStackFourRun1D.Clear()
            txtGasFlowACFMOneStackFourRun1A.Clear()
            txtGasFlowACFMOneStackFourRun1B.Clear()
            txtGasFlowACFMOneStackFourRun1C.Clear()
            txtGasFlowACFMOneStackFourRun1D.Clear()
            txtGasFlowDSCFMOneStackFourRun1A.Clear()
            txtGasFlowDSCFMOneStackFourRun1B.Clear()
            txtGasFlowDSCFMOneStackFourRun1C.Clear()
            txtGasFlowDSCFMOneStackFourRun1D.Clear()
            txtPollConcOneStackFourRun1A.Clear()
            txtPollConcOneStackFourRun1B.Clear()
            txtPollConcOneStackFourRun1C.Clear()
            txtPollConcOneStackFourRun1D.Clear()
            cboPollConUnitOneStackFourRun.SelectedValue = 0
            txtPollConcAvgOneStackFourRun.Clear()
            txtEmissRateOneStackFourRun1A.Clear()
            txtEmissRateOneStackFourRun1B.Clear()
            txtEmissRateOneStackFourRun1C.Clear()
            txtEmissRateOneStackFourRun1D.Clear()
            cboEmissRateUnitOneStackFourRun.SelectedValue = 0
            txtEmissRateAvgOneStackFourRun.Clear()
            txtMaximumExpectedOperatingCapacityTwoStack.Clear()
            cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue = 0
            txtOperatingCapacityTwoStack.Clear()
            cboOperatingCapacityUnitsTwoStack.SelectedValue = 0
            txtAllowableEmissionRate1TwoStack.Clear()
            cboAllowableEmissionRateUnits1TwoStack.SelectedValue = 0
            txtAllowableEmissionRate2TwoStack.Clear()
            cboAllowableEmissionRateUnits2TwoStack.SelectedValue = 0
            txtAllowableEmissionRate3TwoStack.Clear()
            cboAllowableEmissionRateUnits3TwoStack.SelectedValue = 0
            txtApplicableRegulationTwoStack.Clear()
            txtControlEquipmentOperatingDataTwoStack.Clear()
            txtOtherInformationTwoStack.Clear()
            txtStackOneNameTwoStackStandard.Clear()
            txtStackTwoNameTwoStackStandard.Clear()
            txtRunNumTwoStackStandard1A.Clear()
            txtRunNumTwoStackStandard1B.Clear()
            txtRunNumTwoStackStandard1C.Clear()
            txtRunNumTwoStackStandard2A.Clear()
            txtRunNumTwoStackStandard2B.Clear()
            txtRunNumTwoStackStandard2C.Clear()
            txtGasTempTwoStackStandard1A.Clear()
            txtGasTempTwoStackStandard1B.Clear()
            txtGasTempTwoStackStandard1C.Clear()
            txtGasTempTwoStackStandard2A.Clear()
            txtGasTempTwoStackStandard2B.Clear()
            txtGasTempTwoStackStandard2C.Clear()
            txtGasMoistTwoStackStandard1A.Clear()
            txtGasMoistTwoStackStandard1B.Clear()
            txtGasMoistTwoStackStandard1C.Clear()
            txtGasMoistTwoStackStandard2A.Clear()
            txtGasMoistTwoStackStandard2B.Clear()
            txtGasMoistTwoStackStandard2C.Clear()
            txtGasFlowACFMTwoStackStandard1A.Clear()
            txtGasFlowACFMTwoStackStandard1B.Clear()
            txtGasFlowACFMTwoStackStandard1C.Clear()
            txtGasFlowACFMTwoStackStandard2A.Clear()
            txtGasFlowACFMTwoStackStandard2B.Clear()
            txtGasFlowACFMTwoStackStandard2C.Clear()
            txtGasFlowDSCFMTwoStackStandard1A.Clear()
            txtGasFlowDSCFMTwoStackStandard1B.Clear()
            txtGasFlowDSCFMTwoStackStandard1C.Clear()
            txtGasFlowDSCFMTwoStackStandard2A.Clear()
            txtGasFlowDSCFMTwoStackStandard2B.Clear()
            txtGasFlowDSCFMTwoStackStandard2C.Clear()
            txtPollConcTwoStackStandard1A.Clear()
            txtPollConcTwoStackStandard1B.Clear()
            txtPollConcTwoStackStandard1C.Clear()
            txtPollConcTwoStackStandard2A.Clear()
            txtPollConcTwoStackStandard2B.Clear()
            txtPollConcTwoStackStandard2C.Clear()
            cboPollConUnitTwoStackStandard.SelectedValue = 0
            txtPollConcAvgTwoStackStandard1.Clear()
            txtPollConcAvgTwoStackStandard2.Clear()
            txtEmissRateTwoStackStandard1A.Clear()
            txtEmissRateTwoStackStandard1B.Clear()
            txtEmissRateTwoStackStandard1C.Clear()
            txtEmissRateTwoStackStandard2A.Clear()
            txtEmissRateTwoStackStandard2B.Clear()
            txtEmissRateTwoStackStandard2C.Clear()
            cboEmissRateUnitTwoStackStandard.SelectedValue = 0
            txtEmissRateAvgTwoStackStandard1.Clear()
            txtEmissRateAvgTwoStackStandard2.Clear()
            txtEmissRateTotalTwoStackStandard1.Clear()
            txtEmissRateTotalTwoStackStandard2.Clear()
            txtEmissRateTotalTwoStackStandard3.Clear()
            txtEmissRateTotalAvgTwoStackStandard.Clear()
            txtPercentAllowableTwoStack.Clear()
            txtMaximumExpectedOperatingCapacityTwoStack.Clear()
            cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue = 0
            txtOperatingCapacityTwoStack.Clear()
            cboOperatingCapacityUnitsTwoStack.SelectedValue = 0
            txtAllowableEmissionRate1TwoStack.Clear()
            cboAllowableEmissionRateUnits1TwoStack.SelectedValue = 0
            txtAllowableEmissionRate2TwoStack.Clear()
            cboAllowableEmissionRateUnits2TwoStack.SelectedValue = 0
            txtAllowableEmissionRate3TwoStack.Clear()
            cboAllowableEmissionRateUnits3TwoStack.SelectedValue = 0
            txtApplicableRegulationTwoStack.Clear()
            txtControlEquipmentOperatingDataTwoStack.Clear()
            txtOtherInformationTwoStack.Clear()
            txtStackOneNameTwoStackDRE.Clear()
            txtStackTwoNameTwoStackDRE.Clear()
            txtRunNumTwoStackDRE1A.Clear()
            txtRunNumTwoStackDRE1B.Clear()
            txtRunNumTwoStackDRE1C.Clear()
            txtRunNumTwoStackDRE2A.Clear()
            txtRunNumTwoStackDRE2B.Clear()
            txtRunNumTwoStackDRE2C.Clear()
            txtGasTempTwoStackDRE1A.Clear()
            txtGasTempTwoStackDRE1B.Clear()
            txtGasTempTwoStackDRE1C.Clear()
            txtGasTempTwoStackDRE2A.Clear()
            txtGasTempTwoStackDRE2B.Clear()
            txtGasTempTwoStackDRE2C.Clear()
            txtGasMoistTwoStackDRE1A.Clear()
            txtGasMoistTwoStackDRE1B.Clear()
            txtGasMoistTwoStackDRE1C.Clear()
            txtGasMoistTwoStackDRE2A.Clear()
            txtGasMoistTwoStackDRE2B.Clear()
            txtGasMoistTwoStackDRE2C.Clear()
            txtGasFlowACFMTwoStackDRE1A.Clear()
            txtGasFlowACFMTwoStackDRE1B.Clear()
            txtGasFlowACFMTwoStackDRE1C.Clear()
            txtGasFlowACFMTwoStackDRE2A.Clear()
            txtGasFlowACFMTwoStackDRE2B.Clear()
            txtGasFlowACFMTwoStackDRE2C.Clear()
            txtGasFlowDSCFMTwoStackDRE1A.Clear()
            txtGasFlowDSCFMTwoStackDRE1B.Clear()
            txtGasFlowDSCFMTwoStackDRE1C.Clear()
            txtGasFlowDSCFMTwoStackDRE2A.Clear()
            txtGasFlowDSCFMTwoStackDRE2B.Clear()
            txtGasFlowDSCFMTwoStackDRE2C.Clear()
            txtPollConcTwoStackDRE1A.Clear()
            txtPollConcTwoStackDRE1B.Clear()
            txtPollConcTwoStackDRE1C.Clear()
            txtPollConcTwoStackDRE2A.Clear()
            txtPollConcTwoStackDRE2B.Clear()
            txtPollConcTwoStackDRE2C.Clear()
            cboPollConUnitTwoStackDRE.SelectedValue = 0
            txtPollConcAvgTwoStackDRE1.Clear()
            txtPollConcAvgTwoStackDRE2.Clear()
            txtEmissRateTwoStackDRE1A.Clear()
            txtEmissRateTwoStackDRE1B.Clear()
            txtEmissRateTwoStackDRE1C.Clear()
            txtEmissRateTwoStackDRE2A.Clear()
            txtEmissRateTwoStackDRE2B.Clear()
            txtEmissRateTwoStackDRE2C.Clear()
            cboEmissRateUnitTwoStackDRE.SelectedValue = 0
            txtEmissRateAvgTwoStackDRE1.Clear()
            txtEmissRateAvgTwoStackDRE2.Clear()
            txtDestructionEfficiencyTwoStackDRE.Clear()
            txtMaximumExpectedOperatingCapacityLoadingRack.Clear()
            cboMaximumExpectedOperatingCapacityUnitsLoadingRack.SelectedValue = 0
            txtOperatingCapacityLoadingRack.Clear()
            cboOperatingCapacityUnitsLoadingRack.SelectedValue = 0
            txtAllowableEmissionRate1LoadingRack.Clear()
            txtAllowableEmissionRate2LoadingRack.Clear()
            txtAllowableEmissionRate3LoadingRack.Clear()
            cboAllowableEmissionRateUnits1LoadingRack.SelectedValue = 0
            cboAllowableEmissionRateUnits2LoadingRack.SelectedValue = 0
            cboAllowableEmissionRateUnits3LoadingRack.SelectedValue = 0
            txtApplicableRegulationLoadingRack.Clear()
            txtControlEquipmentOperatingDataLoadingRack.Clear()
            txtTestDurationLoadingRack.Clear()
            cboTestDurationUnitsLoadingRack.SelectedValue = 0
            txtPollConcINLoadingRack.Clear()
            cboPollConUnitINLoadingRack.SelectedValue = 0
            txtPollConcOUTLoadingRack.Clear()
            cboPollConUnitOUTLoadingRack.SelectedValue = 0
            txtDestructionEfficiencyLoadingRack.Clear()
            txtEmissRateLoadingRack.Clear()
            cboEmissRateUnitLoadingRack.SelectedValue = 0
            txtOtherInformationLoadingRack.Clear()
            txtMaximumExpectedOperatingCapacityPond.Clear()
            cboMaximumExpectedOperatingCapacityUnitsPond.SelectedValue = 0
            txtOperatingCapacityPond.Clear()
            cboOperatingCapacityUnitsPond.SelectedValue = 0
            txtAllowableEmissionRate1Pond.Clear()
            txtAllowableEmissionRate2Pond.Clear()
            txtAllowableEmissionRate3Pond.Clear()
            cboAllowableEmissionRateUnits1Pond.SelectedValue = 0
            cboAllowableEmissionRateUnits2Pond.SelectedValue = 0
            cboAllowableEmissionRateUnits3Pond.SelectedValue = 0
            txtApplicableRegulationPond.Clear()
            txtControlEquipmentOperatingDataPond.Clear()
            txtRunNumPond1A.Clear()
            txtRunNumPond1B.Clear()
            txtRunNumPond1C.Clear()
            txtPollConcPond1A.Clear()
            txtPollConcPond1B.Clear()
            txtPollConcPond1C.Clear()
            cboPollConUnitPond.SelectedValue = 0
            txtPollConcAvgPond.Clear()
            txtTreatmentRatePond1A.Clear()
            txtTreatmentRatePond1B.Clear()
            txtTreatmentRatePond1C.Clear()
            cboTreatmentRateUnitPond.SelectedValue = 0
            txtTreatmentRateAvgPond.Clear()
            txtDestructionEfficancyPond.Clear()
            txtOtherInformationPond.Clear()
            txtMaximumExpectedOperatingCapacityGas.Clear()
            cboMaximumExpectedOperatingCapacityUnitsGas.SelectedValue = 0
            txtOperatingCapacityGas.Clear()
            cboOperatingCapacityUnitsGas.SelectedValue = 0
            txtAllowableEmissionRate1Gas.Clear()
            txtAllowableEmissionRate2Gas.Clear()
            txtAllowableEmissionRate3Gas.Clear()
            cboAllowableEmissionRateUnits1Gas.SelectedValue = 0
            cboAllowableEmissionRateUnits2Gas.SelectedValue = 0
            cboAllowableEmissionRateUnits3Gas.SelectedValue = 0
            txtApplicableRegulationGas.Clear()
            txtControlEquipmentOperatingDataGas.Clear()
            txtRunNumGas1A.Clear()
            txtRunNumGas1B.Clear()
            txtRunNumGas1C.Clear()
            txtPollConcGas1A.Clear()
            txtPollConcGas1B.Clear()
            txtPollConcGas1C.Clear()
            cboPollConUnitGas.SelectedValue = 0
            txtPollConcAvgGas.Clear()
            txtEmissRateGas1A.Clear()
            txtEmissRateGas1B.Clear()
            txtEmissRateGas1C.Clear()
            cboEmissRateUnitGas.SelectedValue = 0
            txtEmissRateAvgGas.Clear()
            txtPercentAllowableGas.Clear()
            txtOtherInformationGas.Clear()
            txtMaximumExpectedOperatingCapacityFlare.Clear()
            cboMaximumExpectedOperatingCapacityUnitsFlare.SelectedValue = 0
            txtOperatingCapacityFlare.Clear()
            cboOperatingCapacityUnitsFlare.SelectedValue = 0
            txtVelocityFlare.Clear()
            txtHeatContentFlare.Clear()
            txtApplicableRegulationFlare.Clear()
            txtMonitoringDataFlare.Clear()
            txtHeatingValue1AFlare.Clear()
            txtHeatingValue1BFlare.Clear()
            txtHeatingValue1CFlare.Clear()
            cboHeatingValueUnits.SelectedValue = 0
            txtHeatingValuesAvgFlare.Clear()
            txtVelocity1AFlare.Clear()
            txtVelocity1BFlare.Clear()
            txtVelocity1CFlare.Clear()
            cboVelocityUnitsFlare.SelectedValue = 0
            txtVelocityAvgFlare.Clear()
            txtPercentAllowableFlare.Clear()
            txtOtherInformationFlare.Clear()
            txtApplicableStandardRata.Clear()
            cboDilutentMonitoredRata.SelectedValue = 0
            txtApplicableRegulationRata.Clear()
            txtRefMethodRata1.Clear()
            txtRefMethodRata2.Clear()
            txtRefMethodRata3.Clear()
            txtRefMethodRata4.Clear()
            txtRefMethodRata5.Clear()
            txtRefMethodRata6.Clear()
            txtRefMethodRata7.Clear()
            txtRefMethodRata8.Clear()
            txtRefMethodRata9.Clear()
            txtRefMethodRata10.Clear()
            txtRefMethodRata11.Clear()
            txtRefMethodRata12.Clear()
            txtCMSRata1.Clear()
            txtCMSRata2.Clear()
            txtCMSRata3.Clear()
            txtCMSRata4.Clear()
            txtCMSRata5.Clear()
            txtCMSRata6.Clear()
            txtCMSRata7.Clear()
            txtCMSRata8.Clear()
            txtCMSRata9.Clear()
            txtCMSRata10.Clear()
            txtCMSRata11.Clear()
            txtCMSRata12.Clear()
            chbOmitRunRata1.Checked = False
            chbOmitRunRata2.Checked = False
            chbOmitRunRata3.Checked = False
            chbOmitRunRata4.Checked = False
            chbOmitRunRata5.Checked = False
            chbOmitRunRata6.Checked = False
            chbOmitRunRata7.Checked = False
            chbOmitRunRata8.Checked = False
            chbOmitRunRata9.Checked = False
            chbOmitRunRata10.Checked = False
            chbOmitRunRata11.Checked = False
            chbOmitRunRata12.Checked = False
            cboUnitsRata.SelectedValue = 0
            txtRelativeAccuracy.Clear()
            txtRefMethodPercentRata.Clear()
            txtApplicableStandardPercentRata.Clear()
            cboDiluentRata.SelectedValue = 0
            txtPart75Statement.Clear()
            txtOtherInformationRata.Clear()
            txtApplicableRegulationMemorandum.Clear()
            txtMemorandumStandard.Clear()
            txtApplicableRegulationMemorandum.Clear()
            txtModelMemorandumToFile.Clear()
            txtSerialNumberMemorandumToFile.Clear()
            txtMemorandumToFile.Clear()
            txtMaximumExpectedOperatingCapacityMethod9Multi1.Clear()
            txtMaximumExpectedOperatingCapacityMethod9Multi2.Clear()
            txtMaximumExpectedOperatingCapacityMethod9Multi3.Clear()
            txtMaximumExpectedOperatingCapacityMethod9Multi4.Clear()
            txtMaximumExpectedOperatingCapacityMethod9Multi5.Clear()
            cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.SelectedValue = 0
            txtOperatingCapacityMethod9Multi1.Clear()
            txtOperatingCapacityMethod9Multi2.Clear()
            txtOperatingCapacityMethod9Multi3.Clear()
            txtOperatingCapacityMethod9Multi4.Clear()
            txtOperatingCapacityMethod9Multi5.Clear()
            cboOperatingCapacityUnitsMethod9Multi.SelectedValue = 0
            txtAllowableEmissionRate1Method9Multi.Clear()
            txtAllowableEmissionRate2Method9Multi.Clear()
            txtAllowableEmissionRate3Method9Multi.Clear()
            txtAllowableEmissionRate4Method9Multi.Clear()
            txtAllowableEmissionRate5Method9Multi.Clear()
            cboAllowableEmissionRateUnitsMethod9Multi.SelectedValue = 0
            txtApplicableRegulationMethod9Multi.Clear()
            txtControlEquipmentOperatingDataMethod9Multi.Clear()
            txt6minuteAvg1AMethod9Multi.Clear()
            txt6minuteAvg1BMethod9Multi.Clear()
            txt6minuteAvg1CMethod9Multi.Clear()
            txt6minuteAvg1DMethod9Multi.Clear()
            txt6minuteAvg1EMethod9Multi.Clear()
            txtOtherInformationMethod9.Clear()
            txtEquipmentItem1AMethod9Multi.Clear()
            txtEquipmentItem1BMethod9Multi.Clear()
            txtEquipmentItem1CMethod9Multi.Clear()
            txtEquipmentItem1DMethod9Multi.Clear()
            txtEquipmentItem1EMethod9Multi.Clear()
            txtMaximumExpectedOperatingCapacityMethod22.Clear()
            cboMaximumExpectedOperatingCapacityUnitsMethod22.SelectedValue = 0
            txtOperatingCapacityMethod22.Clear()
            cboOperatingCapacityUnitsMethod22.SelectedValue = 0
            txtAllowableEmissionRateMethod22.Clear()
            txtApplicableRegulationMethod22.Clear()
            txtTestDurationMethod22.Clear()
            txtAccumulatedEmissionMethod22.Clear()
            txtOtherInformationMethod22.Clear()
            txtMaximumExpectedOperatingCapacityMethod9Single.Clear()
            cboMaximumExpectedOperatingCapacityUnitsMethod9Single.SelectedValue = 0
            txtOperatingCapacityMethod9Single.Clear()
            cboOperatingCapacityUnitsMethod9Single.SelectedValue = 0
            txtAllowableEmissionRate1Method9Single.Clear()
            cboAllowableEmissionRateUnits1Method9Single.SelectedValue = 0
            txtApplicableRegulationMethod9Single.Clear()
            txtControlEquipmentOperatingDataMethod9Single.Clear()
            txtTestDurationMethod9Single.Clear()
            txtOpacityMethod9Single.Clear()
            txtOtherInformationMethod9.Clear()
            txtApplicableRegulationMemorandum.Clear()
            txtMaximumExpectedOperatingCapacityMemorandumPTE.Clear()
            cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.SelectedValue = 0
            txtOperatingCapacityMemorandumPTE.Clear()
            cboOperatingCapacityUnitsMemorandumPTE.SelectedValue = 0
            txtAllowableEmissionRate1MemorandumPTE.Clear()
            txtAllowableEmissionRate2MemorandumPTE.Clear()
            txtAllowableEmissionRate3MemorandumPTE.Clear()
            cboAllowableEmissionRateUnits1MemorandumPTE.SelectedValue = 0
            cboAllowableEmissionRateUnits2MemorandumPTE.SelectedValue = 0
            cboAllowableEmissionRateUnits3MemorandumPTE.SelectedValue = 0
            txtControlEquipmentOperatingDataMemorandumPTE.Clear()
            txtMemorandumPTE.Clear()

            DTPEventCompleteDate.Text = OracleDate
            txtTrackingNumber.Clear()
            txtEnforcementNumber.Clear()
            cboStaffResponsible.SelectedValue = 0
            DTPAcknoledgmentLetterSent.Text = OracleDate
            txtTestReportReceivedbySSCPDate.Clear()
            txtTestReportDueDate.Clear()
            DTPTestReportDueDate.Text = OracleDate
            DTPTestReportNewDueDate.Text = OracleDate
            txtTestReportComments.Clear()
            rdbTestReportFollowUpYes.Checked = False
            rdbTestReportFollowUpNo.Checked = False
            chbTestReportChangeDueDate.Checked = False
            chbAcknoledgmentLetterSent.Checked = False
            chbEventComplete.Checked = False

            DefaultTabs()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub PrePopulate()
        Try
            Dim RefNum As String
            Dim OldRefNum As String
            Dim DocType As String

            RefNum = txtReferenceNumber.Text
            OldRefNum = InputBox("Enter Old Reference Number.", "PrePopulate Tool.")

            If OldRefNum <> "" Then
                SQL = "select AIRBRANCH.ISMPDocumentType.strDocumentType " & _
                "from AIRBRANCH.ISMPDocumentType, AIRBRANCH.ISMPReportInformation " & _
                "where AIRBRANCH.ISMPReportInformation.strDocumentType = AIRBRANCH.ISMPDocumentType.strKey " & _
                "and strReferenceNumber = '" & OldRefNum & "'"

                SQL = "Select strDocumentType  " & _
                "from AIRBRANCH.ISMPReportInformation " & _
                "where strReferenceNumber = '" & OldRefNum & "' "

                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                RecExist = dr.Read
                If RecExist = True Then
                    DocType = dr.Item("strDocumentType")
                Else
                    DocType = "Non-Exist"
                End If
                dr.Close()
                If DocType <> "Non-Exist" Then
                    ClearAll()

                    SQL = "Select " & _
                  "AIRBRANCH.ISMPMaster.strReferenceNumber,  " & _
                  "substr(AIRBRANCH.ISMpMaster.strAIRSnumber, 5) as AIRSNumber,  " & _
                  "AIRBRANCH.APBFacilityInformation.strFacilityName,  " & _
                  "strFacilityCity, strFacilityState,  " & _
                  "strPollutant, strEmissionSource,  " & _
                  "strReportType, strDocumentType,  " & _
                  "strApplicableRequirement,  " & _
                  "strTestingFirm, strReviewingEngineer,  " & _
                  "strWitnessingEngineer,  " & _
                  "strReviewingUnit,  " & _
                  "to_char(datReviewedByUnitManager, 'dd-Mon-yyyy') as datReviewedByUnitManager,  " & _
                  "strComplianceManager,  " & _
                  "to_char(datReceivedDate, 'dd-Mon-yyyy') as datReceivedDate,  " & _
                  "to_char(datTestDateStart, 'dd-Mon-yyyy') as datTestDateStart,  " & _
                  "to_char(datTestDateEnd, 'dd-Mon-yyyy') as datTestDateEnd,  " & _
                  "to_char(datCompleteDate, 'dd-Mon-yyyy') as datCompleteDate,  " & _
                  "mmoCommentArea,  " & _
                  "strClosed, strProgramManager,  " & _
                  "strComplianceStatus, strCC,  " & _
                  "(AIRBRANCH.ISMPReportInformation.datReceivedDate - AIRBRANCH.ISMPReportInformation.datTestDateEnd) as DaysFromTest,  " & _
                  "case  " & _
                  "when datCompleteDate = '04-Jul-1776' then to_char(sysdate-datReceivedDate)  " & _
                  "else to_char(datCompleteDate - datReceivedDate)  " & _
                  "End APBDays,  " & _
                  "Case " & _
                  "when datCompleteDate = '04-Jul-1776' then to_char(sysdate-datReviewedByUnitManager)  " & _
                  "else to_char(datCompleteDate - datReviewedByUnitManager)  " & _
                  "End EngineerDays,  " & _
                  "strDeterminationMethod, strControlEquipmentData,  " & _
                  "strOtherWitnessingEng, strConfidentialData,  " & _
                  "case " & _
                  "when numReviewingManager is null then 'N/A' " & _
                  "else (strLastName||', '||strFirstName) " & _
                  "END UnitManager " & _
                  "from AIRBRANCH.ISMPMaster, AIRBRANCH.APBFacilityInformation,  " & _
                  "AIRBRANCH.ISMPReportInformation, AIRBRANCH.EPDUserProfiles     " & _
                  "where AIRBRANCH.ISMPMaster.strAIRSNumber = AIRBRANCH.APBFacilityInformation.strAIRSNumber  " & _
                  "and AIRBRANCH.ISMPMaster.strReferenceNumber = AIRBRANCH.ISMPReportInformation.strReferenceNumber  " & _
                  "and AIRBRANCH.ISMPReportInformation.numReviewingManager = EPDUserProfiles.numUserID (+) " & _
                  "and AIRBRANCH.ISMPMaster.strReferenceNumber = '" & RefNum & "' "

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    If RecExist = True Then
                        If IsDBNull(dr.Item("AIRSNumber")) Then
                            txtAirsNumber.Clear()
                        Else
                            txtAirsNumber.Text = dr.Item("AIRSNumber")
                        End If
                        If IsDBNull(dr.Item("strFacilityName")) Then
                            txtFacilityName.Clear()
                        Else
                            txtFacilityName.Text = dr.Item("strFacilityName")
                        End If
                        If IsDBNull(dr.Item("strFacilityCity")) Then
                            txtFacilityCity.Clear()
                        Else
                            txtFacilityCity.Text = dr.Item("strFacilityCity")
                        End If
                        If IsDBNull(dr.Item("strFacilityState")) Then
                            txtFacilityState.Clear()
                        Else
                            txtFacilityState.Text = dr.Item("strFacilityState")
                        End If
                        txtFacilityCity.Text = String.Join(", ", New String() {txtFacilityCity.Text, txtFacilityState.Text})
                        If IsDBNull(dr.Item("strTestingFirm")) Then
                            cboTestingFirm.SelectedValue = 0
                        Else
                            cboTestingFirm.SelectedValue = dr.Item("strTestingFirm")
                        End If
                        If IsDBNull(dr.Item("strReviewingEngineer")) Then
                            cboReviewingEngineer.SelectedValue = 0
                        Else
                            If dr.Item("strReviewingEngineer") = "0" Then
                                cboReviewingEngineer.SelectedValue = 0
                            Else
                                cboReviewingEngineer.SelectedValue = dr.Item("strReviewingEngineer")
                            End If
                        End If
                        If IsDBNull(dr.Item("strWitnessingEngineer")) Then
                            cboWitnessingEngineer.SelectedValue = 0
                        Else
                            If dr.Item("strWitnessingEngineer") = "0" Then
                                cboWitnessingEngineer.SelectedValue = 0
                            Else
                                cboWitnessingEngineer.SelectedValue = dr.Item("strWitnessingEngineer")
                            End If
                        End If
                        If IsDBNull(dr.Item("strReviewingunit")) Then
                            cboISMPUnit.SelectedValue = 0
                        Else
                            If dr.Item("strReviewingUnit") = "O" Then
                                cboISMPUnit.SelectedValue = 0
                            Else
                                cboISMPUnit.SelectedValue = dr.Item("strReviewingUnit")
                            End If
                        End If
                        If IsDBNull(dr.Item("datReviewedByUnitManager")) Then
                            txtAssignedToEngineer.Clear()
                        Else
                            txtAssignedToEngineer.Text = dr.Item("datReviewedByUnitManager")
                        End If
                        If IsDBNull(dr.Item("strComplianceManager")) Then
                            cboComplianceManager.SelectedValue = 0
                        Else
                            If dr.Item("strComplianceManager") = "0" Then
                                cboComplianceManager.SelectedValue = 0
                            Else
                                cboComplianceManager.SelectedValue = dr.Item("strComplianceManager")
                            End If
                        End If
                        If IsDBNull(dr.Item("datReceivedDate")) Then
                            txtReceivedByAPB.Clear()
                        Else
                            txtReceivedByAPB.Text = dr.Item("datReceivedDate")
                        End If
                        If IsDBNull(dr.Item("datTestDateStart")) Then
                            DTPTestDateStart.Value = OracleDate
                            DTPTestDateStart.Checked = False
                        Else
                            DTPTestDateStart.Value = dr.Item("datTestDateStart")
                            DTPTestDateStart.Checked = True
                        End If
                        If IsDBNull(dr.Item("datTestDateEnd")) Then
                            DTPTestDateComplete.Value = OracleDate
                            DTPTestDateComplete.Checked = False
                        Else
                            DTPTestDateComplete.Value = dr.Item("datTestDateEnd")
                            DTPTestDateComplete.Checked = True
                        End If
                        If IsDBNull(dr.Item("datCompleteDate")) Then
                            txtCompleteDate.Clear()
                        Else
                            txtCompleteDate.Text = dr.Item("datCompleteDate")
                            If txtCompleteDate.Text = "04-Jul-1776" Then
                                txtCompleteDate.Clear()
                            End If
                        End If
                        If IsDBNull(dr.Item("mmoCommentArea")) Then
                            ReportComments = ""
                        Else
                            ReportComments = dr.Item("mmoCommentArea")
                        End If
                        If IsDBNull(dr.Item("strClosed")) Then
                            ReportStatus = "Open"
                        Else
                            ReportStatus = dr.Item("strClosed")
                        End If
                        If IsDBNull(dr.Item("strProgramManager")) Then
                            txtProgramManager.Clear()
                        Else
                            txtProgramManager.Text = dr.Item("strProgramManager")
                        End If
                        If IsDBNull(dr.Item("strComplianceStatus")) Then
                            cboComplianceStatus.SelectedValue = 0
                        Else
                            cboComplianceStatus.SelectedValue = dr.Item("strComplianceStatus")
                        End If
                        If IsDBNull(dr.Item("strCC")) Then
                            cboccBox.SelectedValue = 0
                        Else
                            If dr.Item("strCC") = "0" Then
                                cboccBox.SelectedValue = 0
                            Else
                                cboccBox.SelectedValue = dr.Item("strCC")
                            End If
                        End If

                        If IsDBNull(dr.Item("DaysFromTest")) Then
                            Me.txtDaysfromTestToAPB.Clear()
                        Else
                            txtDaysfromTestToAPB.Text = dr.Item("DaysFromTest")
                            If txtDaysfromTestToAPB.Text.Contains(".") Then
                                txtDaysfromTestToAPB.Text = Mid(txtDaysfromTestToAPB.Text, 1, InStr(txtDaysfromTestToAPB.Text, ".", CompareMethod.Text) - 1)
                            End If
                            If txtDaysfromTestToAPB.Text = "" Then
                                txtDaysfromTestToAPB.Text = "0"
                            End If
                            If CInt(txtDaysfromTestToAPB.Text) > 60 Then
                                txtDaysfromTestToAPB.BackColor = Color.Tomato
                            Else
                                txtDaysfromTestToAPB.BackColor = Color.LightBlue
                            End If
                        End If

                        If IsDBNull(dr.Item("APBDays")) Then
                            txtDaysInAPB.Clear()
                        Else
                            txtDaysInAPB.Text = dr.Item("APBDays")
                            If txtDaysInAPB.Text.Contains(".") Then
                                txtDaysInAPB.Text = Mid(txtDaysInAPB.Text, 1, InStr(txtDaysInAPB.Text, ".", CompareMethod.Text) - 1)
                            End If
                            If txtDaysInAPB.Text = "" Then
                                txtDaysInAPB.Text = "0"
                            End If
                            If CInt(txtDaysInAPB.Text) > 60 Then
                                txtDaysInAPB.BackColor = Color.Tomato
                            Else
                                txtDaysInAPB.BackColor = Color.LightBlue
                            End If
                        End If
                        If IsDBNull(dr.Item("EngineerDays")) Then
                            txtDaysAssigned.Clear()
                        Else
                            txtDaysAssigned.Text = dr.Item("EngineerDays")
                            If txtDaysAssigned.Text.Contains(".") Then
                                txtDaysAssigned.Text = Mid(txtDaysAssigned.Text, 1, InStr(txtDaysAssigned.Text, ".", CompareMethod.Text) - 1)
                            End If
                            If txtDaysAssigned.Text = "" Then
                                txtDaysAssigned.Text = "0"
                            End If
                            If CInt(txtDaysAssigned.Text) > 60 Then
                                txtDaysAssigned.BackColor = Color.Tomato
                            Else
                                txtDaysAssigned.BackColor = Color.LightBlue
                            End If
                        End If
                        If IsDBNull(dr.Item("UnitManager")) Then
                            txtUnitManager.Clear()
                        Else
                            txtUnitManager.Text = dr.Item("UnitManager")
                        End If
                    Else

                    End If
                    dr.Close()

                    SQL = "select " & _
                    "strPollutant, strEmissionSource, " & _
                    "strReportType, strDeterminationMethod, " & _
                    "strApplicableRequirement, strControlEquipmentData " & _
                    "from AIRBRANCH.ISMPReportInformation " & _
                    "where strReferenceNUmber = '" & OldRefNum & "' "

                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    While dr.Read
                        If IsDBNull(dr.Item("strEmissionSource")) Then
                            txtSourceTested.Clear()
                        Else
                            txtSourceTested.Text = dr.Item("strEmissionSource")
                        End If
                        If IsDBNull(dr.Item("strPollutant")) Then
                            cboPollutantDetermined.SelectedValue = 0
                        Else
                            cboPollutantDetermined.SelectedValue = dr.Item("strPollutant")
                        End If
                        If IsDBNull(dr.Item("strReportType")) Then
                            cboReportType.SelectedValue = 0
                        Else
                            cboReportType.SelectedValue = dr.Item("strReportType")
                        End If
                        If IsDBNull(dr.Item("strDeterminationMethod")) Then
                            cboMethodDetermined.SelectedValue = 0
                        Else
                            cboMethodDetermined.SelectedValue = dr.Item("strDeterminationMethod")
                        End If
                        If IsDBNull(dr.Item("strApplicableRequirement")) Then
                            ApplicableRequirment = ""
                        Else
                            ApplicableRequirment = dr.Item("strApplicableRequirement")
                        End If
                        If IsDBNull(dr.Item("strControlEquipmentData")) Then
                            ControlEquipment = ""
                        Else
                            ControlEquipment = dr.Item("strControlEquipmentData")
                        End If
                    End While
                    txtReferenceNumber.Text = RefNum

                    DocumentType = DocType
                    If DocumentType <> "" Then
                        Select Case DocumentType
                            Case "001"
                                TCDocumentTypes.TabPages.Remove(TPSSCPWork)
                            Case "002"
                                LoadOneStack(OldRefNum)
                            Case "003"
                                LoadOneStack(OldRefNum)
                            Case "004"
                                LoadOneStack(OldRefNum)
                            Case "005"
                                LoadTwoStack(OldRefNum)
                            Case "006"
                                LoadTwoStack(OldRefNum)
                            Case "007"
                                LoadLoadingRack(OldRefNum)
                            Case "008"
                                LoadPondTreatment(OldRefNum)
                            Case "009"
                                LoadGasConcentration(OldRefNum)
                            Case "010"
                                LoadFlare(OldRefNum)
                            Case "011"
                                LoadRata(OldRefNum)
                            Case "012"
                                LoadMemo(OldRefNum)
                            Case "013"
                                LoadMemo(OldRefNum)
                            Case "014"
                                LoadMethod9(OldRefNum)
                            Case "015"
                                LoadMethod22(OldRefNum)
                            Case "016"
                                LoadMethod9(OldRefNum)
                            Case "018"
                                LoadMemo(OldRefNum)
                            Case Else
                                TCDocumentTypes.TabPages.Remove(TPSSCPWork)
                        End Select
                    End If

                    'TCDocumentTypes.TabPages.Add(TPSSCPWork)

                Else
                    MsgBox("The Reference Number " & OldRefNum & " is not a valid value.", MsgBoxStyle.Information, "Test Report")
                End If
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub

    Sub OpenMemo()
        OpenFormTestMemo(Me.txtReferenceNumber.Text)
    End Sub

    Sub ClearTestReportData()
        Dim diag As DialogResult = MessageBox.Show("This will clear all data from this test repot. Are you sure you want to proceed?", "Delete all data", MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2)

        If diag = DialogResult.Yes Then
            Dim result As Boolean = DAL.ISMP.ClearStackTestData(txtReferenceNumber.Text)

            If result Then
                MessageBox.Show("The test report data has been cleared. " & _
                                "A new document type can now be selected.", "Success", MessageBoxButtons.OK)

                Dim temp As String = txtReferenceNumber.Text
                ClearAll()
                txtReferenceNumber.Text = temp
                LoadData(txtReferenceNumber.Text)
            Else
                MessageBox.Show("There was an error deleting the data.", "Error", MessageBoxButtons.OK)
            End If
        End If
    End Sub

    Sub SaveStackTest()
        Try
            Dim Pollutant As String = "00001"
            Dim EmissionSource As String = "N/A'"
            Dim ReportType As String
            Dim DetMethod As String
            Dim TestingFirm As String
            Dim TestStart As String
            Dim TestEnd As String
            Dim ComplianceStatus As String
            Dim ReviewingEngineer As String = "0"
            Dim WitnessingEng As String = "0"
            Dim WitnessingEng2 As String = "0"
            Dim OtherWitnessing As String = "0"
            Dim ReviewingUnit As String = "0"
            Dim ComplianceManager As String = "0"
            Dim CC As String = "0"
            Dim DocumentType As String = "001"
            Dim Comments As String = "N/A"
            Dim ControlEquip As String = "N/A"
            Dim ApplicableReg As String = "Incomplete"
            Dim AssignedDate As String = ""
            Dim UnitManager As String = ""

            If cboPollutantDetermined.Text <> " " And cboPollutantDetermined.Text <> "" Then
                Pollutant = cboPollutantDetermined.SelectedValue
                If Pollutant = "" Then
                    Pollutant = "00001"
                End If
            Else
                Pollutant = "00001"
            End If
            If txtSourceTested.Text <> "" Then
                EmissionSource = txtSourceTested.Text
            Else
                EmissionSource = "N/A"
            End If
            If cboReportType.Text <> " " And cboReportType.Text <> "" Then
                ReportType = cboReportType.SelectedValue
                If ReportType = "" Then
                    ReportType = "N/A"
                End If
            Else
                ReportType = "N/A"
            End If
            If cboMethodDetermined.Text <> " " And cboMethodDetermined.Text <> "" Then
                DetMethod = cboMethodDetermined.SelectedValue
            Else
                DetMethod = ""
            End If
            If Me.cboTestingFirm.Text <> " " And cboTestingFirm.Text <> "" Then
                TestingFirm = cboTestingFirm.SelectedValue
                If TestingFirm = "" Then
                    TestingFirm = "00000"
                End If
            Else
                TestingFirm = "00000"
            End If
            TestStart = DTPTestDateStart.Text
            TestEnd = DTPTestDateComplete.Text
            If cboComplianceStatus.Text <> " " And cboComplianceStatus.Text <> "" Then
                ComplianceStatus = cboComplianceStatus.SelectedValue
                If ComplianceStatus = "" Then
                    ComplianceStatus = "01"
                End If
            Else
                ComplianceStatus = "01"
            End If
            If cboReviewingEngineer.Text <> " " And cboReviewingEngineer.Text <> "" Then
                ReviewingEngineer = cboReviewingEngineer.SelectedValue
                If ReviewingEngineer = "" Then
                    ReviewingEngineer = "0"
                End If
            Else
                ReviewingEngineer = "0"
            End If
            If cboWitnessingEngineer.Text <> " " And cboWitnessingEngineer.Text <> "" Then
                WitnessingEng = cboWitnessingEngineer.SelectedValue
                If WitnessingEng = "" Then
                    WitnessingEng = "0"
                End If
            Else
                WitnessingEng = "0"
            End If
            If cboISMPUnit.Text <> " " And cboISMPUnit.Text <> "" Then
                ReviewingUnit = cboISMPUnit.SelectedValue
                If ReviewingUnit = "" Then
                    ReviewingUnit = "0"
                End If
            Else
                ReviewingUnit = "0"
            End If
            If cboComplianceManager.Text <> " " And cboComplianceManager.Text <> "" Then
                ComplianceManager = cboComplianceManager.SelectedValue
                If ComplianceManager = "" Then
                    ComplianceManager = "0"
                End If
            Else
                ComplianceManager = "0"
            End If
            If Me.cboccBox.Text <> " " And cboccBox.Text <> "" Then
                CC = cboccBox.SelectedValue
                If CC = "" Then
                    CC = "0"
                End If
            Else
                CC = "0"
            End If
            If clbWitnessingEngineers.CheckedItems.Count > 0 Then
                OtherWitnessing = clbWitnessingEngineers.CheckedItems.Count
            Else
                OtherWitnessing = "0"
            End If
            If txtAssignedToEngineer.Text = "04-Jul-1776" Then
                AssignedDate = OracleDate
            Else
                AssignedDate = txtAssignedToEngineer.Text
            End If
            If txtUnitManager.Text = "N/A" Then
                Dim UserUnitTemp As String = ""

                UserUnitTemp = UserUnit
                If UserUnitTemp = "---" Then
                    UserUnitTemp = ""
                End If
                SQL = "select (strLastName||', '||strFirstName) as UnitManager, " & _
                "AIRBRANCH.EPDUSerProfiles.numUserID " & _
                "from AIRBRANCH.EPDUserProfiles, AIRBRANCH.IAIPPermissions " & _
                "where AIRBRANCH.EPDUserProfiles.numUserID = AIRBRANCH.IAIPPermissions.numUserID " & _
                "and numEmployeeStatus = '1' " & _
                "and (strIAIPPermissions like '%(4)%' or strIAIPPermissions like '%(115)%') " & _
                "and numUnit = '" & UserUnitTemp & "' "

                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                While dr.Read
                    If IsDBNull(dr.Item("UnitManager")) Then
                        txtUnitManager.Text = "N/A"
                    Else
                        txtUnitManager.Text = dr.Item("UnitManager")
                    End If
                    If IsDBNull(dr.Item("numUserID")) Then
                        UnitManager = ""
                    Else
                        UnitManager = dr.Item("numUserID")
                    End If
                End While
            Else
                UnitManager = ""
            End If

            Select Case TCDocumentTypes.TabPages.Count
                Case Is < 3
                    If TCDocumentTypes.TabPages.Contains(TPOneStack) Then
                        If txtApplicableRegulationOneStack.Text <> "" Then
                            ApplicableReg = txtApplicableRegulationOneStack.Text
                        Else
                            ApplicableReg = "Incomplete"
                        End If
                        If txtControlEquipmentOperatingDataOneStack.Text <> "" Then
                            ControlEquip = txtControlEquipmentOperatingDataOneStack.Text
                        Else
                            ControlEquip = "N/A"
                        End If
                        If txtOtherInformationOneStack.Text <> "" Then
                            Comments = txtOtherInformationOneStack.Text
                        Else
                            Comments = "N/A"
                        End If
                        If TCOneStack.TabPages.Contains(Me.TPOneStackTwoRun) Then
                            DocumentType = "002"
                        Else
                            If TCOneStack.TabPages.Contains(Me.TPOneStackThreeRun) Then
                                DocumentType = "003"
                            Else
                                If TCOneStack.TabPages.Contains(Me.TPOneStackFourRun) Then
                                    DocumentType = "004"
                                Else
                                    DocumentType = "001"
                                End If
                            End If
                        End If
                    Else
                        If TCDocumentTypes.TabPages.Contains(TPTwoStack) Then
                            If txtApplicableRegulationTwoStack.Text <> "" Then
                                ApplicableReg = txtApplicableRegulationTwoStack.Text
                            Else
                                ApplicableReg = "Incomplete"
                            End If
                            If txtControlEquipmentOperatingDataTwoStack.Text <> "" Then
                                ControlEquip = txtControlEquipmentOperatingDataTwoStack.Text
                            Else
                                ControlEquip = "N/A"
                            End If
                            If txtOtherInformationTwoStack.Text <> "" Then
                                Comments = txtOtherInformationTwoStack.Text
                            Else
                                Comments = "N/A"
                            End If
                            If TCTwoStack.TabPages.Contains(Me.TPTwoStackStandard) Then
                                DocumentType = "005"
                            Else
                                If TCTwoStack.TabPages.Contains(Me.TPTwoStackDRE) Then
                                    DocumentType = "006"
                                Else
                                    DocumentType = "001"
                                End If
                            End If
                        Else
                            If TCDocumentTypes.TabPages.Contains(TPLoadingRack) Then
                                DocumentType = "007"
                                If txtApplicableRegulationLoadingRack.Text <> "" Then
                                    ApplicableReg = txtApplicableRegulationLoadingRack.Text
                                Else
                                    ApplicableReg = "Incomplete"
                                End If
                                If txtControlEquipmentOperatingDataLoadingRack.Text <> "" Then
                                    ControlEquip = txtControlEquipmentOperatingDataLoadingRack.Text
                                Else
                                    ControlEquip = "N/A"
                                End If
                                If txtOtherInformationLoadingRack.Text <> "" Then
                                    Comments = txtOtherInformationLoadingRack.Text
                                Else
                                    Comments = "N/A"
                                End If
                            Else
                                If TCDocumentTypes.TabPages.Contains(TPPondTreatment) Then
                                    DocumentType = "008"
                                    If txtApplicableRegulationPond.Text <> "" Then
                                        ApplicableReg = txtApplicableRegulationPond.Text
                                    Else
                                        ApplicableReg = "Incomplete"
                                    End If
                                    If txtControlEquipmentOperatingDataPond.Text <> "" Then
                                        ControlEquip = txtControlEquipmentOperatingDataPond.Text
                                    Else
                                        ControlEquip = "N/A"
                                    End If
                                    If txtOtherInformationPond.Text <> "" Then
                                        Comments = txtOtherInformationPond.Text
                                    Else
                                        Comments = "N/A"
                                    End If
                                Else
                                    If TCDocumentTypes.TabPages.Contains(TPGasConcentration) Then
                                        DocumentType = "009"
                                        If txtApplicableRegulationGas.Text <> "" Then
                                            ApplicableReg = txtApplicableRegulationGas.Text
                                        Else
                                            ApplicableReg = "Incomplete"
                                        End If
                                        If txtControlEquipmentOperatingDataGas.Text <> "" Then
                                            ControlEquip = txtControlEquipmentOperatingDataGas.Text
                                        Else
                                            ControlEquip = "N/A"
                                        End If
                                        If txtOtherInformationGas.Text <> "" Then
                                            Comments = txtOtherInformationGas.Text
                                        Else
                                            Comments = "N/A"
                                        End If
                                    Else
                                        If TCDocumentTypes.TabPages.Contains(TPFlare) Then
                                            DocumentType = "010"
                                            If txtApplicableRegulationFlare.Text <> "" Then
                                                ApplicableReg = txtApplicableRegulationFlare.Text
                                            Else
                                                ApplicableReg = "Incomplete"
                                            End If
                                            If txtMonitoringDataFlare.Text <> "" Then
                                                ControlEquip = txtMonitoringDataFlare.Text
                                            Else
                                                ControlEquip = "N/A"
                                            End If
                                            If txtOtherInformationFlare.Text <> "" Then
                                                Comments = txtOtherInformationFlare.Text
                                            Else
                                                Comments = "N/A"
                                            End If
                                        Else
                                            If TCDocumentTypes.TabPages.Contains(TPRata) Then
                                                DocumentType = "011"
                                                If txtApplicableRegulationRata.Text <> "" Then
                                                    ApplicableReg = txtApplicableRegulationRata.Text
                                                Else
                                                    ApplicableReg = "Incomplete"
                                                End If
                                                ControlEquip = "N/A"
                                                If txtOtherInformationRata.Text <> "" Then
                                                    Comments = txtOtherInformationRata.Text
                                                Else
                                                    Comments = "N/A"
                                                End If
                                            Else
                                                If TCDocumentTypes.TabPages.Contains(TPMemorandum) Then
                                                    If txtApplicableRegulationMemorandum.Text <> "" Then
                                                        ApplicableReg = txtApplicableRegulationMemorandum.Text
                                                    Else
                                                        ApplicableReg = "Incomplete"
                                                    End If
                                                    Comments = "N/A"
                                                    If TCMemorandum.TabPages.Contains(Me.TPMemoStandard) Then
                                                        DocumentType = "012"
                                                        ControlEquip = "N/A"
                                                    Else
                                                        If TCMemorandum.TabPages.Contains(Me.TPMemoToFile) Then
                                                            DocumentType = "013"
                                                            ControlEquip = "N/A"
                                                        Else
                                                            If TCMemorandum.TabPages.Contains(Me.TPMemoPTE) Then
                                                                DocumentType = "018"
                                                                If txtControlEquipmentOperatingDataMemorandumPTE.Text <> "" Then
                                                                    ControlEquip = txtControlEquipmentOperatingDataMemorandumPTE.Text
                                                                Else
                                                                    ControlEquip = "N/A"
                                                                End If
                                                            Else
                                                                ControlEquip = "N/A"
                                                            End If
                                                        End If
                                                    End If
                                                Else
                                                    If TCDocumentTypes.TabPages.Contains(TPMethodNine) Then
                                                        If TCMethodNine.TabPages.Contains(Me.TPMethodNineSingle) Then
                                                            DocumentType = "016"
                                                            If txtApplicableRegulationMethod9Single.Text <> "" Then
                                                                ApplicableReg = txtApplicableRegulationMethod9Single.Text
                                                            Else
                                                                ApplicableReg = "Incomplete"
                                                            End If
                                                            If txtOtherInformationMethod9.Text <> "" Then
                                                                Comments = txtOtherInformationMethod9.Text
                                                            Else
                                                                Comments = "N/A"
                                                            End If
                                                            If txtControlEquipmentOperatingDataMethod9Single.Text <> "" Then
                                                                ControlEquip = txtControlEquipmentOperatingDataMethod9Single.Text
                                                            Else
                                                                ControlEquip = "N/A"
                                                            End If
                                                        Else
                                                            If TCMethodNine.TabPages.Contains(Me.TPMethodNineMultiple) Then
                                                                DocumentType = "014"
                                                                If txtApplicableRegulationMethod9Multi.Text <> "" Then
                                                                    ApplicableReg = txtApplicableRegulationMethod9Multi.Text
                                                                Else
                                                                    ApplicableReg = "Incomplete"
                                                                End If
                                                                If txtOtherInformationMethod9.Text <> "" Then
                                                                    Comments = txtOtherInformationMethod9.Text
                                                                Else
                                                                    Comments = "N/A"
                                                                End If
                                                                If txtControlEquipmentOperatingDataMethod9Multi.Text <> "" Then
                                                                    ControlEquip = txtControlEquipmentOperatingDataMethod9Multi.Text
                                                                Else
                                                                    ControlEquip = "N/A"
                                                                End If
                                                            Else
                                                                DocumentType = "001"
                                                            End If
                                                        End If
                                                    Else
                                                        If TCDocumentTypes.TabPages.Contains(TPMethodTwentyTwo) Then
                                                            DocumentType = "015"
                                                            If txtApplicableRegulationMethod22.Text <> "" Then
                                                                ApplicableReg = txtApplicableRegulationMethod22.Text
                                                            Else
                                                                ApplicableReg = "Incomplete"
                                                            End If
                                                            If txtOtherInformationMethod22.Text <> "" Then
                                                                Comments = txtOtherInformationMethod22.Text
                                                            Else
                                                                Comments = "N/A"
                                                            End If
                                                            'If Me.txtControlEquipmentOperatingDataMethod.Text <> "" Then
                                                            '    ControlEquip = txtControlEquipmentOperatingDataMethod22.Text
                                                            'Else
                                                            '    ControlEquip = "N/A"
                                                            'End If
                                                        Else
                                                            DocumentType = "001"
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                Case 3
                    If TCDocumentTypes.TabPages.Contains(TPMethodNine) Then
                        If TCMethodNine.TabPages.Contains(Me.TPMethodNineMultiple) Then
                            DocumentType = "014"
                            If txtApplicableRegulationMethod9Multi.Text <> "" Then
                                ApplicableReg = txtApplicableRegulationMethod9Multi.Text
                            Else
                                ApplicableReg = "Incomplete"
                            End If
                            If txtOtherInformationMethod9.Text <> "" Then
                                Comments = txtOtherInformationMethod9.Text
                            Else
                                Comments = "N/A"
                            End If
                            If txtControlEquipmentOperatingDataMethod9Multi.Text <> "" Then
                                ControlEquip = txtControlEquipmentOperatingDataMethod9Multi.Text
                            Else
                                ControlEquip = "N/A"
                            End If
                        Else
                            DocumentType = "001"
                        End If
                    Else
                        DocumentType = "001"
                    End If
                Case Is > 4
                    If TPOneStack.Focus = True Then
                        If txtApplicableRegulationOneStack.Text <> "" Then
                            ApplicableReg = txtApplicableRegulationOneStack.Text
                        Else
                            ApplicableReg = "Incomplete"
                        End If
                        If txtOtherInformationOneStack.Text <> "" Then
                            Comments = txtOtherInformationOneStack.Text
                        Else
                            Comments = "N/A"
                        End If
                        If txtControlEquipmentOperatingDataOneStack.Text <> "" Then
                            ControlEquip = txtControlEquipmentOperatingDataOneStack.Text
                        Else
                            ControlEquip = "N/A"
                        End If
                        If TPOneStackTwoRun.Focus = True Then
                            DocumentType = "002"
                        Else
                            If TPOneStackThreeRun.Focus = True Then
                                DocumentType = "003"
                            Else
                                If TPOneStackFourRun.Focus = True Then
                                    DocumentType = "004"
                                Else
                                    DocumentType = "001"
                                End If
                            End If
                        End If
                    Else
                        If TPLoadingRack.Focus = True Then
                            DocumentType = "007"
                            If Me.txtApplicableRegulationLoadingRack.Text <> "" Then
                                ApplicableReg = txtApplicableRegulationLoadingRack.Text
                            Else
                                ApplicableReg = "Incomplete"
                            End If
                            If txtOtherInformationLoadingRack.Text <> "" Then
                                Comments = txtOtherInformationLoadingRack.Text
                            Else
                                Comments = "N/A"
                            End If
                            If txtControlEquipmentOperatingDataLoadingRack.Text <> "" Then
                                ControlEquip = txtControlEquipmentOperatingDataLoadingRack.Text
                            Else
                                ControlEquip = "N/A"
                            End If
                        Else
                            If TPPondTreatment.Focus = True Then
                                DocumentType = "008"
                                If Me.txtApplicableRegulationPond.Text <> "" Then
                                    ApplicableReg = txtApplicableRegulationPond.Text
                                Else
                                    ApplicableReg = "Incomplete"
                                End If
                                If txtOtherInformationPond.Text <> "" Then
                                    Comments = txtOtherInformationPond.Text
                                Else
                                    Comments = "N/A"
                                End If
                                If txtControlEquipmentOperatingDataPond.Text <> "" Then
                                    ControlEquip = txtControlEquipmentOperatingDataPond.Text
                                Else
                                    ControlEquip = "N/A"
                                End If
                            Else
                                If TPGasConcentration.Focus = True Then
                                    DocumentType = "009"
                                    If Me.txtApplicableRegulationGas.Text <> "" Then
                                        ApplicableReg = txtApplicableRegulationGas.Text
                                    Else
                                        ApplicableReg = "Incomplete"
                                    End If
                                    If txtOtherInformationGas.Text <> "" Then
                                        Comments = txtOtherInformationGas.Text
                                    Else
                                        Comments = "N/A"
                                    End If
                                    If txtControlEquipmentOperatingDataGas.Text <> "" Then
                                        ControlEquip = txtControlEquipmentOperatingDataGas.Text
                                    Else
                                        ControlEquip = "N/A"
                                    End If
                                Else
                                    If TPFlare.Focus = True Then
                                        DocumentType = "010"
                                        If Me.txtApplicableRegulationFlare.Text <> "" Then
                                            ApplicableReg = txtApplicableRegulationFlare.Text
                                        Else
                                            ApplicableReg = "Incomplete"
                                        End If
                                        If txtOtherInformationFlare.Text <> "" Then
                                            Comments = txtOtherInformationFlare.Text
                                        Else
                                            Comments = "N/A"
                                        End If
                                        If txtMonitoringDataFlare.Text <> "" Then
                                            ControlEquip = txtMonitoringDataFlare.Text
                                        Else
                                            ControlEquip = "N/A"
                                        End If
                                    Else
                                        If TPMethodNine.Focus = True Then
                                            If txtOtherInformationMethod9.Text <> "" Then
                                                Comments = txtOtherInformationMethod9.Text
                                            Else
                                                Comments = "N/A"
                                            End If
                                            If TPMethodNineSingle.Focus = True Then
                                                DocumentType = "016"
                                                If Me.txtApplicableRegulationMethod9Single.Text <> "" Then
                                                    ApplicableReg = txtApplicableRegulationMethod9Single.Text
                                                Else
                                                    ApplicableReg = "Incomplete"
                                                End If
                                                If txtControlEquipmentOperatingDataMethod9Single.Text <> "" Then
                                                    ControlEquip = txtControlEquipmentOperatingDataMethod9Single.Text
                                                Else
                                                    ControlEquip = "N/A"
                                                End If
                                            Else
                                                If TPMethodNineMultiple.Focus = True Or TPMethodNineMultiple2.Focus = True Then
                                                    DocumentType = "014"
                                                    If Me.txtApplicableRegulationMethod9Multi.Text <> "" Then
                                                        ApplicableReg = txtApplicableRegulationMethod9Multi.Text
                                                    Else
                                                        ApplicableReg = "Incomplete"
                                                    End If
                                                    If txtControlEquipmentOperatingDataMethod9Multi.Text <> "" Then
                                                        ControlEquip = txtControlEquipmentOperatingDataMethod9Multi.Text
                                                    Else
                                                        ControlEquip = "N/A"
                                                    End If
                                                Else
                                                    DocumentType = "001"
                                                End If
                                            End If
                                        Else
                                            If TPMemorandum.Focus = True Then
                                                If Me.txtApplicableRegulationMemorandum.Text <> "" Then
                                                    ApplicableReg = txtApplicableRegulationMemorandum.Text
                                                Else
                                                    ApplicableReg = "Incomplete"
                                                End If
                                                Comments = "N/A"
                                                If Me.TPMemoStandard.Focus = True Then
                                                    DocumentType = "012"
                                                Else
                                                    If Me.TPMemoToFile.Focus = True Then
                                                        DocumentType = "013"
                                                    Else
                                                        If Me.TPMemoPTE.Focus = True Then
                                                            DocumentType = "018"
                                                            If Me.txtControlEquipmentOperatingDataMemorandumPTE.Text <> "" Then
                                                                ControlEquip = txtControlEquipmentOperatingDataMemorandumPTE.Text
                                                            Else
                                                                ControlEquip = "N/A"
                                                            End If
                                                        Else
                                                            DocumentType = "001"
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                If TPRata.Focus = True Then
                                                    DocumentType = "011"
                                                    If Me.txtApplicableRegulationRata.Text <> "" Then
                                                        ApplicableReg = txtApplicableRegulationRata.Text
                                                    Else
                                                        ApplicableReg = "Incomplete"
                                                    End If
                                                    If txtOtherInformationRata.Text <> "" Then
                                                        Comments = txtOtherInformationRata.Text
                                                    Else
                                                        Comments = "N/A"
                                                    End If
                                                    ControlEquip = "N/A"
                                                Else
                                                    If TPTwoStack.Focus = True Then
                                                        If Me.txtApplicableRegulationTwoStack.Text <> "" Then
                                                            ApplicableReg = txtApplicableRegulationTwoStack.Text
                                                        Else
                                                            ApplicableReg = "Incomplete"
                                                        End If
                                                        If txtOtherInformationTwoStack.Text <> "" Then
                                                            Comments = txtOtherInformationTwoStack.Text
                                                        Else
                                                            Comments = "N/A"
                                                        End If
                                                        If txtControlEquipmentOperatingDataTwoStack.Text <> "" Then
                                                            ControlEquip = txtControlEquipmentOperatingDataTwoStack.Text
                                                        Else
                                                            ControlEquip = "N/A"
                                                        End If
                                                        If Me.TPTwoStackStandard.Focus = True Then
                                                            DocumentType = "005"
                                                        Else
                                                            If Me.TPTwoStackDRE.Focus = True Then
                                                                DocumentType = "006"
                                                            Else
                                                                DocumentType = "001"
                                                            End If
                                                        End If
                                                    Else
                                                        If TPMethodTwentyTwo.Focus = True Then
                                                            DocumentType = "015"
                                                            If Me.txtApplicableRegulationMethod22.Text <> "" Then
                                                                ApplicableReg = txtApplicableRegulationMethod22.Text
                                                            Else
                                                                ApplicableReg = "Incomplete"
                                                            End If
                                                            If txtOtherInformationMethod22.Text <> "" Then
                                                                Comments = txtOtherInformationMethod22.Text
                                                            Else
                                                                Comments = "N/A"
                                                            End If
                                                            ControlEquip = "N/A"
                                                        Else
                                                            DocumentType = "001"
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                Case Else
                    DocumentType = "001"
            End Select

            SQL = "Update AIRBRANCH.ISMPReportInformation set " & _
            "strPollutant = '" & Pollutant & "', " & _
            "strEmissionSource = '" & Replace(EmissionSource, "'", "''") & "', " & _
            "strReportType = '" & ReportType & "', " & _
            "strDocumentType = '" & DocumentType & "', " & _
            "strApplicableRequirement = '" & Replace(ApplicableReg, "'", "''") & "', " & _
            "strTestingFirm = '" & TestingFirm & "', " & _
            "strReviewingEngineer = '" & ReviewingEngineer & "', " & _
            "strWitnessingEngineer = '" & WitnessingEng & "', " & _
            "strWitnessingEngineer2 = '" & WitnessingEng2 & "', " & _
            "strReviewingUnit = '" & ReviewingUnit & "', " & _
            "datTestDateStart = '" & TestStart & "', " & _
            "datTestDateEnd = '" & TestEnd & "', " & _
            "datReviewedByUnitManager = '" & AssignedDate & "', " & _
            "mmoCommentArea = '" & Replace(Comments, "'", "''") & "', " & _
            "strComplianceStatus = '" & ComplianceStatus & "', " & _
            "strComplianceManager = '" & ComplianceManager & "', " & _
            "strCC = '" & CC & "', " & _
            "strControlEquipmentData = '" & Replace(ControlEquip, "'", "''") & "', " & _
            "strDeterminationMethod = '" & DetMethod & "', " & _
            "strModifingPerson = '" & UserGCode & "', " & _
            "datModifingDate = '" & OracleDate & "', "
            If UnitManager <> "" Then
                SQL = SQL & "numReviewingManager = '" & UnitManager & "', "
            End If
            SQL = SQL & "strOtherWitnessingEng = '" & OtherWitnessing & "' " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "'"
            'End If

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

            Select Case DocumentType
                Case "001"
                    'No Save
                Case "002"
                    SaveOneStack("2")
                Case "003"
                    SaveOneStack("3")
                Case "004"
                    SaveOneStack("4")
                Case "005"
                    SaveTwoStack("Standard")
                Case "006"
                    SaveTwoStack("DRE")
                Case "007"
                    SaveLoadingRack()
                Case "008"
                    SavePondTreatment()
                Case "009"
                    SaveGas()
                Case "010"
                    SaveFlare()
                Case "011"
                    SaveRata()
                Case "012"
                    SaveMemorandum("Standard")
                Case "013"
                    SaveMemorandum("ToFile")
                Case "014"
                    SaveMethodOpacity("Multi")
                Case "015"
                    SaveMethodOpacity("22")
                Case "016"
                    SaveMethodOpacity("Single")
                Case "018"
                    SaveMemorandum("PTE")
                Case Else

            End Select

            If OtherWitnessing > 0 Then
                Dim temp As String = " "
                If Me.clbWitnessingEngineers.CheckedItems.Count > 0 Then
                    SQL = "Delete AIRBRANCH.ISMPWitnessingEng " & _
                    "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    dr.Close()

                    For x As Integer = 0 To clbWitnessingEngineers.Items.Count - 1
                        If clbWitnessingEngineers.GetItemChecked(x) = True Then
                            clbWitnessingEngineers.SelectedIndex = x
                            temp = clbWitnessingEngineers.SelectedValue
                            SQL = "Insert into AIRBRANCH.ISMPWitnessingEng " & _
                            "values " & _
                            "('" & txtReferenceNumber.Text & "', '" & temp & "') "
                            cmd = New OracleCommand(SQL, CurrentConnection)
                            If CurrentConnection.State = ConnectionState.Closed Then
                                CurrentConnection.Open()
                            End If
                            dr = cmd.ExecuteReader
                            dr.Close()
                        End If
                    Next
                End If
            End If

            SQL = "delete AIRBRANCH.ISMPTestLogLink " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

            If cboTestNotificationNumber.Text <> " " And cboTestNotificationNumber.Text <> "" Then
                Dim NotificationNumber As String = ""
                If cboTestNotificationNumber.Text.Contains(" --> ") Then
                    NotificationNumber = Mid(cboTestNotificationNumber.Text, 1, cboTestNotificationNumber.Text.IndexOf(" -->"))
                Else
                    NotificationNumber = cboTestNotificationNumber.Text
                End If

                SQL = "Insert into AIRBRANCH.ISMPTestLogLink " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', '" & NotificationNumber & "') "
                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                dr.Close()
            End If

            If TCDocumentTypes.TabPages.Count > 4 Then
                Select Case DocumentType
                    Case "001"

                    Case "002"
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCOneStack.TabPages.Remove(TPOneStackThreeRun)
                        TCOneStack.TabPages.Remove(TPOneStackFourRun)
                    Case "003"
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCOneStack.TabPages.Remove(TPOneStackTwoRun)
                        TCOneStack.TabPages.Remove(TPOneStackFourRun)
                    Case "004"
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCOneStack.TabPages.Remove(TPOneStackTwoRun)
                        TCOneStack.TabPages.Remove(TPOneStackThreeRun)
                    Case "005"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCTwoStack.TabPages.Remove(TPTwoStackDRE)
                    Case "006"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCTwoStack.TabPages.Remove(Me.TPTwoStackStandard)
                    Case "007"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                    Case "008"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                    Case "009"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                    Case "010"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                    Case "011"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                    Case "012"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCMemorandum.TabPages.Remove(TPMemoToFile)
                        TCMemorandum.TabPages.Remove(TPMemoPTE)
                    Case "013"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCMemorandum.TabPages.Remove(TPMemoStandard)
                        TCMemorandum.TabPages.Remove(TPMemoPTE)
                    Case "014"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCMethodNine.TabPages.Remove(TPMethodNineSingle)
                    Case "015"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                    Case "016"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCMethodNine.TabPages.Remove(TPMethodNineMultiple)
                        TCMethodNine.TabPages.Remove(TPMethodNineMultiple2)
                    Case "018"
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                        TCMemorandum.TabPages.Remove(TPMemoStandard)
                        TCMemorandum.TabPages.Remove(TPMemoToFile)
                    Case Else
                        TCDocumentTypes.TabPages.Remove(TPOneStack)
                        TCDocumentTypes.TabPages.Remove(TPLoadingRack)
                        TCDocumentTypes.TabPages.Remove(TPPondTreatment)
                        TCDocumentTypes.TabPages.Remove(TPGasConcentration)
                        TCDocumentTypes.TabPages.Remove(TPFlare)
                        TCDocumentTypes.TabPages.Remove(TPMethodNine)
                        TCDocumentTypes.TabPages.Remove(TPMemorandum)
                        TCDocumentTypes.TabPages.Remove(TPRata)
                        TCDocumentTypes.TabPages.Remove(TPTwoStack)
                        TCDocumentTypes.TabPages.Remove(TPMethodTwentyTwo)
                End Select
            End If

            cboComplianceStatus.BackColor = Color.White
            If cboComplianceStatus.SelectedValue = "05" Then
                cboComplianceStatus.BackColor = Color.Tomato
            Else
                If lblPreComplianceStatus.Visible = True And cboComplianceStatus.SelectedValue = "01" Then
                    cboComplianceStatus.BackColor = Color.Pink
                Else
                    cboComplianceStatus.BackColor = Color.White
                End If
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveSSCPWork()
        Try
            Dim StaffResponsible As String = UserGCode
            Dim CompleteDate As String = OracleDate
            Dim AckLetter As String = OracleDate
            Dim TestDue As String = OracleDate
            Dim NextTest As String = OracleDate
            Dim ReportComments As String = " "
            Dim FollowUp As String = "False"

            If cboStaffResponsible.Text <> " " And cboStaffResponsible.Text <> "" Then
                StaffResponsible = cboStaffResponsible.SelectedValue
                If StaffResponsible = "" Then
                    StaffResponsible = UserGCode
                End If
            Else
                StaffResponsible = UserGCode
            End If
            If chbEventComplete.Checked = True Then
                CompleteDate = DTPEventCompleteDate.Text
            Else
                CompleteDate = ""
            End If
            If chbAcknoledgmentLetterSent.Checked = True Then
                AckLetter = DTPAcknoledgmentLetterSent.Text
            Else
                AckLetter = ""
            End If
            If DTPTestReportNewDueDate.Text <> "" Then
                NextTest = DTPTestReportNewDueDate.Text
            Else
                If txtTestReportDueDate.Text <> "" Then
                    NextTest = Format(CDate(txtTestReportDueDate.Text).AddYears(1), "dd-MMM-yyyy")
                Else
                    NextTest = Format(CDate(OracleDate).AddYears(1), "dd-MMM-yyyy")
                End If
            End If
            If chbTestReportChangeDueDate.Checked = True Then
                TestDue = DTPTestReportDueDate.Text
            Else
                If txtTestReportDueDate.Text <> "" Then
                    TestDue = txtTestReportDueDate.Text
                Else
                    TestDue = Format(CDate(txtReceivedByAPB.Text), "dd-MMM-yyyy")
                    'Format(Date.Today, "dd-MMM-yyyy")
                End If
            End If
            If txtTestReportComments.Text <> "" Then
                ReportComments = txtTestReportComments.Text
            Else
                ReportComments = " "
            End If
            If rdbTestReportFollowUpYes.Checked = True Then
                FollowUp = "True"
            Else
                FollowUp = "False"
            End If
            If txtTrackingNumber.Text = "" Then
                SQL = "Insert into AIRBRANCH.SSCPItemMaster " & _
                "(strTrackingNumber, strAIRSNumber, " & _
                "datReceivedDate, strEventType, " & _
                "strResponsibleStaff, datCompleteDate, " & _
                "strModifingPerson, datModifingDate) " & _
                "values " & _
                "(AIRBRANCH.SSCPTrackingNumber.nextval, '0413" & txtAirsNumber.Text & "', " & _
                "'" & OracleDate & "', '03', " & _
                "'" & StaffResponsible & "', '', " & _
                "'" & UserGCode & "', '" & OracleDate & "')"
                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                dr.Close()

                SQL = "Select AIRBRANCH.SSCPTrackingNumber.currval from dual "

                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                While dr.Read
                    txtTrackingNumber.Text = dr.Item(0)
                End While
                dr.Close()

                SQL = "Insert into AIRBRANCH.SSCPTestReports " & _
                "(strTrackingNumber, strReferenceNumber, " & _
                "datTestReportDue, " & _
                "strTestReportComments, strTestReportFollowUp, " & _
                "strModifingPerson, datModifingDate) " & _
                "Values " & _
                "('" & txtTrackingNumber.Text & "', '" & txtReferenceNumber.Text & "', " & _
                "'" & OracleDate & "', " & _
                "' ', 'False', " & _
                "'" & UserGCode & "', '" & OracleDate & "') "

                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                dr.Close()
            End If

            If txtTrackingNumber.Text <> "" Then
                SQL = "Select strTrackingNumber " & _
                "from AIRBRANCH.SSCPItemMaster " & _
                "where strTrackingNumber = '" & txtTrackingNumber.Text & "'"
                cmd = New OracleCommand(SQL, CurrentConnection)
                If CurrentConnection.State = ConnectionState.Closed Then
                    CurrentConnection.Open()
                End If
                dr = cmd.ExecuteReader
                RecExist = dr.Read
                dr.Close()

                If RecExist = True Then
                    SQL = "Update AIRBRANCH.SSCPItemMaster set " & _
                    "strResponsibleStaff = '" & StaffResponsible & "', " & _
                    "datCompleteDate = '" & CompleteDate & "', " & _
                    "datAcknoledgmentLetterSent = '" & AckLetter & "', " & _
                    "strModifingPerson = '" & UserGCode & "', " & _
                    "datModifingDate = '" & OracleDate & "' " & _
                    "where strTrackingNumber = '" & txtTrackingNumber.Text & "' "
                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    dr.Close()
                    SQL = "Select strTrackingNumber " & _
                    "from AIRBRANCH.SSCPTestReports " & _
                    "where strTrackingNumber = '" & txtTrackingNumber.Text & "' "
                    cmd = New OracleCommand(SQL, CurrentConnection)
                    If CurrentConnection.State = ConnectionState.Closed Then
                        CurrentConnection.Open()
                    End If
                    dr = cmd.ExecuteReader
                    RecExist = dr.Read
                    dr.Close()
                    If RecExist = True Then
                        SQL = "Update AIRBRANCH.SSCPTestReports set " & _
                        "datTestReportDue = '" & TestDue & "', " & _
                        "strTestReportComments = '" & Replace(ReportComments, "'", "''") & "', " & _
                        "strTestReportFollowUp = '" & FollowUp & "', " & _
                        "strModifingPerson = '" & UserGCode & "', " & _
                        "datModifingDate = '" & OracleDate & "' " & _
                        "where strTrackingNumber = '" & txtTrackingNumber.Text & "' "
                        cmd = New OracleCommand(SQL, CurrentConnection)
                        If CurrentConnection.State = ConnectionState.Closed Then
                            CurrentConnection.Open()
                        End If
                        dr = cmd.ExecuteReader
                        dr.Close()
                    End If
                    If txtAirsNumber.Text.Length = 8 Then
                        SQL = "Select strAIRSNumber " & _
                        "from AIRBRANCH.APBSupplamentalData " & _
                        "where strAIRSNumber = '0413" & txtAirsNumber.Text & "' "
                        cmd = New OracleCommand(SQL, CurrentConnection)
                        If CurrentConnection.State = ConnectionState.Closed Then
                            CurrentConnection.Open()
                        End If
                        dr = cmd.ExecuteReader
                        RecExist = dr.Read
                        dr.Close()
                        If RecExist = True Then
                            SQL = "Update AIRBRANCH.APBSupplamentalData set " & _
                            "DatSSCPTestReportDue = '" & NextTest & "', " & _
                            "strModifingPerson = '" & UserGCode & "', " & _
                            "datModifingdate = '" & OracleDate & "' " & _
                            "where strAIRSnumber = '0413" & txtAirsNumber.Text & "' "
                            cmd = New OracleCommand(SQL, CurrentConnection)
                            If CurrentConnection.State = ConnectionState.Closed Then
                                CurrentConnection.Open()
                            End If
                            dr = cmd.ExecuteReader
                            dr.Close()
                        End If
                    End If
                Else
                End If
            Else
            End If

            MsgBox("SSCP Work Save Complete", MsgBoxStyle.Information, "SSCP Work")

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveOneStack(ByVal Runs As String)
        Try
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowEmissRate1 As String = " "
            Dim AllowEmissRate2 As String = " "
            Dim AllowEmissRate3 As String = " "
            Dim EmissRateUnit1 As String = "00000"
            Dim EmissRateUnit2 As String = "00000"
            Dim EmissRateUnit3 As String = "00000"
            Dim TestRun1 As String = "1"
            Dim TestRun2 As String = "2"
            Dim TestRun3 As String = "3"
            Dim TestRun4 As String = "4"
            Dim GasTemp1 As String = " "
            Dim GasTemp2 As String = " "
            Dim GasTemp3 As String = " "
            Dim GasTemp4 As String = " "
            Dim GasMoist1 As String = " "
            Dim GasMoist2 As String = " "
            Dim GasMoist3 As String = " "
            Dim GasMoist4 As String = " "
            Dim FlowRateACFM1 As String = " "
            Dim FlowRateACFM2 As String = " "
            Dim FlowRateACFM3 As String = " "
            Dim FlowRateACFM4 As String = " "
            Dim FlowRateDSCFM1 As String = " "
            Dim FlowRateDSCFM2 As String = " "
            Dim FlowRateDSCFM3 As String = " "
            Dim FlowRateDSCFM4 As String = " "
            Dim PollConc1 As String = " "
            Dim PollConc2 As String = " "
            Dim PollConc3 As String = " "
            Dim PollConc4 As String = " "
            Dim PollConcUnit As String = "00000"
            Dim PollAverage As String = " "
            Dim EmissRate1 As String = " "
            Dim EmissRate2 As String = " "
            Dim EmissRate3 As String = " "
            Dim EmissRate4 As String = " "
            Dim EmissRateUnit As String = "00000"
            Dim EmissRateAvg As String = " "
            Dim PercentAllowable As String = " "

            If txtMaximumExpectedOperatingCapacityOneStack.Text <> "" Then
                MaxOpCapacity = txtMaximumExpectedOperatingCapacityOneStack.Text
            Else
                MaxOpCapacity = " "
            End If
            If cboMaximumExpectedOperatingCapacityUnitsOneStack.Text <> "" And cboMaximumExpectedOperatingCapacityUnitsOneStack.Text <> " " Then
                MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsOneStack.SelectedValue
                If MaxOpCapacityUnit = "" Then
                    MaxOpCapacityUnit = "00000"
                End If
            Else
                MaxOpCapacityUnit = "00000"
            End If
            If txtOperatingCapacityOneStack.Text <> "" Then
                OpCapacity = txtOperatingCapacityOneStack.Text
            Else
                OpCapacity = " "
            End If
            If cboOperatingCapacityUnitsOneStack.Text <> "" And cboOperatingCapacityUnitsOneStack.Text <> " " Then
                OpCapacityUnit = cboOperatingCapacityUnitsOneStack.SelectedValue
                If OpCapacityUnit = "" Then
                    OpCapacityUnit = "00000"
                End If
            Else
                OpCapacityUnit = "00000"
            End If
            If txtAllowableEmissionRate1OneStack.Text <> "" Then
                AllowEmissRate1 = txtAllowableEmissionRate1OneStack.Text
            Else
                AllowEmissRate1 = " "
            End If
            If txtAllowableEmissionRate2OneStack.Text <> "" Then
                AllowEmissRate2 = txtAllowableEmissionRate2OneStack.Text
            Else
                AllowEmissRate2 = " "
            End If
            If txtAllowableEmissionRate3OneStack.Text <> "" Then
                AllowEmissRate3 = txtAllowableEmissionRate3OneStack.Text
            Else
                AllowEmissRate3 = " "
            End If
            If cboAllowableEmissionRateUnits1OneStack.Text <> "" And cboAllowableEmissionRateUnits1OneStack.Text <> " " Then
                EmissRateUnit1 = cboAllowableEmissionRateUnits1OneStack.SelectedValue
                If EmissRateUnit1 = "" Then
                    EmissRateUnit1 = "00000"
                End If
            Else
                EmissRateUnit1 = "00000"
            End If
            If cboAllowableEmissionRateUnits2OneStack.Text <> "" And cboAllowableEmissionRateUnits2OneStack.Text <> " " Then
                EmissRateUnit2 = cboAllowableEmissionRateUnits2OneStack.SelectedValue
                If EmissRateUnit2 = "" Then
                    EmissRateUnit2 = "00000"
                End If
            Else
                EmissRateUnit2 = "00000"
            End If
            If cboAllowableEmissionRateUnits3OneStack.Text <> "" And cboAllowableEmissionRateUnits3OneStack.Text <> " " Then
                EmissRateUnit3 = cboAllowableEmissionRateUnits3OneStack.SelectedValue
                If EmissRateUnit3 = "" Then
                    EmissRateUnit3 = "00000"
                End If
            Else
                EmissRateUnit3 = "00000"
            End If
            If txtPercentAllowableOneStack.Text <> "" Then
                PercentAllowable = txtPercentAllowableOneStack.Text
            Else
                PercentAllowable = " "
            End If

            Select Case Runs
                Case "2"
                    If txtRunNumOneStackTwoRun1A.Text <> "" Then
                        TestRun1 = txtRunNumOneStackTwoRun1A.Text
                    Else
                        TestRun1 = "1"
                    End If
                    If txtRunNumOneStackTwoRun1B.Text <> "" Then
                        TestRun2 = txtRunNumOneStackTwoRun1B.Text
                    Else
                        TestRun2 = "2"
                    End If
                    TestRun3 = "3"
                    TestRun4 = "4"
                    If txtGasTempOneStackTwoRun1A.Text <> "" Then
                        GasTemp1 = txtGasTempOneStackTwoRun1A.Text
                    Else
                        GasTemp1 = " "
                    End If
                    If txtGasTempOneStackTwoRun1B.Text <> "" Then
                        GasTemp2 = txtGasTempOneStackTwoRun1B.Text
                    Else
                        GasTemp2 = " "
                    End If
                    GasTemp3 = " "
                    GasTemp4 = " "
                    If txtGasMoistOneStackTwoRun1A.Text <> "" Then
                        GasMoist1 = txtGasMoistOneStackTwoRun1A.Text
                    Else
                        GasMoist1 = " "
                    End If
                    If txtGasMoistOneStackTwoRun1B.Text <> "" Then
                        GasMoist2 = txtGasMoistOneStackTwoRun1B.Text
                    Else
                        GasMoist2 = " "
                    End If
                    GasMoist3 = " "
                    GasMoist4 = " "
                    If txtGasFlowACFMOneStackTwoRun1A.Text <> "" Then
                        FlowRateACFM1 = txtGasFlowACFMOneStackTwoRun1A.Text
                    Else
                        FlowRateACFM1 = " "
                    End If
                    If txtGasFlowACFMOneStackTwoRun1B.Text <> "" Then
                        FlowRateACFM2 = txtGasFlowACFMOneStackTwoRun1B.Text
                    Else
                        FlowRateACFM2 = " "
                    End If
                    FlowRateACFM3 = " "
                    FlowRateACFM4 = " "
                    If txtGasFlowDSCFMOneStackTwoRun1A.Text <> "" Then
                        FlowRateDSCFM1 = txtGasFlowDSCFMOneStackTwoRun1A.Text
                    Else
                        FlowRateDSCFM1 = " "
                    End If
                    If txtGasFlowDSCFMOneStackTwoRun1B.Text <> "" Then
                        FlowRateDSCFM2 = txtGasFlowDSCFMOneStackTwoRun1B.Text
                    Else
                        FlowRateDSCFM2 = " "
                    End If
                    FlowRateDSCFM3 = " "
                    FlowRateDSCFM4 = " "
                    If txtPollConcOneStackTwoRun1A.Text <> "" Then
                        PollConc1 = txtPollConcOneStackTwoRun1A.Text
                    Else
                        PollConc1 = " "
                    End If
                    If txtPollConcOneStackTwoRun1B.Text <> "" Then
                        PollConc2 = txtPollConcOneStackTwoRun1B.Text
                    Else
                        PollConc2 = " "
                    End If
                    PollConc3 = " "
                    PollConc4 = " "
                    If cboPollConUnitOneStackTwoRun.Text <> "" And cboPollConUnitOneStackTwoRun.Text <> " " Then
                        PollConcUnit = cboPollConUnitOneStackTwoRun.SelectedValue
                        If PollConcUnit = "" Then
                            PollConcUnit = "00000"
                        End If
                    Else
                        PollConcUnit = "00000"
                    End If
                    If txtPollConcAvgOneStackTwoRun.Text <> "" Then
                        PollAverage = txtPollConcAvgOneStackTwoRun.Text
                    Else
                        PollAverage = " "
                    End If
                    If txtEmissRateOneStackTwoRun1A.Text <> "" Then
                        EmissRate1 = txtEmissRateOneStackTwoRun1A.Text
                    Else
                        EmissRate1 = " "
                    End If
                    If txtEmissRateOneStackTwoRun1B.Text <> "" Then
                        EmissRate2 = txtEmissRateOneStackTwoRun1B.Text
                    Else
                        EmissRate2 = " "
                    End If
                    EmissRate3 = " "
                    EmissRate4 = " "
                    If cboEmissRateUnitOneStackTwoRun.Text <> "" And cboEmissRateUnitOneStackTwoRun.Text <> " " Then
                        EmissRateUnit = cboEmissRateUnitOneStackTwoRun.SelectedValue
                        If EmissRateUnit = "" Then
                            EmissRateUnit = "00000"
                        End If
                    Else
                        EmissRateUnit = "00000"
                    End If
                    If txtEmissRateAvgOneStackTwoRun.Text <> "" Then
                        EmissRateAvg = txtEmissRateAvgOneStackTwoRun.Text
                    Else
                        EmissRateAvg = " "
                    End If
                Case "3"
                    If txtRunNumOneStackThreeRun1A.Text <> "" Then
                        TestRun1 = txtRunNumOneStackThreeRun1A.Text
                    Else
                        TestRun1 = "1"
                    End If
                    If txtRunNumOneStackThreeRun1B.Text <> "" Then
                        TestRun2 = txtRunNumOneStackThreeRun1B.Text
                    Else
                        TestRun2 = "2"
                    End If
                    If txtRunNumOneStackThreeRun1C.Text <> "" Then
                        TestRun3 = txtRunNumOneStackThreeRun1C.Text
                    Else
                        TestRun3 = "3"
                    End If
                    TestRun4 = "4"
                    If txtGasTempOneStackThreeRun1A.Text <> "" Then
                        GasTemp1 = txtGasTempOneStackThreeRun1A.Text
                    Else
                        GasTemp1 = " "
                    End If
                    If txtGasTempOneStackThreeRun1B.Text <> "" Then
                        GasTemp2 = txtGasTempOneStackThreeRun1B.Text
                    Else
                        GasTemp2 = " "
                    End If
                    If txtGasTempOneStackThreeRun1C.Text <> "" Then
                        GasTemp3 = txtGasTempOneStackThreeRun1C.Text
                    Else
                        GasTemp3 = " "
                    End If
                    GasTemp4 = " "
                    If txtGasMoistOneStackThreeRun1A.Text <> "" Then
                        GasMoist1 = txtGasMoistOneStackThreeRun1A.Text
                    Else
                        GasMoist1 = " "
                    End If
                    If txtGasMoistOneStackThreeRun1B.Text <> "" Then
                        GasMoist2 = txtGasMoistOneStackThreeRun1B.Text
                    Else
                        GasMoist2 = " "
                    End If
                    If txtGasMoistOneStackThreeRun1C.Text <> "" Then
                        GasMoist3 = txtGasMoistOneStackThreeRun1C.Text
                    Else
                        GasMoist3 = " "
                    End If
                    GasMoist4 = " "
                    If txtGasFlowACFMOneStackThreeRun1A.Text <> "" Then
                        FlowRateACFM1 = txtGasFlowACFMOneStackThreeRun1A.Text
                    Else
                        FlowRateACFM1 = " "
                    End If
                    If txtGasFlowACFMOneStackThreeRun1B.Text <> "" Then
                        FlowRateACFM2 = txtGasFlowACFMOneStackThreeRun1B.Text
                    Else
                        FlowRateACFM2 = " "
                    End If
                    If txtGasFlowACFMOneStackThreeRun1C.Text <> "" Then
                        FlowRateACFM3 = txtGasFlowACFMOneStackThreeRun1C.Text
                    Else
                        FlowRateACFM3 = " "
                    End If
                    FlowRateACFM4 = " "
                    If txtGasFlowDSCFMOneStackThreeRun1A.Text <> "" Then
                        FlowRateDSCFM1 = txtGasFlowDSCFMOneStackThreeRun1A.Text
                    Else
                        FlowRateDSCFM1 = " "
                    End If
                    If txtGasFlowDSCFMOneStackThreeRun1B.Text <> "" Then
                        FlowRateDSCFM2 = txtGasFlowDSCFMOneStackThreeRun1B.Text
                    Else
                        FlowRateDSCFM2 = " "
                    End If
                    If txtGasFlowDSCFMOneStackThreeRun1C.Text <> "" Then
                        FlowRateDSCFM3 = txtGasFlowDSCFMOneStackThreeRun1C.Text
                    Else
                        FlowRateDSCFM3 = " "
                    End If
                    FlowRateDSCFM4 = " "
                    If txtPollConcOneStackThreeRun1A.Text <> "" Then
                        PollConc1 = txtPollConcOneStackThreeRun1A.Text
                    Else
                        PollConc1 = " "
                    End If
                    If txtPollConcOneStackThreeRun1B.Text <> "" Then
                        PollConc2 = txtPollConcOneStackThreeRun1B.Text
                    Else
                        PollConc2 = " "
                    End If
                    If txtPollConcOneStackThreeRun1C.Text <> "" Then
                        PollConc3 = txtPollConcOneStackThreeRun1C.Text
                    Else
                        PollConc3 = " "
                    End If
                    PollConc4 = " "
                    If cboPollConUnitOneStackThreeRun.Text <> "" And cboPollConUnitOneStackThreeRun.Text <> " " Then
                        PollConcUnit = cboPollConUnitOneStackThreeRun.SelectedValue
                        If PollConcUnit = "" Then
                            PollConcUnit = "00000"
                        End If
                    Else
                        PollConcUnit = "00000"
                    End If
                    If txtPollConcAvgOneStackThreeRun.Text <> "" Then
                        PollAverage = txtPollConcAvgOneStackThreeRun.Text
                    Else
                        PollAverage = " "
                    End If
                    If txtEmissRateOneStackThreeRun1A.Text <> "" Then
                        EmissRate1 = txtEmissRateOneStackThreeRun1A.Text
                    Else
                        EmissRate1 = " "
                    End If
                    If txtEmissRateOneStackThreeRun1B.Text <> "" Then
                        EmissRate2 = txtEmissRateOneStackThreeRun1B.Text
                    Else
                        EmissRate2 = " "
                    End If
                    If txtEmissRateOneStackThreeRun1C.Text <> "" Then
                        EmissRate3 = txtEmissRateOneStackThreeRun1C.Text
                    Else
                        EmissRate3 = " "
                    End If
                    EmissRate4 = " "
                    If cboEmissRateUnitOneStackThreeRun.Text <> "" And cboEmissRateUnitOneStackThreeRun.Text <> " " Then
                        EmissRateUnit = cboEmissRateUnitOneStackThreeRun.SelectedValue
                        If EmissRateUnit = "" Then
                            EmissRateUnit = "00000"
                        End If
                    Else
                        EmissRateUnit = "00000"
                    End If
                    If txtEmissRateAvgOneStackThreeRun.Text <> "" Then
                        EmissRateAvg = txtEmissRateAvgOneStackThreeRun.Text
                    Else
                        EmissRateAvg = " "
                    End If
                Case "4"
                    If txtRunNumOneStackFourRun1A.Text <> "" Then
                        TestRun1 = txtRunNumOneStackFourRun1A.Text
                    Else
                        TestRun1 = "1"
                    End If
                    If txtRunNumOneStackFourRun1B.Text <> "" Then
                        TestRun2 = txtRunNumOneStackFourRun1B.Text
                    Else
                        TestRun2 = "2"
                    End If
                    If txtRunNumOneStackFourRun1C.Text <> "" Then
                        TestRun3 = txtRunNumOneStackFourRun1C.Text
                    Else
                        TestRun3 = "3"
                    End If
                    If txtRunNumOneStackFourRun1D.Text <> "" Then
                        TestRun4 = txtRunNumOneStackFourRun1D.Text
                    Else
                        TestRun4 = "4"
                    End If
                    If txtGasTempOneStackFourRun1A.Text <> "" Then
                        GasTemp1 = txtGasTempOneStackFourRun1A.Text
                    Else
                        GasTemp1 = " "
                    End If
                    If txtGasTempOneStackFourRun1B.Text <> "" Then
                        GasTemp2 = txtGasTempOneStackFourRun1B.Text
                    Else
                        GasTemp2 = " "
                    End If
                    If txtGasTempOneStackFourRun1C.Text <> "" Then
                        GasTemp3 = txtGasTempOneStackFourRun1C.Text
                    Else
                        GasTemp3 = " "
                    End If
                    If txtGasTempOneStackFourRun1D.Text <> "" Then
                        GasTemp4 = txtGasTempOneStackFourRun1D.Text
                    Else
                        GasTemp4 = " "
                    End If
                    If txtGasMoistOneStackFourRun1A.Text <> "" Then
                        GasMoist1 = txtGasMoistOneStackFourRun1A.Text
                    Else
                        GasMoist1 = " "
                    End If
                    If txtGasMoistOneStackFourRun1B.Text <> "" Then
                        GasMoist2 = txtGasMoistOneStackFourRun1B.Text
                    Else
                        GasMoist2 = " "
                    End If
                    If txtGasMoistOneStackFourRun1C.Text <> "" Then
                        GasMoist3 = txtGasMoistOneStackFourRun1C.Text
                    Else
                        GasMoist3 = " "
                    End If
                    If txtGasMoistOneStackFourRun1D.Text <> "" Then
                        GasMoist4 = txtGasMoistOneStackFourRun1D.Text
                    Else
                        GasMoist4 = " "
                    End If
                    If txtGasFlowACFMOneStackFourRun1A.Text <> "" Then
                        FlowRateACFM1 = txtGasFlowACFMOneStackFourRun1A.Text
                    Else
                        FlowRateACFM1 = " "
                    End If
                    If txtGasFlowACFMOneStackFourRun1B.Text <> "" Then
                        FlowRateACFM2 = txtGasFlowACFMOneStackFourRun1B.Text
                    Else
                        FlowRateACFM2 = " "
                    End If
                    If txtGasFlowACFMOneStackFourRun1C.Text <> "" Then
                        FlowRateACFM3 = txtGasFlowACFMOneStackFourRun1C.Text
                    Else
                        FlowRateACFM3 = " "
                    End If
                    If txtGasFlowACFMOneStackFourRun1D.Text <> "" Then
                        FlowRateACFM4 = txtGasFlowACFMOneStackFourRun1D.Text
                    Else
                        FlowRateACFM4 = " "
                    End If
                    If txtGasFlowDSCFMOneStackFourRun1A.Text <> "" Then
                        FlowRateDSCFM1 = txtGasFlowDSCFMOneStackFourRun1A.Text
                    Else
                        FlowRateDSCFM1 = " "
                    End If
                    If txtGasFlowDSCFMOneStackFourRun1B.Text <> "" Then
                        FlowRateDSCFM2 = txtGasFlowDSCFMOneStackFourRun1B.Text
                    Else
                        FlowRateDSCFM2 = " "
                    End If
                    If txtGasFlowDSCFMOneStackFourRun1C.Text <> "" Then
                        FlowRateDSCFM3 = txtGasFlowDSCFMOneStackFourRun1C.Text
                    Else
                        FlowRateDSCFM3 = " "
                    End If
                    If txtGasFlowDSCFMOneStackFourRun1D.Text <> "" Then
                        FlowRateDSCFM4 = txtGasFlowDSCFMOneStackFourRun1D.Text
                    Else
                        FlowRateDSCFM4 = " "
                    End If
                    If txtPollConcOneStackFourRun1A.Text <> "" Then
                        PollConc1 = txtPollConcOneStackFourRun1A.Text
                    Else
                        PollConc1 = " "
                    End If
                    If txtPollConcOneStackFourRun1B.Text <> "" Then
                        PollConc2 = txtPollConcOneStackFourRun1B.Text
                    Else
                        PollConc2 = " "
                    End If
                    If txtPollConcOneStackFourRun1C.Text <> "" Then
                        PollConc3 = txtPollConcOneStackFourRun1C.Text
                    Else
                        PollConc3 = " "
                    End If
                    If txtPollConcOneStackFourRun1D.Text <> "" Then
                        PollConc4 = txtPollConcOneStackFourRun1D.Text
                    Else
                        PollConc4 = " "
                    End If
                    If cboPollConUnitOneStackFourRun.Text <> "" And cboPollConUnitOneStackFourRun.Text <> " " Then
                        PollConcUnit = cboPollConUnitOneStackFourRun.SelectedValue
                        If PollConcUnit = "" Then
                            PollConcUnit = "00000"
                        End If
                    Else
                        PollConcUnit = "00000"
                    End If
                    If txtPollConcAvgOneStackFourRun.Text <> "" Then
                        PollAverage = txtPollConcAvgOneStackFourRun.Text
                    Else
                        PollAverage = " "
                    End If
                    If txtEmissRateOneStackFourRun1A.Text <> "" Then
                        EmissRate1 = txtEmissRateOneStackFourRun1A.Text
                    Else
                        EmissRate1 = " "
                    End If
                    If txtEmissRateOneStackFourRun1B.Text <> "" Then
                        EmissRate2 = txtEmissRateOneStackFourRun1B.Text
                    Else
                        EmissRate2 = " "
                    End If
                    If txtEmissRateOneStackFourRun1C.Text <> "" Then
                        EmissRate3 = txtEmissRateOneStackFourRun1C.Text
                    Else
                        EmissRate3 = " "
                    End If
                    If txtEmissRateOneStackFourRun1D.Text <> "" Then
                        EmissRate4 = txtEmissRateOneStackFourRun1D.Text
                    Else
                        EmissRate4 = " "
                    End If
                    If cboEmissRateUnitOneStackFourRun.Text <> "" And cboEmissRateUnitOneStackFourRun.Text <> " " Then
                        EmissRateUnit = cboEmissRateUnitOneStackFourRun.SelectedValue
                        If EmissRateUnit = "" Then
                            EmissRateUnit = "00000"
                        End If
                    Else
                        EmissRateUnit = "00000"
                    End If
                    If txtEmissRateAvgOneStackFourRun.Text <> "" Then
                        EmissRateAvg = txtEmissRateAvgOneStackFourRun.Text
                    Else
                        EmissRateAvg = " "
                    End If
                Case Else

            End Select

            SQL = "Select strReferenceNumber " & _
            "From AIRBRANCH.ISMPReportOneStack " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportOneStack Set " & _
                "strMaxOperatingCapacity = '" & MaxOpCapacity & "', " & _
                " strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingCapacity = '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strAllowableEmissionRate1 = '" & AllowEmissRate1 & "', " & _
                "strAllowableEmissionRate2 = '" & AllowEmissRate2 & "', " & _
                "strAllowableEmissionRate3 = '" & AllowEmissRate3 & "', " & _
                "strAllowableEmissionRateUnit1 = '" & EmissRateUnit1 & "', " & _
                "strAllowableEmissionRateUnit2 = '" & EmissRateUnit2 & "', " & _
                "strAllowableEmissionRateUnit3 = '" & EmissRateUnit3 & "', " & _
                "strRunNumber1A = '" & TestRun1 & "', " & _
                "strRunnumber1b = '" & TestRun2 & "', " & _
                "strRunNumber1C = '" & TestRun3 & "', " & _
                "strRunNumber1D = '" & TestRun4 & "', " & _
                "strGasTemperature1A = '" & GasTemp1 & "', " & _
                "strGasTemperature1B = '" & GasTemp2 & "', " & _
                "strGasTemperature1C = '" & GasTemp3 & "', " & _
                "strGasTemperature1D = '" & GasTemp4 & "', " & _
                "strGasMoisture1A = '" & GasMoist1 & "', " & _
                "strGasMoisture1B = '" & GasMoist2 & "', " & _
                "strGasMoisture1C = '" & GasMoist3 & "', " & _
                "strGasMoisture1D = '" & GasMoist4 & "', " & _
                "strGasFlowRateACFM1A = '" & FlowRateACFM1 & "', " & _
                "strGasFlowRateACFM1B = '" & FlowRateACFM2 & "', " & _
                "strGasFlowRateACFM1C = '" & FlowRateACFM3 & "', " & _
                "strGasFlowRateACFM1D = '" & FlowRateACFM4 & "', " & _
                "strGasFlowRateDSCFM1A = '" & FlowRateDSCFM1 & "', " & _
                "strGasFlowRateDSCFM1B = '" & FlowRateDSCFM2 & "', " & _
                "strGasFlowRateDSCFM1C = '" & FlowRateDSCFM3 & "', " & _
                "strGasFlowRateDSCFM1D = '" & FlowRateDSCFM4 & "', " & _
                "strPollutantConcentration1A = '" & PollConc1 & "', " & _
                "strPollutantConcentration1B = '" & PollConc2 & "', " & _
                "strPollutantConcentration1C = '" & PollConc3 & "', " & _
                "strPollutantConcentration1D = '" & PollConc4 & "', " & _
                "strPollutantConcentrationUnit = '" & PollConcUnit & "', " & _
                "strPollutantConcentrationAvg = '" & PollAverage & "', " & _
                "strEmissionRate1A = '" & EmissRate1 & "', " & _
                "strEmissionRate1B = '" & EmissRate2 & "', " & _
                "strEmissionRate1C = '" & EmissRate3 & "', " & _
                "strEmissionRate1D = '" & EmissRate4 & "', " & _
                "strEmissionRateUnit = '" & EmissRateUnit & "', " & _
                "strEmissionRateAvg = '" & EmissRateAvg & "', " & _
                "strPercentAllowable = '" & PercentAllowable & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "'"
            Else
                SQL = "Insert into AIRBRANCH.ISMPREportOneStack " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "'" & AllowEmissRate1 & "', '" & AllowEmissRate2 & "', " & _
                "'" & AllowEmissRate3 & "', '" & EmissRateUnit1 & "', " & _
                "'" & EmissRateUnit2 & "', '" & EmissRateUnit3 & "', " & _
                "'" & TestRun1 & "', '" & TestRun2 & "', " & _
                "'" & TestRun3 & "', '" & TestRun4 & "', " & _
                "'" & GasTemp1 & "', '" & GasTemp2 & "', " & _
                "'" & GasTemp3 & "', '" & GasTemp4 & "', " & _
                "'" & GasMoist1 & "', '" & GasMoist2 & "', " & _
                "'" & GasMoist3 & "', '" & GasMoist4 & "', " & _
                "'" & FlowRateACFM1 & "', '" & FlowRateACFM2 & "', " & _
                "'" & FlowRateACFM3 & "', '" & FlowRateACFM4 & "', " & _
                "'" & FlowRateDSCFM1 & "', '" & FlowRateDSCFM2 & "', " & _
                "'" & FlowRateDSCFM3 & "', '" & FlowRateDSCFM4 & "', " & _
                "'" & PollConc1 & "', '" & PollConc2 & "', " & _
                "'" & PollConc3 & "', '" & PollConc4 & "', " & _
                "'" & PollConcUnit & "', '" & PollAverage & "', " & _
                "'" & EmissRate1 & "', '" & EmissRate2 & "', " & _
                "'" & EmissRate3 & "', '" & EmissRate4 & "', " & _
                "'" & EmissRateUnit & "', '" & EmissRateAvg & "', " & _
                "'" & PercentAllowable & "') "
            End If
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveTwoStack(ByVal ReportType As String)
        Try
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowEmissRate1 As String = " "
            Dim AllowEmissRate2 As String = " "
            Dim AllowEmissRate3 As String = " "
            Dim AllowEmissRateUnit1 As String = " "
            Dim AllowEmissRateUnit2 As String = " "
            Dim AllowEmissRateUnit3 As String = " "
            Dim StackNameOne As String = "Stack One"
            Dim StackNameTwo As String = "Stack Two"
            Dim TestRun1A As String = "1A"
            Dim TestRun1B As String = "1B"
            Dim TestRun1C As String = "1C"
            Dim TestRun2A As String = "2A"
            Dim TestRun2B As String = "2B"
            Dim TestRun2C As String = "2C"
            Dim GasTemp1A As String = " "
            Dim GasTemp1B As String = " "
            Dim GasTemp1C As String = " "
            Dim GasTemp2A As String = " "
            Dim GasTemp2B As String = " "
            Dim GasTemp2C As String = " "
            Dim GasMoist1A As String = " "
            Dim GasMoist1B As String = " "
            Dim GasMoist1C As String = " "
            Dim GasMoist2A As String = " "
            Dim GasMoist2B As String = " "
            Dim GasMoist2C As String = " "
            Dim FlowRateACFM1A As String = " "
            Dim FlowRateACFM1B As String = " "
            Dim FlowRateACFM1C As String = " "
            Dim FlowRateACFM2A As String = " "
            Dim FlowRateACFM2B As String = " "
            Dim FlowRateACFM2C As String = " "
            Dim FlowRateDSCFM1A As String = " "
            Dim FlowRateDSCFM1B As String = " "
            Dim FlowRateDSCFM1C As String = " "
            Dim FlowRateDSCFM2A As String = " "
            Dim FlowRateDSCFM2B As String = " "
            Dim FlowRateDSCFM2C As String = " "
            Dim PollConc1A As String = " "
            Dim PollConc1B As String = " "
            Dim PollConc1C As String = " "
            Dim PollConc2A As String = " "
            Dim PollConc2B As String = " "
            Dim PollConc2C As String = " "
            Dim PollConcUnit As String = "00000"
            Dim PollConcAvg1 As String = " "
            Dim PollConcAvg2 As String = " "
            Dim EmissRate1A As String = " "
            Dim EmissRate1B As String = " "
            Dim EmissRate1C As String = " "
            Dim EmissRate2A As String = " "
            Dim EmissRate2B As String = " "
            Dim EmissRate2C As String = " "
            Dim EmissRateUnit As String = "00000"
            Dim EmissRateAvg1 As String = " "
            Dim EmissRateAvg2 As String = " "
            Dim EmissTotal1 As String = " "
            Dim EmissTotal2 As String = " "
            Dim EmissTotal3 As String = " "
            Dim EmissTotalAvg As String = " "
            Dim Destruct As String = " "
            Dim PercentAllowable As String = " "

            If txtMaximumExpectedOperatingCapacityTwoStack.Text <> "" Then
                MaxOpCapacity = txtMaximumExpectedOperatingCapacityTwoStack.Text
            Else
                MaxOpCapacity = " "
            End If
            If cboMaximumExpectedOperatingCapacityUnitsTwoStack.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsTwoStack.Text <> "" Then
                MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsTwoStack.SelectedValue
                If MaxOpCapacityUnit = "" Then
                    MaxOpCapacityUnit = "00000"
                End If
            Else
                MaxOpCapacityUnit = "00000"
            End If
            If txtOperatingCapacityTwoStack.Text <> "" Then
                OpCapacity = txtOperatingCapacityTwoStack.Text
            Else
                OpCapacity = " "
            End If
            If cboOperatingCapacityUnitsTwoStack.Text <> " " And cboOperatingCapacityUnitsTwoStack.Text <> "" Then
                OpCapacityUnit = cboOperatingCapacityUnitsTwoStack.SelectedValue
                If OpCapacityUnit = "" Then
                    OpCapacityUnit = "00000"
                End If
            Else
                OpCapacityUnit = "00000"
            End If
            If txtAllowableEmissionRate1TwoStack.Text <> "" Then
                AllowEmissRate1 = txtAllowableEmissionRate1TwoStack.Text
            Else
                AllowEmissRate1 = " "
            End If
            If txtAllowableEmissionRate2TwoStack.Text <> "" Then
                AllowEmissRate2 = txtAllowableEmissionRate2TwoStack.Text
            Else
                AllowEmissRate2 = " "
            End If
            If txtAllowableEmissionRate3TwoStack.Text <> "" Then
                AllowEmissRate3 = txtAllowableEmissionRate3TwoStack.Text
            Else
                AllowEmissRate3 = " "
            End If
            If cboAllowableEmissionRateUnits1TwoStack.Text <> " " And cboAllowableEmissionRateUnits1TwoStack.Text <> "" Then
                AllowEmissRateUnit1 = cboAllowableEmissionRateUnits1TwoStack.SelectedValue
                If AllowEmissRateUnit1 = "" Then
                    AllowEmissRateUnit1 = "00000"
                End If
            Else
                AllowEmissRateUnit1 = "00000"
            End If
            If cboAllowableEmissionRateUnits2TwoStack.Text <> " " And cboAllowableEmissionRateUnits2TwoStack.Text <> "" Then
                AllowEmissRateUnit2 = cboAllowableEmissionRateUnits2TwoStack.SelectedValue
                If AllowEmissRateUnit2 = "" Then
                    AllowEmissRateUnit2 = "00000"
                End If
            Else
                AllowEmissRateUnit2 = "00000"
            End If
            If cboAllowableEmissionRateUnits3TwoStack.Text <> " " And cboAllowableEmissionRateUnits3TwoStack.Text <> "" Then
                AllowEmissRateUnit3 = cboAllowableEmissionRateUnits3TwoStack.SelectedValue
                If AllowEmissRateUnit3 = "" Then
                    AllowEmissRateUnit3 = "00000"
                End If
            Else
                AllowEmissRateUnit3 = "00000"
            End If
            Select Case ReportType
                Case "Standard"
                    If Me.txtStackOneNameTwoStackStandard.Text <> "" Then
                        StackNameOne = txtStackOneNameTwoStackStandard.Text
                    Else
                        StackNameOne = "Stack One"
                    End If
                    If txtStackTwoNameTwoStackStandard.Text <> "" Then
                        StackNameTwo = txtStackTwoNameTwoStackStandard.Text
                    Else
                        StackNameTwo = "Stack Two"
                    End If
                    If txtRunNumTwoStackStandard1A.Text <> "" Then
                        TestRun1A = txtRunNumTwoStackStandard1A.Text
                    Else
                        TestRun1A = " "
                    End If
                    If txtRunNumTwoStackStandard1B.Text <> "" Then
                        TestRun1B = txtRunNumTwoStackStandard1B.Text
                    Else
                        TestRun1B = " "
                    End If
                    If Me.txtRunNumTwoStackStandard1C.Text <> "" Then
                        TestRun1C = txtRunNumTwoStackStandard1C.Text
                    Else
                        TestRun1C = " "
                    End If
                    If txtRunNumTwoStackStandard2A.Text <> "" Then
                        TestRun2A = txtRunNumTwoStackStandard2A.Text
                    Else
                        TestRun2A = " "
                    End If
                    If txtRunNumTwoStackStandard2B.Text <> "" Then
                        TestRun2B = txtRunNumTwoStackStandard2B.Text
                    Else
                        TestRun2B = " "
                    End If
                    If Me.txtRunNumTwoStackStandard2C.Text <> "" Then
                        TestRun2C = txtRunNumTwoStackStandard2C.Text
                    Else
                        TestRun2C = " "
                    End If
                    If txtGasTempTwoStackStandard1A.Text <> "" Then
                        GasTemp1A = txtGasTempTwoStackStandard1A.Text
                    Else
                        GasTemp1A = " "
                    End If
                    If txtGasTempTwoStackStandard1B.Text <> "" Then
                        GasTemp1B = txtGasTempTwoStackStandard1B.Text
                    Else
                        GasTemp1B = " "
                    End If
                    If txtGasTempTwoStackStandard1C.Text <> "" Then
                        GasTemp1C = txtGasTempTwoStackStandard1C.Text
                    Else
                        GasTemp1C = " "
                    End If
                    If txtGasTempTwoStackStandard2A.Text <> "" Then
                        GasTemp2A = txtGasTempTwoStackStandard2A.Text
                    Else
                        GasTemp2A = " "
                    End If
                    If txtGasTempTwoStackStandard2B.Text <> "" Then
                        GasTemp2B = txtGasTempTwoStackStandard2B.Text
                    Else
                        GasTemp2B = " "
                    End If
                    If txtGasTempTwoStackStandard2C.Text <> "" Then
                        GasTemp2C = txtGasTempTwoStackStandard2C.Text
                    Else
                        GasTemp2C = " "
                    End If

                    If txtGasMoistTwoStackStandard1A.Text <> "" Then
                        GasMoist1A = txtGasMoistTwoStackStandard1A.Text
                    Else
                        GasMoist1A = " "
                    End If
                    If txtGasMoistTwoStackStandard1B.Text <> "" Then
                        GasMoist1B = txtGasMoistTwoStackStandard1B.Text
                    Else
                        GasMoist1B = " "
                    End If
                    If txtGasMoistTwoStackStandard1C.Text <> "" Then
                        GasMoist1C = txtGasMoistTwoStackStandard1C.Text
                    Else
                        GasMoist1C = " "
                    End If
                    If txtGasMoistTwoStackStandard2A.Text <> "" Then
                        GasMoist2A = txtGasMoistTwoStackStandard2A.Text
                    Else
                        GasMoist2A = " "
                    End If
                    If txtGasMoistTwoStackStandard2B.Text <> "" Then
                        GasMoist2B = txtGasMoistTwoStackStandard2B.Text
                    Else
                        GasMoist2B = " "
                    End If
                    If txtGasMoistTwoStackStandard2C.Text <> "" Then
                        GasMoist2C = txtGasMoistTwoStackStandard2C.Text
                    Else
                        GasMoist2C = " "
                    End If
                    If txtGasFlowACFMTwoStackStandard1A.Text <> "" Then
                        FlowRateACFM1A = txtGasFlowACFMTwoStackStandard1A.Text
                    Else
                        FlowRateACFM1A = " "
                    End If
                    If txtGasFlowACFMTwoStackStandard1B.Text <> "" Then
                        FlowRateACFM1B = txtGasFlowACFMTwoStackStandard1B.Text
                    Else
                        FlowRateACFM1B = " "
                    End If
                    If txtGasFlowACFMTwoStackStandard1C.Text <> "" Then
                        FlowRateACFM1C = txtGasFlowACFMTwoStackStandard1C.Text
                    Else
                        FlowRateACFM1C = " "
                    End If
                    If txtGasFlowACFMTwoStackStandard2A.Text <> "" Then
                        FlowRateACFM2A = txtGasFlowACFMTwoStackStandard2A.Text
                    Else
                        FlowRateACFM2A = " "
                    End If
                    If txtGasFlowACFMTwoStackStandard2B.Text <> "" Then
                        FlowRateACFM2B = txtGasFlowACFMTwoStackStandard2B.Text
                    Else
                        FlowRateACFM2B = " "
                    End If
                    If txtGasFlowACFMTwoStackStandard2C.Text <> "" Then
                        FlowRateACFM2C = txtGasFlowACFMTwoStackStandard2C.Text
                    Else
                        FlowRateACFM2C = " "
                    End If
                    If txtGasFlowDSCFMTwoStackStandard1A.Text <> "" Then
                        FlowRateDSCFM1A = txtGasFlowDSCFMTwoStackStandard1A.Text
                    Else
                        FlowRateDSCFM1A = " "
                    End If
                    If txtGasFlowDSCFMTwoStackStandard1B.Text <> "" Then
                        FlowRateDSCFM1B = txtGasFlowDSCFMTwoStackStandard1B.Text
                    Else
                        FlowRateDSCFM1B = " "
                    End If
                    If txtGasFlowDSCFMTwoStackStandard1C.Text <> "" Then
                        FlowRateDSCFM1C = txtGasFlowDSCFMTwoStackStandard1C.Text
                    Else
                        FlowRateDSCFM1C = " "
                    End If
                    If txtGasFlowDSCFMTwoStackStandard2A.Text <> "" Then
                        FlowRateDSCFM2A = txtGasFlowDSCFMTwoStackStandard2A.Text
                    Else
                        FlowRateDSCFM2A = " "
                    End If
                    If txtGasFlowDSCFMTwoStackStandard2B.Text <> "" Then
                        FlowRateDSCFM2B = txtGasFlowDSCFMTwoStackStandard2B.Text
                    Else
                        FlowRateDSCFM2B = " "
                    End If
                    If txtGasFlowDSCFMTwoStackStandard2C.Text <> "" Then
                        FlowRateDSCFM2C = txtGasFlowDSCFMTwoStackStandard2C.Text
                    Else
                        FlowRateDSCFM2C = " "
                    End If
                    If txtPollConcTwoStackStandard1A.Text <> "" Then
                        PollConc1A = txtPollConcTwoStackStandard1A.Text
                    Else
                        PollConc1A = " "
                    End If
                    If txtPollConcTwoStackStandard1B.Text <> "" Then
                        PollConc1B = txtPollConcTwoStackStandard1B.Text
                    Else
                        PollConc1B = " "
                    End If
                    If txtPollConcTwoStackStandard1C.Text <> "" Then
                        PollConc1C = txtPollConcTwoStackStandard1C.Text
                    Else
                        PollConc1C = " "
                    End If
                    If txtPollConcTwoStackStandard2A.Text <> "" Then
                        PollConc2A = txtPollConcTwoStackStandard2A.Text
                    Else
                        PollConc2A = " "
                    End If
                    If txtPollConcTwoStackStandard2B.Text <> "" Then
                        PollConc2B = txtPollConcTwoStackStandard2B.Text
                    Else
                        PollConc2B = " "
                    End If
                    If txtPollConcTwoStackStandard2C.Text <> "" Then
                        PollConc2C = txtPollConcTwoStackStandard2C.Text
                    Else
                        PollConc2C = " "
                    End If
                    If cboPollConUnitTwoStackStandard.Text <> " " And cboPollConUnitTwoStackStandard.Text <> "" Then
                        PollConcUnit = cboPollConUnitTwoStackStandard.SelectedValue
                        If PollConcUnit = "" Then
                            PollConcUnit = "00000"
                        End If
                    Else
                        PollConcUnit = "00000"
                    End If
                    If txtPollConcAvgTwoStackStandard1.Text <> "" Then
                        PollConcAvg1 = txtPollConcAvgTwoStackStandard1.Text
                    Else
                        PollConcAvg1 = " "
                    End If
                    If txtPollConcAvgTwoStackStandard2.Text <> "" Then
                        PollConcAvg2 = txtPollConcAvgTwoStackStandard2.Text
                    Else
                        PollConcAvg2 = " "
                    End If
                    If Me.txtEmissRateTwoStackStandard1A.Text <> "" Then
                        EmissRate1A = txtEmissRateTwoStackStandard1A.Text
                    Else
                        EmissRate1A = " "
                    End If
                    If Me.txtEmissRateTwoStackStandard1B.Text <> "" Then
                        EmissRate1B = txtEmissRateTwoStackStandard1B.Text
                    Else
                        EmissRate1B = " "
                    End If
                    If Me.txtEmissRateTwoStackStandard1C.Text <> "" Then
                        EmissRate1C = txtEmissRateTwoStackStandard1C.Text
                    Else
                        EmissRate1C = " "
                    End If
                    If Me.txtEmissRateTwoStackStandard2A.Text <> "" Then
                        EmissRate2A = txtEmissRateTwoStackStandard2A.Text
                    Else
                        EmissRate2A = " "
                    End If
                    If Me.txtEmissRateTwoStackStandard2B.Text <> "" Then
                        EmissRate2B = txtEmissRateTwoStackStandard2B.Text
                    Else
                        EmissRate2B = " "
                    End If
                    If Me.txtEmissRateTwoStackStandard2C.Text <> "" Then
                        EmissRate2C = txtEmissRateTwoStackStandard2C.Text
                    Else
                        EmissRate2C = " "
                    End If
                    If cboEmissRateUnitTwoStackStandard.Text <> " " And cboEmissRateUnitTwoStackStandard.Text <> "" Then
                        EmissRateUnit = cboEmissRateUnitTwoStackStandard.SelectedValue
                        If EmissRateUnit = "" Then
                            EmissRateUnit = "00000"
                        End If
                    Else
                        EmissRateUnit = "00000"
                    End If
                    If txtEmissRateAvgTwoStackStandard1.Text <> " " And txtEmissRateAvgTwoStackStandard1.Text <> "" Then
                        EmissRateAvg1 = txtEmissRateAvgTwoStackStandard1.Text
                    Else
                        EmissRateAvg1 = " "
                    End If
                    If txtEmissRateAvgTwoStackStandard2.Text <> " " And txtEmissRateAvgTwoStackStandard2.Text <> "" Then
                        EmissRateAvg2 = txtEmissRateAvgTwoStackStandard2.Text
                    Else
                        EmissRateAvg2 = " "
                    End If
                    If txtEmissRateTotalTwoStackStandard1.Text <> "" Then
                        EmissTotal1 = txtEmissRateTotalTwoStackStandard1.Text
                    Else
                        EmissTotal1 = " "
                    End If
                    If txtEmissRateTotalTwoStackStandard2.Text <> "" Then
                        EmissTotal2 = txtEmissRateTotalTwoStackStandard2.Text
                    Else
                        EmissTotal2 = " "
                    End If
                    If txtEmissRateTotalTwoStackStandard3.Text <> "" Then
                        EmissTotal3 = txtEmissRateTotalTwoStackStandard3.Text
                    Else
                        EmissTotal3 = " "
                    End If
                    If txtEmissRateTotalAvgTwoStackStandard.Text <> "" Then
                        EmissTotalAvg = txtEmissRateTotalAvgTwoStackStandard.Text
                    Else
                        EmissTotalAvg = " "
                    End If
                    If txtPercentAllowableTwoStack.Text <> "" Then
                        PercentAllowable = txtPercentAllowableTwoStack.Text
                    Else
                        PercentAllowable = " "
                    End If
                Case "DRE"
                    If Me.txtStackOneNameTwoStackDRE.Text <> "" Then
                        StackNameOne = txtStackOneNameTwoStackDRE.Text
                    Else
                        StackNameOne = "Stack One"
                    End If
                    If txtStackTwoNameTwoStackDRE.Text <> "" Then
                        StackNameTwo = txtStackTwoNameTwoStackDRE.Text
                    Else
                        StackNameTwo = "Stack Two"
                    End If
                    If txtRunNumTwoStackDRE1A.Text <> "" Then
                        TestRun1A = txtRunNumTwoStackDRE1A.Text
                    Else
                        TestRun1A = " "
                    End If
                    If txtRunNumTwoStackDRE1B.Text <> "" Then
                        TestRun1B = txtRunNumTwoStackDRE1B.Text
                    Else
                        TestRun1B = " "
                    End If
                    If Me.txtRunNumTwoStackDRE1C.Text <> "" Then
                        TestRun1C = txtRunNumTwoStackDRE1C.Text
                    Else
                        TestRun1C = " "
                    End If
                    If txtRunNumTwoStackDRE2A.Text <> "" Then
                        TestRun2A = txtRunNumTwoStackDRE2A.Text
                    Else
                        TestRun2A = " "
                    End If
                    If txtRunNumTwoStackDRE2B.Text <> "" Then
                        TestRun2B = txtRunNumTwoStackDRE2B.Text
                    Else
                        TestRun2B = " "
                    End If
                    If Me.txtRunNumTwoStackDRE2C.Text <> "" Then
                        TestRun2C = txtRunNumTwoStackDRE2C.Text
                    Else
                        TestRun2C = " "
                    End If
                    If txtGasTempTwoStackDRE1A.Text <> "" Then
                        GasTemp1A = txtGasTempTwoStackDRE1A.Text
                    Else
                        GasTemp1A = " "
                    End If
                    If txtGasTempTwoStackDRE1B.Text <> "" Then
                        GasTemp1B = txtGasTempTwoStackDRE1B.Text
                    Else
                        GasTemp1B = " "
                    End If
                    If txtGasTempTwoStackDRE1C.Text <> "" Then
                        GasTemp1C = txtGasTempTwoStackDRE1C.Text
                    Else
                        GasTemp1C = " "
                    End If
                    If txtGasTempTwoStackDRE2A.Text <> "" Then
                        GasTemp2A = txtGasTempTwoStackDRE2A.Text
                    Else
                        GasTemp2A = " "
                    End If
                    If txtGasTempTwoStackDRE2B.Text <> "" Then
                        GasTemp2B = txtGasTempTwoStackDRE2B.Text
                    Else
                        GasTemp2B = " "
                    End If
                    If txtGasTempTwoStackDRE2C.Text <> "" Then
                        GasTemp2C = txtGasTempTwoStackDRE2C.Text
                    Else
                        GasTemp2C = " "
                    End If
                    If txtGasMoistTwoStackDRE1A.Text <> "" Then
                        GasMoist1A = txtGasMoistTwoStackDRE1A.Text
                    Else
                        GasMoist1A = " "
                    End If
                    If txtGasMoistTwoStackDRE1B.Text <> "" Then
                        GasMoist1B = txtGasMoistTwoStackDRE1B.Text
                    Else
                        GasMoist1B = " "
                    End If
                    If txtGasMoistTwoStackDRE1C.Text <> "" Then
                        GasMoist1C = txtGasMoistTwoStackDRE1C.Text
                    Else
                        GasMoist1C = " "
                    End If
                    If txtGasMoistTwoStackDRE2A.Text <> "" Then
                        GasMoist2A = txtGasMoistTwoStackDRE2A.Text
                    Else
                        GasMoist2A = " "
                    End If
                    If txtGasMoistTwoStackDRE2B.Text <> "" Then
                        GasMoist2B = txtGasMoistTwoStackDRE2B.Text
                    Else
                        GasMoist2B = " "
                    End If
                    If txtGasMoistTwoStackDRE2C.Text <> "" Then
                        GasMoist2C = txtGasMoistTwoStackDRE2C.Text
                    Else
                        GasMoist2C = " "
                    End If
                    If txtGasFlowACFMTwoStackDRE1A.Text <> "" Then
                        FlowRateACFM1A = txtGasFlowACFMTwoStackDRE1A.Text
                    Else
                        FlowRateACFM1A = " "
                    End If
                    If txtGasFlowACFMTwoStackDRE1B.Text <> "" Then
                        FlowRateACFM1B = txtGasFlowACFMTwoStackDRE1B.Text
                    Else
                        FlowRateACFM1B = " "
                    End If
                    If txtGasFlowACFMTwoStackDRE1C.Text <> "" Then
                        FlowRateACFM1C = txtGasFlowACFMTwoStackDRE1C.Text
                    Else
                        FlowRateACFM1C = " "
                    End If
                    If txtGasFlowACFMTwoStackDRE2A.Text <> "" Then
                        FlowRateACFM2A = txtGasFlowACFMTwoStackDRE2A.Text
                    Else
                        FlowRateACFM2A = " "
                    End If
                    If txtGasFlowACFMTwoStackDRE2B.Text <> "" Then
                        FlowRateACFM2B = txtGasFlowACFMTwoStackDRE2B.Text
                    Else
                        FlowRateACFM2B = " "
                    End If
                    If txtGasFlowACFMTwoStackDRE2C.Text <> "" Then
                        FlowRateACFM2C = txtGasFlowACFMTwoStackDRE2C.Text
                    Else
                        FlowRateACFM2C = " "
                    End If
                    If txtGasFlowDSCFMTwoStackDRE1A.Text <> "" Then
                        FlowRateDSCFM1A = txtGasFlowDSCFMTwoStackDRE1A.Text
                    Else
                        FlowRateDSCFM1A = " "
                    End If
                    If txtGasFlowDSCFMTwoStackDRE1B.Text <> "" Then
                        FlowRateDSCFM1B = txtGasFlowDSCFMTwoStackDRE1B.Text
                    Else
                        FlowRateDSCFM1B = " "
                    End If
                    If txtGasFlowDSCFMTwoStackDRE1C.Text <> "" Then
                        FlowRateDSCFM1C = txtGasFlowDSCFMTwoStackDRE1C.Text
                    Else
                        FlowRateDSCFM1C = " "
                    End If
                    If txtGasFlowDSCFMTwoStackDRE2A.Text <> "" Then
                        FlowRateDSCFM2A = txtGasFlowDSCFMTwoStackDRE2A.Text
                    Else
                        FlowRateDSCFM2A = " "
                    End If
                    If txtGasFlowDSCFMTwoStackDRE2B.Text <> "" Then
                        FlowRateDSCFM2B = txtGasFlowDSCFMTwoStackDRE2B.Text
                    Else
                        FlowRateDSCFM2B = " "
                    End If
                    If txtGasFlowDSCFMTwoStackDRE2C.Text <> "" Then
                        FlowRateDSCFM2C = txtGasFlowDSCFMTwoStackDRE2C.Text
                    Else
                        FlowRateDSCFM2C = " "
                    End If
                    If txtPollConcTwoStackDRE1A.Text <> "" Then
                        PollConc1A = txtPollConcTwoStackDRE1A.Text
                    Else
                        PollConc1A = " "
                    End If
                    If txtPollConcTwoStackDRE1B.Text <> "" Then
                        PollConc1B = txtPollConcTwoStackDRE1B.Text
                    Else
                        PollConc1B = " "
                    End If
                    If txtPollConcTwoStackDRE1C.Text <> "" Then
                        PollConc1C = txtPollConcTwoStackDRE1C.Text
                    Else
                        PollConc1C = " "
                    End If
                    If txtPollConcTwoStackDRE2A.Text <> "" Then
                        PollConc2A = txtPollConcTwoStackDRE2A.Text
                    Else
                        PollConc2A = " "
                    End If
                    If txtPollConcTwoStackDRE2B.Text <> "" Then
                        PollConc2B = txtPollConcTwoStackDRE2B.Text
                    Else
                        PollConc2B = " "
                    End If
                    If txtPollConcTwoStackDRE2C.Text <> "" Then
                        PollConc2C = txtPollConcTwoStackDRE2C.Text
                    Else
                        PollConc2C = " "
                    End If
                    If cboPollConUnitTwoStackDRE.Text <> " " And cboPollConUnitTwoStackDRE.Text <> "" Then
                        PollConcUnit = cboPollConUnitTwoStackDRE.SelectedValue
                        If PollConcUnit = "" Then
                            PollConcUnit = "00000"
                        End If
                    Else
                        PollConcUnit = "00000"
                    End If
                    If txtPollConcAvgTwoStackDRE1.Text <> "" Then
                        PollConcAvg1 = txtPollConcAvgTwoStackDRE1.Text
                    Else
                        PollConcAvg1 = " "
                    End If
                    If txtPollConcAvgTwoStackDRE2.Text <> "" Then
                        PollConcAvg2 = txtPollConcAvgTwoStackDRE2.Text
                    Else
                        PollConcAvg2 = " "
                    End If
                    If txtEmissRateTwoStackDRE1A.Text <> "" Then
                        EmissRate1A = txtEmissRateTwoStackDRE1A.Text
                    Else
                        EmissRate1A = " "
                    End If
                    If Me.txtEmissRateTwoStackDRE1B.Text <> "" Then
                        EmissRate1B = txtEmissRateTwoStackDRE1B.Text
                    Else
                        EmissRate1B = " "
                    End If
                    If Me.txtEmissRateTwoStackDRE1C.Text <> "" Then
                        EmissRate1C = txtEmissRateTwoStackDRE1C.Text
                    Else
                        EmissRate1C = " "
                    End If
                    If Me.txtEmissRateTwoStackDRE2A.Text <> "" Then
                        EmissRate2A = txtEmissRateTwoStackDRE2A.Text
                    Else
                        EmissRate2A = " "
                    End If
                    If Me.txtEmissRateTwoStackDRE2B.Text <> "" Then
                        EmissRate2B = txtEmissRateTwoStackDRE2B.Text
                    Else
                        EmissRate2B = " "
                    End If
                    If Me.txtEmissRateTwoStackDRE2C.Text <> "" Then
                        EmissRate2C = txtEmissRateTwoStackDRE2C.Text
                    Else
                        EmissRate2C = " "
                    End If
                    If Me.cboEmissRateUnitTwoStackDRE.Text <> " " And Me.cboEmissRateUnitTwoStackDRE.Text <> "" Then
                        EmissRateUnit = cboEmissRateUnitTwoStackDRE.SelectedValue
                        If EmissRateUnit = "" Then
                            EmissRateUnit = "00000"
                        End If
                    Else
                        EmissRateUnit = "00000"
                    End If
                    If txtEmissRateAvgTwoStackDRE1.Text <> " " And txtEmissRateAvgTwoStackDRE1.Text <> "" Then
                        EmissRateAvg1 = txtEmissRateAvgTwoStackDRE1.Text
                    Else
                        EmissRateAvg1 = " "
                    End If
                    If txtEmissRateAvgTwoStackDRE2.Text <> " " And txtEmissRateAvgTwoStackDRE2.Text <> "" Then
                        EmissRateAvg2 = txtEmissRateAvgTwoStackDRE2.Text
                    Else
                        EmissRateAvg2 = " "
                    End If
                    If txtDestructionEfficiencyTwoStackDRE.Text <> "" Then
                        Destruct = txtDestructionEfficiencyTwoStackDRE.Text
                    Else
                        Destruct = " "
                    End If
                Case Else

            End Select

            SQL = "Select strReferenceNumber " & _
            "From AIRBRANCH.ISMPReportTwoStack " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportTwoStack set " & _
                "strMaxOperatingCapacity = '" & MaxOpCapacity & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingCapacity = '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strAllowableEmissionRate1 = '" & AllowEmissRate1 & "', " & _
                "strAllowableEmissionrate2 = '" & AllowEmissRate2 & "', " & _
                "strAllowableEmissionRate3 = '" & AllowEmissRate3 & "', " & _
                "strAllowableEmissionRateUnit1 = '" & AllowEmissRateUnit1 & "', " & _
                "strAllowableEmissionRateUnit2 = '" & AllowEmissRateUnit2 & "', " & _
                "strAllowableEmissionRateUnit3 = '" & AllowEmissRateUnit3 & "', " & _
                "strStackOneName = '" & Replace(StackNameOne, "'", "''") & "', " & _
                "strStackTwoName = '" & Replace(StackNameTwo, "'", "''") & "', " & _
                "strRunNumber1a = '" & TestRun1A & "', " & _
                "strRunNumber1b = '" & TestRun1B & "', " & _
                "strRunNumber1c = '" & TestRun1C & "', " & _
                "strRunNumber2a = '" & TestRun2A & "', " & _
                "strRunNumber2b = '" & TestRun2B & "', " & _
                "strRunNumber2c = '" & TestRun2C & "', " & _
                "strGasTemperature1a = '" & GasTemp1A & "', " & _
                "strGasTemperature1b = '" & GasTemp1B & "', " & _
                "strGasTempErature1c = '" & GasTemp1C & "', " & _
                "strGasTemperature2a = '" & GasTemp2A & "', " & _
                "strGasTemperature2b = '" & GasTemp2B & "', " & _
                "strGasTempErature2c = '" & GasTemp2C & "', " & _
                "strGasMoisture1a  = '" & GasMoist1A & "', " & _
                "strGasMoisture1b  = '" & GasMoist1B & "', " & _
                "strGasMoisture1c  = '" & GasMoist1C & "', " & _
                "strGasMoisture2a  = '" & GasMoist2A & "', " & _
                "strGasMoisture2b  = '" & GasMoist2B & "', " & _
                "strGasMoisture2c  = '" & GasMoist2C & "', " & _
                "strGasFlowRateACFM1A = '" & FlowRateACFM1A & "', " & _
                "strGasFlowRateACFM1b = '" & FlowRateACFM1B & "', " & _
                "strGasFlowRateACFM1C = '" & FlowRateACFM1C & "', " & _
                "strGasFlowRateACFM2A = '" & FlowRateACFM2A & "', " & _
                "strGasFlowRateACFM2b = '" & FlowRateACFM2B & "', " & _
                "strGasFlowRateACFM2C = '" & FlowRateACFM2C & "', " & _
                "strGasFlowRateDSCFM1A = '" & FlowRateDSCFM1A & "', " & _
                "strGasFlowRateDSCFM1b = '" & FlowRateDSCFM1B & "', " & _
                "strGasFlowRateDSCFM1C = '" & FlowRateDSCFM1C & "', " & _
                "strGasFlowRateDSCFM2A = '" & FlowRateDSCFM2A & "', " & _
                "strGasFlowRateDSCFM2b = '" & FlowRateDSCFM2B & "', " & _
                "strGasFlowRateDSCFM2C = '" & FlowRateDSCFM2C & "', " & _
                "strPollutantConcentration1a = '" & PollConc1A & "', " & _
                "strPollutantConcentration1b = '" & PollConc1B & "', " & _
                "strPollutantConcentration1c = '" & PollConc1C & "', " & _
                "strPollutantConcentration2a = '" & PollConc2A & "', " & _
                "strPollutantConcentration2B = '" & PollConc2B & "', " & _
                "strPollutantConcentration2C = '" & PollConc2C & "', " & _
                "strPollutantConcentrationUnit = '" & PollConcUnit & "', " & _
                "strPollutantConcentrationAvg1 = '" & PollConcAvg1 & "', " & _
                "strPollutantConcentrationAvg2 = '" & PollConcAvg2 & "', " & _
                "strEmissionRate1A = '" & EmissRate1A & "', " & _
                "strEmissionRate1B = '" & EmissRate1B & "', " & _
                "strEmissionRate1C = '" & EmissRate1C & "', " & _
                "strEmissionRate2A = '" & EmissRate2A & "', " & _
                "strEmissionRate2B = '" & EmissRate2B & "', " & _
                "strEmissionRate2C = '" & EmissRate2C & "', " & _
                "strEmissionRateUnit = '" & EmissRateUnit & "', " & _
                "strEmissionRateAvg1 = '" & EmissRateAvg1 & "', " & _
                "strEmissionRateAvg2 = '" & EmissRateAvg2 & "', " & _
                "strEmissionRateTotal1 = '" & EmissTotal1 & "', " & _
                "strEmissionRateTotal2 = '" & EmissTotal2 & "', " & _
                "strEmissionRateTotal3 = '" & EmissTotal3 & "', " & _
                "strEmissionRateTotalAvg = '" & EmissTotalAvg & "', " & _
                "strDestructionPercent = '" & Destruct & "', " & _
                "strPercentAllowable = '" & PercentAllowable & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportTwoStack " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "'" & AllowEmissRate1 & "', '" & AllowEmissRate2 & "', " & _
                "'" & AllowEmissRate3 & "', " & _
                "'" & AllowEmissRateUnit1 & "', '" & AllowEmissRateUnit2 & "', " & _
                "'" & AllowEmissRateUnit3 & "', " & _
                "'" & Replace(StackNameOne, "'", "''") & "', '" & Replace(StackNameTwo, "'", "''") & "', " & _
                "'" & TestRun1A & "', '" & TestRun1B & "', " & _
                "'" & TestRun1C & "', '" & TestRun2A & "', " & _
                "'" & TestRun2B & "', '" & TestRun2C & "', " & _
                "'" & GasTemp1A & "', '" & GasTemp1B & "', " & _
                "'" & GasTemp1C & "', '" & GasTemp2A & "', " & _
                "'" & GasTemp2B & "', '" & GasTemp2C & "', " & _
                "'" & GasMoist1A & "', '" & GasMoist1B & "', " & _
                "'" & GasMoist1C & "', '" & GasMoist2A & "', " & _
                "'" & GasMoist2B & "', '" & GasMoist2C & "', " & _
                "'" & FlowRateACFM1A & "', '" & FlowRateACFM1B & "', " & _
                "'" & FlowRateACFM1C & "', '" & FlowRateACFM2A & "', " & _
                "'" & FlowRateACFM2B & "', '" & FlowRateACFM2C & "', " & _
                "'" & FlowRateDSCFM1A & "', '" & FlowRateDSCFM1B & "', " & _
                "'" & FlowRateDSCFM1C & "', '" & FlowRateDSCFM2A & "', " & _
                "'" & FlowRateDSCFM2B & "', '" & FlowRateDSCFM2C & "', " & _
                "'" & PollConc1A & "', '" & PollConc1B & "', " & _
                "'" & PollConc1C & "', '" & PollConc2A & "', " & _
                "'" & PollConc2B & "', '" & PollConc2C & "', " & _
                "'" & PollConcUnit & "', " & _
                "'" & PollConcAvg1 & "', " & _
                "'" & PollConcAvg2 & "', " & _
                "'" & EmissRate1A & "', '" & EmissRate1B & "', " & _
                "'" & EmissRate1C & "', '" & EmissRate2A & "', " & _
                "'" & EmissRate2B & "', '" & EmissRate2C & "', " & _
                "'" & EmissRateUnit & "', " & _
                "'" & EmissRateAvg1 & "', " & _
                "'" & EmissRateAvg2 & "',  " & _
                "'" & EmissTotal1 & "', " & _
                "'" & EmissTotal2 & "', " & _
                "'" & EmissTotal3 & "', " & _
                "'" & EmissTotalAvg & "', " & _
                "'" & Destruct & "', " & _
                "'" & PercentAllowable & "') "
            End If

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveLoadingRack()
        Try
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowEmissRate1 As String = " "
            Dim AllowEmissRate2 As String = " "
            Dim AllowEmissRate3 As String = " "
            Dim AllowEmissRateUnit1 As String = "00000"
            Dim AllowEmissRateUnit2 As String = "00000"
            Dim AllowEmissRateUnit3 As String = "00000"
            Dim TestDuration As String = " "
            Dim TestDurationUnit As String = "00000"
            Dim PollConcIn As String = " "
            Dim PollConcInUnit As String = "00000"
            Dim PollConcOut As String = " "
            Dim PollConcOutUnit As String = "00000"
            Dim EmissRate As String = " "
            Dim EmissRateUnit As String = "00000"
            Dim Destruct As String = " "

            If Me.txtMaximumExpectedOperatingCapacityLoadingRack.Text <> "" Then
                MaxOpCapacity = Me.txtMaximumExpectedOperatingCapacityLoadingRack.Text
            Else
                MaxOpCapacity = " "
            End If
            If Me.cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Text <> " " And Me.cboMaximumExpectedOperatingCapacityUnitsLoadingRack.Text <> "" Then
                MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsLoadingRack.SelectedValue
                If MaxOpCapacityUnit = "" Then
                    MaxOpCapacityUnit = "00000"
                End If
            Else
                MaxOpCapacityUnit = "00000"
            End If
            If Me.txtOperatingCapacityLoadingRack.Text <> "" Then
                OpCapacity = Me.txtOperatingCapacityLoadingRack.Text
            Else
                OpCapacity = " "
            End If
            If Me.cboOperatingCapacityUnitsLoadingRack.Text <> " " And Me.cboOperatingCapacityUnitsLoadingRack.Text <> "" Then
                OpCapacityUnit = cboOperatingCapacityUnitsLoadingRack.SelectedValue
                If OpCapacityUnit = "" Then
                    OpCapacityUnit = "00000"
                End If
            Else
                OpCapacityUnit = "00000"
            End If
            If Me.txtAllowableEmissionRate1LoadingRack.Text <> "" Then
                AllowEmissRate1 = txtAllowableEmissionRate1LoadingRack.Text
            Else
                AllowEmissRate1 = " "
            End If
            If Me.txtAllowableEmissionRate2LoadingRack.Text <> "" Then
                AllowEmissRate2 = txtAllowableEmissionRate2LoadingRack.Text
            Else
                AllowEmissRate2 = " "
            End If
            If Me.txtAllowableEmissionRate3LoadingRack.Text <> "" Then
                AllowEmissRate3 = txtAllowableEmissionRate3LoadingRack.Text
            Else
                AllowEmissRate3 = " "
            End If
            If Me.cboAllowableEmissionRateUnits1LoadingRack.Text <> " " And cboAllowableEmissionRateUnits1LoadingRack.Text <> "" Then
                AllowEmissRateUnit1 = cboAllowableEmissionRateUnits1LoadingRack.SelectedValue
                If AllowEmissRateUnit1 = "" Then
                    AllowEmissRateUnit1 = "00000"
                End If
            Else
                AllowEmissRateUnit1 = "00000"
            End If
            If Me.cboAllowableEmissionRateUnits2LoadingRack.Text <> " " And cboAllowableEmissionRateUnits2LoadingRack.Text <> "" Then
                AllowEmissRateUnit2 = cboAllowableEmissionRateUnits2LoadingRack.SelectedValue
                If AllowEmissRateUnit2 = "" Then
                    AllowEmissRateUnit2 = "00000"
                End If
            Else
                AllowEmissRateUnit2 = "00000"
            End If
            If Me.cboAllowableEmissionRateUnits3LoadingRack.Text <> " " And cboAllowableEmissionRateUnits3LoadingRack.Text <> "" Then
                AllowEmissRateUnit3 = cboAllowableEmissionRateUnits3LoadingRack.SelectedValue
                If AllowEmissRateUnit3 = "" Then
                    AllowEmissRateUnit3 = "00000"
                End If
            Else
                AllowEmissRateUnit3 = "00000"
            End If
            If Me.txtTestDurationLoadingRack.Text <> "" Then
                TestDuration = txtTestDurationLoadingRack.Text
            Else
                TestDuration = " "
            End If
            If Me.cboTestDurationUnitsLoadingRack.Text <> " " And cboTestDurationUnitsLoadingRack.Text <> "" Then
                TestDurationUnit = cboTestDurationUnitsLoadingRack.SelectedValue
                If TestDurationUnit = "" Then
                    TestDurationUnit = "00000"
                End If
            Else
                TestDurationUnit = "00000"
            End If
            If Me.txtPollConcINLoadingRack.Text <> "" Then
                PollConcIn = txtPollConcINLoadingRack.Text
            Else
                PollConcIn = " "
            End If
            If Me.cboPollConUnitINLoadingRack.Text <> " " And cboPollConUnitINLoadingRack.Text <> "" Then
                PollConcInUnit = cboPollConUnitINLoadingRack.SelectedValue
                If PollConcInUnit = "" Then
                    PollConcInUnit = "00000"
                End If
            Else
                PollConcInUnit = "00000"
            End If
            If Me.txtPollConcOUTLoadingRack.Text <> "" Then
                PollConcOut = txtPollConcOUTLoadingRack.Text
            Else
                PollConcOut = " "
            End If
            If Me.cboPollConUnitOUTLoadingRack.Text <> " " And cboPollConUnitOUTLoadingRack.Text <> "" Then
                PollConcOutUnit = cboPollConUnitOUTLoadingRack.SelectedValue
                If PollConcOutUnit = "" Then
                    PollConcOutUnit = "00000"
                End If
            Else
                PollConcOutUnit = "00000"
            End If
            If Me.txtEmissRateLoadingRack.Text <> "" Then
                EmissRate = txtEmissRateLoadingRack.Text
            Else
                EmissRate = " "
            End If
            If Me.cboEmissRateUnitLoadingRack.Text <> " " And cboEmissRateUnitLoadingRack.Text <> "" Then
                EmissRateUnit = cboEmissRateUnitLoadingRack.SelectedValue
                If EmissRateUnit = "" Then
                    EmissRateUnit = "00000"
                End If
            Else
                EmissRateUnit = "00000"
            End If
            If Me.txtDestructionEfficiencyLoadingRack.Text <> "" Then
                Destruct = txtDestructionEfficiencyLoadingRack.Text
            Else
                Destruct = " "
            End If

            SQL = "Select strReferenceNumber " & _
            "from AIRBRANCH.ISMPReportFlare " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportFlare set " & _
                "strMaxOperatingCapacity  = '" & MaxOpCapacity & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingcapacity = '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strAllowableEmissionRate1A = '" & AllowEmissRate1 & "', " & _
                "strAllowableEmissionRate2A = '" & AllowEmissRate2 & "', " & _
                "strAllowableEmissionRate3A = '" & AllowEmissRate3 & "', " & _
                "strAllowEmissionRateUnit1A = '" & AllowEmissRateUnit1 & "', " & _
                "strAllowEmissionRateUnit2A = '" & AllowEmissRateUnit2 & "', " & _
                "strAllowEmissionRateUnit3A = '" & AllowEmissRateUnit3 & "', " & _
                "strTestDuration = '" & TestDuration & "', " & _
                "strTestDurationUnit = '" & TestDurationUnit & "', " & _
                "strPollutantConcenIn = '" & PollConcIn & "', " & _
                "strPollutantConcenUnitIn = '" & PollConcInUnit & "', " & _
                "strPollutantConcenOut = '" & PollConcOut & "', " & _
                "strPollutantConcenUnitOut = '" & PollConcOutUnit & "', " & _
                "strEmissionRate = '" & EmissRate & "', " & _
                "strEmissionRateUnit = '" & EmissRateUnit & "', " & _
                "strDestructionEfficiency = '" & Destruct & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportFlare " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "' ', ' ', " & _
                "'" & AllowEmissRate1 & "', '" & AllowEmissRate2 & "', " & _
                "'" & AllowEmissRate3 & "', " & _
                "'" & AllowEmissRateUnit1 & "', '" & AllowEmissRateUnit2 & "', " & _
                "'" & AllowEmissRateUnit3 & "', " & _
                "' ', ' ', " & _
                "' ', ' ', " & _
                "' ', " & _
                "' ', ' ', " & _
                "' ', ' ', " & _
                "' ', " & _
                "'" & TestDuration & "', '" & TestDurationUnit & "', " & _
                "'" & PollConcIn & "', '" & PollConcInUnit & "', " & _
                "'" & PollConcOut & "', '" & PollConcOutUnit & "', " & _
                "'" & EmissRate & "', '" & EmissRateUnit & "', " & _
                "'" & Destruct & "', ' ')  "
            End If

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SavePondTreatment()
        Try
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowEmissRate1 As String = " "
            Dim AllowEmissRate2 As String = " "
            Dim AllowEmissRate3 As String = " "
            Dim AllowEmissRateUnit1 As String = "00000"
            Dim AllowEmissRateUnit2 As String = "00000"
            Dim AllowEmissRateUnit3 As String = "00000"
            Dim TestRun1 As String = "1"
            Dim TestRun2 As String = "2"
            Dim TestRun3 As String = "3"
            Dim PollConc1 As String = " "
            Dim PollConc2 As String = " "
            Dim PollConc3 As String = " "
            Dim PollConcUnit As String = "00000"
            Dim PollConcAvg As String = " "
            Dim Treatment1 As String = " "
            Dim Treatment2 As String = " "
            Dim Treatment3 As String = " "
            Dim TreatmentUnit As String = "00000"
            Dim TreatmentAvg As String = " "
            Dim Destruct As String = " "

            If txtMaximumExpectedOperatingCapacityPond.Text <> "" Then
                MaxOpCapacity = txtMaximumExpectedOperatingCapacityPond.Text
            Else
                MaxOpCapacity = " "
            End If
            If cboMaximumExpectedOperatingCapacityUnitsPond.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsPond.Text <> "" Then
                MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsPond.SelectedValue
                If MaxOpCapacityUnit = "" Then
                    MaxOpCapacityUnit = "00000"
                End If
            Else
                MaxOpCapacityUnit = "00000"
            End If

            If txtOperatingCapacityPond.Text <> "" Then
                OpCapacity = txtOperatingCapacityPond.Text
            Else
                OpCapacity = " "
            End If
            If cboOperatingCapacityUnitsPond.Text <> " " And cboOperatingCapacityUnitsPond.Text <> "" Then
                OpCapacityUnit = cboOperatingCapacityUnitsPond.SelectedValue
                If OpCapacityUnit = "" Then
                    OpCapacityUnit = "00000"
                End If
            Else
                OpCapacityUnit = "00000"
            End If
            If txtAllowableEmissionRate1Pond.Text <> "" Then
                AllowEmissRate1 = txtAllowableEmissionRate1Pond.Text
            Else
                AllowEmissRate1 = " "
            End If
            If txtAllowableEmissionRate2Pond.Text <> "" Then
                AllowEmissRate2 = txtAllowableEmissionRate2Pond.Text
            Else
                AllowEmissRate2 = " "
            End If
            If txtAllowableEmissionRate3Pond.Text <> "" Then
                AllowEmissRate3 = txtAllowableEmissionRate3Pond.Text
            Else
                AllowEmissRate3 = " "
            End If
            If cboAllowableEmissionRateUnits1Pond.Text <> " " And cboAllowableEmissionRateUnits1Pond.Text <> "" Then
                AllowEmissRateUnit1 = cboAllowableEmissionRateUnits1Pond.SelectedValue
                If AllowEmissRateUnit1 = "" Then
                    AllowEmissRateUnit1 = "00000"
                End If
            Else
                AllowEmissRateUnit1 = "00000"
            End If
            If cboAllowableEmissionRateUnits2Pond.Text <> " " And cboAllowableEmissionRateUnits2Pond.Text <> "" Then
                AllowEmissRateUnit2 = cboAllowableEmissionRateUnits2Pond.SelectedValue
                If AllowEmissRateUnit2 = "" Then
                    AllowEmissRateUnit2 = "00000"
                End If
            Else
                AllowEmissRateUnit2 = "00000"
            End If
            If cboAllowableEmissionRateUnits3Pond.Text <> " " And cboAllowableEmissionRateUnits3Pond.Text <> "" Then
                AllowEmissRateUnit3 = cboAllowableEmissionRateUnits3Pond.SelectedValue
                If AllowEmissRateUnit3 = "" Then
                    AllowEmissRateUnit3 = "00000"
                End If
            Else
                AllowEmissRateUnit3 = "00000"
            End If
            If Me.txtRunNumPond1A.Text <> "" Then
                TestRun1 = txtRunNumPond1A.Text
            Else
                TestRun1 = "1"
            End If
            If Me.txtRunNumPond1B.Text <> "" Then
                TestRun2 = txtRunNumPond1B.Text
            Else
                TestRun2 = "2"
            End If
            If Me.txtRunNumPond1C.Text <> "" Then
                TestRun3 = txtRunNumPond1C.Text
            Else
                TestRun3 = "3"
            End If
            If Me.txtPollConcPond1A.Text <> "" Then
                PollConc1 = txtPollConcPond1A.Text
            Else
                PollConc1 = " "
            End If
            If Me.txtPollConcPond1B.Text <> "" Then
                PollConc2 = txtPollConcPond1B.Text
            Else
                PollConc2 = " "
            End If
            If Me.txtPollConcPond1C.Text <> "" Then
                PollConc3 = txtPollConcPond1C.Text
            Else
                PollConc3 = " "
            End If
            If cboPollConUnitPond.Text <> " " And cboPollConUnitPond.Text <> "" Then
                PollConcUnit = cboPollConUnitPond.SelectedValue
                If PollConcUnit = "" Then
                    PollConcUnit = "00000"
                End If
            Else
                PollConcUnit = "00000"
            End If
            If txtPollConcAvgPond.Text <> "" Then
                PollConcAvg = txtPollConcAvgPond.Text
            Else
                PollConcAvg = " "
            End If
            If Me.txtTreatmentRatePond1A.Text <> "" Then
                Treatment1 = txtTreatmentRatePond1A.Text
            Else
                Treatment1 = " "
            End If
            If Me.txtTreatmentRatePond1B.Text <> "" Then
                Treatment2 = txtTreatmentRatePond1B.Text
            Else
                Treatment2 = " "
            End If
            If Me.txtTreatmentRatePond1C.Text <> "" Then
                Treatment3 = txtTreatmentRatePond1C.Text
            Else
                Treatment3 = " "
            End If
            If Me.cboTreatmentRateUnitPond.Text <> " " And Me.cboTreatmentRateUnitPond.Text <> "" Then
                TreatmentUnit = cboTreatmentRateUnitPond.SelectedValue
                If TreatmentUnit = "" Then
                    TreatmentUnit = "00000"
                End If
            Else
                TreatmentUnit = "00000"
            End If
            If Me.txtTreatmentRateAvgPond.Text <> "" Then
                TreatmentAvg = txtTreatmentRateAvgPond.Text
            Else
                TreatmentAvg = " "
            End If
            If txtDestructionEfficancyPond.Text <> "" Then
                Destruct = txtDestructionEfficancyPond.Text
            Else
                Destruct = " "
            End If

            SQL = "Select strReferenceNumber " & _
            "from AIRBRANCH.ISMPReportPondAndGas " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportPondAndGas set " & _
                "strMaxOperatingCapacity = '" & MaxOpCapacity & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingCapacity  =  '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strAllowableEmissionRate1 = '" & AllowEmissRate1 & "', " & _
                "strAllowableEmissionRate2 = '" & AllowEmissRate2 & "', " & _
                "strAllowableEmissionRate3 = '" & AllowEmissRate3 & "', " & _
                "strAllowableEmissionRateUnit1 = '" & AllowEmissRateUnit1 & "', " & _
                "strAllowableEmissionRateUnit2 = '" & AllowEmissRateUnit2 & "', " & _
                "strAllowableemissionrateunit3 = '" & AllowEmissRateUnit3 & "', " & _
                "strRunNumber1A = '" & TestRun1 & "', " & _
                "strRunNumber1B = '" & TestRun2 & "', " & _
                "strRunNumber1C = '" & TestRun3 & "', " & _
                "strPollutantConcentration1A = '" & PollConc1 & "', " & _
                "strPollutantConcentration1B = '" & PollConc2 & "', " & _
                "strPOllutantConcentration1C = '" & PollConc3 & "', " & _
                "strPollutantConcentrationUnit = '" & PollConcUnit & "', " & _
                "strPollutantConcentrationAvg = '" & PollConcAvg & "', " & _
                "strTreatmentRate1A = '" & Treatment1 & "', " & _
                "strTreatmentRate1B = '" & Treatment2 & "', " & _
                "strTreatmentRate1C = '" & Treatment3 & "', " & _
                "strTreatmentRateUnit = '" & TreatmentUnit & "', " & _
                "strTreatmentRateAvg = '" & TreatmentAvg & "', " & _
                "strPercentallowable = '" & Destruct & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportPondAndGas " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "'" & AllowEmissRate1 & "', '" & AllowEmissRate2 & "', " & _
                "'" & AllowEmissRate3 & "', " & _
                "'" & AllowEmissRateUnit1 & "', '" & AllowEmissRateUnit2 & "', " & _
                "'" & AllowEmissRateUnit3 & "', " & _
                "'" & TestRun1 & "', '" & TestRun2 & "', " & _
                "'" & TestRun3 & "', " & _
                "'" & PollConc1 & "', '" & PollConc2 & "', " & _
                "'" & PollConc3 & "', " & _
                "'" & PollConcUnit & "', '" & PollConcAvg & "', " & _
                "' ', ' ', " & _
                "' ', " & _
                "' ', ' ', " & _
                "'" & Treatment1 & "', '" & Treatment2 & "', " & _
                "'" & Treatment3 & "', " & _
                "'" & TreatmentUnit & "', '" & TreatmentAvg & "', " & _
                "'" & Destruct & "') "
            End If
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveGas()
        Try
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowEmissRate1 As String = " "
            Dim AllowEmissRate2 As String = " "
            Dim AllowEmissRate3 As String = " "
            Dim AllowEmissRateUnit1 As String = "00000"
            Dim AllowEmissRateUnit2 As String = "00000"
            Dim AllowEmissRateUnit3 As String = "00000"
            Dim TestRun1 As String = "1"
            Dim TestRun2 As String = "2"
            Dim TestRun3 As String = "3"
            Dim PollConc1 As String = " "
            Dim PollConc2 As String = " "
            Dim PollConc3 As String = " "
            Dim PollConcUnit As String = "00000"
            Dim PollConcAvg As String = " "
            Dim Emission1 As String = " "
            Dim Emission2 As String = " "
            Dim Emission3 As String = " "
            Dim EmissionUnit As String = "00000"
            Dim EmissionAvg As String = " "
            Dim PercentAllowable As String = " "

            If txtMaximumExpectedOperatingCapacityGas.Text <> "" Then
                MaxOpCapacity = txtMaximumExpectedOperatingCapacityGas.Text
            Else
                MaxOpCapacity = " "
            End If
            If cboMaximumExpectedOperatingCapacityUnitsGas.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsGas.Text <> "" Then
                MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsGas.SelectedValue
                If MaxOpCapacityUnit = "" Then
                    MaxOpCapacityUnit = "00000"
                End If
            Else
                MaxOpCapacityUnit = "00000"
            End If

            If txtOperatingCapacityGas.Text <> "" Then
                OpCapacity = txtOperatingCapacityGas.Text
            Else
                OpCapacity = " "
            End If
            If cboOperatingCapacityUnitsGas.Text <> " " And cboOperatingCapacityUnitsGas.Text <> "" Then
                OpCapacityUnit = cboOperatingCapacityUnitsGas.SelectedValue
                If OpCapacityUnit = "" Then
                    OpCapacityUnit = "00000"
                End If
            Else
                OpCapacityUnit = "00000"
            End If
            If txtAllowableEmissionRate1Gas.Text <> "" Then
                AllowEmissRate1 = txtAllowableEmissionRate1Gas.Text
            Else
                AllowEmissRate1 = " "
            End If
            If txtAllowableEmissionRate2Gas.Text <> "" Then
                AllowEmissRate2 = txtAllowableEmissionRate2Gas.Text
            Else
                AllowEmissRate2 = " "
            End If
            If txtAllowableEmissionRate3Gas.Text <> "" Then
                AllowEmissRate3 = txtAllowableEmissionRate3Gas.Text
            Else
                AllowEmissRate3 = " "
            End If
            If cboAllowableEmissionRateUnits1Gas.Text <> " " And cboAllowableEmissionRateUnits1Gas.Text <> "" Then
                AllowEmissRateUnit1 = cboAllowableEmissionRateUnits1Gas.SelectedValue
                If AllowEmissRateUnit1 = "" Then
                    AllowEmissRateUnit1 = "00000"
                End If
            Else
                AllowEmissRateUnit1 = "00000"
            End If
            If cboAllowableEmissionRateUnits2Gas.Text <> " " And cboAllowableEmissionRateUnits2Gas.Text <> "" Then
                AllowEmissRateUnit2 = cboAllowableEmissionRateUnits2Gas.SelectedValue
                If AllowEmissRateUnit2 = "" Then
                    AllowEmissRateUnit2 = "00000"
                End If
            Else
                AllowEmissRateUnit2 = "00000"
            End If
            If cboAllowableEmissionRateUnits3Gas.Text <> " " And cboAllowableEmissionRateUnits3Gas.Text <> "" Then
                AllowEmissRateUnit3 = cboAllowableEmissionRateUnits3Gas.SelectedValue
                If AllowEmissRateUnit3 = "" Then
                    AllowEmissRateUnit3 = "00000"
                End If
            Else
                AllowEmissRateUnit3 = "00000"
            End If
            If Me.txtRunNumGas1A.Text <> "" Then
                TestRun1 = txtRunNumGas1A.Text
            Else
                TestRun1 = "1"
            End If
            If Me.txtRunNumGas1B.Text <> "" Then
                TestRun2 = txtRunNumGas1B.Text
            Else
                TestRun2 = "2"
            End If
            If Me.txtRunNumGas1C.Text <> "" Then
                TestRun3 = txtRunNumGas1C.Text
            Else
                TestRun3 = "3"
            End If
            If Me.txtPollConcGas1A.Text <> "" Then
                PollConc1 = txtPollConcGas1A.Text
            Else
                PollConc1 = " "
            End If
            If Me.txtPollConcGas1B.Text <> "" Then
                PollConc2 = txtPollConcGas1B.Text
            Else
                PollConc2 = " "
            End If
            If Me.txtPollConcGas1C.Text <> "" Then
                PollConc3 = txtPollConcGas1C.Text
            Else
                PollConc3 = " "
            End If
            If cboPollConUnitGas.Text <> " " And cboPollConUnitGas.Text <> "" Then
                PollConcUnit = cboPollConUnitGas.SelectedValue
                If PollConcUnit = "" Then
                    PollConcUnit = "00000"
                End If
            Else
                PollConcUnit = "00000"
            End If
            If txtPollConcAvgGas.Text <> "" Then
                PollConcAvg = txtPollConcAvgGas.Text
            Else
                PollConcAvg = " "
            End If
            If Me.txtEmissRateGas1A.Text <> "" Then
                Emission1 = txtEmissRateGas1A.Text
            Else
                Emission1 = " "
            End If
            If Me.txtEmissRateGas1B.Text <> "" Then
                Emission2 = txtEmissRateGas1B.Text
            Else
                Emission2 = " "
            End If
            If Me.txtEmissRateGas1C.Text <> "" Then
                Emission3 = txtEmissRateGas1C.Text
            Else
                Emission3 = " "
            End If
            If Me.cboEmissRateUnitGas.Text <> " " And Me.cboEmissRateUnitGas.Text <> "" Then
                EmissionUnit = cboEmissRateUnitGas.SelectedValue
                If EmissionUnit = "" Then
                    EmissionUnit = "00000"
                End If
            Else
                EmissionUnit = "00000"
            End If
            If Me.txtEmissRateAvgGas.Text <> "" Then
                EmissionAvg = txtEmissRateAvgGas.Text
            Else
                EmissionAvg = " "
            End If
            If txtPercentAllowableGas.Text <> "" Then
                PercentAllowable = txtPercentAllowableGas.Text
            Else
                PercentAllowable = " "
            End If

            SQL = "Select strReferenceNumber " & _
            "from AIRBRANCH.ISMPReportPondAndGas " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportPondAndGas set " & _
                "strMaxOperatingCapacity = '" & MaxOpCapacity & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingCapacity  =  '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strAllowableEmissionRate1 = '" & AllowEmissRate1 & "', " & _
                "strAllowableEmissionRate2 = '" & AllowEmissRate2 & "', " & _
                "strAllowableEmissionRate3 = '" & AllowEmissRate3 & "', " & _
                "strAllowableEmissionRateUnit1 = '" & AllowEmissRateUnit1 & "', " & _
                "strAllowableEmissionRateUnit2 = '" & AllowEmissRateUnit2 & "', " & _
                "strAllowableemissionrateunit3 = '" & AllowEmissRateUnit3 & "', " & _
                "strRunNumber1A = '" & TestRun1 & "', " & _
                "strRunNumber1B = '" & TestRun2 & "', " & _
                "strRunNumber1C = '" & TestRun3 & "', " & _
                "strPollutantConcentration1A = '" & PollConc1 & "', " & _
                "strPollutantConcentration1B = '" & PollConc2 & "', " & _
                "strPOllutantConcentration1C = '" & PollConc3 & "', " & _
                "strPollutantConcentrationUnit = '" & PollConcUnit & "', " & _
                "strPollutantConcentrationAvg = '" & PollConcAvg & "', " & _
                "strEmissionRate1A = '" & Emission1 & "', " & _
                "strEmissionRate1B = '" & Emission2 & "', " & _
                "strEmissionRate1C = '" & Emission3 & "', " & _
                "strEmissionRateUnit = '" & EmissionUnit & "', " & _
                "strEmissionRateAvg = '" & EmissionAvg & "', " & _
                "strPercentAllowable = '" & PercentAllowable & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportPondAndGas " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "'" & AllowEmissRate1 & "', '" & AllowEmissRate2 & "', " & _
                "'" & AllowEmissRate3 & "', " & _
                "'" & AllowEmissRateUnit1 & "', '" & AllowEmissRateUnit2 & "', " & _
                "'" & AllowEmissRateUnit3 & "', " & _
                "'" & TestRun1 & "', '" & TestRun2 & "', " & _
                "'" & TestRun3 & "', " & _
                "'" & PollConc1 & "', '" & PollConc2 & "', " & _
                "'" & PollConc3 & "', " & _
                "'" & PollConcUnit & "', '" & PollConcAvg & "', " & _
                "'" & Emission1 & "', '" & Emission2 & "', " & _
                "'" & Emission3 & "', " & _
                "'" & EmissionUnit & "', '" & EmissionAvg & "', " & _
                "' ', ' ', " & _
                "' ', " & _
                "' ', ' ', " & _
                "'" & PercentAllowable & "') "
            End If
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveFlare()
        Try
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim LimitationVelocity As String = " "
            Dim LimitationHeatCap As String = " "
            Dim HeatingValue1 As String = " "
            Dim HeatingValue2 As String = " "
            Dim HeatingValue3 As String = " "
            Dim HeatingValueUnit As String = "00000"
            Dim HeatingAvg As String = " "
            Dim Velocity1 As String = " "
            Dim Velocity2 As String = " "
            Dim Velocity3 As String = " "
            Dim VelocityUnit As String = "00000"
            Dim VelocityAvg As String = " "
            Dim PercentAllowable As String = " "

            If Me.txtMaximumExpectedOperatingCapacityFlare.Text <> "" Then
                MaxOpCapacity = Me.txtMaximumExpectedOperatingCapacityFlare.Text
            Else
                MaxOpCapacity = " "
            End If
            If Me.cboMaximumExpectedOperatingCapacityUnitsFlare.Text <> " " And Me.cboMaximumExpectedOperatingCapacityUnitsFlare.Text <> "" Then
                MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsFlare.SelectedValue
                If MaxOpCapacityUnit = "" Then
                    MaxOpCapacityUnit = "00000"
                End If
            Else
                MaxOpCapacityUnit = "00000"
            End If
            If Me.txtOperatingCapacityFlare.Text <> "" Then
                OpCapacity = Me.txtOperatingCapacityFlare.Text
            Else
                OpCapacity = " "
            End If
            If Me.cboOperatingCapacityUnitsFlare.Text <> " " And Me.cboOperatingCapacityUnitsFlare.Text <> "" Then
                OpCapacityUnit = cboOperatingCapacityUnitsFlare.SelectedValue
                If OpCapacityUnit = "" Then
                    OpCapacityUnit = "00000"
                End If
            Else
                OpCapacityUnit = "00000"
            End If
            If txtVelocityFlare.Text <> "" Then
                LimitationVelocity = txtVelocityFlare.Text
            Else
                LimitationVelocity = " "
            End If
            If txtHeatContentFlare.Text <> "" Then
                LimitationHeatCap = txtHeatContentFlare.Text
            Else
                LimitationHeatCap = " "
            End If
            If txtHeatingValue1AFlare.Text <> "" Then
                HeatingValue1 = txtHeatingValue1AFlare.Text
            Else
                HeatingValue1 = " "
            End If
            If txtHeatingValue1BFlare.Text <> "" Then
                HeatingValue2 = txtHeatingValue1BFlare.Text
            Else
                HeatingValue2 = " "
            End If
            If txtHeatingValue1CFlare.Text <> "" Then
                HeatingValue3 = txtHeatingValue1CFlare.Text
            Else
                HeatingValue3 = " "
            End If
            If Me.cboHeatingValueUnits.Text <> " " And cboHeatingValueUnits.Text <> "" Then
                HeatingValueUnit = cboHeatingValueUnits.SelectedValue
                If HeatingValueUnit = "" Then
                    HeatingValueUnit = "00000"
                End If
            Else
                HeatingValueUnit = "00000"
            End If
            If txtHeatingValuesAvgFlare.Text <> "" Then
                HeatingAvg = txtHeatingValuesAvgFlare.Text
            Else
                HeatingAvg = " "
            End If
            If txtVelocity1AFlare.Text <> "" Then
                Velocity1 = txtVelocity1AFlare.Text
            Else
                Velocity1 = " "
            End If
            If txtVelocity1BFlare.Text <> "" Then
                Velocity2 = txtVelocity1BFlare.Text
            Else
                Velocity2 = " "
            End If
            If txtVelocity1CFlare.Text <> "" Then
                Velocity3 = txtVelocity1CFlare.Text
            Else
                Velocity3 = " "
            End If
            If cboVelocityUnitsFlare.Text <> " " And cboVelocityUnitsFlare.Text <> "" Then
                VelocityUnit = cboVelocityUnitsFlare.SelectedValue
                If VelocityUnit = "" Then
                    VelocityUnit = "00000"
                End If
            Else
                VelocityUnit = " "
            End If
            If txtVelocityAvgFlare.Text <> "" Then
                VelocityAvg = txtVelocityAvgFlare.Text
            Else
                VelocityAvg = " "
            End If
            If txtPercentAllowableFlare.Text <> "" Then
                PercentAllowable = txtPercentAllowableFlare.Text
            Else
                PercentAllowable = " "
            End If

            SQL = "Select strReferenceNumber " & _
            "from AIRBRANCH.ISMPReportFlare " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportFlare set " & _
                "strMaxOperatingCapacity  = '" & MaxOpCapacity & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingcapacity = '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strLimitationVelocity  = '" & LimitationVelocity & "', " & _
                "strLimitationHeatCapacity = '" & LimitationHeatCap & "', " & _
                "strHeatingValue1A = '" & HeatingValue1 & "', " & _
                "strHeatingValue2A = '" & HeatingValue2 & "', " & _
                "strHeatingValue3A = '" & HeatingValue3 & "', " & _
                "strHeatingValueUnits = '" & HeatingValueUnit & "', " & _
                "strHeatingValueAvg = '" & HeatingAvg & "', " & _
                "strVelocity1A = '" & Velocity1 & "', " & _
                "strVelocity2A = '" & Velocity2 & "', " & _
                "strVelocity3A = '" & Velocity3 & "', " & _
                "strVelocityUnits = '" & VelocityUnit & "', " & _
                "strVelocityAvg = '" & VelocityAvg & "', " & _
                "strPercentAllowable = '" & PercentAllowable & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportFlare " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "'" & LimitationVelocity & "', '" & LimitationHeatCap & "', " & _
                "' ', ' ', " & _
                "' ', " & _
                "' ', ' ', " & _
                "' ', " & _
                "'" & HeatingValue1 & "', '" & HeatingValue2 & "', " & _
                "'" & HeatingValue3 & "', '" & HeatingValueUnit & "', " & _
                "'" & HeatingAvg & "', " & _
                "'" & Velocity1 & "', '" & Velocity2 & "', " & _
                "'" & Velocity3 & "', '" & VelocityUnit & "', " & _
                "'" & VelocityAvg & "', " & _
                "' ', ' ', " & _
                "' ', ' ', " & _
                "' ', ' ', " & _
                "' ', ' ', " & _
                "' ', '" & PercentAllowable & "')  "
            End If

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveRata()
        Try
            Dim Diluent As String = "00000"
            Dim AppStandard As String = " "
            Dim RelativeAccPercent As String = " "
            Dim RefMethod1 As String = " "
            Dim RefMethod2 As String = " "
            Dim RefMethod3 As String = " "
            Dim RefMethod4 As String = " "
            Dim RefMethod5 As String = " "
            Dim RefMethod6 As String = " "
            Dim RefMethod7 As String = " "
            Dim RefMethod8 As String = " "
            Dim RefMethod9 As String = " "
            Dim RefMethod10 As String = " "
            Dim RefMethod11 As String = " "
            Dim RefMethod12 As String = " "
            Dim RataUnits As String = "00000"
            Dim CMS1 As String = " "
            Dim CMS2 As String = " "
            Dim CMS3 As String = " "
            Dim CMS4 As String = " "
            Dim CMS5 As String = " "
            Dim CMS6 As String = " "
            Dim CMS7 As String = " "
            Dim CMS8 As String = " "
            Dim CMS9 As String = " "
            Dim CMS10 As String = " "
            Dim CMS11 As String = " "
            Dim CMS12 As String = " "
            Dim AccChoice As String = " "
            Dim AccRequiredPercent As String = " "
            Dim AccRequiredStatement As String = " "
            Dim IncludeKey As String = "000000000000"

            If cboDilutentMonitoredRata.Text <> " " And cboDilutentMonitoredRata.Text <> "" Then
                Diluent = cboDilutentMonitoredRata.SelectedValue
                If Diluent = "" Then
                    Diluent = "00000"
                End If
            Else
                Diluent = "00000"
            End If
            If txtApplicableStandardRata.Text <> "" Then
                AppStandard = txtApplicableStandardRata.Text
            Else
                AppStandard = " "
            End If
            If txtRelativeAccuracy.Text <> "" Then
                RelativeAccPercent = txtRelativeAccuracy.Text
            Else
                RelativeAccPercent = " "
            End If
            If txtRefMethodRata1.Text <> "" Then
                RefMethod1 = txtRefMethodRata1.Text
            Else
                RefMethod1 = " "
            End If
            If txtRefMethodRata2.Text <> "" Then
                RefMethod2 = txtRefMethodRata2.Text
            Else
                RefMethod2 = " "
            End If
            If txtRefMethodRata3.Text <> "" Then
                RefMethod3 = txtRefMethodRata3.Text
            Else
                RefMethod3 = " "
            End If
            If txtRefMethodRata4.Text <> "" Then
                RefMethod4 = txtRefMethodRata4.Text
            Else
                RefMethod4 = " "
            End If
            If txtRefMethodRata5.Text <> "" Then
                RefMethod5 = txtRefMethodRata5.Text
            Else
                RefMethod5 = " "
            End If
            If txtRefMethodRata6.Text <> "" Then
                RefMethod6 = txtRefMethodRata6.Text
            Else
                RefMethod6 = " "
            End If
            If txtRefMethodRata7.Text <> "" Then
                RefMethod7 = txtRefMethodRata7.Text
            Else
                RefMethod7 = " "
            End If
            If txtRefMethodRata8.Text <> "" Then
                RefMethod8 = txtRefMethodRata8.Text
            Else
                RefMethod8 = " "
            End If
            If txtRefMethodRata9.Text <> "" Then
                RefMethod9 = txtRefMethodRata9.Text
            Else
                RefMethod9 = " "
            End If
            If txtRefMethodRata10.Text <> "" Then
                RefMethod10 = txtRefMethodRata10.Text
            Else
                RefMethod10 = " "
            End If
            If txtRefMethodRata11.Text <> "" Then
                RefMethod11 = txtRefMethodRata11.Text
            Else
                RefMethod11 = " "
            End If
            If txtRefMethodRata12.Text <> "" Then
                RefMethod12 = txtRefMethodRata12.Text
            Else
                RefMethod12 = " "
            End If
            If cboUnitsRata.Text <> " " And cboUnitsRata.Text <> "" Then
                RataUnits = cboUnitsRata.SelectedValue
                If RataUnits = "" Then
                    RataUnits = "00000"
                End If
            Else
                RataUnits = "00000"
            End If
            If txtCMSRata1.Text <> "" Then
                CMS1 = txtCMSRata1.Text
            Else
                CMS1 = " "
            End If
            If txtCMSRata2.Text <> "" Then
                CMS2 = txtCMSRata2.Text
            Else
                CMS2 = " "
            End If
            If txtCMSRata3.Text <> "" Then
                CMS3 = txtCMSRata3.Text
            Else
                CMS3 = " "
            End If
            If txtCMSRata4.Text <> "" Then
                CMS4 = txtCMSRata4.Text
            Else
                CMS4 = " "
            End If
            If txtCMSRata5.Text <> "" Then
                CMS5 = txtCMSRata5.Text
            Else
                CMS5 = " "
            End If
            If txtCMSRata6.Text <> "" Then
                CMS6 = txtCMSRata6.Text
            Else
                CMS6 = " "
            End If
            If txtCMSRata7.Text <> "" Then
                CMS7 = txtCMSRata7.Text
            Else
                CMS7 = " "
            End If
            If txtCMSRata8.Text <> "" Then
                CMS8 = txtCMSRata8.Text
            Else
                CMS8 = " "
            End If
            If txtCMSRata9.Text <> "" Then
                CMS9 = txtCMSRata9.Text
            Else
                CMS9 = " "
            End If
            If txtCMSRata10.Text <> "" Then
                CMS10 = txtCMSRata10.Text
            Else
                CMS10 = " "
            End If
            If txtCMSRata11.Text <> "" Then
                CMS11 = txtCMSRata11.Text
            Else
                CMS11 = " "
            End If
            If txtCMSRata12.Text <> "" Then
                CMS12 = txtCMSRata12.Text
            Else
                CMS12 = " "
            End If
            If chbOmitRunRata1.Checked = True Then
                IncludeKey = "1"
            Else
                IncludeKey = "0"
            End If
            If chbOmitRunRata2.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata3.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata4.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata5.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata6.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata7.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata8.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata9.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata10.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata11.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If chbOmitRunRata12.Checked = True Then
                IncludeKey = IncludeKey & "1"
            Else
                IncludeKey = IncludeKey & "0"
            End If
            If txtRefMethodPercentRata.Visible = True And txtApplicableStandardPercentRata.Visible = False _
               And cboDiluentRata.Visible = False And txtPart75Statement.Visible = False Then
                AccChoice = "RefMethod"
                If IsNumeric(txtRefMethodPercentRata.Text) Then
                    AccRequiredPercent = txtRefMethodPercentRata.Text
                Else
                    AccRequiredPercent = " "
                End If
                AccRequiredStatement = "% of the average value of the Reference Method (RM) test data (when the average of the RM test data is greater then 50% of the applicable standard)"
            Else
                If txtRefMethodPercentRata.Visible = False And txtApplicableStandardPercentRata.Visible = True _
                   And cboDiluentRata.Visible = False And txtPart75Statement.Visible = False Then
                    AccChoice = "AppStandard"
                    If IsNumeric(txtApplicableStandardPercentRata.Text) Then
                        AccRequiredPercent = txtApplicableStandardPercentRata.Text
                    Else
                        AccRequiredPercent = " "
                    End If
                    AccRequiredStatement = "% of the applicable standard (when the average of the RM test data is less than 50% of the applicable standard)."
                Else
                    If txtRefMethodPercentRata.Visible = False And txtApplicableStandardPercentRata.Visible = False _
                       And cboDiluentRata.Visible = True And txtPart75Statement.Visible = False Then
                        AccChoice = "Diluent"
                        AccRequiredPercent = "1% "
                        AccRequiredStatement = cboDiluentRata.Text
                    Else
                        If txtRefMethodPercentRata.Visible = False And txtApplicableStandardPercentRata.Visible = False _
                         And cboDiluentRata.Visible = False And txtPart75Statement.Visible = True Then
                            AccChoice = "Part75"
                            If IsNumeric(txtPart75Statement.Text) Then
                                AccRequiredPercent = txtPart75Statement.Text
                            Else
                                AccRequiredPercent = " "
                            End If
                            AccRequiredStatement = "% for Part 75 Sources."
                        Else
                            AccChoice = " "
                            AccRequiredPercent = " "
                            AccRequiredStatement = " "
                        End If
                    End If
                End If
            End If

            SQL = "Select strReferenceNumber " & _
            "from AIRBRANCH.ISMPReportRata " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "'"
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportRATA set " & _
                "strDiluent = '" & Diluent & "', " & _
                "strApplicableStandard = '" & Replace(AppStandard, "'", "''") & "', " & _
                "strRelativeAccuracyPercent = '" & RelativeAccPercent & "', " & _
                "strReferenceMethod1 = '" & RefMethod1 & "', " & _
                "strReferenceMethod2 = '" & RefMethod2 & "', " & _
                "strReferenceMethod3 = '" & RefMethod3 & "', " & _
                "strReferenceMethod4 = '" & RefMethod4 & "', " & _
                "strReferenceMethod5 = '" & RefMethod5 & "', " & _
                "strReferenceMethod6 = '" & RefMethod6 & "', " & _
                "strreferenceMethod7 = '" & RefMethod7 & "', " & _
                "strreferenceMethod8 = '" & RefMethod8 & "', " & _
                "strReferenceMethod9 = '" & RefMethod9 & "', " & _
                "strReferenceMethod10 = '" & RefMethod10 & "', " & _
                "strReferenceMethod11 = '" & RefMethod11 & "', " & _
                "strReferenceMethod12 = '" & RefMethod12 & "', " & _
                "strRATAUnits = '" & RataUnits & "', " & _
                "strCMS1 = '" & CMS1 & "', " & _
                "strCMS2 = '" & CMS2 & "', " & _
                "strCMS3 = '" & CMS3 & "', " & _
                "strCMS4 = '" & CMS4 & "', " & _
                "strCMS5 = '" & CMS5 & "', " & _
                "strCMS6 = '" & CMS6 & "', " & _
                "strCMS7 = '" & CMS7 & "', " & _
                "strCMS8 = '" & CMS8 & "', " & _
                "strCMS9 = '" & CMS9 & "', " & _
                "strCMS10 = '" & CMS10 & "', " & _
                "strCMS11 = '" & CMS11 & "', " & _
                "strCMS12 = '" & CMS12 & "', " & _
                "strAccuracyChoice = '" & AccChoice & "', " & _
                "strAccuracyRequiredPercent = '" & AccRequiredPercent & "', " & _
                "strAccuracyRequiredStatement = '" & Replace(AccRequiredStatement, "'", "''") & "', " & _
                "strRunsIncludedKey = '" & IncludeKey & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportRATA " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & Diluent & "', " & _
                "'" & Replace(AppStandard, "'", "''") & "', " & _
                "'" & RelativeAccPercent & "', " & _
                "'" & RefMethod1 & "', '" & RefMethod2 & "', " & _
                "'" & RefMethod3 & "', '" & RefMethod4 & "', " & _
                "'" & RefMethod5 & "', '" & RefMethod6 & "', " & _
                "'" & RefMethod7 & "', '" & RefMethod8 & "', " & _
                "'" & RefMethod9 & "', '" & RefMethod10 & "', " & _
                "'" & RefMethod11 & "', '" & RefMethod12 & "', " & _
                "'" & RataUnits & "', " & _
                "'" & CMS1 & "', '" & CMS2 & "', " & _
                "'" & CMS3 & "', '" & CMS4 & "', " & _
                "'" & CMS5 & "', '" & CMS6 & "', " & _
                "'" & CMS7 & "', '" & CMS8 & "', " & _
                "'" & CMS9 & "', '" & CMS10 & "', " & _
                "'" & CMS11 & "', '" & CMS12 & "', " & _
                "'" & AccChoice & "', " & _
                "'" & AccRequiredPercent & "', " & _
                "'" & Replace(AccRequiredStatement, "'", "''") & "', " & _
                "'" & IncludeKey & "') "
            End If
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveMemorandum(ByVal ReportType As String)
        Try
            Dim MemoField As String = " "
            Dim MaxOpCapacity As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowableEmiss1 As String = " "
            Dim AllowableEmiss2 As String = " "
            Dim AllowableEmiss3 As String = " "
            Dim AllowableEmissUnit1 As String = "00000"
            Dim AllowableEmissUnit2 As String = "00000"
            Dim AllowableEmissUnit3 As String = "00000"
            Dim ManufactureAndModel As String = " "
            Dim SerialNumber As String = " "

            Select Case ReportType
                Case "Standard"
                    If txtMemorandumStandard.Text <> "" Then
                        MemoField = txtMemorandumStandard.Text
                    Else
                        MemoField = " "
                    End If
                Case "ToFile"
                    If txtMemorandumToFile.Text <> "" Then
                        MemoField = txtMemorandumToFile.Text
                    Else
                        MemoField = " "
                    End If
                    If txtModelMemorandumToFile.Text <> "" Then
                        ManufactureAndModel = txtModelMemorandumToFile.Text
                    Else
                        ManufactureAndModel = " "
                    End If
                    If txtSerialNumberMemorandumToFile.Text <> "" Then
                        SerialNumber = txtSerialNumberMemorandumToFile.Text
                    Else
                        SerialNumber = " "
                    End If
                Case "PTE"
                    If txtMemorandumPTE.Text <> "" Then
                        MemoField = txtMemorandumPTE.Text
                    Else
                        MemoField = " "
                    End If
                    If txtMaximumExpectedOperatingCapacityMemorandumPTE.Text <> "" Then
                        MaxOpCapacity = txtMaximumExpectedOperatingCapacityMemorandumPTE.Text
                    Else
                        MaxOpCapacity = " "
                    End If
                    If cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.Text <> "" Then
                        MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.SelectedValue
                        If MaxOpCapacityUnit = "" Then
                            MaxOpCapacityUnit = "00000"
                        End If
                    Else
                        MaxOpCapacityUnit = "00000"
                    End If
                    If txtOperatingCapacityMemorandumPTE.Text <> "" Then
                        OpCapacity = txtOperatingCapacityMemorandumPTE.Text
                    Else
                        OpCapacity = " "
                    End If
                    If cboOperatingCapacityUnitsMemorandumPTE.Text <> " " And cboOperatingCapacityUnitsMemorandumPTE.Text <> "" Then
                        OpCapacityUnit = cboOperatingCapacityUnitsMemorandumPTE.SelectedValue
                        If OpCapacityUnit = "" Then
                            OpCapacityUnit = "00000"
                        End If
                    Else
                        OpCapacityUnit = "00000"
                    End If
                    If txtAllowableEmissionRate1MemorandumPTE.Text <> "" Then
                        AllowableEmiss1 = txtAllowableEmissionRate1MemorandumPTE.Text
                    Else
                        AllowableEmiss1 = " "
                    End If
                    If txtAllowableEmissionRate2MemorandumPTE.Text <> "" Then
                        AllowableEmiss2 = txtAllowableEmissionRate2MemorandumPTE.Text
                    Else
                        AllowableEmiss2 = " "
                    End If
                    If txtAllowableEmissionRate3MemorandumPTE.Text <> "" Then
                        AllowableEmiss3 = txtAllowableEmissionRate3MemorandumPTE.Text
                    Else
                        AllowableEmiss3 = " "
                    End If
                    If cboAllowableEmissionRateUnits1MemorandumPTE.Text <> " " And cboAllowableEmissionRateUnits1MemorandumPTE.Text <> "" Then
                        AllowableEmissUnit1 = cboAllowableEmissionRateUnits1MemorandumPTE.SelectedValue
                        If AllowableEmissUnit1 = "" Then
                            AllowableEmissUnit1 = "00000"
                        End If
                    Else
                        AllowableEmissUnit1 = "00000"
                    End If
                    If cboAllowableEmissionRateUnits2MemorandumPTE.Text <> " " And cboAllowableEmissionRateUnits2MemorandumPTE.Text <> "" Then
                        AllowableEmissUnit2 = cboAllowableEmissionRateUnits2MemorandumPTE.SelectedValue
                        If AllowableEmissUnit2 = "" Then
                            AllowableEmissUnit2 = "00000"
                        End If
                    Else
                        AllowableEmissUnit2 = "00000"
                    End If
                    If cboAllowableEmissionRateUnits3MemorandumPTE.Text <> " " And cboAllowableEmissionRateUnits3MemorandumPTE.Text <> "" Then
                        AllowableEmissUnit3 = cboAllowableEmissionRateUnits3MemorandumPTE.SelectedValue
                        If AllowableEmissUnit3 = "" Then
                            AllowableEmissUnit3 = "00000"
                        End If
                    Else
                        AllowableEmissUnit3 = "00000"
                    End If
                Case Else

            End Select

            SQL = "Select strReferenceNumber " & _
            "from AIRBRANCH.ISMPReportMemo " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportMemo set " & _
                "strMemorandumField = '" & Replace(MemoField, "'", "''") & "', " & _
                "strMaxOperatingCapacity = '" & MaxOpCapacity & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingCapacity = '" & OpCapacity & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strallowableemissionRate1A = '" & AllowableEmiss1 & "', " & _
                "strAllowableEmissionRate1B = '" & AllowableEmiss2 & "', " & _
                "strAllowableEmissionRate1C = '" & AllowableEmiss3 & "', " & _
                "strAllowableEmissionRateUnit1A = '" & AllowableEmissUnit1 & "', " & _
                "strAllowableEmissionRateUnit1B = '" & AllowableEmissUnit2 & "', " & _
                "strAllowableEmissionRateUnit1C = '" & AllowableEmissUnit3 & "', " & _
                "strMonitorManufactureAndModel = '" & Replace(ManufactureAndModel, "'", "''") & "', " & _
                "strMonitorSerialNumber = '" & Replace(SerialNumber, "'", "''") & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportMemo " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & Replace(MemoField, "'", "''") & "', " & _
                "'" & MaxOpCapacity & "', '" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity & "', '" & OpCapacityUnit & "', " & _
                "'" & AllowableEmiss1 & "', '" & AllowableEmiss2 & "', " & _
                "'" & AllowableEmiss3 & "', " & _
                "'" & AllowableEmissUnit1 & "', '" & AllowableEmissUnit2 & "', " & _
                "'" & AllowableEmissUnit3 & "', " & _
                "'" & Replace(ManufactureAndModel, "'", "''") & "', " & _
                "'" & Replace(SerialNumber, "'", "''") & "') "
            End If

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Sub SaveMethodOpacity(ByVal ReportType As String)
        Try
            Dim MaxOpCapacity1 As String = " "
            Dim MaxOpCapacity2 As String = " "
            Dim MaxOpCapacity3 As String = " "
            Dim MaxOpCapacity4 As String = " "
            Dim MaxOpCapacity5 As String = " "
            Dim MaxOpCapacityUnit As String = "00000"
            Dim OpCapacity1 As String = " "
            Dim OpCapacity2 As String = " "
            Dim OpCapacity3 As String = " "
            Dim OpCapacity4 As String = " "
            Dim OpCapacity5 As String = " "
            Dim OpCapacityUnit As String = "00000"
            Dim AllowableEmiss1 As String = " "
            Dim AllowableEmiss2 As String = " "
            Dim AllowableEmiss3 As String = " "
            Dim AllowableEmiss4 As String = " "
            Dim AllowableEmiss5 As String = " "
            Dim AllowableEmissUnit As String = "00000"
            Dim AllowableEmiss22 As String = " "
            Dim TestDuration As String = " "
            Dim EmissTime As String = " "
            Dim Opacity1 As String = " "
            Dim Opacity2 As String = " "
            Dim Opacity3 As String = " "
            Dim Opacity4 As String = " "
            Dim Opacity5 As String = " "
            Dim Equip1 As String = " "
            Dim Equip2 As String = " "
            Dim Equip3 As String = " "
            Dim Equip4 As String = " "
            Dim Equip5 As String = " "
            Dim OpacityStandard As String = " "

            Select Case ReportType
                Case "Single"
                    If txtMaximumExpectedOperatingCapacityMethod9Single.Text <> "" Then
                        MaxOpCapacity1 = txtMaximumExpectedOperatingCapacityMethod9Single.Text
                    Else
                        MaxOpCapacity1 = " "
                    End If
                    If cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsMethod9Single.Text <> "" Then
                        MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsMethod9Single.SelectedValue
                        If MaxOpCapacityUnit = "" Then
                            MaxOpCapacityUnit = "00000"
                        End If
                    Else
                        MaxOpCapacityUnit = "00000"
                    End If
                    If txtOperatingCapacityMethod9Single.Text <> "" Then
                        OpCapacity1 = txtOperatingCapacityMethod9Single.Text
                    Else
                        OpCapacity1 = " "
                    End If
                    If cboOperatingCapacityUnitsMethod9Single.Text <> " " And cboOperatingCapacityUnitsMethod9Single.Text <> "" Then
                        OpCapacityUnit = cboOperatingCapacityUnitsMethod9Single.SelectedValue
                        If OpCapacityUnit = "" Then
                            OpCapacityUnit = "00000"
                        End If
                    Else
                        OpCapacityUnit = "00000"
                    End If
                    If txtAllowableEmissionRate1Method9Single.Text <> "" Then
                        AllowableEmiss1 = txtAllowableEmissionRate1Method9Single.Text
                    Else
                        AllowableEmiss1 = " "
                    End If
                    If cboAllowableEmissionRateUnits1Method9Single.Text <> " " And cboAllowableEmissionRateUnits1Method9Single.Text <> "" Then
                        AllowableEmissUnit = cboAllowableEmissionRateUnits1Method9Single.SelectedValue
                        If AllowableEmissUnit = "" Then
                            AllowableEmissUnit = "00000"
                        End If
                    Else
                        AllowableEmissUnit = "00000"
                    End If
                    If txtTestDurationMethod9Single.Text <> "" Then
                        TestDuration = txtTestDurationMethod9Single.Text
                    Else
                        TestDuration = " "
                    End If
                    If txtOpacityMethod9Single.Text <> "" Then
                        Opacity1 = txtOpacityMethod9Single.Text
                    Else
                        Opacity1 = " "
                    End If
                    If rdbMethod9HighestAvg.Checked = True Then
                        OpacityStandard = "6"
                    Else
                        OpacityStandard = "30"
                    End If
                Case "Multi"
                    If txtMaximumExpectedOperatingCapacityMethod9Multi1.Text <> "" Then
                        MaxOpCapacity1 = txtMaximumExpectedOperatingCapacityMethod9Multi1.Text
                    Else
                        MaxOpCapacity1 = " "
                    End If
                    If txtMaximumExpectedOperatingCapacityMethod9Multi2.Text <> "" Then
                        MaxOpCapacity2 = txtMaximumExpectedOperatingCapacityMethod9Multi2.Text
                    Else
                        MaxOpCapacity2 = " "
                    End If
                    If txtMaximumExpectedOperatingCapacityMethod9Multi3.Text <> "" Then
                        MaxOpCapacity3 = txtMaximumExpectedOperatingCapacityMethod9Multi3.Text
                    Else
                        MaxOpCapacity3 = " "
                    End If
                    If txtMaximumExpectedOperatingCapacityMethod9Multi4.Text <> "" Then
                        MaxOpCapacity4 = txtMaximumExpectedOperatingCapacityMethod9Multi4.Text
                    Else
                        MaxOpCapacity4 = " "
                    End If
                    If txtMaximumExpectedOperatingCapacityMethod9Multi5.Text <> "" Then
                        MaxOpCapacity5 = txtMaximumExpectedOperatingCapacityMethod9Multi5.Text
                    Else
                        MaxOpCapacity5 = " "
                    End If
                    If cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.Text <> "" Then
                        MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.SelectedValue
                        If MaxOpCapacityUnit = "" Then
                            MaxOpCapacityUnit = "00000"
                        End If
                    Else
                        MaxOpCapacityUnit = "00000"
                    End If
                    If txtOperatingCapacityMethod9Multi1.Text <> "" Then
                        OpCapacity1 = txtOperatingCapacityMethod9Multi1.Text
                    Else
                        OpCapacity1 = " "
                    End If
                    If txtOperatingCapacityMethod9Multi2.Text <> "" Then
                        OpCapacity2 = txtOperatingCapacityMethod9Multi2.Text
                    Else
                        OpCapacity2 = " "
                    End If
                    If txtOperatingCapacityMethod9Multi3.Text <> "" Then
                        OpCapacity3 = txtOperatingCapacityMethod9Multi3.Text
                    Else
                        OpCapacity3 = " "
                    End If
                    If txtOperatingCapacityMethod9Multi4.Text <> "" Then
                        OpCapacity4 = txtOperatingCapacityMethod9Multi4.Text
                    Else
                        OpCapacity4 = " "
                    End If
                    If txtOperatingCapacityMethod9Multi5.Text <> "" Then
                        OpCapacity5 = txtOperatingCapacityMethod9Multi5.Text
                    Else
                        OpCapacity5 = " "
                    End If
                    If cboOperatingCapacityUnitsMethod9Multi.Text <> " " And cboOperatingCapacityUnitsMethod9Multi.Text <> "" Then
                        OpCapacityUnit = cboOperatingCapacityUnitsMethod9Multi.SelectedValue
                        If OpCapacityUnit = "" Then
                            OpCapacityUnit = "00000"
                        End If
                    Else
                        OpCapacityUnit = "00000"
                    End If
                    If txtAllowableEmissionRate1Method9Multi.Text <> "" Then
                        AllowableEmiss1 = txtAllowableEmissionRate1Method9Multi.Text
                    Else
                        AllowableEmiss1 = " "
                    End If
                    If txtAllowableEmissionRate2Method9Multi.Text <> "" Then
                        AllowableEmiss2 = txtAllowableEmissionRate2Method9Multi.Text
                    Else
                        AllowableEmiss2 = " "
                    End If
                    If txtAllowableEmissionRate3Method9Multi.Text <> "" Then
                        AllowableEmiss3 = txtAllowableEmissionRate3Method9Multi.Text
                    Else
                        AllowableEmiss3 = " "
                    End If
                    If txtAllowableEmissionRate4Method9Multi.Text <> "" Then
                        AllowableEmiss4 = txtAllowableEmissionRate4Method9Multi.Text
                    Else
                        AllowableEmiss4 = " "
                    End If
                    If txtAllowableEmissionRate5Method9Multi.Text <> "" Then
                        AllowableEmiss5 = txtAllowableEmissionRate5Method9Multi.Text
                    Else
                        AllowableEmiss5 = " "
                    End If
                    If cboAllowableEmissionRateUnitsMethod9Multi.Text <> " " And cboAllowableEmissionRateUnitsMethod9Multi.Text <> "" Then
                        AllowableEmissUnit = cboAllowableEmissionRateUnitsMethod9Multi.SelectedValue
                        If AllowableEmissUnit = "" Then
                            AllowableEmissUnit = "00000"
                        End If
                    Else
                        AllowableEmissUnit = "00000"
                    End If
                    If txt6minuteAvg1AMethod9Multi.Text <> "" Then
                        Opacity1 = txt6minuteAvg1AMethod9Multi.Text
                    Else
                        Opacity1 = " "
                    End If
                    If txt6minuteAvg1BMethod9Multi.Text <> "" Then
                        Opacity2 = txt6minuteAvg1BMethod9Multi.Text
                    Else
                        Opacity2 = " "
                    End If
                    If txt6minuteAvg1CMethod9Multi.Text <> "" Then
                        Opacity3 = txt6minuteAvg1CMethod9Multi.Text
                    Else
                        Opacity3 = " "
                    End If
                    If txt6minuteAvg1DMethod9Multi.Text <> "" Then
                        Opacity4 = txt6minuteAvg1DMethod9Multi.Text
                    Else
                        Opacity4 = " "
                    End If
                    If txt6minuteAvg1EMethod9Multi.Text <> "" Then
                        Opacity5 = txt6minuteAvg1EMethod9Multi.Text
                    Else
                        Opacity5 = " "
                    End If
                    If txtEquipmentItem1AMethod9Multi.Text <> "" Then
                        Equip1 = txtEquipmentItem1AMethod9Multi.Text
                    Else
                        Equip1 = " "
                    End If
                    If txtEquipmentItem1BMethod9Multi.Text <> "" Then
                        Equip2 = txtEquipmentItem1BMethod9Multi.Text
                    Else
                        Equip2 = " "
                    End If
                    If txtEquipmentItem1CMethod9Multi.Text <> "" Then
                        Equip3 = txtEquipmentItem1CMethod9Multi.Text
                    Else
                        Equip3 = " "
                    End If
                    If txtEquipmentItem1DMethod9Multi.Text <> "" Then
                        Equip4 = txtEquipmentItem1DMethod9Multi.Text
                    Else
                        Equip4 = " "
                    End If
                    If txtEquipmentItem1EMethod9Multi.Text <> "" Then
                        Equip5 = txtEquipmentItem1EMethod9Multi.Text
                    Else
                        Equip5 = " "
                    End If
                    If rdbMethod9MultiHighestAvg.Checked = True Then
                        OpacityStandard = "6"
                    Else
                        OpacityStandard = "30"
                    End If
                Case "22"
                    If txtMaximumExpectedOperatingCapacityMethod22.Text <> "" Then
                        MaxOpCapacity1 = txtMaximumExpectedOperatingCapacityMethod22.Text
                    Else
                        MaxOpCapacity1 = " "
                    End If
                    If cboMaximumExpectedOperatingCapacityUnitsMethod22.Text <> " " And cboMaximumExpectedOperatingCapacityUnitsMethod22.Text <> "" Then
                        MaxOpCapacityUnit = cboMaximumExpectedOperatingCapacityUnitsMethod22.SelectedValue
                        If MaxOpCapacityUnit = "" Then
                            MaxOpCapacityUnit = "00000"
                        End If
                    Else
                        MaxOpCapacityUnit = "00000"
                    End If
                    If txtOperatingCapacityMethod22.Text <> "" Then
                        OpCapacity1 = txtOperatingCapacityMethod22.Text
                    Else
                        OpCapacity1 = " "
                    End If
                    If cboOperatingCapacityUnitsMethod22.Text <> " " And cboOperatingCapacityUnitsMethod22.Text <> "" Then
                        OpCapacityUnit = cboOperatingCapacityUnitsMethod22.SelectedValue
                        If OpCapacityUnit = "" Then
                            OpCapacityUnit = "00000"
                        End If
                    Else
                        OpCapacityUnit = "00000"
                    End If
                    If txtAllowableEmissionRateMethod22.Text <> "" Then
                        AllowableEmiss22 = txtAllowableEmissionRateMethod22.Text
                    Else
                        AllowableEmiss22 = " "
                    End If
                    If txtTestDurationMethod22.Text <> "" Then
                        TestDuration = txtTestDurationMethod22.Text
                    Else
                        TestDuration = " "
                    End If
                    If txtAccumulatedEmissionMethod22.Text <> "" Then
                        EmissTime = txtAccumulatedEmissionMethod22.Text
                    Else
                        EmissTime = " "
                    End If
                    OpacityStandard = " "
                Case Else

            End Select

            SQL = "Select strReferencenumber " & _
            "from AIRBRANCH.ISMPReportOpacity " & _
            "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            RecExist = dr.Read
            dr.Close()

            If RecExist = True Then
                SQL = "Update AIRBRANCH.ISMPReportOpacity set " & _
                "strMaxoperatingCapacity1A = '" & MaxOpCapacity1 & "', " & _
                "strMaxOperatingCapacity2A = '" & MaxOpCapacity2 & "', " & _
                "strMaxOperatingCapacity3A = '" & MaxOpCapacity3 & "', " & _
                "strMaxOperatingCapacity4A = '" & MaxOpCapacity4 & "', " & _
                "strMaxOperatingCapacity5A = '" & MaxOpCapacity5 & "', " & _
                "strMaxOperatingCapacityUnit = '" & MaxOpCapacityUnit & "', " & _
                "strOperatingCapacity1A = '" & OpCapacity1 & "', " & _
                "strOperatingCapacity2A = '" & OpCapacity2 & "', " & _
                "strOperatingCapacity3A = '" & OpCapacity3 & "', " & _
                "strOperatingCapacity4A = '" & OpCapacity4 & "', " & _
                "strOperatingCapacity5A = '" & OpCapacity5 & "', " & _
                "strOperatingCapacityUnit = '" & OpCapacityUnit & "', " & _
                "strAllowableEmissionRate1A = '" & AllowableEmiss1 & "', " & _
                "strAllowableEmissionRate2A = '" & AllowableEmiss2 & "', " & _
                "strAllowableEmissionRate3A = '" & AllowableEmiss3 & "', " & _
                "strAllowableEmissionRate4A = '" & AllowableEmiss4 & "', " & _
                "strAllowableEmissionRate5A = '" & AllowableEmiss5 & "', " & _
                "strAllowableEmissionRateUnit = '" & AllowableEmissUnit & "', " & _
                "strallowableEmissionrate22 = '" & AllowableEmiss22 & "', " & _
                "strOpacityTestDuration = '" & TestDuration & "', " & _
                "strAccumulatedEmissionTime = '" & EmissTime & "', " & _
                "strOpacityPointA = '" & Opacity1 & "', " & _
                "strOpacityPointB = '" & Opacity2 & "', " & _
                "strOpacityPointC = '" & Opacity3 & "', " & _
                "strOpacityPointD = '" & Opacity4 & "', " & _
                "strOpacityPointE = '" & Opacity5 & "', " & _
                "strEquipmentItem1 = '" & Equip1 & "', " & _
                "strEquipmentitem2 = '" & Equip2 & "', " & _
                "strEquipmentItem3 = '" & Equip3 & "', " & _
                "strEquipmentItem4 = '" & Equip4 & "', " & _
                "strEquipmentItem5 = '" & Equip5 & "', " & _
                "STROPACITYStandard = '" & OpacityStandard & "' " & _
                "where strReferenceNumber = '" & txtReferenceNumber.Text & "' "
            Else
                SQL = "Insert into AIRBRANCH.ISMPReportOpacity " & _
                 "(strReferenceNumber, " & _
                 "strMaxoperatingCapacity1A,  strMaxOperatingCapacity2A, " & _
                 "strMaxOperatingCapacity3A,  strMaxOperatingCapacity4A,  " & _
                 "strMaxOperatingCapacity5A, " & _
                 "strMaxOperatingCapacityUnit, " & _
                 "strOperatingCapacity1A,  strOperatingCapacity2A, " & _
                 "strOperatingCapacity3A,  strOperatingCapacity4A, " & _
                 "strOperatingCapacity5A, " & _
                 "strOperatingCapacityUnit, " & _
                 "strAllowableEmissionRate1A, strAllowableEmissionRate2A, " & _
                 "strAllowableEmissionRate3A,  strAllowableEmissionRate4A, " & _
                 "strAllowableEmissionRate5A, " & _
                 "strAllowableEmissionRateUnit, " & _
                 "strallowableEmissionrate22, " & _
                 "strOpacityTestDuration,  strAccumulatedEmissionTime, " & _
                 "strOpacityPointA,  strOpacityPointB, " & _
                 "strOpacityPointC,  strOpacityPointD, " & _
                 "strOpacityPointE, " & _
                 "strEquipmentItem1, strEquipmentitem2, " & _
                 "strEquipmentItem3, strEquipmentItem4, " & _
                 "strEquipmentItem5, STROPACITYStandard) " & _
                "values " & _
                "('" & txtReferenceNumber.Text & "', " & _
                "'" & MaxOpCapacity1 & "', '" & MaxOpCapacity2 & "', " & _
                "'" & MaxOpCapacity3 & "', '" & MaxOpCapacity4 & "', " & _
                "'" & MaxOpCapacity5 & "', " & _
                "'" & MaxOpCapacityUnit & "', " & _
                "'" & OpCapacity1 & "', '" & OpCapacity2 & "', " & _
                "'" & OpCapacity3 & "', '" & OpCapacity4 & "', " & _
                "'" & OpCapacity5 & "', " & _
                "'" & OpCapacityUnit & "', " & _
                "'" & AllowableEmiss1 & "', '" & AllowableEmiss2 & "', " & _
                "'" & AllowableEmiss3 & "', '" & AllowableEmiss4 & "', " & _
                "'" & AllowableEmiss5 & "', " & _
                "'" & AllowableEmissUnit & "', '" & AllowableEmiss22 & "', " & _
                "'" & TestDuration & "', '" & EmissTime & "', " & _
                "'" & Opacity1 & "', '" & Opacity2 & "', " & _
                "'" & Opacity3 & "', '" & Opacity4 & "', " & _
                "'" & Opacity5 & "', " & _
                "'" & Equip1 & "', '" & Equip2 & "', " & _
                "'" & Equip3 & "', '" & Equip4 & "', " & _
                "'" & Equip5 & "', '" & OpacityStandard & "') "
            End If

            cmd = New OracleCommand(SQL, CurrentConnection)
            If CurrentConnection.State = ConnectionState.Closed Then
                CurrentConnection.Open()
            End If
            dr = cmd.ExecuteReader
            dr.Close()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub OpenEnforcement()
        Try
            Dim parameters As New Generic.Dictionary(Of String, String)
            parameters("airsnumber") = txtAirsNumber.Text
            If txtTrackingNumber.Text <> "" Then parameters("trackingnumber") = txtTrackingNumber.Text
            OpenSingleForm(SSCPEnforcementSelector, parameters:=parameters, closeFirst:=True)
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        End Try
    End Sub
    Sub LoadConfidentialData(ByVal ConfidentialData As String)
        Try
            If Mid(ConfidentialData, 3, 1) = "1" Then
                txtAirsNumber.BackColor = Color.Tomato
            Else
                txtAirsNumber.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 4, 1) = "1" Then
                txtFacilityName.BackColor = Color.Tomato
            Else
                txtFacilityName.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 5, 1) = "1" Then
                Me.txtFacilityCity.BackColor = Color.Tomato
                'Me.txtFacilityState.BackColor = Color.Tomato
            Else
                Me.txtFacilityCity.BackColor = Color.White
                'Me.txtFacilityState.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 6, 1) = "1" Then
                cboReportType.BackColor = Color.Tomato
            Else
                cboReportType.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 7, 1) = "1" Then
                Me.cboReviewingEngineer.BackColor = Color.Tomato
            Else
                cboReviewingEngineer.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 8, 1) = "1" Then
                Me.cboISMPUnit.BackColor = Color.Tomato
            Else
                cboISMPUnit.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 9, 1) = "1" Then
                Me.txtProgramManager.BackColor = Color.Tomato
            Else
                txtProgramManager.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 10, 1) = "1" Then
                Me.txtUnitManager.BackColor = Color.Tomato
            Else
                txtUnitManager.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 11, 1) = "1" Then
                Me.cboTestNotificationNumber.BackColor = Color.Tomato
            Else
                cboTestNotificationNumber.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 12, 1) = "1" Then
                Me.cboWitnessingEngineer.BackColor = Color.Tomato
            Else
                cboWitnessingEngineer.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 13, 1) = "1" Then
                Me.clbWitnessingEngineers.BackColor = Color.Tomato
            Else
                clbWitnessingEngineers.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 14, 1) = "1" Then
                Me.txtSourceTested.BackColor = Color.Tomato
            Else
                txtSourceTested.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 15, 1) = "1" Then
                Me.cboPollutantDetermined.BackColor = Color.Tomato
            Else
                cboPollutantDetermined.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 16, 1) = "1" Then
                Me.cboMethodDetermined.BackColor = Color.Tomato
            Else
                cboMethodDetermined.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 17, 1) = "1" Then
                Me.cboTestingFirm.BackColor = Color.Tomato
            Else
                cboTestingFirm.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 18, 1) = "1" Then
                Me.cboComplianceStatus.BackColor = Color.Tomato
            Else
                cboComplianceStatus.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 19, 1) = "1" Then
                lblDatesTested.ForeColor = Color.Tomato
            Else
                lblDatesTested.ForeColor = Color.White
            End If
            If Mid(ConfidentialData, 20, 1) = "1" Then
                Me.txtDaysInAPB.BackColor = Color.Tomato
                Me.txtDaysAssigned.BackColor = Color.Tomato
            Else
                txtDaysInAPB.BackColor = Color.White
                txtDaysAssigned.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 21, 1) = "1" Then
                Me.txtReceivedByAPB.BackColor = Color.Tomato
            Else
                txtReceivedByAPB.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 22, 1) = "1" Then
                Me.txtAssignedToEngineer.BackColor = Color.Tomato
            Else
                txtAssignedToEngineer.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 23, 1) = "1" Then
                Me.txtCompleteDate.BackColor = Color.Tomato
            Else
                txtCompleteDate.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 24, 1) = "1" Then
                Me.cboComplianceManager.BackColor = Color.Tomato
            Else
                cboComplianceManager.BackColor = Color.White
            End If
            If Mid(ConfidentialData, 25, 1) = "1" Then
                Me.cboccBox.BackColor = Color.Tomato
            Else
                cboccBox.BackColor = Color.White
            End If
            Select Case Mid(ConfidentialData, 2, 1)
                Case "A"
                    If DocumentType = "002" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityOneStack.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsOneStack.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityOneStack.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityOneStack.BackColor = Color.Tomato
                            cboOperatingCapacityUnitsOneStack.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityOneStack.BackColor = Color.White
                            cboOperatingCapacityUnitsOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits1OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits1OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits2OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits2OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits3OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits3OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationOneStack.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataOneStack.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtPercentAllowableOneStack.BackColor = Color.Tomato
                        Else
                            txtPercentAllowableOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtOtherInformationOneStack.BackColor = Color.Tomato
                        Else
                            txtOtherInformationOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtRunNumOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtGasTempOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtGasMoistOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            Me.txtGasMoistOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtGasFlowACFMOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            txtGasFlowDSCFMOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtPollConcOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtEmissRateOneStackTwoRun1A.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackTwoRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            txtRunNumOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            txtGasTempOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            txtGasMoistOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtGasMoistOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            txtGasFlowACFMOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            txtGasFlowDSCFMOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            txtPollConcOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            txtEmissRateOneStackTwoRun1B.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackTwoRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            Me.cboPollConUnitOneStackTwoRun.BackColor = Color.Tomato
                        Else
                            cboPollConUnitOneStackTwoRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            Me.cboEmissRateUnitOneStackTwoRun.BackColor = Color.Tomato
                        Else
                            cboEmissRateUnitOneStackTwoRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            Me.txtPollConcAvgOneStackTwoRun.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgOneStackTwoRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            Me.txtEmissRateAvgOneStackTwoRun.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgOneStackTwoRun.BackColor = Color.White
                        End If
                    End If
                Case "B"
                    If DocumentType = "003" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityOneStack.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsOneStack.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityOneStack.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityOneStack.BackColor = Color.Tomato
                            cboOperatingCapacityUnitsOneStack.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityOneStack.BackColor = Color.White
                            cboOperatingCapacityUnitsOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits1OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits1OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits2OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits2OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits3OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits3OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationOneStack.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataOneStack.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtPercentAllowableOneStack.BackColor = Color.Tomato
                        Else
                            txtPercentAllowableOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtOtherInformationOneStack.BackColor = Color.Tomato
                        Else
                            txtOtherInformationOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtRunNumOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtGasTempOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtGasMoistOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            Me.txtGasMoistOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtGasFlowACFMOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            txtGasFlowDSCFMOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtPollConcOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtEmissRateOneStackThreeRun1A.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackThreeRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            txtRunNumOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            txtGasTempOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            txtGasMoistOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtGasMoistOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            txtGasFlowACFMOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            txtGasFlowDSCFMOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            txtPollConcOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            txtEmissRateOneStackThreeRun1B.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackThreeRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            txtRunNumOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            txtGasTempOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            txtGasMoistOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtGasMoistOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            txtGasFlowACFMOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 53, 1) = "1" Then
                            txtGasFlowDSCFMOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 54, 1) = "1" Then
                            txtPollConcOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 55, 1) = "1" Then
                            txtEmissRateOneStackThreeRun1C.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackThreeRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 56, 1) = "1" Then
                            Me.cboPollConUnitOneStackThreeRun.BackColor = Color.Tomato
                        Else
                            cboPollConUnitOneStackThreeRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 57, 1) = "1" Then
                            Me.txtPollConcAvgOneStackThreeRun.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgOneStackThreeRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 58, 1) = "1" Then
                            Me.cboEmissRateUnitOneStackThreeRun.BackColor = Color.Tomato
                        Else
                            cboEmissRateUnitOneStackThreeRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 59, 1) = "1" Then
                            Me.txtEmissRateAvgOneStackThreeRun.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgOneStackThreeRun.BackColor = Color.White
                        End If
                    End If
                Case "C"
                    If DocumentType = "004" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityOneStack.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsOneStack.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityOneStack.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityOneStack.BackColor = Color.Tomato
                            cboOperatingCapacityUnitsOneStack.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityOneStack.BackColor = Color.White
                            cboOperatingCapacityUnitsOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits1OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits1OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits2OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits2OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3OneStack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits3OneStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3OneStack.BackColor = Color.White
                            cboAllowableEmissionRateUnits3OneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationOneStack.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataOneStack.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtPercentAllowableOneStack.BackColor = Color.Tomato
                        Else
                            txtPercentAllowableOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtOtherInformationOneStack.BackColor = Color.Tomato
                        Else
                            txtOtherInformationOneStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtRunNumOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtGasTempOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtGasMoistOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            Me.txtGasMoistOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtGasFlowACFMOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            txtGasFlowDSCFMOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtPollConcOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtEmissRateOneStackFourRun1A.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackFourRun1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            txtRunNumOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            txtGasTempOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            txtGasMoistOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtGasMoistOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            txtGasFlowACFMOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            txtGasFlowDSCFMOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            txtPollConcOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            txtEmissRateOneStackFourRun1B.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackFourRun1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            txtRunNumOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            txtGasTempOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            txtGasMoistOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtGasMoistOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            txtGasFlowACFMOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 53, 1) = "1" Then
                            txtGasFlowDSCFMOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 54, 1) = "1" Then
                            txtPollConcOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 55, 1) = "1" Then
                            txtEmissRateOneStackFourRun1C.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackFourRun1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 56, 1) = "1" Then
                            txtRunNumOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtRunNumOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 57, 1) = "1" Then
                            txtGasTempOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtGasTempOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 58, 1) = "1" Then
                            txtGasMoistOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtGasMoistOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 59, 1) = "1" Then
                            txtGasFlowACFMOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 60, 1) = "1" Then
                            txtGasFlowDSCFMOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 61, 1) = "1" Then
                            txtPollConcOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtPollConcOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 62, 1) = "1" Then
                            txtEmissRateOneStackFourRun1D.BackColor = Color.Tomato
                        Else
                            txtEmissRateOneStackFourRun1D.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 63, 1) = "1" Then
                            Me.cboPollConUnitOneStackFourRun.BackColor = Color.Tomato
                        Else
                            cboPollConUnitOneStackFourRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 64, 1) = "1" Then

                            Me.txtPollConcAvgOneStackFourRun.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgOneStackFourRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 65, 1) = "1" Then
                            Me.cboEmissRateUnitOneStackFourRun.BackColor = Color.Tomato
                        Else
                            cboEmissRateUnitOneStackFourRun.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 66, 1) = "1" Then
                            Me.txtEmissRateAvgOneStackFourRun.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgOneStackFourRun.BackColor = Color.White
                        End If
                    End If
                Case "D"
                    If DocumentType = "005" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityTwoStack.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsTwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityTwoStack.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityTwoStack.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsTwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityTwoStack.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1TwoStack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1TwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1TwoStack.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits1TwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2TwoStack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits2TwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2TwoStack.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits2TwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3TwoStack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits3TwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3TwoStack.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits3TwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationTwoStack.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataTwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtControlEquipmentOperatingDataTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtOtherInformationTwoStack.BackColor = Color.Tomato
                        Else
                            txtOtherInformationTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtStackOneNameTwoStackStandard.BackColor = Color.Tomato
                        Else
                            txtStackOneNameTwoStackStandard.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            txtStackTwoNameTwoStackStandard.BackColor = Color.Tomato
                        Else
                            txtStackTwoNameTwoStackStandard.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtRunNumTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtGasTempTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtGasMoistTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtPollConcTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            Me.txtEmissRateTwoStackStandard1A.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackStandard1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            Me.txtRunNumTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            Me.txtGasTempTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtGasMoistTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            Me.txtPollConcTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            Me.txtEmissRateTwoStackStandard1B.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackStandard1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            Me.txtRunNumTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            Me.txtGasTempTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            Me.txtGasMoistTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 53, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 54, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 55, 1) = "1" Then
                            Me.txtPollConcTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 56, 1) = "1" Then
                            Me.txtEmissRateTwoStackStandard1C.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackStandard1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 57, 1) = "1" Then
                            Me.txtRunNumTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 58, 1) = "1" Then
                            Me.txtGasTempTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 59, 1) = "1" Then
                            Me.txtGasMoistTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 60, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 61, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 62, 1) = "1" Then
                            Me.txtPollConcTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 63, 1) = "1" Then
                            Me.txtEmissRateTwoStackStandard2A.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackStandard2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 64, 1) = "1" Then
                            Me.txtRunNumTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 65, 1) = "1" Then
                            Me.txtGasTempTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 66, 1) = "1" Then
                            Me.txtGasMoistTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 67, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 68, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 69, 1) = "1" Then
                            Me.txtPollConcTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 70, 1) = "1" Then
                            Me.txtEmissRateTwoStackStandard2B.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackStandard2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 71, 1) = "1" Then
                            Me.txtRunNumTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackStandard2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 72, 1) = "1" Then
                            Me.txtGasTempTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackStandard2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 73, 1) = "1" Then
                            Me.txtGasMoistTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackStandard2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 74, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackStandard2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 75, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackStandard2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 76, 1) = "1" Then
                            Me.txtPollConcTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackStandard2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 77, 1) = "1" Then
                            Me.txtEmissRateTwoStackStandard2C.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackStandard2C.BackColor = Color.White
                        End If


                        If Mid(ConfidentialData, 78, 1) = "1" Then
                            Me.cboPollConUnitTwoStackStandard.BackColor = Color.Tomato
                        Else
                            cboPollConUnitTwoStackStandard.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 79, 1) = "1" Then
                            Me.txtPollConcAvgTwoStackStandard1.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgTwoStackStandard1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 80, 1) = "1" Then
                            Me.txtPollConcAvgTwoStackStandard2.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgTwoStackStandard2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 81, 1) = "1" Then
                            Me.cboEmissRateUnitTwoStackStandard.BackColor = Color.Tomato
                        Else
                            cboEmissRateUnitTwoStackStandard.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 82, 1) = "1" Then
                            Me.txtEmissRateAvgTwoStackStandard1.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgTwoStackStandard1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 83, 1) = "1" Then
                            Me.txtEmissRateAvgTwoStackStandard2.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgTwoStackStandard2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 84, 1) = "1" Then
                            Me.txtEmissRateTotalTwoStackStandard1.BackColor = Color.Tomato
                        Else
                            txtEmissRateTotalTwoStackStandard1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 85, 1) = "1" Then
                            Me.txtEmissRateTotalTwoStackStandard2.BackColor = Color.Tomato
                        Else
                            txtEmissRateTotalTwoStackStandard2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 86, 1) = "1" Then
                            Me.txtEmissRateTotalTwoStackStandard3.BackColor = Color.Tomato
                        Else
                            txtEmissRateTotalTwoStackStandard3.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 87, 1) = "1" Then
                            Me.txtEmissRateTotalAvgTwoStackStandard.BackColor = Color.Tomato
                        Else
                            txtEmissRateTotalAvgTwoStackStandard.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 88, 1) = "1" Then
                            Me.txtPercentAllowableTwoStack.BackColor = Color.Tomato
                        Else
                            txtPercentAllowableTwoStack.BackColor = Color.White
                        End If
                    End If
                Case "E"
                    If DocumentType = "006" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityTwoStack.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsTwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityTwoStack.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityTwoStack.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsTwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityTwoStack.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1TwoStack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1TwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1TwoStack.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits1TwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2TwoStack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits2TwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2TwoStack.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits2TwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3TwoStack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits3TwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3TwoStack.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits3TwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationTwoStack.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataTwoStack.BackColor = Color.Tomato
                        Else
                            Me.txtControlEquipmentOperatingDataTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtOtherInformationTwoStack.BackColor = Color.Tomato
                        Else
                            txtOtherInformationTwoStack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtStackOneNameTwoStackDRE.BackColor = Color.Tomato
                        Else
                            txtStackOneNameTwoStackDRE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            txtStackTwoNameTwoStackDRE.BackColor = Color.Tomato
                        Else
                            txtStackTwoNameTwoStackDRE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtRunNumTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtGasTempTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtGasMoistTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtPollConcTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            Me.txtEmissRateTwoStackDRE1A.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackDRE1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            Me.txtRunNumTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            Me.txtGasTempTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtGasMoistTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            Me.txtPollConcTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            Me.txtEmissRateTwoStackDRE1B.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackDRE1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            Me.txtRunNumTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            Me.txtGasTempTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            Me.txtGasMoistTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 53, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 54, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 55, 1) = "1" Then
                            Me.txtPollConcTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 56, 1) = "1" Then
                            Me.txtEmissRateTwoStackDRE1C.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackDRE1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 57, 1) = "1" Then
                            Me.txtRunNumTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 58, 1) = "1" Then
                            Me.txtGasTempTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 59, 1) = "1" Then
                            Me.txtGasMoistTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 60, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 61, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 62, 1) = "1" Then
                            Me.txtPollConcTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 63, 1) = "1" Then
                            Me.txtEmissRateTwoStackDRE2A.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackDRE2A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 64, 1) = "1" Then
                            Me.txtRunNumTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 65, 1) = "1" Then
                            Me.txtGasTempTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 66, 1) = "1" Then
                            Me.txtGasMoistTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 67, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 68, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 69, 1) = "1" Then
                            Me.txtPollConcTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 70, 1) = "1" Then
                            Me.txtEmissRateTwoStackDRE2B.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackDRE2B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 71, 1) = "1" Then
                            Me.txtRunNumTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtRunNumTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 72, 1) = "1" Then
                            Me.txtGasTempTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtGasTempTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 73, 1) = "1" Then
                            Me.txtGasMoistTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtGasMoistTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 74, 1) = "1" Then
                            Me.txtGasFlowACFMTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtGasFlowACFMTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 75, 1) = "1" Then
                            Me.txtGasFlowDSCFMTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtGasFlowDSCFMTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 76, 1) = "1" Then
                            Me.txtPollConcTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtPollConcTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 77, 1) = "1" Then
                            Me.txtEmissRateTwoStackDRE2C.BackColor = Color.Tomato
                        Else
                            txtEmissRateTwoStackDRE2C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 78, 1) = "1" Then
                            Me.cboPollConUnitTwoStackDRE.BackColor = Color.Tomato
                        Else
                            cboPollConUnitTwoStackDRE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 79, 1) = "1" Then
                            Me.txtPollConcAvgTwoStackDRE1.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgTwoStackDRE1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 80, 1) = "1" Then
                            Me.txtPollConcAvgTwoStackDRE2.BackColor = Color.Tomato
                        Else
                            Me.txtPollConcAvgTwoStackDRE2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 81, 1) = "1" Then
                            Me.cboEmissRateUnitTwoStackDRE.BackColor = Color.Tomato
                        Else
                            cboEmissRateUnitTwoStackDRE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 82, 1) = "1" Then
                            Me.txtEmissRateAvgTwoStackDRE1.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgTwoStackDRE1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 83, 1) = "1" Then
                            txtEmissRateAvgTwoStackDRE2.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgTwoStackDRE2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 84, 1) = "1" Then
                            Me.txtDestructionEfficiencyTwoStackDRE.BackColor = Color.Tomato
                        Else
                            txtDestructionEfficiencyTwoStackDRE.BackColor = Color.White
                        End If
                    End If
                Case "F"
                    If DocumentType = "007" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityLoadingRack.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsLoadingRack.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityLoadingRack.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityLoadingRack.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsLoadingRack.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityLoadingRack.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1LoadingRack.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1LoadingRack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1LoadingRack.BackColor = Color.White
                            cboAllowableEmissionRateUnits1LoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2LoadingRack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits2LoadingRack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2LoadingRack.BackColor = Color.White
                            cboAllowableEmissionRateUnits2LoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3LoadingRack.BackColor = Color.Tomato
                            cboAllowableEmissionRateUnits3LoadingRack.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3LoadingRack.BackColor = Color.White
                            cboAllowableEmissionRateUnits3LoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationLoadingRack.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataLoadingRack.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtTestDurationLoadingRack.BackColor = Color.Tomato
                            Me.cboTestDurationUnitsLoadingRack.BackColor = Color.Tomato
                        Else
                            txtTestDurationLoadingRack.BackColor = Color.White
                            Me.cboTestDurationUnitsLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtPollConcINLoadingRack.BackColor = Color.Tomato
                            Me.cboPollConUnitINLoadingRack.BackColor = Color.Tomato
                        Else
                            txtPollConcINLoadingRack.BackColor = Color.White
                            cboPollConUnitINLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtPollConcOUTLoadingRack.BackColor = Color.Tomato
                            cboPollConUnitOUTLoadingRack.BackColor = Color.Tomato
                        Else
                            txtPollConcOUTLoadingRack.BackColor = Color.White
                            cboPollConUnitOUTLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtDestructionEfficiencyLoadingRack.BackColor = Color.Tomato
                        Else
                            txtDestructionEfficiencyLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtEmissRateLoadingRack.BackColor = Color.Tomato
                            Me.cboEmissRateUnitLoadingRack.BackColor = Color.Tomato
                        Else
                            txtEmissRateLoadingRack.BackColor = Color.White
                            cboEmissRateUnitLoadingRack.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtOtherInformationLoadingRack.BackColor = Color.Tomato
                        Else
                            txtOtherInformationLoadingRack.BackColor = Color.White
                        End If
                    End If
                Case "G"
                    If DocumentType = "008" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityPond.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsPond.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityPond.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityPond.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsPond.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityPond.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1Pond.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1Pond.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1Pond.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits1Pond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2Pond.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits2Pond.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2Pond.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits2Pond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3Pond.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits3Pond.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3Pond.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits3Pond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationPond.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataPond.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtRunNumPond1A.BackColor = Color.Tomato
                        Else
                            txtRunNumPond1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtPollConcPond1A.BackColor = Color.Tomato
                        Else
                            txtPollConcPond1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtTreatmentRatePond1A.BackColor = Color.Tomato
                        Else
                            txtTreatmentRatePond1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtRunNumPond1B.BackColor = Color.Tomato
                        Else
                            txtRunNumPond1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtPollConcPond1B.BackColor = Color.Tomato
                        Else
                            txtPollConcPond1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtTreatmentRatePond1B.BackColor = Color.Tomato
                        Else
                            txtTreatmentRatePond1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            Me.txtRunNumPond1C.BackColor = Color.Tomato
                        Else
                            txtRunNumPond1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtPollConcPond1C.BackColor = Color.Tomato
                        Else
                            txtPollConcPond1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtTreatmentRatePond1C.BackColor = Color.Tomato
                        Else
                            txtTreatmentRatePond1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            Me.cboPollConUnitPond.BackColor = Color.Tomato
                        Else
                            cboPollConUnitPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            Me.txtPollConcAvgPond.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            Me.cboTreatmentRateUnitPond.BackColor = Color.Tomato
                        Else
                            cboTreatmentRateUnitPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtTreatmentRateAvgPond.BackColor = Color.Tomato
                        Else
                            txtTreatmentRateAvgPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            Me.txtDestructionEfficancyPond.BackColor = Color.Tomato
                        Else
                            txtDestructionEfficancyPond.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            Me.txtOtherInformationPond.BackColor = Color.Tomato
                        Else
                            txtOtherInformationPond.BackColor = Color.White
                        End If
                    End If
                Case "H"
                    If DocumentType = "009" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityGas.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsGas.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityGas.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityGas.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsGas.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityGas.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1Gas.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1Gas.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate1Gas.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits1Gas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate2Gas.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits2Gas.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate2Gas.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits2Gas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate3Gas.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits3Gas.BackColor = Color.Tomato
                        Else
                            Me.txtAllowableEmissionRate3Gas.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits3Gas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtApplicableRegulationGas.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataGas.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtRunNumGas1A.BackColor = Color.Tomato
                        Else
                            txtRunNumGas1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtPollConcGas1A.BackColor = Color.Tomato
                        Else
                            txtPollConcGas1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtEmissRateGas1A.BackColor = Color.Tomato
                        Else
                            txtEmissRateGas1A.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtRunNumGas1B.BackColor = Color.Tomato
                        Else
                            txtRunNumGas1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            txtPollConcGas1B.BackColor = Color.Tomato
                        Else
                            txtPollConcGas1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            txtEmissRateGas1B.BackColor = Color.Tomato
                        Else
                            txtEmissRateGas1B.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            Me.txtRunNumGas1C.BackColor = Color.Tomato
                        Else
                            txtRunNumGas1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            txtPollConcGas1C.BackColor = Color.Tomato
                        Else
                            txtPollConcGas1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            txtEmissRateGas1C.BackColor = Color.Tomato
                        Else
                            txtEmissRateGas1C.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            Me.cboPollConUnitGas.BackColor = Color.Tomato
                        Else
                            cboPollConUnitGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            Me.txtPollConcAvgGas.BackColor = Color.Tomato
                        Else
                            txtPollConcAvgGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            Me.cboEmissRateUnitGas.BackColor = Color.Tomato
                        Else
                            cboEmissRateUnitGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtEmissRateAvgGas.BackColor = Color.Tomato
                        Else
                            txtEmissRateAvgGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            Me.txtPercentAllowableGas.BackColor = Color.Tomato
                        Else
                            txtPercentAllowableGas.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            Me.txtOtherInformationGas.BackColor = Color.Tomato
                        Else
                            txtOtherInformationGas.BackColor = Color.White
                        End If
                    End If
                Case "I"
                    If DocumentType = "010" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityFlare.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsFlare.BackColor = Color.Tomato
                        Else
                            Me.txtMaximumExpectedOperatingCapacityFlare.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityFlare.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsFlare.BackColor = Color.Tomato
                        Else
                            Me.txtOperatingCapacityFlare.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtVelocityFlare.BackColor = Color.Tomato
                        Else
                            txtVelocityFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtHeatContentFlare.BackColor = Color.Tomato
                        Else
                            txtHeatContentFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtApplicableRegulationFlare.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtMonitoringDataFlare.BackColor = Color.Tomato
                        Else
                            txtMonitoringDataFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtHeatingValue1AFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValue1AFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtHeatingValue1AFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValue1AFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtVelocity1AFlare.BackColor = Color.Tomato
                        Else
                            txtVelocity1AFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtHeatingValue1BFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValue1BFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtHeatingValue1BFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValue1BFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtVelocity1BFlare.BackColor = Color.Tomato
                        Else
                            txtVelocity1BFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtHeatingValue1CFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValue1CFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            Me.txtHeatingValue1CFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValue1CFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtVelocity1CFlare.BackColor = Color.Tomato
                        Else
                            txtVelocity1CFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.cboHeatingValueUnits.BackColor = Color.Tomato
                        Else
                            cboHeatingValueUnits.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            Me.txtHeatingValuesAvgFlare.BackColor = Color.Tomato
                        Else
                            txtHeatingValuesAvgFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            Me.cboVelocityUnitsFlare.BackColor = Color.Tomato
                        Else
                            cboVelocityUnitsFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            Me.txtVelocityAvgFlare.BackColor = Color.Tomato
                        Else
                            txtVelocityAvgFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtPercentAllowableFlare.BackColor = Color.Tomato
                        Else
                            txtPercentAllowableFlare.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            Me.txtOtherInformationFlare.BackColor = Color.Tomato
                        Else
                            txtOtherInformationFlare.BackColor = Color.White
                        End If
                    End If
                Case "J"
                    If DocumentType = "011" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtApplicableStandardRata.BackColor = Color.Tomato
                        Else
                            txtApplicableStandardRata.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtApplicableRegulationRata.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationRata.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.cboDilutentMonitoredRata.BackColor = Color.Tomato
                        Else
                            cboDilutentMonitoredRata.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtRefMethodRata1.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtRefMethodRata2.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            txtRefMethodRata3.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata3.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtRefMethodRata4.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata4.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtRefMethodRata5.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata5.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            Me.txtRefMethodRata6.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata6.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            Me.txtRefMethodRata7.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata7.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            Me.txtRefMethodRata8.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata8.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.txtRefMethodRata9.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata9.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtRefMethodRata10.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata10.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            Me.txtRefMethodRata11.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata11.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            Me.txtRefMethodRata12.BackColor = Color.Tomato
                        Else
                            txtRefMethodRata12.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            Me.txtCMSRata1.BackColor = Color.Tomato
                        Else
                            txtCMSRata1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            Me.txtCMSRata2.BackColor = Color.Tomato
                        Else
                            txtCMSRata2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            Me.txtCMSRata3.BackColor = Color.Tomato
                        Else
                            txtCMSRata3.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            Me.txtCMSRata4.BackColor = Color.Tomato
                        Else
                            txtCMSRata4.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtCMSRata5.BackColor = Color.Tomato
                        Else
                            txtCMSRata5.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            Me.txtCMSRata6.BackColor = Color.Tomato
                        Else
                            txtCMSRata6.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            Me.txtCMSRata7.BackColor = Color.Tomato
                        Else
                            txtCMSRata7.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            Me.txtCMSRata8.BackColor = Color.Tomato
                        Else
                            txtCMSRata8.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            Me.txtCMSRata9.BackColor = Color.Tomato
                        Else
                            txtCMSRata9.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            Me.txtCMSRata10.BackColor = Color.Tomato
                        Else
                            txtCMSRata10.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            Me.txtCMSRata11.BackColor = Color.Tomato
                        Else
                            txtCMSRata11.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            Me.txtCMSRata12.BackColor = Color.Tomato
                        Else
                            txtCMSRata12.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 53, 1) = "1" Then
                            Me.cboUnitsRata.BackColor = Color.Tomato
                        Else
                            cboUnitsRata.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 54, 1) = "1" Then
                            txtRelativeAccuracy.BackColor = Color.Tomato
                        Else
                            txtRelativeAccuracy.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 55, 1) = "1" Then
                            txtRefMethodPercentRata.BackColor = Color.Tomato
                            txtApplicableStandardPercentRata.BackColor = Color.Tomato
                            cboDiluentRata.BackColor = Color.Tomato
                            txtPart75Statement.BackColor = Color.Tomato
                        Else
                            txtRefMethodPercentRata.BackColor = Color.White
                            txtApplicableStandardPercentRata.BackColor = Color.White
                            cboDiluentRata.BackColor = Color.White
                            txtPart75Statement.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 56, 1) = "1" Then
                            Me.txtOtherInformationRata.BackColor = Color.Tomato
                        Else
                            txtOtherInformationRata.BackColor = Color.White
                        End If
                    End If
                Case "K"
                    If DocumentType = "012" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtApplicableRegulationMemorandum.BackColor = Color.Tomato
                        Else
                            Me.txtApplicableRegulationMemorandum.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtMemorandumStandard.BackColor = Color.Tomato
                        Else
                            txtMemorandumStandard.BackColor = Color.White
                        End If
                    End If
                Case "L"
                    If DocumentType = "013" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtApplicableRegulationMemorandum.BackColor = Color.Tomato
                        Else
                            Me.txtApplicableRegulationMemorandum.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            txtModelMemorandumToFile.BackColor = Color.Tomato
                        Else
                            txtModelMemorandumToFile.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            txtSerialNumberMemorandumToFile.BackColor = Color.Tomato
                        Else
                            txtSerialNumberMemorandumToFile.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            txtMemorandumToFile.BackColor = Color.Tomato
                        Else
                            txtMemorandumToFile.BackColor = Color.White
                        End If
                    End If
                Case "M"
                    If DocumentType = "014" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod9Multi1.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod9Multi1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod9Multi2.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod9Multi2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod9Multi3.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod9Multi3.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod9Multi4.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod9Multi4.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod9Multi5.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod9Multi5.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.BackColor = Color.Tomato
                        Else
                            cboMaximumExpectedOperatingCapacityUnitsMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtOperatingCapacityMethod9Multi1.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod9Multi1.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            txtOperatingCapacityMethod9Multi2.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod9Multi2.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 34, 1) = "1" Then
                            txtOperatingCapacityMethod9Multi3.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod9Multi3.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 35, 1) = "1" Then
                            txtOperatingCapacityMethod9Multi4.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod9Multi4.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 36, 1) = "1" Then
                            txtOperatingCapacityMethod9Multi5.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod9Multi5.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 37, 1) = "1" Then
                            Me.cboOperatingCapacityUnitsMethod9Multi.BackColor = Color.Tomato
                        Else
                            cboOperatingCapacityUnitsMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 38, 1) = "1" Then
                            Me.txtAllowableEmissionRate1Method9Multi.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate1Method9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 39, 1) = "1" Then
                            txtAllowableEmissionRate2Method9Multi.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate2Method9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 40, 1) = "1" Then
                            txtAllowableEmissionRate3Method9Multi.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate3Method9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 41, 1) = "1" Then
                            txtAllowableEmissionRate4Method9Multi.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate4Method9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 42, 1) = "1" Then
                            txtAllowableEmissionRate5Method9Multi.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate5Method9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 43, 1) = "1" Then
                            cboAllowableEmissionRateUnitsMethod9Multi.BackColor = Color.Tomato
                        Else
                            cboAllowableEmissionRateUnitsMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 44, 1) = "1" Then
                            txtApplicableRegulationMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 45, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 46, 1) = "1" Then
                            txt6minuteAvg1AMethod9Multi.BackColor = Color.Tomato
                        Else
                            txt6minuteAvg1AMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 47, 1) = "1" Then
                            txt6minuteAvg1BMethod9Multi.BackColor = Color.Tomato
                        Else
                            txt6minuteAvg1BMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 48, 1) = "1" Then
                            txt6minuteAvg1CMethod9Multi.BackColor = Color.Tomato
                        Else
                            txt6minuteAvg1CMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 49, 1) = "1" Then
                            txt6minuteAvg1DMethod9Multi.BackColor = Color.Tomato
                        Else
                            txt6minuteAvg1DMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 50, 1) = "1" Then
                            txt6minuteAvg1EMethod9Multi.BackColor = Color.Tomato
                        Else
                            txt6minuteAvg1EMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 51, 1) = "1" Then
                            Me.txtOtherInformationMethod9.BackColor = Color.Tomato
                        Else
                            txtOtherInformationMethod9.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 52, 1) = "1" Then
                            txtEquipmentItem1AMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtEquipmentItem1AMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 53, 1) = "1" Then
                            txtEquipmentItem1BMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtEquipmentItem1BMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 54, 1) = "1" Then
                            txtEquipmentItem1CMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtEquipmentItem1CMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 55, 1) = "1" Then
                            txtEquipmentItem1DMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtEquipmentItem1DMethod9Multi.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 56, 1) = "1" Then
                            txtEquipmentItem1EMethod9Multi.BackColor = Color.Tomato
                        Else
                            txtEquipmentItem1EMethod9Multi.BackColor = Color.White
                        End If
                    End If
                Case "N"
                    If DocumentType = "015" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod22.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsMethod22.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod22.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsMethod22.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityMethod22.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsMethod22.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod22.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsMethod22.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            txtAllowableEmissionRateMethod22.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRateMethod22.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            txtApplicableRegulationMethod22.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationMethod22.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtTestDurationMethod22.BackColor = Color.Tomato
                        Else
                            txtTestDurationMethod22.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtAccumulatedEmissionMethod22.BackColor = Color.Tomato
                        Else
                            txtAccumulatedEmissionMethod22.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtOtherInformationMethod22.BackColor = Color.Tomato
                        Else
                            txtOtherInformationMethod22.BackColor = Color.White
                        End If
                    End If
                Case "O"
                    If DocumentType = "016" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMethod9Single.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsMethod9Single.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMethod9Single.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsMethod9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtOperatingCapacityMethod9Single.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsMethod9Single.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMethod9Single.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsMethod9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtAllowableEmissionRate1Method9Single.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1Method9Single.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate1Method9Single.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits1Method9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtApplicableRegulationMethod9Single.BackColor = Color.Tomato
                        Else
                            txtApplicableRegulationMethod9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataMethod9Single.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataMethod9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtTestDurationMethod9Single.BackColor = Color.Tomato
                        Else
                            txtTestDurationMethod9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtOpacityMethod9Single.BackColor = Color.Tomato
                        Else
                            txtOpacityMethod9Single.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtOtherInformationMethod9.BackColor = Color.Tomato
                        Else
                            txtOtherInformationMethod9.BackColor = Color.White
                        End If
                    End If
                Case "P"
                Case "Q"
                    If DocumentType = "018" Then
                        If Mid(ConfidentialData, 26, 1) = "1" Then
                            Me.txtApplicableRegulationMemorandum.BackColor = Color.Tomato
                        Else
                            Me.txtApplicableRegulationMemorandum.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 27, 1) = "1" Then
                            Me.txtMaximumExpectedOperatingCapacityMemorandumPTE.BackColor = Color.Tomato
                            Me.cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.BackColor = Color.Tomato
                        Else
                            txtMaximumExpectedOperatingCapacityMemorandumPTE.BackColor = Color.White
                            Me.cboMaximumExpectedOperatingCapacityUnitsMemorandumPTE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 28, 1) = "1" Then
                            Me.txtOperatingCapacityMemorandumPTE.BackColor = Color.Tomato
                            Me.cboOperatingCapacityUnitsMemorandumPTE.BackColor = Color.Tomato
                        Else
                            txtOperatingCapacityMemorandumPTE.BackColor = Color.White
                            Me.cboOperatingCapacityUnitsMemorandumPTE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 29, 1) = "1" Then
                            Me.txtAllowableEmissionRate1MemorandumPTE.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits1MemorandumPTE.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate1MemorandumPTE.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits1MemorandumPTE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 30, 1) = "1" Then
                            Me.txtAllowableEmissionRate2MemorandumPTE.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits2MemorandumPTE.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate2MemorandumPTE.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits2MemorandumPTE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 31, 1) = "1" Then
                            Me.txtAllowableEmissionRate3MemorandumPTE.BackColor = Color.Tomato
                            Me.cboAllowableEmissionRateUnits3MemorandumPTE.BackColor = Color.Tomato
                        Else
                            txtAllowableEmissionRate3MemorandumPTE.BackColor = Color.White
                            Me.cboAllowableEmissionRateUnits3MemorandumPTE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 32, 1) = "1" Then
                            Me.txtControlEquipmentOperatingDataMemorandumPTE.BackColor = Color.Tomato
                        Else
                            txtControlEquipmentOperatingDataMemorandumPTE.BackColor = Color.White
                        End If
                        If Mid(ConfidentialData, 33, 1) = "1" Then
                            Me.txtMemorandumPTE.BackColor = Color.Tomato
                        Else
                            Me.txtMemorandumPTE.BackColor = Color.White
                        End If
                    End If
                Case Else

            End Select


        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
#End Region
    Private Sub chbEventComplete_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chbEventComplete.CheckedChanged
        Try
            If chbEventComplete.Checked = True Then
                DTPEventCompleteDate.Enabled = True
                CloseSSCPWork(True)
            Else
                DTPEventCompleteDate.Enabled = False
                CloseSSCPWork(False)
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub chbTestReportChangeDueDate_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chbTestReportChangeDueDate.CheckedChanged
        Try
            If chbTestReportChangeDueDate.Checked = True Then
                DTPTestReportDueDate.Visible = True
            Else
                DTPTestReportDueDate.Visible = False
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub chbAcknoledgmentLetterSent_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chbAcknoledgmentLetterSent.CheckedChanged
        Try
            If chbAcknoledgmentLetterSent.Checked = True Then
                DTPAcknoledgmentLetterSent.Visible = True
            Else
                DTPAcknoledgmentLetterSent.Visible = False
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
#Region "Tool Strip Buttons"
    Private Sub tsbSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbSave.Click
        Try
            If AccountFormAccess(69, 3) = "1" Then
                SaveStackTest()
                If cboTestNotificationNumber.Text = "" Or cboTestNotificationNumber.Text = " " Then
                    MsgBox("WARNING" & vbCrLf & "Please associate a test notification number to this Test Report before you close out the report.", _
                       MsgBoxStyle.Exclamation, "Test Report")
                End If
                MsgBox("Save Complete", MsgBoxStyle.Information, "Performance Test Report")
            End If

            If AccountFormAccess(69, 4) = "1" Then
                SaveSSCPWork()
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub tsbSearch_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbSearch.Click
        Try

            Dim result As String

            result = InputBox("Type in the Reference Number you are searching for.")

            If result <> "" Then
                ClearAll()
                txtReferenceNumber.Text = result

                If txtReferenceNumber.Text = "" Then
                    DefaultTabs()
                Else
                    LoadData(txtReferenceNumber.Text)
                    LoadTestNotifications()
                    If cboTestNotificationNumber.Text <> " " And cboTestNotificationNumber.Text <> "" Then
                        llbTestNotifiactionNumber.Visible = True
                        labTestNotificationNumber.Visible = False
                    Else
                        llbTestNotifiactionNumber.Visible = False
                        labTestNotificationNumber.Visible = True
                    End If
                End If
                LoadUserPermissions()
                If TCDocumentTypes.TabPages.Contains(TPSSCPWork) Then
                    LoadSSCPData()
                End If
                If txtReferenceNumber.Text <> "" Then
                    Me.Text = txtReferenceNumber.Text & " - Performance Monitoring Test Reports"
                Else
                    Me.Text = "Performance Monitoring Test Reports"
                End If
            End If
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub tsbPrePopulate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbPrePopulate.Click
        Try
            PrePopulate()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub tsbPrint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbPrint.Click
        Try
            PrintOut = Nothing
            If PrintOut Is Nothing Then PrintOut = New IAIPPrintOut
            PrintOut.txtPrintType.Text = "ISMPTestReport"
            PrintOut.txtReferenceNumber.Text = Me.txtReferenceNumber.Text
            PrintOut.Show()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub tsbClear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbClear.Click
        Try

            ClearAll()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub tsbResize_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbResize.Click
        Try
            SCTestReports.ToggleSplitterDistance(190, 385)
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        End Try
    End Sub
    Private Sub tsbMemo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbMemo.Click
        Try
            OpenMemo()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub tsbTestLogLink_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbTestLogLink.Click
        Try
            If Not IsNothing(ISMPNotificationLogForm) Then
                ISMPNotificationLogForm.txtTestNotificationNumber.Text = cboTestNotificationNumber.Text
                ISMPNotificationLogForm.Show()
            Else
                ISMPNotificationLogForm = Nothing
                If ISMPNotificationLogForm Is Nothing Then ISMPNotificationLogForm = New ISMPNotificationLog
                ISMPNotificationLogForm.txtTestNotificationNumber.Text = cboTestNotificationNumber.Text
                ISMPNotificationLogForm.Show()
            End If
            ISMPNotificationLogForm.LoadTestNotification()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub tsbDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbDelete.Click
        Try
            ClearTestReportData()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
#End Region
#Region "Main Menu"
    Private Sub mmiSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiSave.Click
        Try
            If AccountFormAccess(69, 3) = "1" Then
                SaveStackTest()
                If cboTestNotificationNumber.Text = "" Or cboTestNotificationNumber.Text = " " Then
                    MsgBox("WARNING" & vbCrLf & "Please associate a test notification number to this Test Report before you close out the report.", _
                       MsgBoxStyle.Exclamation, "Test Report")
                End If
                MsgBox("Save Complete", MsgBoxStyle.Information, "Performance Test Report")
            End If

            If AccountFormAccess(69, 4) = "1" Then
                SaveSSCPWork()
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub mmiBack_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiClose.Click
        Me.Dispose()
    End Sub
    Private Sub mmiOpenTestLogNotification_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiOpenTestLogNotification.Click
        Try
            If Not IsNothing(ISMPNotificationLogForm) Then
                ISMPNotificationLogForm.txtTestNotificationNumber.Text = cboTestNotificationNumber.Text
                ISMPNotificationLogForm.Show()
            Else
                ISMPNotificationLogForm = Nothing
                If ISMPNotificationLogForm Is Nothing Then ISMPNotificationLogForm = New ISMPNotificationLog
                ISMPNotificationLogForm.txtTestNotificationNumber.Text = cboTestNotificationNumber.Text
                ISMPNotificationLogForm.Show()
            End If
            ISMPNotificationLogForm.LoadTestNotification()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub mmiPrePopulate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiPrePopulate.Click
        Try
            PrePopulate()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
#End Region
#Region "Math Functions"
    Private Sub txtPollConcOneStackTwoRun1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackTwoRun1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackTwoRun1A.Text) And IsNumeric(txtPollConcOneStackTwoRun1B.Text) Then
                temp = (CDec(txtPollConcOneStackTwoRun1A.Text) + CDec(txtPollConcOneStackTwoRun1B.Text))
                temp = temp / 2
            Else
                If IsNumeric(txtPollConcOneStackTwoRun1A.Text) And Not (IsNumeric(txtPollConcOneStackTwoRun1B.Text)) Then
                    temp = CDec(txtPollConcOneStackTwoRun1A.Text)
                Else
                    If Not (IsNumeric(txtPollConcOneStackTwoRun1A.Text)) And IsNumeric(txtPollConcOneStackTwoRun1B.Text) Then
                        temp = CDec(txtPollConcOneStackTwoRun1B.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackTwoRun1A.Text.Length, txtPollConcOneStackTwoRun1B.Text.Length)
            txtPollConcAvgOneStackTwoRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            ' ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcOneStackTwoRun1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackTwoRun1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackTwoRun1A.Text) And IsNumeric(txtPollConcOneStackTwoRun1B.Text) Then
                temp = (CDec(txtPollConcOneStackTwoRun1A.Text) + CDec(txtPollConcOneStackTwoRun1B.Text))
                temp = temp / 2
            Else
                If IsNumeric(txtPollConcOneStackTwoRun1A.Text) And Not (IsNumeric(txtPollConcOneStackTwoRun1B.Text)) Then
                    temp = CDec(txtPollConcOneStackTwoRun1A.Text)
                Else
                    If Not (IsNumeric(txtPollConcOneStackTwoRun1A.Text)) And IsNumeric(txtPollConcOneStackTwoRun1B.Text) Then
                        temp = CDec(txtPollConcOneStackTwoRun1B.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackTwoRun1A.Text.Length, txtPollConcOneStackTwoRun1B.Text.Length)
            txtPollConcAvgOneStackTwoRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtEmissRateOneStackTwoRun1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackTwoRun1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackTwoRun1A.Text) And IsNumeric(txtEmissRateOneStackTwoRun1B.Text) Then
                temp = (CDec(txtEmissRateOneStackTwoRun1A.Text) + CDec(txtEmissRateOneStackTwoRun1B.Text)) / 2
            Else
                If IsNumeric(txtEmissRateOneStackTwoRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackTwoRun1B.Text)) Then
                    temp = CDec(txtEmissRateOneStackTwoRun1A.Text)
                Else
                    If Not (IsNumeric(txtEmissRateOneStackTwoRun1A.Text)) And IsNumeric(txtEmissRateOneStackTwoRun1B.Text) Then
                        temp = txtEmissRateOneStackTwoRun1B.Text
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackTwoRun1A.Text.Length, txtEmissRateOneStackTwoRun1B.Text.Length)
            txtEmissRateAvgOneStackTwoRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateOneStackTwoRun1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackTwoRun1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackTwoRun1A.Text) And IsNumeric(txtEmissRateOneStackTwoRun1B.Text) Then
                temp = (CDec(txtEmissRateOneStackTwoRun1A.Text) + CDec(txtEmissRateOneStackTwoRun1B.Text)) / 2
            Else
                If IsNumeric(txtEmissRateOneStackTwoRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackTwoRun1B.Text)) Then
                    temp = CDec(txtEmissRateOneStackTwoRun1A.Text)
                Else
                    If txtEmissRateOneStackTwoRun1A.Text = "" And txtEmissRateOneStackTwoRun1B.Text <> "" Then
                        temp = txtEmissRateOneStackTwoRun1B.Text
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackTwoRun1A.Text.Length, txtEmissRateOneStackTwoRun1B.Text.Length)
            txtEmissRateAvgOneStackTwoRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcOneStackThreeRun1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackThreeRun1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                  And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1B.Text) + CDec(txtPollConcOneStackThreeRun1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) And _
                    Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                    temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                        And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                        temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                              And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                            temp = (CDec(txtPollConcOneStackThreeRun1B.Text) + CDec(txtPollConcOneStackThreeRun1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                                  And Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                                temp = CDec(txtPollConcOneStackThreeRun1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                                    temp = CDec(txtPollConcOneStackThreeRun1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                                        temp = CDec(txtPollConcOneStackThreeRun1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackThreeRun1A.Text.Length, txtPollConcOneStackThreeRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackThreeRun1C.Text.Length)
            txtPollConcAvgOneStackThreeRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcOneStackThreeRun1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackThreeRun1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                 And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1B.Text) + CDec(txtPollConcOneStackThreeRun1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) And _
                    Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                    temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                        And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                        temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                              And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                            temp = (CDec(txtPollConcOneStackThreeRun1B.Text) + CDec(txtPollConcOneStackThreeRun1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                                  And Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                                temp = CDec(txtPollConcOneStackThreeRun1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                                    temp = CDec(txtPollConcOneStackThreeRun1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                                        temp = CDec(txtPollConcOneStackThreeRun1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If


            x = Math.Max(txtPollConcOneStackThreeRun1A.Text.Length, txtPollConcOneStackThreeRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackThreeRun1C.Text.Length)
            txtPollConcAvgOneStackThreeRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcOneStackThreeRun1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackThreeRun1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                   And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1B.Text) + CDec(txtPollConcOneStackThreeRun1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) And _
                    Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                    temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                        And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                        temp = (CDec(txtPollConcOneStackThreeRun1A.Text) + CDec(txtPollConcOneStackThreeRun1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                              And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                            temp = (CDec(txtPollConcOneStackThreeRun1B.Text) + CDec(txtPollConcOneStackThreeRun1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcOneStackThreeRun1A.Text) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                                  And Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                                temp = CDec(txtPollConcOneStackThreeRun1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And IsNumeric(txtPollConcOneStackThreeRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackThreeRun1C.Text)) Then
                                    temp = CDec(txtPollConcOneStackThreeRun1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcOneStackThreeRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackThreeRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackThreeRun1C.Text) Then
                                        temp = CDec(txtPollConcOneStackThreeRun1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackThreeRun1A.Text.Length, txtPollConcOneStackThreeRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackThreeRun1C.Text.Length)
            txtPollConcAvgOneStackThreeRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtEmissRateOneStackThreeRun1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackThreeRun1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                 And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1B.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                   And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                    temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                         And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                        temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                              And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                            temp = (CDec(txtEmissRateOneStackThreeRun1B.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                                  And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                                temp = CDec(txtEmissRateOneStackThreeRun1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                                    temp = CDec(txtEmissRateOneStackThreeRun1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                                          And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                                        temp = CDec(txtEmissRateOneStackThreeRun1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackThreeRun1A.Text.Length, txtEmissRateOneStackThreeRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackThreeRun1C.Text.Length)
            txtEmissRateAvgOneStackThreeRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateOneStackThreeRun1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackThreeRun1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                 And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1B.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                   And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                    temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                         And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                        temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                              And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                            temp = (CDec(txtEmissRateOneStackThreeRun1B.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                                  And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                                temp = CDec(txtEmissRateOneStackThreeRun1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                                    temp = CDec(txtEmissRateOneStackThreeRun1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                                          And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                                        temp = CDec(txtEmissRateOneStackThreeRun1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackThreeRun1A.Text.Length, txtEmissRateOneStackThreeRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackThreeRun1C.Text.Length)
            txtEmissRateAvgOneStackThreeRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateOneStackThreeRun1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackThreeRun1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                 And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1B.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                   And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                    temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                         And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                        temp = (CDec(txtEmissRateOneStackThreeRun1A.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                              And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                            temp = (CDec(txtEmissRateOneStackThreeRun1B.Text) + CDec(txtEmissRateOneStackThreeRun1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateOneStackThreeRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                                  And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                                temp = CDec(txtEmissRateOneStackThreeRun1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And IsNumeric(txtEmissRateOneStackThreeRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackThreeRun1C.Text)) Then
                                    temp = CDec(txtEmissRateOneStackThreeRun1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateOneStackThreeRun1A.Text)) And Not (IsNumeric(txtEmissRateOneStackThreeRun1B.Text)) _
                                          And IsNumeric(txtEmissRateOneStackThreeRun1C.Text) Then
                                        temp = CDec(txtEmissRateOneStackThreeRun1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackThreeRun1A.Text.Length, txtEmissRateOneStackThreeRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackThreeRun1C.Text.Length)
            txtEmissRateAvgOneStackThreeRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcOneStackFourRun1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackFourRun1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + _
                        CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                          And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                              And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                    CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                        CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text)) / 2
                                Else
                                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                    Else
                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                               And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtPollConcOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtPollConcOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtPollConcOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                                        temp = txtPollConcOneStackFourRun1D.Text
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackFourRun1A.Text.Length, txtPollConcOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1D.Text.Length)
            txtPollConcAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcOneStackFourRun1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackFourRun1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
               And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + _
                        CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                          And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                              And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                    CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                        CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text)) / 2
                                Else
                                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                    Else
                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                               And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtPollConcOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtPollConcOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtPollConcOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                                        temp = txtPollConcOneStackFourRun1D.Text
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackFourRun1A.Text.Length, txtPollConcOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1D.Text.Length)
            txtPollConcAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcOneStackFourRun1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackFourRun1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
             And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + _
                        CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                          And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                              And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                    CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                        CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text)) / 2
                                Else
                                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                    Else
                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                               And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtPollConcOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtPollConcOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtPollConcOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                                        temp = txtPollConcOneStackFourRun1D.Text
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackFourRun1A.Text.Length, txtPollConcOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1D.Text.Length)
            txtPollConcAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcOneStackFourRun1D_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcOneStackFourRun1D.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
               And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + _
                        CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                          And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                              And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                    CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text) + _
                                        CDec(txtPollConcOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtPollConcOneStackFourRun1A.Text) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1B.Text)) / 2
                                Else
                                    If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                        temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                    Else
                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                            temp = (CDec(txtPollConcOneStackFourRun1A.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtPollConcOneStackFourRun1C.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtPollConcOneStackFourRun1B.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtPollConcOneStackFourRun1C.Text) And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtPollConcOneStackFourRun1C.Text) + CDec(txtPollConcOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtPollConcOneStackFourRun1A.Text) And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                               And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtPollConcOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtPollConcOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtPollConcOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1C.Text) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtPollConcOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtPollConcOneStackFourRun1A.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1B.Text)) _
                                                                      And Not (IsNumeric(txtPollConcOneStackFourRun1C.Text)) _
                                                                      And IsNumeric(txtPollConcOneStackFourRun1D.Text) Then
                                                                        temp = txtPollConcOneStackFourRun1D.Text
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcOneStackFourRun1A.Text.Length, txtPollConcOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtPollConcOneStackFourRun1D.Text.Length)
            txtPollConcAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtEmissRateOneStackFourRun1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackFourRun1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                    And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                         And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + _
                                CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                             And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                    CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text)) / 2
                                Else
                                    If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                          And txtEmissRateOneStackFourRun1C.Text <> "" And txtEmissRateOneStackFourRun1D.Text = "" Then
                                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                    Else
                                        If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                              And txtEmissRateOneStackFourRun1C.Text = "" And txtEmissRateOneStackFourRun1D.Text <> "" Then
                                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                      And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                          And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtEmissRateOneStackFourRun1C.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtEmissRateOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtEmissRateOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                     And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtEmissRateOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                       And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                                        temp = CDec(txtEmissRateOneStackFourRun1D.Text)
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackFourRun1A.Text.Length, txtEmissRateOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1D.Text.Length)
            txtEmissRateAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateOneStackFourRun1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackFourRun1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
              And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                    And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                         And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + _
                                CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                             And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                    CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text)) / 2
                                Else
                                    If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                          And txtEmissRateOneStackFourRun1C.Text <> "" And txtEmissRateOneStackFourRun1D.Text = "" Then
                                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                    Else
                                        If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                              And txtEmissRateOneStackFourRun1C.Text = "" And txtEmissRateOneStackFourRun1D.Text <> "" Then
                                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                      And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                          And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtEmissRateOneStackFourRun1C.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtEmissRateOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtEmissRateOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                     And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtEmissRateOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                       And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                                        temp = CDec(txtEmissRateOneStackFourRun1D.Text)
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackFourRun1A.Text.Length, txtEmissRateOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1D.Text.Length)
            txtEmissRateAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateOneStackFourRun1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackFourRun1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
              And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                    And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                         And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + _
                                CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                             And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                    CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text)) / 2
                                Else
                                    If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                          And txtEmissRateOneStackFourRun1C.Text <> "" And txtEmissRateOneStackFourRun1D.Text = "" Then
                                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                    Else
                                        If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                              And txtEmissRateOneStackFourRun1C.Text = "" And txtEmissRateOneStackFourRun1D.Text <> "" Then
                                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                      And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                          And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtEmissRateOneStackFourRun1C.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtEmissRateOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtEmissRateOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                     And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtEmissRateOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                       And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                                        temp = CDec(txtEmissRateOneStackFourRun1D.Text)
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackFourRun1A.Text.Length, txtEmissRateOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1D.Text.Length)
            txtEmissRateAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateOneStackFourRun1D_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateOneStackFourRun1D.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 4
            Else
                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                    And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 3
                Else
                    If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                         And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text) + _
                                CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                    Else
                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                             And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                    CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                        Else
                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text) + _
                                        CDec(txtEmissRateOneStackFourRun1D.Text)) / 3
                            Else
                                If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                    temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1B.Text)) / 2
                                Else
                                    If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                          And txtEmissRateOneStackFourRun1C.Text <> "" And txtEmissRateOneStackFourRun1D.Text = "" Then
                                        temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                    Else
                                        If txtEmissRateOneStackFourRun1A.Text <> "" And txtEmissRateOneStackFourRun1B.Text = "" _
                                              And txtEmissRateOneStackFourRun1C.Text = "" And txtEmissRateOneStackFourRun1D.Text <> "" Then
                                            temp = (CDec(txtEmissRateOneStackFourRun1A.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                        Else
                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                  And IsNumeric(txtEmissRateOneStackFourRun1C.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1C.Text)) / 2
                                            Else
                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                      And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                      And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                    temp = (CDec(txtEmissRateOneStackFourRun1B.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                Else
                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                          And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                          And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                        temp = (CDec(txtEmissRateOneStackFourRun1C.Text) + CDec(txtEmissRateOneStackFourRun1D.Text)) / 2
                                                    Else
                                                        If IsNumeric(txtEmissRateOneStackFourRun1A.Text) And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                              And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                            temp = CDec(txtEmissRateOneStackFourRun1A.Text)
                                                        Else
                                                            If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                  And IsNumeric(txtEmissRateOneStackFourRun1B.Text) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                  And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                temp = CDec(txtEmissRateOneStackFourRun1B.Text)
                                                            Else
                                                                If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                     And IsNumeric(txtEmissRateOneStackFourRun1C.Text) _
                                                                     And Not (IsNumeric(txtEmissRateOneStackFourRun1D.Text)) Then
                                                                    temp = CDec(txtEmissRateOneStackFourRun1C.Text)
                                                                Else
                                                                    If Not (IsNumeric(txtEmissRateOneStackFourRun1A.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1B.Text)) _
                                                                       And Not (IsNumeric(txtEmissRateOneStackFourRun1C.Text)) _
                                                                       And IsNumeric(txtEmissRateOneStackFourRun1D.Text) Then
                                                                        temp = CDec(txtEmissRateOneStackFourRun1D.Text)
                                                                    Else
                                                                        temp = 0
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateOneStackFourRun1A.Text.Length, txtEmissRateOneStackFourRun1B.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1C.Text.Length)
            x = Math.Max(x, txtEmissRateOneStackFourRun1D.Text.Length)
            txtEmissRateAvgOneStackFourRun.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcPond1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcPond1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcPond1A.Text) And IsNumeric(txtPollConcPond1B.Text) And IsNumeric(txtPollConcPond1C.Text) Then
                temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1B.Text) + CDec(txtPollConcPond1C.Text)) / 3
            Else
                If IsNumeric(txtPollConcPond1A.Text) And IsNumeric(txtPollConcPond1B.Text) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                    temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcPond1A.Text) And Not (IsNumeric(txtPollConcPond1B.Text)) And IsNumeric(txtPollConcPond1C.Text) Then
                        temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcPond1A.Text)) And IsNumeric(txtPollConcPond1B.Text) And IsNumeric(txtPollConcPond1C.Text) Then
                            temp = (CDec(txtPollConcPond1B.Text) + CDec(txtPollConcPond1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcPond1A.Text) And Not (IsNumeric(txtPollConcPond1B.Text)) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                                temp = CDec(txtPollConcPond1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcPond1A.Text)) And IsNumeric(txtPollConcPond1B.Text) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                                    temp = txtPollConcPond1B.Text
                                Else
                                    If Not (IsNumeric(txtPollConcPond1A.Text)) And Not (IsNumeric(txtPollConcPond1B.Text)) _
                                        And IsNumeric(txtPollConcPond1C.Text) Then
                                        temp = txtPollConcPond1C.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcPond1A.Text.Length, txtPollConcPond1B.Text.Length)
            x = Math.Max(x, txtPollConcPond1C.Text.Length)
            txtPollConcAvgPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcPond1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcPond1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcPond1A.Text) And IsNumeric(txtPollConcPond1B.Text) And IsNumeric(txtPollConcPond1C.Text) Then
                temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1B.Text) + CDec(txtPollConcPond1C.Text)) / 3
            Else
                If IsNumeric(txtPollConcPond1A.Text) And IsNumeric(txtPollConcPond1B.Text) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                    temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcPond1A.Text) And Not (IsNumeric(txtPollConcPond1B.Text)) And IsNumeric(txtPollConcPond1C.Text) Then
                        temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcPond1A.Text)) And IsNumeric(txtPollConcPond1B.Text) And IsNumeric(txtPollConcPond1C.Text) Then
                            temp = (CDec(txtPollConcPond1B.Text) + CDec(txtPollConcPond1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcPond1A.Text) And Not (IsNumeric(txtPollConcPond1B.Text)) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                                temp = CDec(txtPollConcPond1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcPond1A.Text)) And IsNumeric(txtPollConcPond1B.Text) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                                    temp = txtPollConcPond1B.Text
                                Else
                                    If Not (IsNumeric(txtPollConcPond1A.Text)) And Not (IsNumeric(txtPollConcPond1B.Text)) _
                                        And IsNumeric(txtPollConcPond1C.Text) Then
                                        temp = txtPollConcPond1C.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcPond1A.Text.Length, txtPollConcPond1B.Text.Length)
            x = Math.Max(x, txtPollConcPond1C.Text.Length)
            txtPollConcAvgPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcPond1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcPond1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcPond1A.Text) And IsNumeric(txtPollConcPond1B.Text) And IsNumeric(txtPollConcPond1C.Text) Then
                temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1B.Text) + CDec(txtPollConcPond1C.Text)) / 3
            Else
                If IsNumeric(txtPollConcPond1A.Text) And IsNumeric(txtPollConcPond1B.Text) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                    temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcPond1A.Text) And Not (IsNumeric(txtPollConcPond1B.Text)) And IsNumeric(txtPollConcPond1C.Text) Then
                        temp = (CDec(txtPollConcPond1A.Text) + CDec(txtPollConcPond1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcPond1A.Text)) And IsNumeric(txtPollConcPond1B.Text) And IsNumeric(txtPollConcPond1C.Text) Then
                            temp = (CDec(txtPollConcPond1B.Text) + CDec(txtPollConcPond1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcPond1A.Text) And Not (IsNumeric(txtPollConcPond1B.Text)) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                                temp = CDec(txtPollConcPond1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcPond1A.Text)) And IsNumeric(txtPollConcPond1B.Text) And Not (IsNumeric(txtPollConcPond1C.Text)) Then
                                    temp = txtPollConcPond1B.Text
                                Else
                                    If Not (IsNumeric(txtPollConcPond1A.Text)) And Not (IsNumeric(txtPollConcPond1B.Text)) _
                                        And IsNumeric(txtPollConcPond1C.Text) Then
                                        temp = txtPollConcPond1C.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcPond1A.Text.Length, txtPollConcPond1B.Text.Length)
            x = Math.Max(x, txtPollConcPond1C.Text.Length)
            txtPollConcAvgPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtTreatmentRatePond1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtTreatmentRatePond1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtTreatmentRatePond1A.Text) And IsNumeric(txtTreatmentRatePond1B.Text) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1B.Text) + CDec(txtTreatmentRatePond1C.Text)) / 3
            Else
                If IsNumeric(txtTreatmentRatePond1A.Text) And IsNumeric(txtTreatmentRatePond1B.Text) And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                    temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1B.Text)) / 2
                Else
                    If IsNumeric(txtTreatmentRatePond1A.Text) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                        temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And IsNumeric(txtTreatmentRatePond1B.Text) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                            temp = (CDec(txtTreatmentRatePond1B.Text) + CDec(txtTreatmentRatePond1C.Text)) / 2
                        Else
                            If IsNumeric(txtTreatmentRatePond1A.Text) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) _
                                 And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                                temp = CDec(txtTreatmentRatePond1A.Text)
                            Else
                                If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And IsNumeric(txtTreatmentRatePond1B.Text) _
                                    And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                                    temp = txtTreatmentRatePond1B.Text
                                Else
                                    If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) _
                                       And IsNumeric(txtTreatmentRatePond1C.Text) Then
                                        temp = txtTreatmentRatePond1C.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtTreatmentRatePond1A.Text.Length, txtTreatmentRatePond1B.Text.Length)
            x = Math.Max(x, txtTreatmentRatePond1C.Text.Length)
            txtTreatmentRateAvgPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtTreatmentRatePond1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtTreatmentRatePond1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtTreatmentRatePond1A.Text) And IsNumeric(txtTreatmentRatePond1B.Text) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1B.Text) + CDec(txtTreatmentRatePond1C.Text)) / 3
            Else
                If IsNumeric(txtTreatmentRatePond1A.Text) And IsNumeric(txtTreatmentRatePond1B.Text) And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                    temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1B.Text)) / 2
                Else
                    If IsNumeric(txtTreatmentRatePond1A.Text) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                        temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And IsNumeric(txtTreatmentRatePond1B.Text) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                            temp = (CDec(txtTreatmentRatePond1B.Text) + CDec(txtTreatmentRatePond1C.Text)) / 2
                        Else
                            If IsNumeric(txtTreatmentRatePond1A.Text) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) _
                                 And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                                temp = CDec(txtTreatmentRatePond1A.Text)
                            Else
                                If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And IsNumeric(txtTreatmentRatePond1B.Text) _
                                    And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                                    temp = txtTreatmentRatePond1B.Text
                                Else
                                    If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) _
                                       And IsNumeric(txtTreatmentRatePond1C.Text) Then
                                        temp = txtTreatmentRatePond1C.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtTreatmentRatePond1A.Text.Length, txtTreatmentRatePond1B.Text.Length)
            x = Math.Max(x, txtTreatmentRatePond1C.Text.Length)
            txtTreatmentRateAvgPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtTreatmentRatePond1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtTreatmentRatePond1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtTreatmentRatePond1A.Text) And IsNumeric(txtTreatmentRatePond1B.Text) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1B.Text) + CDec(txtTreatmentRatePond1C.Text)) / 3
            Else
                If IsNumeric(txtTreatmentRatePond1A.Text) And IsNumeric(txtTreatmentRatePond1B.Text) And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                    temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1B.Text)) / 2
                Else
                    If IsNumeric(txtTreatmentRatePond1A.Text) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                        temp = (CDec(txtTreatmentRatePond1A.Text) + CDec(txtTreatmentRatePond1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And IsNumeric(txtTreatmentRatePond1B.Text) And IsNumeric(txtTreatmentRatePond1C.Text) Then
                            temp = (CDec(txtTreatmentRatePond1B.Text) + CDec(txtTreatmentRatePond1C.Text)) / 2
                        Else
                            If IsNumeric(txtTreatmentRatePond1A.Text) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) _
                                 And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                                temp = CDec(txtTreatmentRatePond1A.Text)
                            Else
                                If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And IsNumeric(txtTreatmentRatePond1B.Text) _
                                    And Not (IsNumeric(txtTreatmentRatePond1C.Text)) Then
                                    temp = txtTreatmentRatePond1B.Text
                                Else
                                    If Not (IsNumeric(txtTreatmentRatePond1A.Text)) And Not (IsNumeric(txtTreatmentRatePond1B.Text)) _
                                       And IsNumeric(txtTreatmentRatePond1C.Text) Then
                                        temp = txtTreatmentRatePond1C.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtTreatmentRatePond1A.Text.Length, txtTreatmentRatePond1B.Text.Length)
            x = Math.Max(x, txtTreatmentRatePond1C.Text.Length)
            txtTreatmentRateAvgPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtTreatmentRateAvgPond_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtTreatmentRateAvgPond.TextChanged
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcAvgPond.Text) And IsNumeric(txtTreatmentRateAvgPond.Text) Then
                temp = ((CDec(txtTreatmentRateAvgPond.Text)) / (CDec(txtPollConcAvgPond.Text))) * 100
            Else
                temp = 0
            End If

            x = Math.Max(txtPollConcAvgPond.Text.Length, txtTreatmentRateAvgPond.Text.Length)
            txtDestructionEfficancyPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcAvgPond_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcAvgPond.TextChanged
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcAvgPond.Text) And IsNumeric(txtTreatmentRateAvgPond.Text) Then
                temp = ((CDec(txtTreatmentRateAvgPond.Text)) / (CDec(txtPollConcAvgPond.Text))) * 100
            Else
                temp = 0
            End If

            x = Math.Max(txtPollConcAvgPond.Text.Length, txtTreatmentRateAvgPond.Text.Length)
            txtDestructionEfficancyPond.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcGas1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcGas1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcGas1A.Text) And IsNumeric(txtPollConcGas1B.Text) And IsNumeric(txtPollConcGas1C.Text) Then
                temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1B.Text) + CDec(txtPollConcGas1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcGas1A.Text) And IsNumeric(txtPollConcGas1B.Text) And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                    temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcGas1A.Text) And Not (IsNumeric(txtPollConcGas1B.Text)) And IsNumeric(txtPollConcGas1C.Text) Then
                        temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcGas1A.Text)) And IsNumeric(txtPollConcGas1B.Text) _
                              And IsNumeric(txtPollConcGas1C.Text) Then
                            temp = (CDec(txtPollConcGas1B.Text) + CDec(txtPollConcGas1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcGas1A.Text) And Not (IsNumeric(txtPollConcGas1B.Text)) _
                                  And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                                temp = CDec(txtPollConcGas1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcGas1A.Text)) And IsNumeric(txtPollConcGas1B.Text) _
                                      And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                                    temp = CDec(txtPollConcGas1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcGas1A.Text)) And Not (IsNumeric(txtPollConcGas1B.Text)) _
                                          And IsNumeric(txtPollConcGas1C.Text) Then
                                        temp = CDec(txtPollConcGas1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcGas1A.Text.Length, txtPollConcGas1B.Text.Length)
            x = Math.Max(x, txtPollConcGas1C.Text.Length)
            txtPollConcAvgGas.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcGas1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcGas1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcGas1A.Text) And IsNumeric(txtPollConcGas1B.Text) And IsNumeric(txtPollConcGas1C.Text) Then
                temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1B.Text) + CDec(txtPollConcGas1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcGas1A.Text) And IsNumeric(txtPollConcGas1B.Text) And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                    temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcGas1A.Text) And Not (IsNumeric(txtPollConcGas1B.Text)) And IsNumeric(txtPollConcGas1C.Text) Then
                        temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcGas1A.Text)) And IsNumeric(txtPollConcGas1B.Text) _
                              And IsNumeric(txtPollConcGas1C.Text) Then
                            temp = (CDec(txtPollConcGas1B.Text) + CDec(txtPollConcGas1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcGas1A.Text) And Not (IsNumeric(txtPollConcGas1B.Text)) _
                                  And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                                temp = CDec(txtPollConcGas1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcGas1A.Text)) And IsNumeric(txtPollConcGas1B.Text) _
                                      And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                                    temp = CDec(txtPollConcGas1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcGas1A.Text)) And Not (IsNumeric(txtPollConcGas1B.Text)) _
                                          And IsNumeric(txtPollConcGas1C.Text) Then
                                        temp = CDec(txtPollConcGas1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcGas1A.Text.Length, txtPollConcGas1B.Text.Length)
            x = Math.Max(x, txtPollConcGas1C.Text.Length)
            txtPollConcAvgGas.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcGas1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcGas1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcGas1A.Text) And IsNumeric(txtPollConcGas1B.Text) And IsNumeric(txtPollConcGas1C.Text) Then
                temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1B.Text) + CDec(txtPollConcGas1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcGas1A.Text) And IsNumeric(txtPollConcGas1B.Text) And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                    temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcGas1A.Text) And Not (IsNumeric(txtPollConcGas1B.Text)) And IsNumeric(txtPollConcGas1C.Text) Then
                        temp = (CDec(txtPollConcGas1A.Text) + CDec(txtPollConcGas1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcGas1A.Text)) And IsNumeric(txtPollConcGas1B.Text) _
                              And IsNumeric(txtPollConcGas1C.Text) Then
                            temp = (CDec(txtPollConcGas1B.Text) + CDec(txtPollConcGas1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcGas1A.Text) And Not (IsNumeric(txtPollConcGas1B.Text)) _
                                  And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                                temp = CDec(txtPollConcGas1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcGas1A.Text)) And IsNumeric(txtPollConcGas1B.Text) _
                                      And Not (IsNumeric(txtPollConcGas1C.Text)) Then
                                    temp = CDec(txtPollConcGas1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcGas1A.Text)) And Not (IsNumeric(txtPollConcGas1B.Text)) _
                                          And IsNumeric(txtPollConcGas1C.Text) Then
                                        temp = CDec(txtPollConcGas1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcGas1A.Text.Length, txtPollConcGas1B.Text.Length)
            x = Math.Max(x, txtPollConcGas1C.Text.Length)
            txtPollConcAvgGas.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateGas1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateGas1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateGas1A.Text) And IsNumeric(txtEmissRateGas1B.Text) And IsNumeric(txtEmissRateGas1C.Text) Then
                temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1B.Text) + CDec(txtEmissRateGas1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateGas1A.Text) And IsNumeric(txtEmissRateGas1B.Text) And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                    temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateGas1A.Text) And Not (IsNumeric(txtEmissRateGas1B.Text)) And IsNumeric(txtEmissRateGas1C.Text) Then
                        temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateGas1A.Text)) And IsNumeric(txtEmissRateGas1B.Text) _
                              And IsNumeric(txtEmissRateGas1C.Text) Then
                            temp = (CDec(txtEmissRateGas1B.Text) + CDec(txtEmissRateGas1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateGas1A.Text) And Not (IsNumeric(txtEmissRateGas1B.Text)) _
                                  And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                                temp = CDec(txtEmissRateGas1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateGas1A.Text)) And IsNumeric(txtEmissRateGas1B.Text) _
                                      And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                                    temp = CDec(txtEmissRateGas1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateGas1A.Text)) And Not (IsNumeric(txtEmissRateGas1B.Text)) _
                                          And IsNumeric(txtEmissRateGas1C.Text) Then
                                        temp = CDec(txtEmissRateGas1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateGas1A.Text.Length, txtEmissRateGas1B.Text.Length)
            x = Math.Max(x, txtEmissRateGas1C.Text.Length)
            txtEmissRateAvgGas.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateGas1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateGas1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateGas1A.Text) And IsNumeric(txtEmissRateGas1B.Text) And IsNumeric(txtEmissRateGas1C.Text) Then
                temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1B.Text) + CDec(txtEmissRateGas1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateGas1A.Text) And IsNumeric(txtEmissRateGas1B.Text) And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                    temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateGas1A.Text) And Not (IsNumeric(txtEmissRateGas1B.Text)) And IsNumeric(txtEmissRateGas1C.Text) Then
                        temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateGas1A.Text)) And IsNumeric(txtEmissRateGas1B.Text) _
                              And IsNumeric(txtEmissRateGas1C.Text) Then
                            temp = (CDec(txtEmissRateGas1B.Text) + CDec(txtEmissRateGas1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateGas1A.Text) And Not (IsNumeric(txtEmissRateGas1B.Text)) _
                                  And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                                temp = CDec(txtEmissRateGas1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateGas1A.Text)) And IsNumeric(txtEmissRateGas1B.Text) _
                                      And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                                    temp = CDec(txtEmissRateGas1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateGas1A.Text)) And Not (IsNumeric(txtEmissRateGas1B.Text)) _
                                          And IsNumeric(txtEmissRateGas1C.Text) Then
                                        temp = CDec(txtEmissRateGas1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateGas1A.Text.Length, txtEmissRateGas1B.Text.Length)
            x = Math.Max(x, txtEmissRateGas1C.Text.Length)
            txtEmissRateAvgGas.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateGas1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateGas1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateGas1A.Text) And IsNumeric(txtEmissRateGas1B.Text) And IsNumeric(txtEmissRateGas1C.Text) Then
                temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1B.Text) + CDec(txtEmissRateGas1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateGas1A.Text) And IsNumeric(txtEmissRateGas1B.Text) And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                    temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateGas1A.Text) And Not (IsNumeric(txtEmissRateGas1B.Text)) And IsNumeric(txtEmissRateGas1C.Text) Then
                        temp = (CDec(txtEmissRateGas1A.Text) + CDec(txtEmissRateGas1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateGas1A.Text)) And IsNumeric(txtEmissRateGas1B.Text) _
                              And IsNumeric(txtEmissRateGas1C.Text) Then
                            temp = (CDec(txtEmissRateGas1B.Text) + CDec(txtEmissRateGas1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateGas1A.Text) And Not (IsNumeric(txtEmissRateGas1B.Text)) _
                                  And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                                temp = CDec(txtEmissRateGas1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateGas1A.Text)) And IsNumeric(txtEmissRateGas1B.Text) _
                                      And Not (IsNumeric(txtEmissRateGas1C.Text)) Then
                                    temp = CDec(txtEmissRateGas1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateGas1A.Text)) And Not (IsNumeric(txtEmissRateGas1B.Text)) _
                                          And IsNumeric(txtEmissRateGas1C.Text) Then
                                        temp = CDec(txtEmissRateGas1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateGas1A.Text.Length, txtEmissRateGas1B.Text.Length)
            x = Math.Max(x, txtEmissRateGas1C.Text.Length)
            txtEmissRateAvgGas.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtHeatingValue1AFlare_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHeatingValue1AFlare.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtHeatingValue1AFlare.Text) And IsNumeric(txtHeatingValue1BFlare.Text) And IsNumeric(txtHeatingValue1CFlare.Text) Then
                temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1BFlare.Text) + CDec(txtHeatingValue1CFlare.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtHeatingValue1AFlare.Text) And IsNumeric(txtHeatingValue1BFlare.Text) And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                    temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1BFlare.Text)) / 2
                Else
                    If IsNumeric(txtHeatingValue1AFlare.Text) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) And IsNumeric(txtHeatingValue1CFlare.Text) Then
                        temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1CFlare.Text)) / 2
                    Else
                        If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And IsNumeric(txtHeatingValue1BFlare.Text) _
                              And IsNumeric(txtHeatingValue1CFlare.Text) Then
                            temp = (CDec(txtHeatingValue1BFlare.Text) + CDec(txtHeatingValue1CFlare.Text)) / 2
                        Else
                            If IsNumeric(txtHeatingValue1AFlare.Text) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) _
                                  And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                                temp = CDec(txtHeatingValue1AFlare.Text)
                            Else
                                If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And IsNumeric(txtHeatingValue1BFlare.Text) _
                                      And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                                    temp = CDec(txtHeatingValue1BFlare.Text)
                                Else
                                    If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) _
                                          And IsNumeric(txtHeatingValue1CFlare.Text) Then
                                        temp = CDec(txtHeatingValue1CFlare.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtHeatingValue1AFlare.Text.Length, txtHeatingValue1BFlare.Text.Length)
            x = Math.Max(x, txtHeatingValue1CFlare.Text.Length)
            txtHeatingValuesAvgFlare.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtHeatingValue1BFlare_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHeatingValue1BFlare.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtHeatingValue1AFlare.Text) And IsNumeric(txtHeatingValue1BFlare.Text) And IsNumeric(txtHeatingValue1CFlare.Text) Then
                temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1BFlare.Text) + CDec(txtHeatingValue1CFlare.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtHeatingValue1AFlare.Text) And IsNumeric(txtHeatingValue1BFlare.Text) And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                    temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1BFlare.Text)) / 2
                Else
                    If IsNumeric(txtHeatingValue1AFlare.Text) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) And IsNumeric(txtHeatingValue1CFlare.Text) Then
                        temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1CFlare.Text)) / 2
                    Else
                        If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And IsNumeric(txtHeatingValue1BFlare.Text) _
                              And IsNumeric(txtHeatingValue1CFlare.Text) Then
                            temp = (CDec(txtHeatingValue1BFlare.Text) + CDec(txtHeatingValue1CFlare.Text)) / 2
                        Else
                            If IsNumeric(txtHeatingValue1AFlare.Text) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) _
                                  And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                                temp = CDec(txtHeatingValue1AFlare.Text)
                            Else
                                If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And IsNumeric(txtHeatingValue1BFlare.Text) _
                                      And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                                    temp = CDec(txtHeatingValue1BFlare.Text)
                                Else
                                    If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) _
                                          And IsNumeric(txtHeatingValue1CFlare.Text) Then
                                        temp = CDec(txtHeatingValue1CFlare.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtHeatingValue1AFlare.Text.Length, txtHeatingValue1BFlare.Text.Length)
            x = Math.Max(x, txtHeatingValue1CFlare.Text.Length)
            txtHeatingValuesAvgFlare.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtHeatingValue1CFlare_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtHeatingValue1CFlare.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtHeatingValue1AFlare.Text) And IsNumeric(txtHeatingValue1BFlare.Text) And IsNumeric(txtHeatingValue1CFlare.Text) Then
                temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1BFlare.Text) + CDec(txtHeatingValue1CFlare.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtHeatingValue1AFlare.Text) And IsNumeric(txtHeatingValue1BFlare.Text) And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                    temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1BFlare.Text)) / 2
                Else
                    If IsNumeric(txtHeatingValue1AFlare.Text) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) And IsNumeric(txtHeatingValue1CFlare.Text) Then
                        temp = (CDec(txtHeatingValue1AFlare.Text) + CDec(txtHeatingValue1CFlare.Text)) / 2
                    Else
                        If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And IsNumeric(txtHeatingValue1BFlare.Text) _
                              And IsNumeric(txtHeatingValue1CFlare.Text) Then
                            temp = (CDec(txtHeatingValue1BFlare.Text) + CDec(txtHeatingValue1CFlare.Text)) / 2
                        Else
                            If IsNumeric(txtHeatingValue1AFlare.Text) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) _
                                  And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                                temp = CDec(txtHeatingValue1AFlare.Text)
                            Else
                                If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And IsNumeric(txtHeatingValue1BFlare.Text) _
                                      And Not (IsNumeric(txtHeatingValue1CFlare.Text)) Then
                                    temp = CDec(txtHeatingValue1BFlare.Text)
                                Else
                                    If Not (IsNumeric(txtHeatingValue1AFlare.Text)) And Not (IsNumeric(txtHeatingValue1BFlare.Text)) _
                                          And IsNumeric(txtHeatingValue1CFlare.Text) Then
                                        temp = CDec(txtHeatingValue1CFlare.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtHeatingValue1AFlare.Text.Length, txtHeatingValue1BFlare.Text.Length)
            x = Math.Max(x, txtHeatingValue1CFlare.Text.Length)
            txtHeatingValuesAvgFlare.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtVelocity1AFlare_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtVelocity1AFlare.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtVelocity1AFlare.Text) And IsNumeric(txtVelocity1BFlare.Text) And IsNumeric(txtVelocity1CFlare.Text) Then
                temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1BFlare.Text) + CDec(txtVelocity1CFlare.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtVelocity1AFlare.Text) And IsNumeric(txtVelocity1BFlare.Text) And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                    temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1BFlare.Text)) / 2
                Else
                    If IsNumeric(txtVelocity1AFlare.Text) And Not (IsNumeric(txtVelocity1BFlare.Text)) And IsNumeric(txtVelocity1CFlare.Text) Then
                        temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1CFlare.Text)) / 2
                    Else
                        If Not (IsNumeric(txtVelocity1AFlare.Text)) And IsNumeric(txtVelocity1BFlare.Text) _
                              And IsNumeric(txtVelocity1CFlare.Text) Then
                            temp = (CDec(txtVelocity1BFlare.Text) + CDec(txtVelocity1CFlare.Text)) / 2
                        Else
                            If IsNumeric(txtVelocity1AFlare.Text) And Not (IsNumeric(txtVelocity1BFlare.Text)) _
                                  And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                                temp = CDec(txtVelocity1AFlare.Text)
                            Else
                                If Not (IsNumeric(txtVelocity1AFlare.Text)) And IsNumeric(txtVelocity1BFlare.Text) _
                                      And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                                    temp = CDec(txtVelocity1BFlare.Text)
                                Else
                                    If Not (IsNumeric(txtVelocity1AFlare.Text)) And Not (IsNumeric(txtVelocity1BFlare.Text)) _
                                          And IsNumeric(txtVelocity1CFlare.Text) Then
                                        temp = CDec(txtVelocity1CFlare.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtVelocity1AFlare.Text.Length, txtVelocity1BFlare.Text.Length)
            x = Math.Max(x, txtVelocity1CFlare.Text.Length)
            txtVelocityAvgFlare.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtVelocity1BFlare_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtVelocity1BFlare.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtVelocity1AFlare.Text) And IsNumeric(txtVelocity1BFlare.Text) And IsNumeric(txtVelocity1CFlare.Text) Then
                temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1BFlare.Text) + CDec(txtVelocity1CFlare.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtVelocity1AFlare.Text) And IsNumeric(txtVelocity1BFlare.Text) And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                    temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1BFlare.Text)) / 2
                Else
                    If IsNumeric(txtVelocity1AFlare.Text) And Not (IsNumeric(txtVelocity1BFlare.Text)) And IsNumeric(txtVelocity1CFlare.Text) Then
                        temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1CFlare.Text)) / 2
                    Else
                        If Not (IsNumeric(txtVelocity1AFlare.Text)) And IsNumeric(txtVelocity1BFlare.Text) _
                              And IsNumeric(txtVelocity1CFlare.Text) Then
                            temp = (CDec(txtVelocity1BFlare.Text) + CDec(txtVelocity1CFlare.Text)) / 2
                        Else
                            If IsNumeric(txtVelocity1AFlare.Text) And Not (IsNumeric(txtVelocity1BFlare.Text)) _
                                  And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                                temp = CDec(txtVelocity1AFlare.Text)
                            Else
                                If Not (IsNumeric(txtVelocity1AFlare.Text)) And IsNumeric(txtVelocity1BFlare.Text) _
                                      And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                                    temp = CDec(txtVelocity1BFlare.Text)
                                Else
                                    If Not (IsNumeric(txtVelocity1AFlare.Text)) And Not (IsNumeric(txtVelocity1BFlare.Text)) _
                                          And IsNumeric(txtVelocity1CFlare.Text) Then
                                        temp = CDec(txtVelocity1CFlare.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtVelocity1AFlare.Text.Length, txtVelocity1BFlare.Text.Length)
            x = Math.Max(x, txtVelocity1CFlare.Text.Length)
            txtVelocityAvgFlare.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtVelocity1CFlare_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtVelocity1CFlare.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtVelocity1AFlare.Text) And IsNumeric(txtVelocity1BFlare.Text) And IsNumeric(txtVelocity1CFlare.Text) Then
                temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1BFlare.Text) + CDec(txtVelocity1CFlare.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtVelocity1AFlare.Text) And IsNumeric(txtVelocity1BFlare.Text) And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                    temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1BFlare.Text)) / 2
                Else
                    If IsNumeric(txtVelocity1AFlare.Text) And Not (IsNumeric(txtVelocity1BFlare.Text)) And IsNumeric(txtVelocity1CFlare.Text) Then
                        temp = (CDec(txtVelocity1AFlare.Text) + CDec(txtVelocity1CFlare.Text)) / 2
                    Else
                        If Not (IsNumeric(txtVelocity1AFlare.Text)) And IsNumeric(txtVelocity1BFlare.Text) _
                              And IsNumeric(txtVelocity1CFlare.Text) Then
                            temp = (CDec(txtVelocity1BFlare.Text) + CDec(txtVelocity1CFlare.Text)) / 2
                        Else
                            If IsNumeric(txtVelocity1AFlare.Text) And Not (IsNumeric(txtVelocity1BFlare.Text)) _
                                  And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                                temp = CDec(txtVelocity1AFlare.Text)
                            Else
                                If Not (IsNumeric(txtVelocity1AFlare.Text)) And IsNumeric(txtVelocity1BFlare.Text) _
                                      And Not (IsNumeric(txtVelocity1CFlare.Text)) Then
                                    temp = CDec(txtVelocity1BFlare.Text)
                                Else
                                    If Not (IsNumeric(txtVelocity1AFlare.Text)) And Not (IsNumeric(txtVelocity1BFlare.Text)) _
                                          And IsNumeric(txtVelocity1CFlare.Text) Then
                                        temp = CDec(txtVelocity1CFlare.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtVelocity1AFlare.Text.Length, txtVelocity1BFlare.Text.Length)
            x = Math.Max(x, txtVelocity1CFlare.Text.Length)
            txtVelocityAvgFlare.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Sub RATACalc()
        Try
            Dim RunNum As Integer = 0
            Dim Ref1 As Decimal = 0
            Dim Ref2 As Decimal = 0
            Dim Ref3 As Decimal = 0
            Dim Ref4 As Decimal = 0
            Dim Ref5 As Decimal = 0
            Dim Ref6 As Decimal = 0
            Dim Ref7 As Decimal = 0
            Dim Ref8 As Decimal = 0
            Dim Ref9 As Decimal = 0
            Dim Ref10 As Decimal = 0
            Dim Ref11 As Decimal = 0
            Dim Ref12 As Decimal = 0
            Dim CMS1 As Decimal = 0
            Dim CMS2 As Decimal = 0
            Dim CMS3 As Decimal = 0
            Dim CMS4 As Decimal = 0
            Dim CMS5 As Decimal = 0
            Dim CMS6 As Decimal = 0
            Dim CMS7 As Decimal = 0
            Dim CMS8 As Decimal = 0
            Dim CMS9 As Decimal = 0
            Dim CMS10 As Decimal = 0
            Dim CMS11 As Decimal = 0
            Dim CMS12 As Decimal = 0
            Dim RefSum As Decimal = 0
            Dim CMSSum As Decimal = 0
            Dim DiffSum As Decimal = 0
            Dim MeanDiff As Decimal = 0
            Dim StrDev As Double
            Dim tValue As Double
            Dim ConfidenceCoeff As Double
            Dim RelAccuracy As Double
            Dim x As Integer = 0

            If txtRefMethodRata1.Text <> "" And IsNumeric(txtRefMethodRata1.Text) And chbOmitRunRata1.Checked = False Then
                Ref1 = txtRefMethodRata1.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata1.Text.Length)
            Else
                Ref1 = 0
            End If
            If txtRefMethodRata2.Text <> "" And IsNumeric(txtRefMethodRata2.Text) And chbOmitRunRata2.Checked = False Then
                Ref2 = txtRefMethodRata2.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata2.Text.Length)
            Else
                Ref2 = 0
            End If
            If txtRefMethodRata3.Text <> "" And IsNumeric(txtRefMethodRata3.Text) And chbOmitRunRata3.Checked = False Then
                Ref3 = txtRefMethodRata3.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata3.Text.Length)
            Else
                Ref3 = 0
            End If
            If txtRefMethodRata4.Text <> "" And IsNumeric(txtRefMethodRata4.Text) And chbOmitRunRata4.Checked = False Then
                Ref4 = txtRefMethodRata4.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata4.Text.Length)
            Else
                Ref4 = 0
            End If
            If txtRefMethodRata5.Text <> "" And IsNumeric(txtRefMethodRata5.Text) And chbOmitRunRata5.Checked = False Then
                Ref5 = txtRefMethodRata5.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata5.Text.Length)
            Else
                Ref5 = 0
            End If
            If txtRefMethodRata6.Text <> "" And IsNumeric(txtRefMethodRata6.Text) And chbOmitRunRata6.Checked = False Then
                Ref6 = txtRefMethodRata6.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata6.Text.Length)
            Else
                Ref6 = 0
            End If
            If txtRefMethodRata7.Text <> "" And IsNumeric(txtRefMethodRata7.Text) And chbOmitRunRata7.Checked = False Then
                Ref7 = txtRefMethodRata7.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata7.Text.Length)
            Else
                Ref7 = 0
            End If
            If txtRefMethodRata8.Text <> "" And IsNumeric(txtRefMethodRata8.Text) And chbOmitRunRata8.Checked = False Then
                Ref8 = txtRefMethodRata8.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata8.Text.Length)
            Else
                Ref8 = 0
            End If
            If txtRefMethodRata9.Text <> "" And IsNumeric(txtRefMethodRata9.Text) And chbOmitRunRata9.Checked = False Then
                Ref9 = txtRefMethodRata9.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata9.Text.Length)
            Else
                Ref9 = 0
            End If
            If txtRefMethodRata10.Text <> "" And IsNumeric(txtRefMethodRata10.Text) And chbOmitRunRata10.Checked = False Then
                Ref10 = txtRefMethodRata10.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata10.Text.Length)
            Else
                Ref10 = 0
            End If
            If txtRefMethodRata11.Text <> "" And IsNumeric(txtRefMethodRata11.Text) And chbOmitRunRata11.Checked = False Then
                Ref11 = txtRefMethodRata11.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata11.Text.Length)
            Else
                Ref11 = 0
            End If
            If txtRefMethodRata12.Text <> "" And IsNumeric(txtRefMethodRata12.Text) And chbOmitRunRata12.Checked = False Then
                Ref12 = txtRefMethodRata12.Text
                RunNum += 1
                x = Math.Max(x, txtRefMethodRata12.Text.Length)
            Else
                Ref12 = 0
            End If
            If txtCMSRata1.Text <> "" And IsNumeric(txtCMSRata1.Text) And chbOmitRunRata1.Checked = False Then
                CMS1 = txtCMSRata1.Text
                x = Math.Max(x, txtCMSRata1.Text.Length)
            Else
                CMS1 = 0
            End If

            If txtCMSRata2.Text <> "" And IsNumeric(txtCMSRata2.Text) And chbOmitRunRata2.Checked = False Then
                CMS2 = txtCMSRata2.Text
                x = Math.Max(x, txtCMSRata2.Text.Length)
            Else
                CMS2 = 0
            End If
            If txtCMSRata3.Text <> "" And IsNumeric(txtCMSRata3.Text) And chbOmitRunRata3.Checked = False Then
                CMS3 = txtCMSRata3.Text
                x = Math.Max(x, txtCMSRata3.Text.Length)
            Else
                CMS3 = 0
            End If
            If txtCMSRata4.Text <> "" And IsNumeric(txtCMSRata4.Text) And chbOmitRunRata4.Checked = False Then
                CMS4 = txtCMSRata4.Text
                x = Math.Max(x, txtCMSRata4.Text.Length)
            Else
                CMS4 = 0
            End If
            If txtCMSRata5.Text <> "" And IsNumeric(txtCMSRata5.Text) And chbOmitRunRata5.Checked = False Then
                CMS5 = txtCMSRata5.Text
                x = Math.Max(x, txtCMSRata5.Text.Length)
            Else
                CMS5 = 0
            End If
            If txtCMSRata6.Text <> "" And IsNumeric(txtCMSRata6.Text) And chbOmitRunRata6.Checked = False Then
                CMS6 = txtCMSRata6.Text
                x = Math.Max(x, txtCMSRata6.Text.Length)
            Else
                CMS6 = 0
            End If
            If txtCMSRata7.Text <> "" And IsNumeric(txtCMSRata7.Text) And chbOmitRunRata7.Checked = False Then
                CMS7 = txtCMSRata7.Text
                x = Math.Max(x, txtCMSRata7.Text.Length)
            Else
                CMS7 = 0
            End If
            If txtCMSRata8.Text <> "" And IsNumeric(txtCMSRata8.Text) And chbOmitRunRata8.Checked = False Then
                CMS8 = txtCMSRata8.Text
                x = Math.Max(x, txtCMSRata8.Text.Length)
            Else
                CMS8 = 0
            End If
            If txtCMSRata9.Text <> "" And IsNumeric(txtCMSRata9.Text) And chbOmitRunRata9.Checked = False Then
                CMS9 = txtCMSRata9.Text
                x = Math.Max(x, txtCMSRata9.Text.Length)
            Else
                CMS9 = 0
            End If
            If txtCMSRata10.Text <> "" And IsNumeric(txtCMSRata10.Text) And chbOmitRunRata10.Checked = False Then
                CMS10 = txtCMSRata10.Text
                x = Math.Max(x, txtCMSRata10.Text.Length)
            Else
                CMS10 = 0
            End If
            If txtCMSRata11.Text <> "" And IsNumeric(txtCMSRata11.Text) And chbOmitRunRata11.Checked = False Then
                CMS11 = txtCMSRata11.Text
                x = Math.Max(x, txtCMSRata11.Text.Length)
            Else
                CMS11 = 0
            End If
            If txtCMSRata12.Text <> "" And IsNumeric(txtCMSRata12.Text) And chbOmitRunRata12.Checked = False Then
                CMS12 = txtCMSRata12.Text
                x = Math.Max(x, txtCMSRata12.Text.Length)
            Else
                CMS12 = 0
            End If

            If RunNum > 0 Then
                RefSum = Ref1 + Ref2 + Ref3 + Ref4 + Ref5 + Ref6 + Ref7 + Ref8 + Ref9 + Ref10 + Ref11 + Ref12
                CMSSum = CMS1 + CMS2 + CMS3 + CMS4 + CMS5 + CMS6 + CMS7 + CMS8 + CMS9 + CMS10 + CMS11 + CMS12
                DiffSum = ((Ref1 - CMS1) + (Ref2 - CMS2) + (Ref3 - CMS3) + (Ref4 - CMS4) + (Ref5 - CMS5) _
                           + (Ref6 - CMS6) + (Ref7 - CMS7) + (Ref8 - CMS8) + (Ref9 - CMS9) + (Ref10 - CMS10) _
                           + (Ref11 - CMS11) + (Ref12 - CMS12))
                MeanDiff = (DiffSum / RunNum)

                Dim temp, temp2 As Double

                If chbOmitRunRata1.Checked = False And Ref1 <> 0 And CMS1 <> 0 Then
                    temp = ((Ref1 - CMS1) - MeanDiff) * ((Ref1 - CMS1) - MeanDiff)
                End If
                If chbOmitRunRata2.Checked = False And Ref2 <> 0 And CMS2 <> 0 Then
                    temp = temp + (((Ref2 - CMS2) - MeanDiff) * ((Ref2 - CMS2) - MeanDiff))
                End If
                If chbOmitRunRata3.Checked = False And Ref3 <> 0 And CMS3 <> 0 Then
                    temp = temp + (((Ref3 - CMS3) - MeanDiff) * ((Ref3 - CMS3) - MeanDiff))
                End If
                If chbOmitRunRata4.Checked = False And Ref4 <> 0 And CMS4 <> 0 Then
                    temp = temp + (((Ref4 - CMS4) - MeanDiff) * ((Ref4 - CMS4) - MeanDiff))
                End If
                If chbOmitRunRata5.Checked = False And Ref5 <> 0 And CMS5 <> 0 Then
                    temp = temp + (((Ref5 - CMS5) - MeanDiff) * ((Ref5 - CMS5) - MeanDiff))
                End If
                If chbOmitRunRata6.Checked = False And Ref6 <> 0 And CMS6 <> 0 Then
                    temp = temp + (((Ref6 - CMS6) - MeanDiff) * ((Ref6 - CMS6) - MeanDiff))
                End If
                If chbOmitRunRata7.Checked = False And Ref7 <> 0 And CMS7 <> 0 Then
                    temp = temp + (((Ref7 - CMS7) - MeanDiff) * ((Ref7 - CMS7) - MeanDiff))
                End If
                If chbOmitRunRata8.Checked = False And Ref8 <> 0 And CMS8 <> 0 Then
                    temp = temp + (((Ref8 - CMS8) - MeanDiff) * ((Ref8 - CMS8) - MeanDiff))
                End If
                If chbOmitRunRata9.Checked = False And Ref9 <> 0 And CMS9 <> 0 Then
                    temp = temp + (((Ref9 - CMS9) - MeanDiff) * ((Ref9 - CMS9) - MeanDiff))
                End If
                If chbOmitRunRata10.Checked = False And Ref10 <> 0 And CMS10 <> 0 Then
                    temp = temp + (((Ref10 - CMS10) - MeanDiff) * ((Ref10 - CMS10) - MeanDiff))
                End If
                If chbOmitRunRata11.Checked = False And Ref11 <> 0 And CMS11 <> 0 Then
                    temp = temp + (((Ref11 - CMS11) - MeanDiff) * ((Ref11 - CMS11) - MeanDiff))
                End If
                If chbOmitRunRata12.Checked = False And Ref12 <> 0 And CMS12 <> 0 Then
                    temp = temp + (((Ref12 - CMS12) - MeanDiff) * ((Ref12 - CMS12) - MeanDiff))
                End If

                temp2 = temp / (RunNum - 1)

                StrDev = Math.Sqrt(temp2)

                Select Case RunNum
                    Case 2
                        tValue = "12.706"
                    Case 3
                        tValue = "4.303"
                    Case 4
                        tValue = "3.182"
                    Case 5
                        tValue = "2.776"
                    Case 6
                        tValue = "2.571"
                    Case 7
                        tValue = "2.447"
                    Case 8
                        tValue = "2.365"
                    Case 9
                        tValue = "2.306"
                    Case 10
                        tValue = "2.262"
                    Case 11
                        tValue = "2.228"
                    Case 12
                        tValue = "2.201"
                    Case Else
                        tValue = "0"
                End Select

                ConfidenceCoeff = (tValue * StrDev) / Math.Sqrt(RunNum)
                RelAccuracy = 100 * (Math.Abs(ConfidenceCoeff) + Math.Abs(MeanDiff)) / Math.Abs(RefSum / RunNum)

                Try

                    'txtRelativeAccuracy.Text = Mid(RelAccuracy, 1, x)
                    txtRelativeAccuracy.Text = Math.Round(CDec(RelAccuracy), 3).ToString

                Catch ex As Exception

                End Try

            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata1_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata1.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata2_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata2.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata3_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata3.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata4_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata4.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata5_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata5.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata6_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata6.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata7_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata7.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata8_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata8.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata9_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata9.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata10_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata10.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata11_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata11.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtRefMethodRata12_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodRata12.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata1_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata1.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata2_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata2.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata3_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata3.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata4_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata4.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata5_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata5.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata6_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata6.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata7_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata7.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata8_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata8.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata9_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata9.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata10_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata10.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata11_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata11.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtCMSRata12_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtCMSRata12.Leave
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata1_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata1.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata2_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata2.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata3_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata3.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata4_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata4.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata5_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata5.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata6_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata6.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata7_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata7.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata8_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata8.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata9_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata9.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata10_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata10.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata11_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata11.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub chbOmitRunRata12_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chbOmitRunRata12.CheckedChanged
        Try

            RATACalc()

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackStandard1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackStandard1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackStandard1A.Text) And IsNumeric(txtPollConcTwoStackStandard1B.Text) _
                And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1B.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcTwoStackStandard1A.Text) And IsNumeric(txtPollConcTwoStackStandard1B.Text) _
                       And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtPollConcTwoStackStandard1A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                         And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                        temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                            And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                            temp = (CDec(txtPollConcTwoStackStandard1B.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackStandard1A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                temp = CDec(txtPollConcTwoStackStandard1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackStandard1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackStandard1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackStandard1A.Text.Length, txtPollConcTwoStackStandard1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackStandard1C.Text.Length)
            txtPollConcAvgTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcTwoStackStandard1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackStandard1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackStandard1A.Text) And IsNumeric(txtPollConcTwoStackStandard1B.Text) _
                And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1B.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcTwoStackStandard1A.Text) And IsNumeric(txtPollConcTwoStackStandard1B.Text) _
                       And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtPollConcTwoStackStandard1A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                         And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                        temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                            And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                            temp = (CDec(txtPollConcTwoStackStandard1B.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackStandard1A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                temp = CDec(txtPollConcTwoStackStandard1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackStandard1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackStandard1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackStandard1A.Text.Length, txtPollConcTwoStackStandard1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackStandard1C.Text.Length)
            txtPollConcAvgTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcTwoStackStandard1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackStandard1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackStandard1A.Text) And IsNumeric(txtPollConcTwoStackStandard1B.Text) _
                And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1B.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcTwoStackStandard1A.Text) And IsNumeric(txtPollConcTwoStackStandard1B.Text) _
                       And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtPollConcTwoStackStandard1A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                         And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                        temp = (CDec(txtPollConcTwoStackStandard1A.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                            And IsNumeric(txtPollConcTwoStackStandard1C.Text) Then
                            temp = (CDec(txtPollConcTwoStackStandard1B.Text) + CDec(txtPollConcTwoStackStandard1C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackStandard1A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                temp = CDec(txtPollConcTwoStackStandard1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackStandard1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackStandard1A.Text)) And Not (IsNumeric(txtPollConcTwoStackStandard1B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackStandard1C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackStandard1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackStandard1A.Text.Length, txtPollConcTwoStackStandard1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackStandard1C.Text.Length)
            txtPollConcAvgTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception
            'ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub txtPollConcTwoStackStandard2A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackStandard2A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackStandard2A.Text) And IsNumeric(txtPollConcTwoStackStandard2B.Text) _
                And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2B.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcTwoStackStandard2A.Text) And IsNumeric(txtPollConcTwoStackStandard2B.Text) _
                       And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtPollConcTwoStackStandard2A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                         And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                        temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                            And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                            temp = (CDec(txtPollConcTwoStackStandard2B.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackStandard2A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                temp = CDec(txtPollConcTwoStackStandard2A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackStandard2B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackStandard2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackStandard2A.Text.Length, txtPollConcTwoStackStandard2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackStandard2C.Text.Length)
            txtPollConcAvgTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtPollConcTwoStackStandard2B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackStandard2B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackStandard2A.Text) And IsNumeric(txtPollConcTwoStackStandard2B.Text) _
                And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2B.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcTwoStackStandard2A.Text) And IsNumeric(txtPollConcTwoStackStandard2B.Text) _
                       And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtPollConcTwoStackStandard2A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                         And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                        temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                            And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                            temp = (CDec(txtPollConcTwoStackStandard2B.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackStandard2A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                temp = CDec(txtPollConcTwoStackStandard2A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackStandard2B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackStandard2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackStandard2A.Text.Length, txtPollConcTwoStackStandard2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackStandard2C.Text.Length)
            txtPollConcAvgTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtPollConcTwoStackStandard2C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackStandard2C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackStandard2A.Text) And IsNumeric(txtPollConcTwoStackStandard2B.Text) _
                And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2B.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtPollConcTwoStackStandard2A.Text) And IsNumeric(txtPollConcTwoStackStandard2B.Text) _
                       And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtPollConcTwoStackStandard2A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                         And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                        temp = (CDec(txtPollConcTwoStackStandard2A.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                            And IsNumeric(txtPollConcTwoStackStandard2C.Text) Then
                            temp = (CDec(txtPollConcTwoStackStandard2B.Text) + CDec(txtPollConcTwoStackStandard2C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackStandard2A.Text) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                temp = CDec(txtPollConcTwoStackStandard2A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackStandard2B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackStandard2A.Text)) And Not (IsNumeric(txtPollConcTwoStackStandard2B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackStandard2C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackStandard2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackStandard2A.Text.Length, txtPollConcTwoStackStandard2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackStandard2C.Text.Length)
            txtPollConcAvgTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackStandard1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackStandard1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard1B.Text) _
                And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard1B.Text) _
                       And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                         And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                        temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                            And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                            temp = (CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackStandard1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackStandard1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackStandard1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1A.Text.Length, txtEmissRateTwoStackStandard1B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackStandard1C.Text.Length)
            txtEmissRateAvgTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard2A.Text) Then
                temp = CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard2A.Text)
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) Then
                    temp = CDec(txtEmissRateTwoStackStandard1A.Text)
                Else
                    If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) Then
                        temp = CDec(txtEmissRateTwoStackStandard2A.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1A.Text.Length, txtEmissRateTwoStackStandard2A.Text.Length)
            x = Math.Max(x, temp)
            txtEmissRateTotalTwoStackStandard1.Text = Mid(CStr(temp), 1, x)


            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
                 IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackStandard1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackStandard1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard1B.Text) _
                And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard1B.Text) _
                       And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                         And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                        temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                            And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                            temp = (CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackStandard1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackStandard1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackStandard1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1A.Text.Length, txtEmissRateTwoStackStandard1B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackStandard1C.Text.Length)
            txtEmissRateAvgTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTwoStackStandard1B.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) Then
                temp = CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard2B.Text)
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1B.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) Then
                    temp = CDec(txtEmissRateTwoStackStandard1B.Text)
                Else
                    If Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) Then
                        temp = CDec(txtEmissRateTwoStackStandard2B.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1B.Text.Length, txtEmissRateTwoStackStandard2B.Text.Length)
            x = Math.Max(x, temp)
            txtEmissRateTotalTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
                IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackStandard1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackStandard1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard1B.Text) _
                And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard1B.Text) _
                       And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                         And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                        temp = (CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                            And IsNumeric(txtEmissRateTwoStackStandard1C.Text) Then
                            temp = (CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard1C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackStandard1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackStandard1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackStandard1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1A.Text.Length, txtEmissRateTwoStackStandard1B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackStandard1C.Text.Length)
            txtEmissRateAvgTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTwoStackStandard1C.Text) And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                temp = CDec(txtEmissRateTwoStackStandard1C.Text) + CDec(txtEmissRateTwoStackStandard2C.Text)
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1C.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                    temp = CDec(txtEmissRateTwoStackStandard1C.Text)
                Else
                    If Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                        temp = CDec(txtEmissRateTwoStackStandard2C.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1C.Text.Length, txtEmissRateTwoStackStandard2C.Text.Length)
            x = Math.Max(x, temp)
            txtEmissRateTotalTwoStackStandard3.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
                IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackStandard2A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackStandard2A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) _
                And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2B.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) _
                       And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                         And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                        temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                            And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                            temp = (CDec(txtEmissRateTwoStackStandard2B.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackStandard2A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackStandard2B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackStandard2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard2A.Text.Length, txtEmissRateTwoStackStandard2B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackStandard2C.Text.Length)
            txtEmissRateAvgTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And IsNumeric(txtEmissRateTwoStackStandard2A.Text) Then
                temp = CDec(txtEmissRateTwoStackStandard1A.Text) + CDec(txtEmissRateTwoStackStandard2A.Text)
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) Then
                    temp = CDec(txtEmissRateTwoStackStandard1A.Text)
                Else
                    If Not (IsNumeric(txtEmissRateTwoStackStandard1A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) Then
                        temp = CDec(txtEmissRateTwoStackStandard2A.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1A.Text.Length, txtEmissRateTwoStackStandard2A.Text.Length)
            x = Math.Max(x, temp)
            txtEmissRateTotalTwoStackStandard1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
                IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackStandard2B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackStandard2B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) _
                And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2B.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) _
                       And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                         And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                        temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                            And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                            temp = (CDec(txtEmissRateTwoStackStandard2B.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackStandard2A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackStandard2B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackStandard2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard2A.Text.Length, txtEmissRateTwoStackStandard2B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackStandard2C.Text.Length)
            txtEmissRateAvgTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTwoStackStandard1B.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) Then
                temp = CDec(txtEmissRateTwoStackStandard1B.Text) + CDec(txtEmissRateTwoStackStandard2B.Text)
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1B.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) Then
                    temp = CDec(txtEmissRateTwoStackStandard1B.Text)
                Else
                    If Not (IsNumeric(txtEmissRateTwoStackStandard1B.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) Then
                        temp = CDec(txtEmissRateTwoStackStandard2B.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1B.Text.Length, txtEmissRateTwoStackStandard2B.Text.Length)
            x = Math.Max(x, temp)
            txtEmissRateTotalTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
                IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackStandard2C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackStandard2C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) _
                And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2B.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                temp = temp / 3
            Else
                If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And IsNumeric(txtEmissRateTwoStackStandard2B.Text) _
                       And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2B.Text))
                    temp = temp / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                         And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                        temp = (CDec(txtEmissRateTwoStackStandard2A.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                        temp = temp / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                            And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                            temp = (CDec(txtEmissRateTwoStackStandard2B.Text) + CDec(txtEmissRateTwoStackStandard2C.Text))
                            temp = temp / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackStandard2A.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackStandard2A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackStandard2B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackStandard2A.Text)) And Not (IsNumeric(txtEmissRateTwoStackStandard2B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackStandard2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard2A.Text.Length, txtEmissRateTwoStackStandard2B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackStandard2C.Text.Length)
            txtEmissRateAvgTwoStackStandard2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTwoStackStandard1C.Text) And IsNumeric(txtEmissRateTwoStackStandard2C.Text) Then
                temp = CDec(txtEmissRateTwoStackStandard1C.Text) + CDec(txtEmissRateTwoStackStandard2C.Text)
            Else
                If IsNumeric(txtEmissRateTwoStackStandard1C.Text) And Not (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                    temp = CDec(txtEmissRateTwoStackStandard1C.Text)
                Else
                    If Not (IsNumeric(txtEmissRateTwoStackStandard1C.Text)) And (IsNumeric(txtEmissRateTwoStackStandard2C.Text)) Then
                        temp = CDec(txtEmissRateTwoStackStandard2C.Text)
                    Else
                        temp = 0
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackStandard1C.Text.Length, txtEmissRateTwoStackStandard2C.Text.Length)
            x = Math.Max(x, temp)
            txtEmissRateTotalTwoStackStandard3.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
                IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        Finally

        End Try
    End Sub
    Private Sub txtEmissRateTotalTwoStackStandard1_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTotalTwoStackStandard1.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
               IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTotalTwoStackStandard2_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTotalTwoStackStandard2.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
               IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTotalTwoStackStandard3_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTotalTwoStackStandard3.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And IsNumeric(txtEmissRateTotalTwoStackStandard2.Text) And _
               IsNumeric(txtEmissRateTotalTwoStackStandard3.Text) Then
                temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text) + _
                        CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                   And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                    temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard2.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                       And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                        temp = (CDec(txtEmissRateTotalTwoStackStandard1.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                           And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                            temp = (CDec(txtEmissRateTotalTwoStackStandard2.Text) + CDec(txtEmissRateTotalTwoStackStandard3.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTotalTwoStackStandard1.Text) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                               And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                temp = txtEmissRateTotalTwoStackStandard1.Text
                            Else
                                If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                     And Not (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                    temp = txtEmissRateTotalTwoStackStandard2.Text
                                Else
                                    If Not (IsNumeric(txtEmissRateTotalTwoStackStandard1.Text)) And Not (IsNumeric(txtEmissRateTotalTwoStackStandard2.Text)) _
                                        And (IsNumeric(txtEmissRateTotalTwoStackStandard3.Text)) Then
                                        temp = txtEmissRateTotalTwoStackStandard3.Text
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTotalTwoStackStandard1.Text.Length, txtEmissRateTotalTwoStackStandard2.Text.Length)
            x = Math.Max(x, txtEmissRateTotalTwoStackStandard3.Text.Length)
            txtEmissRateTotalAvgTwoStackStandard.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackDRE1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackDRE1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) Then
                temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1B.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 3
            Else
                If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcTwoStackDRE1A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                         And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                        temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And IsNumeric(txtPollConcTwoStackDRE1B.Text) _
                            And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                            temp = (CDec(txtPollConcTwoStackDRE1B.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                temp = CDec(txtPollConcTwoStackDRE1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackDRE1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackDRE1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            txtPollConcAvgTwoStackDRE1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) _
               And IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 3)
            Else
                If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                    And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                    And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                    temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                           + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                Else
                    If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                        And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) Then
                        temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                               + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 2
                    Else
                        If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                            And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                            And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                            temp = ((CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100 _
                                   + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                        Else
                            If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                temp = (CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100
                            Else
                                If (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                    temp = (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100
                                Else
                                    If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                                        temp = (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2A.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtDestructionEfficiencyTwoStackDRE.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackDRE1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackDRE1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) Then
                temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1B.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 3
            Else
                If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcTwoStackDRE1A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                         And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                        temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And IsNumeric(txtPollConcTwoStackDRE1B.Text) _
                            And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                            temp = (CDec(txtPollConcTwoStackDRE1B.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                temp = CDec(txtPollConcTwoStackDRE1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackDRE1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackDRE1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            txtPollConcAvgTwoStackDRE1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) _
               And IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 3)
            Else
                If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                    And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                    And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                    temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                           + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                Else
                    If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                        And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) Then
                        temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                               + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 2
                    Else
                        If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                            And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                            And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                            temp = ((CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100 _
                                   + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                        Else
                            If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                temp = (CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100
                            Else
                                If (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                    temp = (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100
                                Else
                                    If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                                        temp = (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2A.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtDestructionEfficiencyTwoStackDRE.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackDRE1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackDRE1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) Then
                temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1B.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 3
            Else
                If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcTwoStackDRE1A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                         And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                        temp = (CDec(txtPollConcTwoStackDRE1A.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And IsNumeric(txtPollConcTwoStackDRE1B.Text) _
                            And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                            temp = (CDec(txtPollConcTwoStackDRE1B.Text) + CDec(txtPollConcTwoStackDRE1C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                temp = CDec(txtPollConcTwoStackDRE1A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackDRE1B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) And Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackDRE1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            txtPollConcAvgTwoStackDRE1.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) _
               And IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 3)
            Else
                If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                    And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                    And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                    temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                           + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                Else
                    If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                        And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) Then
                        temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                               + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 2
                    Else
                        If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                            And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                            And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                            temp = ((CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100 _
                                   + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                        Else
                            If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                temp = (CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100
                            Else
                                If (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                    temp = (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100
                                Else
                                    If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                                        temp = (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2A.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtDestructionEfficiencyTwoStackDRE.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackDRE2A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackDRE2A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2B.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 3
            Else
                If IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcTwoStackDRE2A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                         And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                        temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And IsNumeric(txtPollConcTwoStackDRE2B.Text) _
                            And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                            temp = (CDec(txtPollConcTwoStackDRE2B.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackDRE2A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                temp = CDec(txtPollConcTwoStackDRE2A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackDRE2B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackDRE2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE2A.Text.Length, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtPollConcAvgTwoStackDRE2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) _
                And IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 3)
            Else
                If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                    And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                    And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                    temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                           + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                Else
                    If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                        And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) Then
                        temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                               + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 2
                    Else
                        If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                            And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                            And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                            temp = ((CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100 _
                                   + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                        Else
                            If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                temp = (CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100
                            Else
                                If (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                    temp = (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100
                                Else
                                    If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                                        temp = (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2A.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtDestructionEfficiencyTwoStackDRE.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackDRE2B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackDRE2B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2B.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 3
            Else
                If IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcTwoStackDRE2A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                         And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                        temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And IsNumeric(txtPollConcTwoStackDRE2B.Text) _
                            And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                            temp = (CDec(txtPollConcTwoStackDRE2B.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackDRE2A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                temp = CDec(txtPollConcTwoStackDRE2A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackDRE2B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackDRE2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE2A.Text.Length, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtPollConcAvgTwoStackDRE2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) _
               And IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 3)
            Else
                If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                    And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                    And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                    temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                           + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                Else
                    If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                        And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) Then
                        temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                               + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 2
                    Else
                        If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                            And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                            And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                            temp = ((CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100 _
                                   + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                        Else
                            If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                temp = (CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100
                            Else
                                If (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                    temp = (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100
                                Else
                                    If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                                        temp = (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2A.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtDestructionEfficiencyTwoStackDRE.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtPollConcTwoStackDRE2C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPollConcTwoStackDRE2C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2B.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 3
            Else
                If IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                    temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2B.Text)) / 2
                Else
                    If IsNumeric(txtPollConcTwoStackDRE2A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                         And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                        temp = (CDec(txtPollConcTwoStackDRE2A.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And IsNumeric(txtPollConcTwoStackDRE2B.Text) _
                            And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                            temp = (CDec(txtPollConcTwoStackDRE2B.Text) + CDec(txtPollConcTwoStackDRE2C.Text)) / 2
                        Else
                            If IsNumeric(txtPollConcTwoStackDRE2A.Text) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                temp = CDec(txtPollConcTwoStackDRE2A.Text)
                            Else
                                If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                    And Not (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                    temp = CDec(txtPollConcTwoStackDRE2B.Text)
                                Else
                                    If Not (IsNumeric(txtPollConcTwoStackDRE2A.Text)) And Not (IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE2C.Text)) Then
                                        temp = CDec(txtPollConcTwoStackDRE2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE2A.Text.Length, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtPollConcAvgTwoStackDRE2.Text = Mid(CStr(temp), 1, x)

            If IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE1C.Text) _
                 And IsNumeric(txtPollConcTwoStackDRE2A.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text) Then
                temp = (((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100 _
                        + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 3)
            Else
                If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                    And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                    And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                    temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                           + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                Else
                    If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                                        And (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                        And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) Then
                        temp = ((CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100 _
                               + (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100) / 2
                    Else
                        If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                            And (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                            And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                            temp = ((CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100 _
                                   + (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100) / 2
                        Else
                            If (IsNumeric(txtPollConcTwoStackDRE1A.Text) And IsNumeric(txtPollConcTwoStackDRE2A.Text)) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                              And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                temp = (CDec(txtPollConcTwoStackDRE1A.Text) - CDec(txtPollConcTwoStackDRE2A.Text)) / CDec(txtPollConcTwoStackDRE1A.Text) * 100
                            Else
                                If (IsNumeric(txtPollConcTwoStackDRE1B.Text) And IsNumeric(txtPollConcTwoStackDRE2B.Text)) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) _
                                  And (Not (IsNumeric(txtPollConcTwoStackDRE1C.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2C.Text))) Then
                                    temp = (CDec(txtPollConcTwoStackDRE1B.Text) - CDec(txtPollConcTwoStackDRE2B.Text)) / CDec(txtPollConcTwoStackDRE1B.Text) * 100
                                Else
                                    If (IsNumeric(txtPollConcTwoStackDRE1C.Text) And IsNumeric(txtPollConcTwoStackDRE2C.Text)) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1B.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2B.Text))) _
                                      And (Not (IsNumeric(txtPollConcTwoStackDRE1A.Text)) Or Not (IsNumeric(txtPollConcTwoStackDRE2A.Text))) Then
                                        temp = (CDec(txtPollConcTwoStackDRE1C.Text) - CDec(txtPollConcTwoStackDRE2C.Text)) / CDec(txtPollConcTwoStackDRE1C.Text) * 100
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtPollConcTwoStackDRE1A.Text.Length, txtPollConcTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE1C.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2A.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtPollConcTwoStackDRE2C.Text.Length)
            txtDestructionEfficiencyTwoStackDRE.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackDRE1A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackDRE1A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) And IsNumeric(txtEmissRateTwoStackDRE1C.Text) Then
                temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1B.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) _
                    And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                         And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                        temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) _
                            And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                            temp = (CDec(txtEmissRateTwoStackDRE1B.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackDRE1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackDRE1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackDRE1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackDRE1A.Text.Length, txtEmissRateTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackDRE1C.Text.Length)
            txtEmissRateAvgTwoStackDRE1.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackDRE1B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackDRE1B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) And IsNumeric(txtEmissRateTwoStackDRE1C.Text) Then
                temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1B.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) _
                    And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                         And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                        temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) _
                            And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                            temp = (CDec(txtEmissRateTwoStackDRE1B.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackDRE1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackDRE1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackDRE1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackDRE1A.Text.Length, txtEmissRateTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackDRE1C.Text.Length)
            txtEmissRateAvgTwoStackDRE1.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackDRE1C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackDRE1C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) And IsNumeric(txtEmissRateTwoStackDRE1C.Text) Then
                temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1B.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) _
                    And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                         And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                        temp = (CDec(txtEmissRateTwoStackDRE1A.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And IsNumeric(txtEmissRateTwoStackDRE1B.Text) _
                            And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                            temp = (CDec(txtEmissRateTwoStackDRE1B.Text) + CDec(txtEmissRateTwoStackDRE1C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackDRE1A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackDRE1A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackDRE1B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackDRE1A.Text)) And Not (IsNumeric(txtEmissRateTwoStackDRE1B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackDRE1C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackDRE1C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackDRE1A.Text.Length, txtEmissRateTwoStackDRE1B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackDRE1C.Text.Length)
            txtEmissRateAvgTwoStackDRE1.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackDRE2A_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackDRE2A.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) And IsNumeric(txtEmissRateTwoStackDRE2C.Text) Then
                temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2B.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) _
                    And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                         And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                        temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) _
                            And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                            temp = (CDec(txtEmissRateTwoStackDRE2B.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackDRE2A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackDRE2B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackDRE2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackDRE2A.Text.Length, txtEmissRateTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackDRE2C.Text.Length)
            txtEmissRateAvgTwoStackDRE2.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackDRE2B_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackDRE2B.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) And IsNumeric(txtEmissRateTwoStackDRE2C.Text) Then
                temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2B.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) _
                    And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                         And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                        temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) _
                            And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                            temp = (CDec(txtEmissRateTwoStackDRE2B.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackDRE2A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackDRE2B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackDRE2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackDRE2A.Text.Length, txtEmissRateTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackDRE2C.Text.Length)
            txtEmissRateAvgTwoStackDRE2.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub txtEmissRateTwoStackDRE2C_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtEmissRateTwoStackDRE2C.Leave
        Try
            Dim temp As Decimal = 0
            Dim x As Integer = 0

            If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) And IsNumeric(txtEmissRateTwoStackDRE2C.Text) Then
                temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2B.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 3
            Else
                If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) _
                    And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                    temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2B.Text)) / 2
                Else
                    If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                         And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                        temp = (CDec(txtEmissRateTwoStackDRE2A.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 2
                    Else
                        If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And IsNumeric(txtEmissRateTwoStackDRE2B.Text) _
                            And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                            temp = (CDec(txtEmissRateTwoStackDRE2B.Text) + CDec(txtEmissRateTwoStackDRE2C.Text)) / 2
                        Else
                            If IsNumeric(txtEmissRateTwoStackDRE2A.Text) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                temp = CDec(txtEmissRateTwoStackDRE2A.Text)
                            Else
                                If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                    And Not (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                    temp = CDec(txtEmissRateTwoStackDRE2B.Text)
                                Else
                                    If Not (IsNumeric(txtEmissRateTwoStackDRE2A.Text)) And Not (IsNumeric(txtEmissRateTwoStackDRE2B.Text)) _
                                        And (IsNumeric(txtEmissRateTwoStackDRE2C.Text)) Then
                                        temp = CDec(txtEmissRateTwoStackDRE2C.Text)
                                    Else
                                        temp = 0
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            x = Math.Max(txtEmissRateTwoStackDRE2A.Text.Length, txtEmissRateTwoStackDRE2B.Text.Length)
            x = Math.Max(x, txtEmissRateTwoStackDRE2C.Text.Length)
            txtEmissRateAvgTwoStackDRE2.Text = Mid(CStr(temp), 1, x)

        Catch ex As Exception

        End Try
    End Sub
#End Region
    Private Sub txtRefMethodPercentRata_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtRefMethodPercentRata.TextChanged
        Try

            If txtRefMethodPercentRata.Text <> "" Then
                txtRefMethodPercentRata.Visible = True
                lblRefMethodRata.Visible = True
                txtApplicableStandardPercentRata.Visible = False
                lblStandardRata.Visible = False
                cboDiluentRata.Visible = False
                lblDiluentRata.Visible = False
                txtPart75Statement.Visible = False
                lblRATAPart75.Visible = False
            Else
                txtRefMethodPercentRata.Visible = True
                lblRefMethodRata.Visible = True
                txtApplicableStandardPercentRata.Visible = True
                lblStandardRata.Visible = True
                cboDiluentRata.Visible = True
                lblDiluentRata.Visible = True
                txtPart75Statement.Visible = True
                lblRATAPart75.Visible = True
            End If
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally

        End Try

    End Sub
    Private Sub txtApplicableStandardPercentRata_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtApplicableStandardPercentRata.TextChanged
        Try

            If txtApplicableStandardPercentRata.Text <> "" Then
                txtRefMethodPercentRata.Visible = False
                lblRefMethodRata.Visible = False
                txtApplicableStandardPercentRata.Visible = True
                lblStandardRata.Visible = True
                cboDiluentRata.Visible = False
                lblDiluentRata.Visible = False
                txtPart75Statement.Visible = False
                lblRATAPart75.Visible = False
            Else
                txtRefMethodPercentRata.Visible = True
                lblRefMethodRata.Visible = True
                txtApplicableStandardPercentRata.Visible = True
                lblStandardRata.Visible = True
                cboDiluentRata.Visible = True
                lblDiluentRata.Visible = True
                txtPart75Statement.Visible = True
                lblRATAPart75.Visible = True
            End If
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub cboDiluentRata_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboDiluentRata.SelectedValueChanged
        Try

            If cboDiluentRata.Text = "" Or cboDiluentRata.Text = " " Then
                txtRefMethodPercentRata.Visible = True
                lblRefMethodRata.Visible = True
                txtApplicableStandardPercentRata.Visible = True
                lblStandardRata.Visible = True
                cboDiluentRata.Visible = True
                lblDiluentRata.Visible = True
                txtPart75Statement.Visible = True
                lblRATAPart75.Visible = True
            Else
                txtRefMethodPercentRata.Visible = False
                lblRefMethodRata.Visible = False
                txtApplicableStandardPercentRata.Visible = False
                lblStandardRata.Visible = False
                cboDiluentRata.Visible = True
                lblDiluentRata.Visible = True
                txtPart75Statement.Visible = False
                lblRATAPart75.Visible = False
            End If
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub txtPart75Statement_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPart75Statement.TextChanged
        Try

            If txtPart75Statement.Text <> "" Then
                txtRefMethodPercentRata.Visible = False
                lblRefMethodRata.Visible = False
                txtApplicableStandardPercentRata.Visible = False
                lblStandardRata.Visible = False
                cboDiluentRata.Visible = False
                lblDiluentRata.Visible = False
                txtPart75Statement.Visible = True
                lblRATAPart75.Visible = True
            Else
                txtRefMethodPercentRata.Visible = True
                lblRefMethodRata.Visible = True
                txtApplicableStandardPercentRata.Visible = True
                lblStandardRata.Visible = True
                cboDiluentRata.Visible = True
                lblDiluentRata.Visible = True
                txtPart75Statement.Visible = True
                lblRATAPart75.Visible = True
            End If
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub cboDiluentRata_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles cboDiluentRata.MouseDown
        Try

            If ReportStatus = True Then
                cboDiluentRata.Enabled = False
            Else
                cboDiluentRata.Enabled = True
            End If
            cboDiluentRata.Enabled = True
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub cboDiluentRata_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cboDiluentRata.KeyDown
        Try

            If ReportStatus = True Then
                cboDiluentRata.Enabled = False
            Else
                cboDiluentRata.Enabled = True
            End If
            cboDiluentRata.Enabled = True
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub cboDiluentRata_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboDiluentRata.GotFocus
        Try

            If ReportStatus = True Then
                cboDiluentRata.Enabled = False
            Else
                cboDiluentRata.Enabled = True
            End If
            cboDiluentRata.Enabled = True
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub btnSaveSSCPData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSaveSSCPData.Click
        Try
            If AccountFormAccess(69, 4) = "1" Then
                SaveSSCPWork()
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub btnEnforcementProcess_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnEnforcementProcess.Click
        Try

            OpenEnforcement()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try

    End Sub
    Private Sub llbTestNotifiactionNumber_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkLabelLinkClickedEventArgs) Handles llbTestNotifiactionNumber.LinkClicked
        Try
            If cboTestNotificationNumber.Text <> "" Then
                If Not IsNothing(ISMPNotificationLogForm) Then
                    ISMPNotificationLogForm.txtTestNotificationNumber.Text = Replace(Mid(cboTestNotificationNumber.Text, 1, cboTestNotificationNumber.Text.IndexOf("-->")), " ", "")
                    ISMPNotificationLogForm.Show()
                Else
                    ISMPNotificationLogForm = Nothing
                    If ISMPNotificationLogForm Is Nothing Then ISMPNotificationLogForm = New ISMPNotificationLog
                    ISMPNotificationLogForm.txtTestNotificationNumber.Text = Replace(Mid(cboTestNotificationNumber.Text, 1, cboTestNotificationNumber.Text.IndexOf("-->")), " ", "")
                    ISMPNotificationLogForm.Show()
                End If
                ISMPNotificationLogForm.LoadTestNotification()
            End If
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub tsbConfidentialData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tsbConfidentialData.Click
        Try
            If txtReferenceNumber.Text <> "" Then
                If Me.TCDocumentTypes.TabPages.Count < 4 Then

                    If Not IsNothing(ISMPConfidential) Then
                        ISMPConfidential.Show()
                    Else
                        ISMPConfidential = Nothing
                        If ISMPConfidential Is Nothing Then ISMPConfidential = New ISMPConfidentialData
                        ISMPConfidential.txtReferenceNumber.Text = txtReferenceNumber.Text
                        ISMPConfidential.Show()
                    End If
                Else
                    MsgBox("Please save test report before assigning confidential data.", MsgBoxStyle.Information, "Performance Test Reports")
                End If
            End If

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub mmiDefaultCompliance_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiDefaultCompliance.Click
        Try
            LoadDefaultComplianceManager()

        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub
    Private Sub mmiPrintNonConf_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiPrintNonConf.Click
        Try
            PrintOut = Nothing
            If PrintOut Is Nothing Then PrintOut = New IAIPPrintOut
            PrintOut.txtPrintType.Text = "ISMPTestReport"
            PrintOut.txtReferenceNumber.Text = Me.txtReferenceNumber.Text
            PrintOut.txtOther.Text = "ToFile"
            PrintOut.Show()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub

    Private Sub cboISMPUnit_SelectedValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboISMPUnit.SelectedValueChanged
        Try
            txtUnitManager.Text = "N/A"
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        End Try
    End Sub

    Private Sub mmiHelp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiHelp.Click
        OpenDocumentationUrl(Me)
    End Sub

    Private Sub mmiOpenMemo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mmiOpenMemo.Click
        Try
            OpenMemo()
        Catch ex As Exception
            ErrorReport(ex, Me.Name & "." & System.Reflection.MethodBase.GetCurrentMethod.Name)
        Finally
        End Try
    End Sub

End Class
