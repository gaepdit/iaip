'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5472
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsIAIP10"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsIAIP10
    Inherits Global.System.Data.DataSet
    
    Private tableESSCHEMA As ESSCHEMADataTable
    
    Private tableVW_TITLE_V_RENEWALS As VW_TITLE_V_RENEWALSDataTable
    
    Private tableVW_NSPS_STATUS As VW_NSPS_STATUSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ESSCHEMA")) Is Nothing) Then
                MyBase.Tables.Add(New ESSCHEMADataTable(ds.Tables("ESSCHEMA")))
            End If
            If (Not (ds.Tables("VW_TITLE_V_RENEWALS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TITLE_V_RENEWALSDataTable(ds.Tables("VW_TITLE_V_RENEWALS")))
            End If
            If (Not (ds.Tables("VW_NSPS_STATUS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NSPS_STATUSDataTable(ds.Tables("VW_NSPS_STATUS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ESSCHEMA() As ESSCHEMADataTable
        Get
            Return Me.tableESSCHEMA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_TITLE_V_RENEWALS() As VW_TITLE_V_RENEWALSDataTable
        Get
            Return Me.tableVW_TITLE_V_RENEWALS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_NSPS_STATUS() As VW_NSPS_STATUSDataTable
        Get
            Return Me.tableVW_NSPS_STATUS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsIAIP10 = CType(MyBase.Clone,dsIAIP10)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ESSCHEMA")) Is Nothing) Then
                MyBase.Tables.Add(New ESSCHEMADataTable(ds.Tables("ESSCHEMA")))
            End If
            If (Not (ds.Tables("VW_TITLE_V_RENEWALS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TITLE_V_RENEWALSDataTable(ds.Tables("VW_TITLE_V_RENEWALS")))
            End If
            If (Not (ds.Tables("VW_NSPS_STATUS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NSPS_STATUSDataTable(ds.Tables("VW_NSPS_STATUS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableESSCHEMA = CType(MyBase.Tables("ESSCHEMA"),ESSCHEMADataTable)
        If (initTable = true) Then
            If (Not (Me.tableESSCHEMA) Is Nothing) Then
                Me.tableESSCHEMA.InitVars
            End If
        End If
        Me.tableVW_TITLE_V_RENEWALS = CType(MyBase.Tables("VW_TITLE_V_RENEWALS"),VW_TITLE_V_RENEWALSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_TITLE_V_RENEWALS) Is Nothing) Then
                Me.tableVW_TITLE_V_RENEWALS.InitVars
            End If
        End If
        Me.tableVW_NSPS_STATUS = CType(MyBase.Tables("VW_NSPS_STATUS"),VW_NSPS_STATUSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_NSPS_STATUS) Is Nothing) Then
                Me.tableVW_NSPS_STATUS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsIAIP10"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsIAIP10.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableESSCHEMA = New ESSCHEMADataTable
        MyBase.Tables.Add(Me.tableESSCHEMA)
        Me.tableVW_TITLE_V_RENEWALS = New VW_TITLE_V_RENEWALSDataTable
        MyBase.Tables.Add(Me.tableVW_TITLE_V_RENEWALS)
        Me.tableVW_NSPS_STATUS = New VW_NSPS_STATUSDataTable
        MyBase.Tables.Add(Me.tableVW_NSPS_STATUS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeESSCHEMA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_TITLE_V_RENEWALS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_NSPS_STATUS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsIAIP10 = New dsIAIP10
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ESSCHEMARowChangeEventHandler(ByVal sender As Object, ByVal e As ESSCHEMARowChangeEvent)
    
    Public Delegate Sub VW_TITLE_V_RENEWALSRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_TITLE_V_RENEWALSRowChangeEvent)
    
    Public Delegate Sub VW_NSPS_STATUSRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_NSPS_STATUSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ESSCHEMADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTESYEAR As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYADDRESS As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITY As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYSTATE As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYZIP As Global.System.Data.DataColumn
        
        Private columnSTRCOUNTY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTTITLE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCOMPANY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS2 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIP As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTROPTOUT As Global.System.Data.DataColumn
        
        Private columnDBLVOCEMISSION As Global.System.Data.DataColumn
        
        Private columnDBLNOXEMISSION As Global.System.Data.DataColumn
        
        Private columnSTRCONFIRMATIONNBR As Global.System.Data.DataColumn
        
        Private columnSTRDATELASTLOGIN As Global.System.Data.DataColumn
        
        Private columnSTRTIMELASTLOGIN As Global.System.Data.DataColumn
        
        Private columnDATTRANSACTION As Global.System.Data.DataColumn
        
        Private columnSTRAIRSYEAR As Global.System.Data.DataColumn
        
        Private columnNUMUSERID As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPREFIX As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnDBLXCOORDINATE As Global.System.Data.DataColumn
        
        Private columnDBLYCOORDINATE As Global.System.Data.DataColumn
        
        Private columnSTRHORIZONTALCOLLECTIONCODE As Global.System.Data.DataColumn
        
        Private columnSTRHORIZONTALACCURACYMEASURE As Global.System.Data.DataColumn
        
        Private columnSTRHORIZONTALREFERENCECODE As Global.System.Data.DataColumn
        
        Private columnSTRDATEFIRSTCONFIRM As Global.System.Data.DataColumn
        
        Private columnSTRESCLOSED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ESSCHEMA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTESYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTESYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYZIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOUNTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOUNTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCOMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCOMPANY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPTOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPTOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLVOCEMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLVOCEMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLNOXEMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLNOXEMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONFIRMATIONNBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONFIRMATIONNBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRDATELASTLOGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRDATELASTLOGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRTIMELASTLOGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRTIMELASTLOGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATTRANSACTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATTRANSACTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMUSERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMUSERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPREFIXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPREFIX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLXCOORDINATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLXCOORDINATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLYCOORDINATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLYCOORDINATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRHORIZONTALCOLLECTIONCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRHORIZONTALCOLLECTIONCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRHORIZONTALACCURACYMEASUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRHORIZONTALACCURACYMEASURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRHORIZONTALREFERENCECODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRHORIZONTALREFERENCECODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRDATEFIRSTCONFIRMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRDATEFIRSTCONFIRM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRESCLOSEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRESCLOSED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ESSCHEMARow
            Get
                Return CType(Me.Rows(index),ESSCHEMARow)
            End Get
        End Property
        
        Public Event ESSCHEMARowChanging As ESSCHEMARowChangeEventHandler
        
        Public Event ESSCHEMARowChanged As ESSCHEMARowChangeEventHandler
        
        Public Event ESSCHEMARowDeleting As ESSCHEMARowChangeEventHandler
        
        Public Event ESSCHEMARowDeleted As ESSCHEMARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddESSCHEMARow(ByVal row As ESSCHEMARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddESSCHEMARow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTESYEAR As Decimal,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYADDRESS As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STRFACILITYSTATE As String,  _
                    ByVal STRFACILITYZIP As String,  _
                    ByVal STRCOUNTY As String,  _
                    ByVal STRCONTACTTITLE As String,  _
                    ByVal STRCONTACTPHONENUMBER As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTCOMPANY As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTADDRESS2 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIP As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STROPTOUT As String,  _
                    ByVal DBLVOCEMISSION As Decimal,  _
                    ByVal DBLNOXEMISSION As Decimal,  _
                    ByVal STRCONFIRMATIONNBR As String,  _
                    ByVal STRDATELASTLOGIN As String,  _
                    ByVal STRTIMELASTLOGIN As String,  _
                    ByVal DATTRANSACTION As Date,  _
                    ByVal STRAIRSYEAR As String,  _
                    ByVal NUMUSERID As Decimal,  _
                    ByVal STRCONTACTPREFIX As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal DBLXCOORDINATE As Decimal,  _
                    ByVal DBLYCOORDINATE As Decimal,  _
                    ByVal STRHORIZONTALCOLLECTIONCODE As String,  _
                    ByVal STRHORIZONTALACCURACYMEASURE As String,  _
                    ByVal STRHORIZONTALREFERENCECODE As String,  _
                    ByVal STRDATEFIRSTCONFIRM As String,  _
                    ByVal STRESCLOSED As String) As ESSCHEMARow
            Dim rowESSCHEMARow As ESSCHEMARow = CType(Me.NewRow,ESSCHEMARow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTESYEAR, STRFACILITYNAME, STRFACILITYADDRESS, STRFACILITYCITY, STRFACILITYSTATE, STRFACILITYZIP, STRCOUNTY, STRCONTACTTITLE, STRCONTACTPHONENUMBER, STRCONTACTFAXNUMBER, STRCONTACTCOMPANY, STRCONTACTADDRESS1, STRCONTACTADDRESS2, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIP, STRCONTACTEMAIL, STROPTOUT, DBLVOCEMISSION, DBLNOXEMISSION, STRCONFIRMATIONNBR, STRDATELASTLOGIN, STRTIMELASTLOGIN, DATTRANSACTION, STRAIRSYEAR, NUMUSERID, STRCONTACTPREFIX, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, DBLXCOORDINATE, DBLYCOORDINATE, STRHORIZONTALCOLLECTIONCODE, STRHORIZONTALACCURACYMEASURE, STRHORIZONTALREFERENCECODE, STRDATEFIRSTCONFIRM, STRESCLOSED}
            rowESSCHEMARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowESSCHEMARow)
            Return rowESSCHEMARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ESSCHEMADataTable = CType(MyBase.Clone,ESSCHEMADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ESSCHEMADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTESYEAR = MyBase.Columns("INTESYEAR")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRFACILITYADDRESS = MyBase.Columns("STRFACILITYADDRESS")
            Me.columnSTRFACILITYCITY = MyBase.Columns("STRFACILITYCITY")
            Me.columnSTRFACILITYSTATE = MyBase.Columns("STRFACILITYSTATE")
            Me.columnSTRFACILITYZIP = MyBase.Columns("STRFACILITYZIP")
            Me.columnSTRCOUNTY = MyBase.Columns("STRCOUNTY")
            Me.columnSTRCONTACTTITLE = MyBase.Columns("STRCONTACTTITLE")
            Me.columnSTRCONTACTPHONENUMBER = MyBase.Columns("STRCONTACTPHONENUMBER")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTCOMPANY = MyBase.Columns("STRCONTACTCOMPANY")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTADDRESS2 = MyBase.Columns("STRCONTACTADDRESS2")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIP = MyBase.Columns("STRCONTACTZIP")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTROPTOUT = MyBase.Columns("STROPTOUT")
            Me.columnDBLVOCEMISSION = MyBase.Columns("DBLVOCEMISSION")
            Me.columnDBLNOXEMISSION = MyBase.Columns("DBLNOXEMISSION")
            Me.columnSTRCONFIRMATIONNBR = MyBase.Columns("STRCONFIRMATIONNBR")
            Me.columnSTRDATELASTLOGIN = MyBase.Columns("STRDATELASTLOGIN")
            Me.columnSTRTIMELASTLOGIN = MyBase.Columns("STRTIMELASTLOGIN")
            Me.columnDATTRANSACTION = MyBase.Columns("DATTRANSACTION")
            Me.columnSTRAIRSYEAR = MyBase.Columns("STRAIRSYEAR")
            Me.columnNUMUSERID = MyBase.Columns("NUMUSERID")
            Me.columnSTRCONTACTPREFIX = MyBase.Columns("STRCONTACTPREFIX")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnDBLXCOORDINATE = MyBase.Columns("DBLXCOORDINATE")
            Me.columnDBLYCOORDINATE = MyBase.Columns("DBLYCOORDINATE")
            Me.columnSTRHORIZONTALCOLLECTIONCODE = MyBase.Columns("STRHORIZONTALCOLLECTIONCODE")
            Me.columnSTRHORIZONTALACCURACYMEASURE = MyBase.Columns("STRHORIZONTALACCURACYMEASURE")
            Me.columnSTRHORIZONTALREFERENCECODE = MyBase.Columns("STRHORIZONTALREFERENCECODE")
            Me.columnSTRDATEFIRSTCONFIRM = MyBase.Columns("STRDATEFIRSTCONFIRM")
            Me.columnSTRESCLOSED = MyBase.Columns("STRESCLOSED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTESYEAR = New Global.System.Data.DataColumn("INTESYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTESYEAR)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRFACILITYADDRESS = New Global.System.Data.DataColumn("STRFACILITYADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYADDRESS)
            Me.columnSTRFACILITYCITY = New Global.System.Data.DataColumn("STRFACILITYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITY)
            Me.columnSTRFACILITYSTATE = New Global.System.Data.DataColumn("STRFACILITYSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYSTATE)
            Me.columnSTRFACILITYZIP = New Global.System.Data.DataColumn("STRFACILITYZIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYZIP)
            Me.columnSTRCOUNTY = New Global.System.Data.DataColumn("STRCOUNTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOUNTY)
            Me.columnSTRCONTACTTITLE = New Global.System.Data.DataColumn("STRCONTACTTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTTITLE)
            Me.columnSTRCONTACTPHONENUMBER = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTCOMPANY = New Global.System.Data.DataColumn("STRCONTACTCOMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCOMPANY)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTADDRESS2 = New Global.System.Data.DataColumn("STRCONTACTADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS2)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIP = New Global.System.Data.DataColumn("STRCONTACTZIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIP)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTROPTOUT = New Global.System.Data.DataColumn("STROPTOUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPTOUT)
            Me.columnDBLVOCEMISSION = New Global.System.Data.DataColumn("DBLVOCEMISSION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLVOCEMISSION)
            Me.columnDBLNOXEMISSION = New Global.System.Data.DataColumn("DBLNOXEMISSION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLNOXEMISSION)
            Me.columnSTRCONFIRMATIONNBR = New Global.System.Data.DataColumn("STRCONFIRMATIONNBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONFIRMATIONNBR)
            Me.columnSTRDATELASTLOGIN = New Global.System.Data.DataColumn("STRDATELASTLOGIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRDATELASTLOGIN)
            Me.columnSTRTIMELASTLOGIN = New Global.System.Data.DataColumn("STRTIMELASTLOGIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRTIMELASTLOGIN)
            Me.columnDATTRANSACTION = New Global.System.Data.DataColumn("DATTRANSACTION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATTRANSACTION)
            Me.columnSTRAIRSYEAR = New Global.System.Data.DataColumn("STRAIRSYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSYEAR)
            Me.columnNUMUSERID = New Global.System.Data.DataColumn("NUMUSERID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMUSERID)
            Me.columnSTRCONTACTPREFIX = New Global.System.Data.DataColumn("STRCONTACTPREFIX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPREFIX)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnDBLXCOORDINATE = New Global.System.Data.DataColumn("DBLXCOORDINATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLXCOORDINATE)
            Me.columnDBLYCOORDINATE = New Global.System.Data.DataColumn("DBLYCOORDINATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLYCOORDINATE)
            Me.columnSTRHORIZONTALCOLLECTIONCODE = New Global.System.Data.DataColumn("STRHORIZONTALCOLLECTIONCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRHORIZONTALCOLLECTIONCODE)
            Me.columnSTRHORIZONTALACCURACYMEASURE = New Global.System.Data.DataColumn("STRHORIZONTALACCURACYMEASURE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRHORIZONTALACCURACYMEASURE)
            Me.columnSTRHORIZONTALREFERENCECODE = New Global.System.Data.DataColumn("STRHORIZONTALREFERENCECODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRHORIZONTALREFERENCECODE)
            Me.columnSTRDATEFIRSTCONFIRM = New Global.System.Data.DataColumn("STRDATEFIRSTCONFIRM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRDATEFIRSTCONFIRM)
            Me.columnSTRESCLOSED = New Global.System.Data.DataColumn("STRESCLOSED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRESCLOSED)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRFACILITYADDRESS.MaxLength = 100
            Me.columnSTRFACILITYCITY.MaxLength = 50
            Me.columnSTRFACILITYSTATE.MaxLength = 2
            Me.columnSTRFACILITYZIP.MaxLength = 10
            Me.columnSTRCOUNTY.MaxLength = 20
            Me.columnSTRCONTACTTITLE.MaxLength = 50
            Me.columnSTRCONTACTPHONENUMBER.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 10
            Me.columnSTRCONTACTCOMPANY.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTADDRESS2.MaxLength = 100
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIP.MaxLength = 10
            Me.columnSTRCONTACTEMAIL.MaxLength = 50
            Me.columnSTROPTOUT.MaxLength = 3
            Me.columnSTRCONFIRMATIONNBR.MaxLength = 25
            Me.columnSTRDATELASTLOGIN.MaxLength = 15
            Me.columnSTRTIMELASTLOGIN.MaxLength = 15
            Me.columnSTRAIRSYEAR.AllowDBNull = false
            Me.columnSTRAIRSYEAR.MaxLength = 20
            Me.columnSTRCONTACTPREFIX.MaxLength = 15
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 50
            Me.columnSTRCONTACTLASTNAME.MaxLength = 50
            Me.columnSTRHORIZONTALCOLLECTIONCODE.MaxLength = 3
            Me.columnSTRHORIZONTALACCURACYMEASURE.MaxLength = 6
            Me.columnSTRHORIZONTALREFERENCECODE.MaxLength = 3
            Me.columnSTRDATEFIRSTCONFIRM.MaxLength = 25
            Me.columnSTRESCLOSED.MaxLength = 12
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewESSCHEMARow() As ESSCHEMARow
            Return CType(Me.NewRow,ESSCHEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ESSCHEMARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ESSCHEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ESSCHEMARowChangedEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowChanged(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ESSCHEMARowChangingEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowChanging(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ESSCHEMARowDeletedEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowDeleted(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ESSCHEMARowDeletingEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowDeleting(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveESSCHEMARow(ByVal row As ESSCHEMARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP10 = New dsIAIP10
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ESSCHEMADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_TITLE_V_RENEWALSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRKEY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCOMPANYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITY As Global.System.Data.DataColumn
        
        Private columnSTROPERATIONALSTATUS As Global.System.Data.DataColumn
        
        Private columnSTRAPPLICATIONTYPE As Global.System.Data.DataColumn
        
        Private columnDATPERMITISSUED As Global.System.Data.DataColumn
        
        Private columnDATEFFECTIVE As Global.System.Data.DataColumn
        
        Private columnSTRPERMITNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCLASS As Global.System.Data.DataColumn
        
        Private columnSTRAPPLICATIONNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnPERMITNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCOUNTYNAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_TITLE_V_RENEWALS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCOMPANYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCOMPANYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATIONALSTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATIONALSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAPPLICATIONTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAPPLICATIONTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATPERMITISSUEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATPERMITISSUED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEFFECTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEFFECTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPERMITNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPERMITNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAPPLICATIONNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAPPLICATIONNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERMITNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERMITNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOUNTYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOUNTYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_TITLE_V_RENEWALSRow
            Get
                Return CType(Me.Rows(index),VW_TITLE_V_RENEWALSRow)
            End Get
        End Property
        
        Public Event VW_TITLE_V_RENEWALSRowChanging As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        Public Event VW_TITLE_V_RENEWALSRowChanged As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        Public Event VW_TITLE_V_RENEWALSRowDeleting As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        Public Event VW_TITLE_V_RENEWALSRowDeleted As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_TITLE_V_RENEWALSRow(ByVal row As VW_TITLE_V_RENEWALSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_TITLE_V_RENEWALSRow( _
                    ByVal STRKEY As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal STRCONTACTCOMPANYNAME As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIPCODE As String,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STROPERATIONALSTATUS As String,  _
                    ByVal STRAPPLICATIONTYPE As String,  _
                    ByVal DATPERMITISSUED As Date,  _
                    ByVal DATEFFECTIVE As Date,  _
                    ByVal STRPERMITNUMBER As String,  _
                    ByVal STRCLASS As String,  _
                    ByVal STRAPPLICATIONNUMBER As String,  _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal AIRSNUMBER As String,  _
                    ByVal PERMITNUMBER As String,  _
                    ByVal STRCOUNTYNAME As String) As VW_TITLE_V_RENEWALSRow
            Dim rowVW_TITLE_V_RENEWALSRow As VW_TITLE_V_RENEWALSRow = CType(Me.NewRow,VW_TITLE_V_RENEWALSRow)
            Dim columnValuesArray() As Object = New Object() {STRKEY, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTCOMPANYNAME, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, STRFACILITYNAME, STRFACILITYCITY, STROPERATIONALSTATUS, STRAPPLICATIONTYPE, DATPERMITISSUED, DATEFFECTIVE, STRPERMITNUMBER, STRCLASS, STRAPPLICATIONNUMBER, STRAIRSNUMBER, AIRSNUMBER, PERMITNUMBER, STRCOUNTYNAME}
            rowVW_TITLE_V_RENEWALSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_TITLE_V_RENEWALSRow)
            Return rowVW_TITLE_V_RENEWALSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_TITLE_V_RENEWALSDataTable = CType(MyBase.Clone,VW_TITLE_V_RENEWALSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_TITLE_V_RENEWALSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRKEY = MyBase.Columns("STRKEY")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTCOMPANYNAME = MyBase.Columns("STRCONTACTCOMPANYNAME")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRFACILITYCITY = MyBase.Columns("STRFACILITYCITY")
            Me.columnSTROPERATIONALSTATUS = MyBase.Columns("STROPERATIONALSTATUS")
            Me.columnSTRAPPLICATIONTYPE = MyBase.Columns("STRAPPLICATIONTYPE")
            Me.columnDATPERMITISSUED = MyBase.Columns("DATPERMITISSUED")
            Me.columnDATEFFECTIVE = MyBase.Columns("DATEFFECTIVE")
            Me.columnSTRPERMITNUMBER = MyBase.Columns("STRPERMITNUMBER")
            Me.columnSTRCLASS = MyBase.Columns("STRCLASS")
            Me.columnSTRAPPLICATIONNUMBER = MyBase.Columns("STRAPPLICATIONNUMBER")
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnAIRSNUMBER = MyBase.Columns("AIRSNUMBER")
            Me.columnPERMITNUMBER = MyBase.Columns("PERMITNUMBER")
            Me.columnSTRCOUNTYNAME = MyBase.Columns("STRCOUNTYNAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRKEY = New Global.System.Data.DataColumn("STRKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRKEY)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTCOMPANYNAME = New Global.System.Data.DataColumn("STRCONTACTCOMPANYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCOMPANYNAME)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRFACILITYCITY = New Global.System.Data.DataColumn("STRFACILITYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITY)
            Me.columnSTROPERATIONALSTATUS = New Global.System.Data.DataColumn("STROPERATIONALSTATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATIONALSTATUS)
            Me.columnSTRAPPLICATIONTYPE = New Global.System.Data.DataColumn("STRAPPLICATIONTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAPPLICATIONTYPE)
            Me.columnDATPERMITISSUED = New Global.System.Data.DataColumn("DATPERMITISSUED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATPERMITISSUED)
            Me.columnDATEFFECTIVE = New Global.System.Data.DataColumn("DATEFFECTIVE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEFFECTIVE)
            Me.columnSTRPERMITNUMBER = New Global.System.Data.DataColumn("STRPERMITNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPERMITNUMBER)
            Me.columnSTRCLASS = New Global.System.Data.DataColumn("STRCLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS)
            Me.columnSTRAPPLICATIONNUMBER = New Global.System.Data.DataColumn("STRAPPLICATIONNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAPPLICATIONNUMBER)
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnAIRSNUMBER = New Global.System.Data.DataColumn("AIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIRSNUMBER)
            Me.columnPERMITNUMBER = New Global.System.Data.DataColumn("PERMITNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERMITNUMBER)
            Me.columnSTRCOUNTYNAME = New Global.System.Data.DataColumn("STRCOUNTYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOUNTYNAME)
            Me.columnSTRKEY.AllowDBNull = false
            Me.columnSTRKEY.MaxLength = 2
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTCOMPANYNAME.AllowDBNull = false
            Me.columnSTRCONTACTCOMPANYNAME.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRFACILITYCITY.AllowDBNull = false
            Me.columnSTRFACILITYCITY.MaxLength = 50
            Me.columnSTROPERATIONALSTATUS.AllowDBNull = false
            Me.columnSTROPERATIONALSTATUS.MaxLength = 1
            Me.columnSTRAPPLICATIONTYPE.MaxLength = 10
            Me.columnSTRPERMITNUMBER.MaxLength = 15
            Me.columnSTRCLASS.AllowDBNull = false
            Me.columnSTRCLASS.MaxLength = 2
            Me.columnSTRAPPLICATIONNUMBER.AllowDBNull = false
            Me.columnSTRAPPLICATIONNUMBER.MaxLength = 10
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnAIRSNUMBER.MaxLength = 9
            Me.columnPERMITNUMBER.MaxLength = 20
            Me.columnSTRCOUNTYNAME.AllowDBNull = false
            Me.columnSTRCOUNTYNAME.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_TITLE_V_RENEWALSRow() As VW_TITLE_V_RENEWALSRow
            Return CType(Me.NewRow,VW_TITLE_V_RENEWALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_TITLE_V_RENEWALSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_TITLE_V_RENEWALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowChanged(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowChanging(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowDeleted(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowDeleting(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_TITLE_V_RENEWALSRow(ByVal row As VW_TITLE_V_RENEWALSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP10 = New dsIAIP10
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_TITLE_V_RENEWALSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_NSPS_STATUSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRNSPS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPT As Global.System.Data.DataColumn
        
        Private columnSTRNSPS As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPTREASON As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnSHUTDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_NSPS_STATUS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTREASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPTREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHUTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHUTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_NSPS_STATUSRow
            Get
                Return CType(Me.Rows(index),VW_NSPS_STATUSRow)
            End Get
        End Property
        
        Public Event VW_NSPS_STATUSRowChanging As VW_NSPS_STATUSRowChangeEventHandler
        
        Public Event VW_NSPS_STATUSRowChanged As VW_NSPS_STATUSRowChangeEventHandler
        
        Public Event VW_NSPS_STATUSRowDeleting As VW_NSPS_STATUSRowChangeEventHandler
        
        Public Event VW_NSPS_STATUSRowDeleted As VW_NSPS_STATUSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_NSPS_STATUSRow(ByVal row As VW_NSPS_STATUSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_NSPS_STATUSRow(ByVal STRAIRSNUMBER As String, ByVal STRNSPS1 As String, ByVal STRNSPSEXEMPT As String, ByVal STRNSPS As String, ByVal INTYEAR As Decimal, ByVal STRNSPSEXEMPTREASON As String, ByVal STROPERATE As String, ByVal SHUTDATE As Date) As VW_NSPS_STATUSRow
            Dim rowVW_NSPS_STATUSRow As VW_NSPS_STATUSRow = CType(Me.NewRow,VW_NSPS_STATUSRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRNSPS1, STRNSPSEXEMPT, STRNSPS, INTYEAR, STRNSPSEXEMPTREASON, STROPERATE, SHUTDATE}
            rowVW_NSPS_STATUSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_NSPS_STATUSRow)
            Return rowVW_NSPS_STATUSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_NSPS_STATUSDataTable = CType(MyBase.Clone,VW_NSPS_STATUSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_NSPS_STATUSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRNSPS1 = MyBase.Columns("STRNSPS1")
            Me.columnSTRNSPSEXEMPT = MyBase.Columns("STRNSPSEXEMPT")
            Me.columnSTRNSPS = MyBase.Columns("STRNSPS")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnSTRNSPSEXEMPTREASON = MyBase.Columns("STRNSPSEXEMPTREASON")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnSHUTDATE = MyBase.Columns("SHUTDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRNSPS1 = New Global.System.Data.DataColumn("STRNSPS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS1)
            Me.columnSTRNSPSEXEMPT = New Global.System.Data.DataColumn("STRNSPSEXEMPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPT)
            Me.columnSTRNSPS = New Global.System.Data.DataColumn("STRNSPS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnSTRNSPSEXEMPTREASON = New Global.System.Data.DataColumn("STRNSPSEXEMPTREASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPTREASON)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnSHUTDATE = New Global.System.Data.DataColumn("SHUTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHUTDATE)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRNSPS1.MaxLength = 3
            Me.columnSTRNSPSEXEMPT.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.MaxLength = 3
            Me.columnSTRNSPS.MaxLength = 3
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnSTRNSPSEXEMPTREASON.MaxLength = 4000
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_NSPS_STATUSRow() As VW_NSPS_STATUSRow
            Return CType(Me.NewRow,VW_NSPS_STATUSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_NSPS_STATUSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_NSPS_STATUSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_NSPS_STATUSRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowChanged(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_NSPS_STATUSRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowChanging(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_NSPS_STATUSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowDeleted(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_NSPS_STATUSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowDeleting(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_NSPS_STATUSRow(ByVal row As VW_NSPS_STATUSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP10 = New dsIAIP10
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_NSPS_STATUSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ESSCHEMARow
        Inherits Global.System.Data.DataRow
        
        Private tableESSCHEMA As ESSCHEMADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableESSCHEMA = CType(Me.Table,ESSCHEMADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableESSCHEMA.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableESSCHEMA.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTESYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.INTESYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTESYEAR' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.INTESYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYNAME' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYADDRESS' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYCITY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYSTATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYZIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYZIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYZIP' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYZIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOUNTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCOUNTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOUNTY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCOUNTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTTITLE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTPHONENUMBER' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCOMPANY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTCOMPANY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTADDRESS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTADDRESS1' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTADDRESS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTADDRESS2' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTADDRESS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTCITY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTSTATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTZIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTZIP' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTZIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPTOUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STROPTOUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STROPTOUT' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STROPTOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLVOCEMISSION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLVOCEMISSIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLVOCEMISSION' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLVOCEMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLNOXEMISSION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLNOXEMISSIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLNOXEMISSION' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLNOXEMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONFIRMATIONNBR() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONFIRMATIONNBR' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRDATELASTLOGIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRDATELASTLOGINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRDATELASTLOGIN' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRDATELASTLOGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRTIMELASTLOGIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRTIMELASTLOGINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRTIMELASTLOGIN' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRTIMELASTLOGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATTRANSACTION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DATTRANSACTIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATTRANSACTION' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DATTRANSACTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSYEAR() As String
            Get
                Return CType(Me(Me.tableESSCHEMA.STRAIRSYEARColumn),String)
            End Get
            Set
                Me(Me.tableESSCHEMA.STRAIRSYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMUSERID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.NUMUSERIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMUSERID' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.NUMUSERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPREFIX() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTPREFIXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTPREFIX' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTPREFIXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFIRSTNAME' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTLASTNAME' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLXCOORDINATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLXCOORDINATEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLXCOORDINATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLXCOORDINATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLYCOORDINATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLYCOORDINATEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLYCOORDINATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLYCOORDINATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRHORIZONTALCOLLECTIONCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRHORIZONTALCOLLECTIONCODE' in table 'ESSCHEMA' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRHORIZONTALACCURACYMEASURE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRHORIZONTALACCURACYMEASURE' in table 'ESSCHEMA' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRHORIZONTALREFERENCECODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRHORIZONTALREFERENCECODE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRDATEFIRSTCONFIRM() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRDATEFIRSTCONFIRM' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRESCLOSED() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRESCLOSEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRESCLOSED' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRESCLOSEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTESYEARNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.INTESYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTESYEARNull()
            Me(Me.tableESSCHEMA.INTESYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYNAMENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYNAMENull()
            Me(Me.tableESSCHEMA.STRFACILITYNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYADDRESSNull()
            Me(Me.tableESSCHEMA.STRFACILITYADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYCITYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYCITYNull()
            Me(Me.tableESSCHEMA.STRFACILITYCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYSTATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYSTATENull()
            Me(Me.tableESSCHEMA.STRFACILITYSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYZIPNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYZIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYZIPNull()
            Me(Me.tableESSCHEMA.STRFACILITYZIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOUNTYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCOUNTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOUNTYNull()
            Me(Me.tableESSCHEMA.STRCOUNTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTTITLENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTTITLENull()
            Me(Me.tableESSCHEMA.STRCONTACTTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTPHONENUMBERNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTPHONENUMBERNull()
            Me(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTCOMPANYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTCOMPANYNull()
            Me(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTADDRESS1Null() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTADDRESS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTADDRESS1Null()
            Me(Me.tableESSCHEMA.STRCONTACTADDRESS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTADDRESS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTADDRESS2Null()
            Me(Me.tableESSCHEMA.STRCONTACTADDRESS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTCITYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTCITYNull()
            Me(Me.tableESSCHEMA.STRCONTACTCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTSTATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTSTATENull()
            Me(Me.tableESSCHEMA.STRCONTACTSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTZIPNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTZIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTZIPNull()
            Me(Me.tableESSCHEMA.STRCONTACTZIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableESSCHEMA.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTROPTOUTNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STROPTOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTROPTOUTNull()
            Me(Me.tableESSCHEMA.STROPTOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLVOCEMISSIONNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLVOCEMISSIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLVOCEMISSIONNull()
            Me(Me.tableESSCHEMA.DBLVOCEMISSIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLNOXEMISSIONNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLNOXEMISSIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLNOXEMISSIONNull()
            Me(Me.tableESSCHEMA.DBLNOXEMISSIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONFIRMATIONNBRNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONFIRMATIONNBRNull()
            Me(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRDATELASTLOGINNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRDATELASTLOGINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRDATELASTLOGINNull()
            Me(Me.tableESSCHEMA.STRDATELASTLOGINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRTIMELASTLOGINNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRTIMELASTLOGINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRTIMELASTLOGINNull()
            Me(Me.tableESSCHEMA.STRTIMELASTLOGINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATTRANSACTIONNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DATTRANSACTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATTRANSACTIONNull()
            Me(Me.tableESSCHEMA.DATTRANSACTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMUSERIDNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.NUMUSERIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMUSERIDNull()
            Me(Me.tableESSCHEMA.NUMUSERIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTPREFIXNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTPREFIXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTPREFIXNull()
            Me(Me.tableESSCHEMA.STRCONTACTPREFIXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFIRSTNAMENull()
            Me(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTLASTNAMENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTLASTNAMENull()
            Me(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLXCOORDINATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLXCOORDINATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLXCOORDINATENull()
            Me(Me.tableESSCHEMA.DBLXCOORDINATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLYCOORDINATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLYCOORDINATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLYCOORDINATENull()
            Me(Me.tableESSCHEMA.DBLYCOORDINATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRHORIZONTALCOLLECTIONCODENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRHORIZONTALCOLLECTIONCODENull()
            Me(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRHORIZONTALACCURACYMEASURENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRHORIZONTALACCURACYMEASURENull()
            Me(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRHORIZONTALREFERENCECODENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRHORIZONTALREFERENCECODENull()
            Me(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRDATEFIRSTCONFIRMNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRDATEFIRSTCONFIRMNull()
            Me(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRESCLOSEDNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRESCLOSEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRESCLOSEDNull()
            Me(Me.tableESSCHEMA.STRESCLOSEDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_TITLE_V_RENEWALSRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_TITLE_V_RENEWALS As VW_TITLE_V_RENEWALSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_TITLE_V_RENEWALS = CType(Me.Table,VW_TITLE_V_RENEWALSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRKEY() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRKEYColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCOMPANYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCOMPANYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCOMPANYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITY() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATIONALSTATUS() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STROPERATIONALSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STROPERATIONALSTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAPPLICATIONTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAPPLICATIONTYPE' in table 'VW_TITLE_V_RENEWALS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATPERMITISSUED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATPERMITISSUED' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEFFECTIVE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEFFECTIVE' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPERMITNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRPERMITNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCLASSColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAPPLICATIONNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRSNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AIRSNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERMITNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERMITNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOUNTYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCOUNTYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCOUNTYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAPPLICATIONTYPENull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAPPLICATIONTYPENull()
            Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATPERMITISSUEDNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATPERMITISSUEDNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEFFECTIVENull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEFFECTIVENull()
            Me(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRPERMITNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRPERMITNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRSNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAIRSNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERMITNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERMITNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_NSPS_STATUSRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_NSPS_STATUS As VW_NSPS_STATUSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_NSPS_STATUS = CType(Me.Table,VW_NSPS_STATUSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS1' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPT() As String
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTColumn),String)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPTREASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPSEXEMPTREASON' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHUTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.SHUTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHUTDATE' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.SHUTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.STRNSPS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPS1Null()
            Me(Me.tableVW_NSPS_STATUS.STRNSPS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSNull() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.STRNSPSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSNull()
            Me(Me.tableVW_NSPS_STATUS.STRNSPSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSEXEMPTREASONNull() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSEXEMPTREASONNull()
            Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHUTDATENull() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.SHUTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHUTDATENull()
            Me(Me.tableVW_NSPS_STATUS.SHUTDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ESSCHEMARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ESSCHEMARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ESSCHEMARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ESSCHEMARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_TITLE_V_RENEWALSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_TITLE_V_RENEWALSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_TITLE_V_RENEWALSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_TITLE_V_RENEWALSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_NSPS_STATUSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_NSPS_STATUSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_NSPS_STATUSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_NSPS_STATUSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsIAIP10TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ESSCHEMATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ESSCHEMA"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTESYEAR", "INTESYEAR")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRFACILITYADDRESS", "STRFACILITYADDRESS")
            tableMapping.ColumnMappings.Add("STRFACILITYCITY", "STRFACILITYCITY")
            tableMapping.ColumnMappings.Add("STRFACILITYSTATE", "STRFACILITYSTATE")
            tableMapping.ColumnMappings.Add("STRFACILITYZIP", "STRFACILITYZIP")
            tableMapping.ColumnMappings.Add("STRCOUNTY", "STRCOUNTY")
            tableMapping.ColumnMappings.Add("STRCONTACTTITLE", "STRCONTACTTITLE")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER", "STRCONTACTPHONENUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTCOMPANY", "STRCONTACTCOMPANY")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS2", "STRCONTACTADDRESS2")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIP", "STRCONTACTZIP")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STROPTOUT", "STROPTOUT")
            tableMapping.ColumnMappings.Add("DBLVOCEMISSION", "DBLVOCEMISSION")
            tableMapping.ColumnMappings.Add("DBLNOXEMISSION", "DBLNOXEMISSION")
            tableMapping.ColumnMappings.Add("STRCONFIRMATIONNBR", "STRCONFIRMATIONNBR")
            tableMapping.ColumnMappings.Add("STRDATELASTLOGIN", "STRDATELASTLOGIN")
            tableMapping.ColumnMappings.Add("STRTIMELASTLOGIN", "STRTIMELASTLOGIN")
            tableMapping.ColumnMappings.Add("DATTRANSACTION", "DATTRANSACTION")
            tableMapping.ColumnMappings.Add("STRAIRSYEAR", "STRAIRSYEAR")
            tableMapping.ColumnMappings.Add("NUMUSERID", "NUMUSERID")
            tableMapping.ColumnMappings.Add("STRCONTACTPREFIX", "STRCONTACTPREFIX")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("DBLXCOORDINATE", "DBLXCOORDINATE")
            tableMapping.ColumnMappings.Add("DBLYCOORDINATE", "DBLYCOORDINATE")
            tableMapping.ColumnMappings.Add("STRHORIZONTALCOLLECTIONCODE", "STRHORIZONTALCOLLECTIONCODE")
            tableMapping.ColumnMappings.Add("STRHORIZONTALACCURACYMEASURE", "STRHORIZONTALACCURACYMEASURE")
            tableMapping.ColumnMappings.Add("STRHORIZONTALREFERENCECODE", "STRHORIZONTALREFERENCECODE")
            tableMapping.ColumnMappings.Add("STRDATEFIRSTCONFIRM", "STRDATEFIRSTCONFIRM")
            tableMapping.ColumnMappings.Add("STRESCLOSED", "STRESCLOSED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""ESSCHEMA"" (""STRAIRSNUMBER"", ""INTESYEAR"", ""STRFACILITYNAM"& _ 
                "E"", ""STRFACILITYADDRESS"", ""STRFACILITYCITY"", ""STRFACILITYSTATE"", ""STRFACILITYZIP"& _ 
                """, ""STRCOUNTY"", ""STRCONTACTTITLE"", ""STRCONTACTPHONENUMBER"", ""STRCONTACTFAXNUMBER"& _ 
                """, ""STRCONTACTCOMPANY"", ""STRCONTACTADDRESS1"", ""STRCONTACTADDRESS2"", ""STRCONTACTC"& _ 
                "ITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIP"", ""STRCONTACTEMAIL"", ""STROPTOUT"", ""DBLVO"& _ 
                "CEMISSION"", ""DBLNOXEMISSION"", ""STRCONFIRMATIONNBR"", ""STRDATELASTLOGIN"", ""STRTIME"& _ 
                "LASTLOGIN"", ""DATTRANSACTION"", ""STRAIRSYEAR"", ""NUMUSERID"", ""STRCONTACTPREFIX"", ""S"& _ 
                "TRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""DBLXCOORDINATE"", ""DBLYCOORDINATE"", """& _ 
                "STRHORIZONTALCOLLECTIONCODE"", ""STRHORIZONTALACCURACYMEASURE"", ""STRHORIZONTALREFE"& _ 
                "RENCECODE"", ""STRDATEFIRSTCONFIRM"", ""STRESCLOSED"") VALUES (?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTESYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(4,Byte), CType(0,Byte), "INTESYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYADDRESS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYCITY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYSTATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYZIP", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYZIP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCOUNTY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOUNTY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTTITLE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTPHONENUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTPHONENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTFAXNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTFAXNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTCOMPANY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTCOMPANY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTADDRESS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTADDRESS1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTADDRESS2", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTADDRESS2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTCITY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTSTATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTZIP", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTZIP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTEMAIL", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTEMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROPTOUT", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROPTOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLVOCEMISSION", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(3,Byte), "DBLVOCEMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLNOXEMISSION", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(3,Byte), "DBLNOXEMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONFIRMATIONNBR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONFIRMATIONNBR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRDATELASTLOGIN", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDATELASTLOGIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRTIMELASTLOGIN", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRTIMELASTLOGIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATTRANSACTION", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATTRANSACTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSYEAR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMUSERID", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(0,Byte), "NUMUSERID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTPREFIX", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTPREFIX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTFIRSTNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTFIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTLASTNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTLASTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLXCOORDINATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(10,Byte), "DBLXCOORDINATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLYCOORDINATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(10,Byte), "DBLYCOORDINATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRHORIZONTALCOLLECTIONCODE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRHORIZONTALCOLLECTIONCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRHORIZONTALACCURACYMEASURE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRHORIZONTALACCURACYMEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRHORIZONTALREFERENCECODE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRHORIZONTALREFERENCECODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRDATEFIRSTCONFIRM", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDATEFIRSTCONFIRM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRESCLOSED", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRESCLOSED", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.Iaip.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTESYEAR"", ""STRFACILITYNAME"", ""STRFACILITYADDRESS"", ""ST"& _ 
                "RFACILITYCITY"", ""STRFACILITYSTATE"", ""STRFACILITYZIP"", ""STRCOUNTY"", ""STRCONTACTTI"& _ 
                "TLE"", ""STRCONTACTPHONENUMBER"", ""STRCONTACTFAXNUMBER"", ""STRCONTACTCOMPANY"", ""STRC"& _ 
                "ONTACTADDRESS1"", ""STRCONTACTADDRESS2"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STR"& _ 
                "CONTACTZIP"", ""STRCONTACTEMAIL"", ""STROPTOUT"", ""DBLVOCEMISSION"", ""DBLNOXEMISSION"","& _ 
                " ""STRCONFIRMATIONNBR"", ""STRDATELASTLOGIN"", ""STRTIMELASTLOGIN"", ""DATTRANSACTION"","& _ 
                " ""STRAIRSYEAR"", ""NUMUSERID"", ""STRCONTACTPREFIX"", ""STRCONTACTFIRSTNAME"", ""STRCONT"& _ 
                "ACTLASTNAME"", ""DBLXCOORDINATE"", ""DBLYCOORDINATE"", ""STRHORIZONTALCOLLECTIONCODE"","& _ 
                " ""STRHORIZONTALACCURACYMEASURE"", ""STRHORIZONTALREFERENCECODE"", ""STRDATEFIRSTCONF"& _ 
                "IRM"", ""STRESCLOSED"" FROM ""AIRBRANCH"".""ESSCHEMA"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP10.ESSCHEMADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP10.ESSCHEMADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP10.ESSCHEMADataTable = New dsIAIP10.ESSCHEMADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsIAIP10.ESSCHEMADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsIAIP10) As Integer
            Return Me.Adapter.Update(dataSet, "ESSCHEMA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTESYEAR As Global.System.Nullable(Of Decimal),  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYADDRESS As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STRFACILITYSTATE As String,  _
                    ByVal STRFACILITYZIP As String,  _
                    ByVal STRCOUNTY As String,  _
                    ByVal STRCONTACTTITLE As String,  _
                    ByVal STRCONTACTPHONENUMBER As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTCOMPANY As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTADDRESS2 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIP As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STROPTOUT As String,  _
                    ByVal DBLVOCEMISSION As Global.System.Nullable(Of Decimal),  _
                    ByVal DBLNOXEMISSION As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCONFIRMATIONNBR As String,  _
                    ByVal STRDATELASTLOGIN As String,  _
                    ByVal STRTIMELASTLOGIN As String,  _
                    ByVal DATTRANSACTION As Global.System.Nullable(Of Date),  _
                    ByVal STRAIRSYEAR As String,  _
                    ByVal NUMUSERID As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCONTACTPREFIX As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal DBLXCOORDINATE As Global.System.Nullable(Of Decimal),  _
                    ByVal DBLYCOORDINATE As Global.System.Nullable(Of Decimal),  _
                    ByVal STRHORIZONTALCOLLECTIONCODE As String,  _
                    ByVal STRHORIZONTALACCURACYMEASURE As String,  _
                    ByVal STRHORIZONTALREFERENCECODE As String,  _
                    ByVal STRDATEFIRSTCONFIRM As String,  _
                    ByVal STRESCLOSED As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            If (INTESYEAR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(INTESYEAR.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (STRFACILITYNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRFACILITYNAME,String)
            End If
            If (STRFACILITYADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRFACILITYADDRESS,String)
            End If
            If (STRFACILITYCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRFACILITYCITY,String)
            End If
            If (STRFACILITYSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRFACILITYSTATE,String)
            End If
            If (STRFACILITYZIP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRFACILITYZIP,String)
            End If
            If (STRCOUNTY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRCOUNTY,String)
            End If
            If (STRCONTACTTITLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRCONTACTTITLE,String)
            End If
            If (STRCONTACTPHONENUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRCONTACTPHONENUMBER,String)
            End If
            If (STRCONTACTFAXNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STRCONTACTFAXNUMBER,String)
            End If
            If (STRCONTACTCOMPANY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRCONTACTCOMPANY,String)
            End If
            If (STRCONTACTADDRESS1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STRCONTACTADDRESS1,String)
            End If
            If (STRCONTACTADDRESS2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STRCONTACTADDRESS2,String)
            End If
            If (STRCONTACTCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STRCONTACTCITY,String)
            End If
            If (STRCONTACTSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STRCONTACTSTATE,String)
            End If
            If (STRCONTACTZIP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STRCONTACTZIP,String)
            End If
            If (STRCONTACTEMAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STRCONTACTEMAIL,String)
            End If
            If (STROPTOUT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(STROPTOUT,String)
            End If
            If (DBLVOCEMISSION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DBLVOCEMISSION.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DBLNOXEMISSION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DBLNOXEMISSION.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (STRCONFIRMATIONNBR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(STRCONFIRMATIONNBR,String)
            End If
            If (STRDATELASTLOGIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(STRDATELASTLOGIN,String)
            End If
            If (STRTIMELASTLOGIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(STRTIMELASTLOGIN,String)
            End If
            If (DATTRANSACTION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(DATTRANSACTION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (STRAIRSYEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSYEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(STRAIRSYEAR,String)
            End If
            If (NUMUSERID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(NUMUSERID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (STRCONTACTPREFIX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(STRCONTACTPREFIX,String)
            End If
            If (STRCONTACTFIRSTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(STRCONTACTFIRSTNAME,String)
            End If
            If (STRCONTACTLASTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(STRCONTACTLASTNAME,String)
            End If
            If (DBLXCOORDINATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DBLXCOORDINATE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DBLYCOORDINATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DBLYCOORDINATE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (STRHORIZONTALCOLLECTIONCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(STRHORIZONTALCOLLECTIONCODE,String)
            End If
            If (STRHORIZONTALACCURACYMEASURE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(STRHORIZONTALACCURACYMEASURE,String)
            End If
            If (STRHORIZONTALREFERENCECODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(STRHORIZONTALREFERENCECODE,String)
            End If
            If (STRDATEFIRSTCONFIRM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(STRDATEFIRSTCONFIRM,String)
            End If
            If (STRESCLOSED Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(STRESCLOSED,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_TITLE_V_RENEWALSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_TITLE_V_RENEWALS"
            tableMapping.ColumnMappings.Add("STRKEY", "STRKEY")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTCOMPANYNAME", "STRCONTACTCOMPANYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRFACILITYCITY", "STRFACILITYCITY")
            tableMapping.ColumnMappings.Add("STROPERATIONALSTATUS", "STROPERATIONALSTATUS")
            tableMapping.ColumnMappings.Add("STRAPPLICATIONTYPE", "STRAPPLICATIONTYPE")
            tableMapping.ColumnMappings.Add("DATPERMITISSUED", "DATPERMITISSUED")
            tableMapping.ColumnMappings.Add("DATEFFECTIVE", "DATEFFECTIVE")
            tableMapping.ColumnMappings.Add("STRPERMITNUMBER", "STRPERMITNUMBER")
            tableMapping.ColumnMappings.Add("STRCLASS", "STRCLASS")
            tableMapping.ColumnMappings.Add("STRAPPLICATIONNUMBER", "STRAPPLICATIONNUMBER")
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("AIRSNUMBER", "AIRSNUMBER")
            tableMapping.ColumnMappings.Add("PERMITNUMBER", "PERMITNUMBER")
            tableMapping.ColumnMappings.Add("STRCOUNTYNAME", "STRCOUNTYNAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.Iaip.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRKEY"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""STRCONTACTCOMPANYN"& _ 
                "AME"", ""STRCONTACTADDRESS1"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIPC"& _ 
                "ODE"", ""STRFACILITYNAME"", ""STRFACILITYCITY"", ""STROPERATIONALSTATUS"", ""STRAPPLICAT"& _ 
                "IONTYPE"", ""DATPERMITISSUED"", ""DATEFFECTIVE"", ""STRPERMITNUMBER"", ""STRCLASS"", ""STR"& _ 
                "APPLICATIONNUMBER"", ""STRAIRSNUMBER"", ""AIRSNUMBER"", ""PERMITNUMBER"", ""STRCOUNTYNAM"& _ 
                "E"" FROM ""AIRBRANCH"".""VW_TITLE_V_RENEWALS"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP10.VW_TITLE_V_RENEWALSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP10.VW_TITLE_V_RENEWALSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP10.VW_TITLE_V_RENEWALSDataTable = New dsIAIP10.VW_TITLE_V_RENEWALSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_NSPS_STATUSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_NSPS_STATUS"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRNSPS1", "STRNSPS1")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPT", "STRNSPSEXEMPT")
            tableMapping.ColumnMappings.Add("STRNSPS", "STRNSPS")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPTREASON", "STRNSPSEXEMPTREASON")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("SHUTDATE", "SHUTDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.Iaip.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRNSPS1"", ""STRNSPSEXEMPT"", ""STRNSPS"", ""INTYEAR"", ""STRNS"& _ 
                "PSEXEMPTREASON"", ""STROPERATE"", ""SHUTDATE"" FROM ""AIRBRANCH"".""VW_NSPS_STATUS"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP10.VW_NSPS_STATUSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP10.VW_NSPS_STATUSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP10.VW_NSPS_STATUSDataTable = New dsIAIP10.VW_NSPS_STATUSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
