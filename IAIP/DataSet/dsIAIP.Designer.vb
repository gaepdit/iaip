'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5472
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsIAIP"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsIAIP
    Inherits Global.System.Data.DataSet
    
    Private tableESSCHEMA As ESSCHEMADataTable
    
    Private tableFSADDPAID As FSADDPAIDDataTable
    
    Private tableFSCALCULATIONS As FSCALCULATIONSDataTable
    
    Private tableFSPAYANDSUBMIT As FSPAYANDSUBMITDataTable
    
    Private tableFEEREPORT As FEEREPORTDataTable
    
    Private tableFEESDUE As FEESDUEDataTable
    
    Private tableFEESNONRESPONDENT As FEESNONRESPONDENTDataTable
    
    Private tableFEEVARIANCE As FEEVARIANCEDataTable
    
    Private tableVW_AUDIT_REPORT As VW_AUDIT_REPORTDataTable
    
    Private tableVW_BANKRUPT As VW_BANKRUPTDataTable
    
    Private tableVW_CLASS_CHANGED As VW_CLASS_CHANGEDDataTable
    
    Private tableVW_FACILITY_BALANCE As VW_FACILITY_BALANCEDataTable
    
    Private tableVW_FACILITY_FEE As VW_FACILITY_FEEDataTable
    
    Private tableVW_FACILITY_INFO As VW_FACILITY_INFODataTable
    
    Private tableVW_FEES_BY_AIRS As VW_FEES_BY_AIRSDataTable
    
    Private tableVW_NO_OPERATE As VW_NO_OPERATEDataTable
    
    Private tableVW_NONRESPONDENT As VW_NONRESPONDENTDataTable
    
    Private tableVW_NSPS_STATUS As VW_NSPS_STATUSDataTable
    
    Private tableVW_TITLE_V_RENEWALS As VW_TITLE_V_RENEWALSDataTable
    
    Private tableVW_TOTAL_FEE As VW_TOTAL_FEEDataTable
    
    Private tableVW_TOTAL_PAYMENT As VW_TOTAL_PAYMENTDataTable
    
    Private tableVW_TRAINING_REG As VW_TRAINING_REGDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ESSCHEMA")) Is Nothing) Then
                MyBase.Tables.Add(New ESSCHEMADataTable(ds.Tables("ESSCHEMA")))
            End If
            If (Not (ds.Tables("FSADDPAID")) Is Nothing) Then
                MyBase.Tables.Add(New FSADDPAIDDataTable(ds.Tables("FSADDPAID")))
            End If
            If (Not (ds.Tables("FSCALCULATIONS")) Is Nothing) Then
                MyBase.Tables.Add(New FSCALCULATIONSDataTable(ds.Tables("FSCALCULATIONS")))
            End If
            If (Not (ds.Tables("FSPAYANDSUBMIT")) Is Nothing) Then
                MyBase.Tables.Add(New FSPAYANDSUBMITDataTable(ds.Tables("FSPAYANDSUBMIT")))
            End If
            If (Not (ds.Tables("FEEREPORT")) Is Nothing) Then
                MyBase.Tables.Add(New FEEREPORTDataTable(ds.Tables("FEEREPORT")))
            End If
            If (Not (ds.Tables("FEESDUE")) Is Nothing) Then
                MyBase.Tables.Add(New FEESDUEDataTable(ds.Tables("FEESDUE")))
            End If
            If (Not (ds.Tables("FEESNONRESPONDENT")) Is Nothing) Then
                MyBase.Tables.Add(New FEESNONRESPONDENTDataTable(ds.Tables("FEESNONRESPONDENT")))
            End If
            If (Not (ds.Tables("FEEVARIANCE")) Is Nothing) Then
                MyBase.Tables.Add(New FEEVARIANCEDataTable(ds.Tables("FEEVARIANCE")))
            End If
            If (Not (ds.Tables("VW_AUDIT_REPORT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_AUDIT_REPORTDataTable(ds.Tables("VW_AUDIT_REPORT")))
            End If
            If (Not (ds.Tables("VW_BANKRUPT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_BANKRUPTDataTable(ds.Tables("VW_BANKRUPT")))
            End If
            If (Not (ds.Tables("VW_CLASS_CHANGED")) Is Nothing) Then
                MyBase.Tables.Add(New VW_CLASS_CHANGEDDataTable(ds.Tables("VW_CLASS_CHANGED")))
            End If
            If (Not (ds.Tables("VW_FACILITY_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FACILITY_BALANCEDataTable(ds.Tables("VW_FACILITY_BALANCE")))
            End If
            If (Not (ds.Tables("VW_FACILITY_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FACILITY_FEEDataTable(ds.Tables("VW_FACILITY_FEE")))
            End If
            If (Not (ds.Tables("VW_FACILITY_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FACILITY_INFODataTable(ds.Tables("VW_FACILITY_INFO")))
            End If
            If (Not (ds.Tables("VW_FEES_BY_AIRS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FEES_BY_AIRSDataTable(ds.Tables("VW_FEES_BY_AIRS")))
            End If
            If (Not (ds.Tables("VW_NO_OPERATE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NO_OPERATEDataTable(ds.Tables("VW_NO_OPERATE")))
            End If
            If (Not (ds.Tables("VW_NONRESPONDENT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NONRESPONDENTDataTable(ds.Tables("VW_NONRESPONDENT")))
            End If
            If (Not (ds.Tables("VW_NSPS_STATUS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NSPS_STATUSDataTable(ds.Tables("VW_NSPS_STATUS")))
            End If
            If (Not (ds.Tables("VW_TITLE_V_RENEWALS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TITLE_V_RENEWALSDataTable(ds.Tables("VW_TITLE_V_RENEWALS")))
            End If
            If (Not (ds.Tables("VW_TOTAL_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TOTAL_FEEDataTable(ds.Tables("VW_TOTAL_FEE")))
            End If
            If (Not (ds.Tables("VW_TOTAL_PAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TOTAL_PAYMENTDataTable(ds.Tables("VW_TOTAL_PAYMENT")))
            End If
            If (Not (ds.Tables("VW_TRAINING_REG")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TRAINING_REGDataTable(ds.Tables("VW_TRAINING_REG")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ESSCHEMA() As ESSCHEMADataTable
        Get
            Return Me.tableESSCHEMA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FSADDPAID() As FSADDPAIDDataTable
        Get
            Return Me.tableFSADDPAID
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FSCALCULATIONS() As FSCALCULATIONSDataTable
        Get
            Return Me.tableFSCALCULATIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FSPAYANDSUBMIT() As FSPAYANDSUBMITDataTable
        Get
            Return Me.tableFSPAYANDSUBMIT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FEEREPORT() As FEEREPORTDataTable
        Get
            Return Me.tableFEEREPORT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FEESDUE() As FEESDUEDataTable
        Get
            Return Me.tableFEESDUE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FEESNONRESPONDENT() As FEESNONRESPONDENTDataTable
        Get
            Return Me.tableFEESNONRESPONDENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FEEVARIANCE() As FEEVARIANCEDataTable
        Get
            Return Me.tableFEEVARIANCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_AUDIT_REPORT() As VW_AUDIT_REPORTDataTable
        Get
            Return Me.tableVW_AUDIT_REPORT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_BANKRUPT() As VW_BANKRUPTDataTable
        Get
            Return Me.tableVW_BANKRUPT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_CLASS_CHANGED() As VW_CLASS_CHANGEDDataTable
        Get
            Return Me.tableVW_CLASS_CHANGED
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_FACILITY_BALANCE() As VW_FACILITY_BALANCEDataTable
        Get
            Return Me.tableVW_FACILITY_BALANCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_FACILITY_FEE() As VW_FACILITY_FEEDataTable
        Get
            Return Me.tableVW_FACILITY_FEE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_FACILITY_INFO() As VW_FACILITY_INFODataTable
        Get
            Return Me.tableVW_FACILITY_INFO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_FEES_BY_AIRS() As VW_FEES_BY_AIRSDataTable
        Get
            Return Me.tableVW_FEES_BY_AIRS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_NO_OPERATE() As VW_NO_OPERATEDataTable
        Get
            Return Me.tableVW_NO_OPERATE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_NONRESPONDENT() As VW_NONRESPONDENTDataTable
        Get
            Return Me.tableVW_NONRESPONDENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_NSPS_STATUS() As VW_NSPS_STATUSDataTable
        Get
            Return Me.tableVW_NSPS_STATUS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_TITLE_V_RENEWALS() As VW_TITLE_V_RENEWALSDataTable
        Get
            Return Me.tableVW_TITLE_V_RENEWALS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_TOTAL_FEE() As VW_TOTAL_FEEDataTable
        Get
            Return Me.tableVW_TOTAL_FEE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_TOTAL_PAYMENT() As VW_TOTAL_PAYMENTDataTable
        Get
            Return Me.tableVW_TOTAL_PAYMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_TRAINING_REG() As VW_TRAINING_REGDataTable
        Get
            Return Me.tableVW_TRAINING_REG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsIAIP = CType(MyBase.Clone,dsIAIP)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ESSCHEMA")) Is Nothing) Then
                MyBase.Tables.Add(New ESSCHEMADataTable(ds.Tables("ESSCHEMA")))
            End If
            If (Not (ds.Tables("FSADDPAID")) Is Nothing) Then
                MyBase.Tables.Add(New FSADDPAIDDataTable(ds.Tables("FSADDPAID")))
            End If
            If (Not (ds.Tables("FSCALCULATIONS")) Is Nothing) Then
                MyBase.Tables.Add(New FSCALCULATIONSDataTable(ds.Tables("FSCALCULATIONS")))
            End If
            If (Not (ds.Tables("FSPAYANDSUBMIT")) Is Nothing) Then
                MyBase.Tables.Add(New FSPAYANDSUBMITDataTable(ds.Tables("FSPAYANDSUBMIT")))
            End If
            If (Not (ds.Tables("FEEREPORT")) Is Nothing) Then
                MyBase.Tables.Add(New FEEREPORTDataTable(ds.Tables("FEEREPORT")))
            End If
            If (Not (ds.Tables("FEESDUE")) Is Nothing) Then
                MyBase.Tables.Add(New FEESDUEDataTable(ds.Tables("FEESDUE")))
            End If
            If (Not (ds.Tables("FEESNONRESPONDENT")) Is Nothing) Then
                MyBase.Tables.Add(New FEESNONRESPONDENTDataTable(ds.Tables("FEESNONRESPONDENT")))
            End If
            If (Not (ds.Tables("FEEVARIANCE")) Is Nothing) Then
                MyBase.Tables.Add(New FEEVARIANCEDataTable(ds.Tables("FEEVARIANCE")))
            End If
            If (Not (ds.Tables("VW_AUDIT_REPORT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_AUDIT_REPORTDataTable(ds.Tables("VW_AUDIT_REPORT")))
            End If
            If (Not (ds.Tables("VW_BANKRUPT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_BANKRUPTDataTable(ds.Tables("VW_BANKRUPT")))
            End If
            If (Not (ds.Tables("VW_CLASS_CHANGED")) Is Nothing) Then
                MyBase.Tables.Add(New VW_CLASS_CHANGEDDataTable(ds.Tables("VW_CLASS_CHANGED")))
            End If
            If (Not (ds.Tables("VW_FACILITY_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FACILITY_BALANCEDataTable(ds.Tables("VW_FACILITY_BALANCE")))
            End If
            If (Not (ds.Tables("VW_FACILITY_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FACILITY_FEEDataTable(ds.Tables("VW_FACILITY_FEE")))
            End If
            If (Not (ds.Tables("VW_FACILITY_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FACILITY_INFODataTable(ds.Tables("VW_FACILITY_INFO")))
            End If
            If (Not (ds.Tables("VW_FEES_BY_AIRS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_FEES_BY_AIRSDataTable(ds.Tables("VW_FEES_BY_AIRS")))
            End If
            If (Not (ds.Tables("VW_NO_OPERATE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NO_OPERATEDataTable(ds.Tables("VW_NO_OPERATE")))
            End If
            If (Not (ds.Tables("VW_NONRESPONDENT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NONRESPONDENTDataTable(ds.Tables("VW_NONRESPONDENT")))
            End If
            If (Not (ds.Tables("VW_NSPS_STATUS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_NSPS_STATUSDataTable(ds.Tables("VW_NSPS_STATUS")))
            End If
            If (Not (ds.Tables("VW_TITLE_V_RENEWALS")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TITLE_V_RENEWALSDataTable(ds.Tables("VW_TITLE_V_RENEWALS")))
            End If
            If (Not (ds.Tables("VW_TOTAL_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TOTAL_FEEDataTable(ds.Tables("VW_TOTAL_FEE")))
            End If
            If (Not (ds.Tables("VW_TOTAL_PAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TOTAL_PAYMENTDataTable(ds.Tables("VW_TOTAL_PAYMENT")))
            End If
            If (Not (ds.Tables("VW_TRAINING_REG")) Is Nothing) Then
                MyBase.Tables.Add(New VW_TRAINING_REGDataTable(ds.Tables("VW_TRAINING_REG")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableESSCHEMA = CType(MyBase.Tables("ESSCHEMA"),ESSCHEMADataTable)
        If (initTable = true) Then
            If (Not (Me.tableESSCHEMA) Is Nothing) Then
                Me.tableESSCHEMA.InitVars
            End If
        End If
        Me.tableFSADDPAID = CType(MyBase.Tables("FSADDPAID"),FSADDPAIDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFSADDPAID) Is Nothing) Then
                Me.tableFSADDPAID.InitVars
            End If
        End If
        Me.tableFSCALCULATIONS = CType(MyBase.Tables("FSCALCULATIONS"),FSCALCULATIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFSCALCULATIONS) Is Nothing) Then
                Me.tableFSCALCULATIONS.InitVars
            End If
        End If
        Me.tableFSPAYANDSUBMIT = CType(MyBase.Tables("FSPAYANDSUBMIT"),FSPAYANDSUBMITDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFSPAYANDSUBMIT) Is Nothing) Then
                Me.tableFSPAYANDSUBMIT.InitVars
            End If
        End If
        Me.tableFEEREPORT = CType(MyBase.Tables("FEEREPORT"),FEEREPORTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFEEREPORT) Is Nothing) Then
                Me.tableFEEREPORT.InitVars
            End If
        End If
        Me.tableFEESDUE = CType(MyBase.Tables("FEESDUE"),FEESDUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFEESDUE) Is Nothing) Then
                Me.tableFEESDUE.InitVars
            End If
        End If
        Me.tableFEESNONRESPONDENT = CType(MyBase.Tables("FEESNONRESPONDENT"),FEESNONRESPONDENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFEESNONRESPONDENT) Is Nothing) Then
                Me.tableFEESNONRESPONDENT.InitVars
            End If
        End If
        Me.tableFEEVARIANCE = CType(MyBase.Tables("FEEVARIANCE"),FEEVARIANCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFEEVARIANCE) Is Nothing) Then
                Me.tableFEEVARIANCE.InitVars
            End If
        End If
        Me.tableVW_AUDIT_REPORT = CType(MyBase.Tables("VW_AUDIT_REPORT"),VW_AUDIT_REPORTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_AUDIT_REPORT) Is Nothing) Then
                Me.tableVW_AUDIT_REPORT.InitVars
            End If
        End If
        Me.tableVW_BANKRUPT = CType(MyBase.Tables("VW_BANKRUPT"),VW_BANKRUPTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_BANKRUPT) Is Nothing) Then
                Me.tableVW_BANKRUPT.InitVars
            End If
        End If
        Me.tableVW_CLASS_CHANGED = CType(MyBase.Tables("VW_CLASS_CHANGED"),VW_CLASS_CHANGEDDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_CLASS_CHANGED) Is Nothing) Then
                Me.tableVW_CLASS_CHANGED.InitVars
            End If
        End If
        Me.tableVW_FACILITY_BALANCE = CType(MyBase.Tables("VW_FACILITY_BALANCE"),VW_FACILITY_BALANCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_FACILITY_BALANCE) Is Nothing) Then
                Me.tableVW_FACILITY_BALANCE.InitVars
            End If
        End If
        Me.tableVW_FACILITY_FEE = CType(MyBase.Tables("VW_FACILITY_FEE"),VW_FACILITY_FEEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_FACILITY_FEE) Is Nothing) Then
                Me.tableVW_FACILITY_FEE.InitVars
            End If
        End If
        Me.tableVW_FACILITY_INFO = CType(MyBase.Tables("VW_FACILITY_INFO"),VW_FACILITY_INFODataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_FACILITY_INFO) Is Nothing) Then
                Me.tableVW_FACILITY_INFO.InitVars
            End If
        End If
        Me.tableVW_FEES_BY_AIRS = CType(MyBase.Tables("VW_FEES_BY_AIRS"),VW_FEES_BY_AIRSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_FEES_BY_AIRS) Is Nothing) Then
                Me.tableVW_FEES_BY_AIRS.InitVars
            End If
        End If
        Me.tableVW_NO_OPERATE = CType(MyBase.Tables("VW_NO_OPERATE"),VW_NO_OPERATEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_NO_OPERATE) Is Nothing) Then
                Me.tableVW_NO_OPERATE.InitVars
            End If
        End If
        Me.tableVW_NONRESPONDENT = CType(MyBase.Tables("VW_NONRESPONDENT"),VW_NONRESPONDENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_NONRESPONDENT) Is Nothing) Then
                Me.tableVW_NONRESPONDENT.InitVars
            End If
        End If
        Me.tableVW_NSPS_STATUS = CType(MyBase.Tables("VW_NSPS_STATUS"),VW_NSPS_STATUSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_NSPS_STATUS) Is Nothing) Then
                Me.tableVW_NSPS_STATUS.InitVars
            End If
        End If
        Me.tableVW_TITLE_V_RENEWALS = CType(MyBase.Tables("VW_TITLE_V_RENEWALS"),VW_TITLE_V_RENEWALSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_TITLE_V_RENEWALS) Is Nothing) Then
                Me.tableVW_TITLE_V_RENEWALS.InitVars
            End If
        End If
        Me.tableVW_TOTAL_FEE = CType(MyBase.Tables("VW_TOTAL_FEE"),VW_TOTAL_FEEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_TOTAL_FEE) Is Nothing) Then
                Me.tableVW_TOTAL_FEE.InitVars
            End If
        End If
        Me.tableVW_TOTAL_PAYMENT = CType(MyBase.Tables("VW_TOTAL_PAYMENT"),VW_TOTAL_PAYMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_TOTAL_PAYMENT) Is Nothing) Then
                Me.tableVW_TOTAL_PAYMENT.InitVars
            End If
        End If
        Me.tableVW_TRAINING_REG = CType(MyBase.Tables("VW_TRAINING_REG"),VW_TRAINING_REGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVW_TRAINING_REG) Is Nothing) Then
                Me.tableVW_TRAINING_REG.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsIAIP"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsIAIP.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableESSCHEMA = New ESSCHEMADataTable
        MyBase.Tables.Add(Me.tableESSCHEMA)
        Me.tableFSADDPAID = New FSADDPAIDDataTable
        MyBase.Tables.Add(Me.tableFSADDPAID)
        Me.tableFSCALCULATIONS = New FSCALCULATIONSDataTable
        MyBase.Tables.Add(Me.tableFSCALCULATIONS)
        Me.tableFSPAYANDSUBMIT = New FSPAYANDSUBMITDataTable
        MyBase.Tables.Add(Me.tableFSPAYANDSUBMIT)
        Me.tableFEEREPORT = New FEEREPORTDataTable
        MyBase.Tables.Add(Me.tableFEEREPORT)
        Me.tableFEESDUE = New FEESDUEDataTable
        MyBase.Tables.Add(Me.tableFEESDUE)
        Me.tableFEESNONRESPONDENT = New FEESNONRESPONDENTDataTable
        MyBase.Tables.Add(Me.tableFEESNONRESPONDENT)
        Me.tableFEEVARIANCE = New FEEVARIANCEDataTable
        MyBase.Tables.Add(Me.tableFEEVARIANCE)
        Me.tableVW_AUDIT_REPORT = New VW_AUDIT_REPORTDataTable
        MyBase.Tables.Add(Me.tableVW_AUDIT_REPORT)
        Me.tableVW_BANKRUPT = New VW_BANKRUPTDataTable
        MyBase.Tables.Add(Me.tableVW_BANKRUPT)
        Me.tableVW_CLASS_CHANGED = New VW_CLASS_CHANGEDDataTable
        MyBase.Tables.Add(Me.tableVW_CLASS_CHANGED)
        Me.tableVW_FACILITY_BALANCE = New VW_FACILITY_BALANCEDataTable
        MyBase.Tables.Add(Me.tableVW_FACILITY_BALANCE)
        Me.tableVW_FACILITY_FEE = New VW_FACILITY_FEEDataTable
        MyBase.Tables.Add(Me.tableVW_FACILITY_FEE)
        Me.tableVW_FACILITY_INFO = New VW_FACILITY_INFODataTable
        MyBase.Tables.Add(Me.tableVW_FACILITY_INFO)
        Me.tableVW_FEES_BY_AIRS = New VW_FEES_BY_AIRSDataTable
        MyBase.Tables.Add(Me.tableVW_FEES_BY_AIRS)
        Me.tableVW_NO_OPERATE = New VW_NO_OPERATEDataTable
        MyBase.Tables.Add(Me.tableVW_NO_OPERATE)
        Me.tableVW_NONRESPONDENT = New VW_NONRESPONDENTDataTable
        MyBase.Tables.Add(Me.tableVW_NONRESPONDENT)
        Me.tableVW_NSPS_STATUS = New VW_NSPS_STATUSDataTable
        MyBase.Tables.Add(Me.tableVW_NSPS_STATUS)
        Me.tableVW_TITLE_V_RENEWALS = New VW_TITLE_V_RENEWALSDataTable
        MyBase.Tables.Add(Me.tableVW_TITLE_V_RENEWALS)
        Me.tableVW_TOTAL_FEE = New VW_TOTAL_FEEDataTable
        MyBase.Tables.Add(Me.tableVW_TOTAL_FEE)
        Me.tableVW_TOTAL_PAYMENT = New VW_TOTAL_PAYMENTDataTable
        MyBase.Tables.Add(Me.tableVW_TOTAL_PAYMENT)
        Me.tableVW_TRAINING_REG = New VW_TRAINING_REGDataTable
        MyBase.Tables.Add(Me.tableVW_TRAINING_REG)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeESSCHEMA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFSADDPAID() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFSCALCULATIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFSPAYANDSUBMIT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFEEREPORT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFEESDUE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFEESNONRESPONDENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFEEVARIANCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_AUDIT_REPORT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_BANKRUPT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_CLASS_CHANGED() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_FACILITY_BALANCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_FACILITY_FEE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_FACILITY_INFO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_FEES_BY_AIRS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_NO_OPERATE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_NONRESPONDENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_NSPS_STATUS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_TITLE_V_RENEWALS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_TOTAL_FEE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_TOTAL_PAYMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVW_TRAINING_REG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsIAIP = New dsIAIP
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ESSCHEMARowChangeEventHandler(ByVal sender As Object, ByVal e As ESSCHEMARowChangeEvent)
    
    Public Delegate Sub FSADDPAIDRowChangeEventHandler(ByVal sender As Object, ByVal e As FSADDPAIDRowChangeEvent)
    
    Public Delegate Sub FSCALCULATIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As FSCALCULATIONSRowChangeEvent)
    
    Public Delegate Sub FSPAYANDSUBMITRowChangeEventHandler(ByVal sender As Object, ByVal e As FSPAYANDSUBMITRowChangeEvent)
    
    Public Delegate Sub FEEREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As FEEREPORTRowChangeEvent)
    
    Public Delegate Sub FEESDUERowChangeEventHandler(ByVal sender As Object, ByVal e As FEESDUERowChangeEvent)
    
    Public Delegate Sub FEESNONRESPONDENTRowChangeEventHandler(ByVal sender As Object, ByVal e As FEESNONRESPONDENTRowChangeEvent)
    
    Public Delegate Sub FEEVARIANCERowChangeEventHandler(ByVal sender As Object, ByVal e As FEEVARIANCERowChangeEvent)
    
    Public Delegate Sub VW_AUDIT_REPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_AUDIT_REPORTRowChangeEvent)
    
    Public Delegate Sub VW_BANKRUPTRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_BANKRUPTRowChangeEvent)
    
    Public Delegate Sub VW_CLASS_CHANGEDRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_CLASS_CHANGEDRowChangeEvent)
    
    Public Delegate Sub VW_FACILITY_BALANCERowChangeEventHandler(ByVal sender As Object, ByVal e As VW_FACILITY_BALANCERowChangeEvent)
    
    Public Delegate Sub VW_FACILITY_FEERowChangeEventHandler(ByVal sender As Object, ByVal e As VW_FACILITY_FEERowChangeEvent)
    
    Public Delegate Sub VW_FACILITY_INFORowChangeEventHandler(ByVal sender As Object, ByVal e As VW_FACILITY_INFORowChangeEvent)
    
    Public Delegate Sub VW_FEES_BY_AIRSRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_FEES_BY_AIRSRowChangeEvent)
    
    Public Delegate Sub VW_NO_OPERATERowChangeEventHandler(ByVal sender As Object, ByVal e As VW_NO_OPERATERowChangeEvent)
    
    Public Delegate Sub VW_NONRESPONDENTRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_NONRESPONDENTRowChangeEvent)
    
    Public Delegate Sub VW_NSPS_STATUSRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_NSPS_STATUSRowChangeEvent)
    
    Public Delegate Sub VW_TITLE_V_RENEWALSRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_TITLE_V_RENEWALSRowChangeEvent)
    
    Public Delegate Sub VW_TOTAL_FEERowChangeEventHandler(ByVal sender As Object, ByVal e As VW_TOTAL_FEERowChangeEvent)
    
    Public Delegate Sub VW_TOTAL_PAYMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_TOTAL_PAYMENTRowChangeEvent)
    
    Public Delegate Sub VW_TRAINING_REGRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_TRAINING_REGRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ESSCHEMADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTESYEAR As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYADDRESS As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITY As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYSTATE As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYZIP As Global.System.Data.DataColumn
        
        Private columnSTRCOUNTY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTTITLE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCOMPANY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS2 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIP As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTROPTOUT As Global.System.Data.DataColumn
        
        Private columnDBLVOCEMISSION As Global.System.Data.DataColumn
        
        Private columnDBLNOXEMISSION As Global.System.Data.DataColumn
        
        Private columnSTRCONFIRMATIONNBR As Global.System.Data.DataColumn
        
        Private columnSTRDATELASTLOGIN As Global.System.Data.DataColumn
        
        Private columnSTRTIMELASTLOGIN As Global.System.Data.DataColumn
        
        Private columnDATTRANSACTION As Global.System.Data.DataColumn
        
        Private columnSTRAIRSYEAR As Global.System.Data.DataColumn
        
        Private columnNUMUSERID As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPREFIX As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnDBLXCOORDINATE As Global.System.Data.DataColumn
        
        Private columnDBLYCOORDINATE As Global.System.Data.DataColumn
        
        Private columnSTRHORIZONTALCOLLECTIONCODE As Global.System.Data.DataColumn
        
        Private columnSTRHORIZONTALACCURACYMEASURE As Global.System.Data.DataColumn
        
        Private columnSTRHORIZONTALREFERENCECODE As Global.System.Data.DataColumn
        
        Private columnSTRDATEFIRSTCONFIRM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ESSCHEMA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTESYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTESYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYZIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOUNTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOUNTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCOMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCOMPANY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPTOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPTOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLVOCEMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLVOCEMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLNOXEMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLNOXEMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONFIRMATIONNBRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONFIRMATIONNBR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRDATELASTLOGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRDATELASTLOGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRTIMELASTLOGINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRTIMELASTLOGIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATTRANSACTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATTRANSACTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMUSERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMUSERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPREFIXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPREFIX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLXCOORDINATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLXCOORDINATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBLYCOORDINATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBLYCOORDINATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRHORIZONTALCOLLECTIONCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRHORIZONTALCOLLECTIONCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRHORIZONTALACCURACYMEASUREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRHORIZONTALACCURACYMEASURE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRHORIZONTALREFERENCECODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRHORIZONTALREFERENCECODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRDATEFIRSTCONFIRMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRDATEFIRSTCONFIRM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ESSCHEMARow
            Get
                Return CType(Me.Rows(index),ESSCHEMARow)
            End Get
        End Property
        
        Public Event ESSCHEMARowChanging As ESSCHEMARowChangeEventHandler
        
        Public Event ESSCHEMARowChanged As ESSCHEMARowChangeEventHandler
        
        Public Event ESSCHEMARowDeleting As ESSCHEMARowChangeEventHandler
        
        Public Event ESSCHEMARowDeleted As ESSCHEMARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddESSCHEMARow(ByVal row As ESSCHEMARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddESSCHEMARow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTESYEAR As Decimal,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYADDRESS As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STRFACILITYSTATE As String,  _
                    ByVal STRFACILITYZIP As String,  _
                    ByVal STRCOUNTY As String,  _
                    ByVal STRCONTACTTITLE As String,  _
                    ByVal STRCONTACTPHONENUMBER As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTCOMPANY As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTADDRESS2 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIP As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STROPTOUT As String,  _
                    ByVal DBLVOCEMISSION As Decimal,  _
                    ByVal DBLNOXEMISSION As Decimal,  _
                    ByVal STRCONFIRMATIONNBR As String,  _
                    ByVal STRDATELASTLOGIN As String,  _
                    ByVal STRTIMELASTLOGIN As String,  _
                    ByVal DATTRANSACTION As Date,  _
                    ByVal STRAIRSYEAR As String,  _
                    ByVal NUMUSERID As Decimal,  _
                    ByVal STRCONTACTPREFIX As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal DBLXCOORDINATE As Decimal,  _
                    ByVal DBLYCOORDINATE As Decimal,  _
                    ByVal STRHORIZONTALCOLLECTIONCODE As String,  _
                    ByVal STRHORIZONTALACCURACYMEASURE As String,  _
                    ByVal STRHORIZONTALREFERENCECODE As String,  _
                    ByVal STRDATEFIRSTCONFIRM As String) As ESSCHEMARow
            Dim rowESSCHEMARow As ESSCHEMARow = CType(Me.NewRow,ESSCHEMARow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTESYEAR, STRFACILITYNAME, STRFACILITYADDRESS, STRFACILITYCITY, STRFACILITYSTATE, STRFACILITYZIP, STRCOUNTY, STRCONTACTTITLE, STRCONTACTPHONENUMBER, STRCONTACTFAXNUMBER, STRCONTACTCOMPANY, STRCONTACTADDRESS1, STRCONTACTADDRESS2, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIP, STRCONTACTEMAIL, STROPTOUT, DBLVOCEMISSION, DBLNOXEMISSION, STRCONFIRMATIONNBR, STRDATELASTLOGIN, STRTIMELASTLOGIN, DATTRANSACTION, STRAIRSYEAR, NUMUSERID, STRCONTACTPREFIX, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, DBLXCOORDINATE, DBLYCOORDINATE, STRHORIZONTALCOLLECTIONCODE, STRHORIZONTALACCURACYMEASURE, STRHORIZONTALREFERENCECODE, STRDATEFIRSTCONFIRM}
            rowESSCHEMARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowESSCHEMARow)
            Return rowESSCHEMARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ESSCHEMADataTable = CType(MyBase.Clone,ESSCHEMADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ESSCHEMADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTESYEAR = MyBase.Columns("INTESYEAR")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRFACILITYADDRESS = MyBase.Columns("STRFACILITYADDRESS")
            Me.columnSTRFACILITYCITY = MyBase.Columns("STRFACILITYCITY")
            Me.columnSTRFACILITYSTATE = MyBase.Columns("STRFACILITYSTATE")
            Me.columnSTRFACILITYZIP = MyBase.Columns("STRFACILITYZIP")
            Me.columnSTRCOUNTY = MyBase.Columns("STRCOUNTY")
            Me.columnSTRCONTACTTITLE = MyBase.Columns("STRCONTACTTITLE")
            Me.columnSTRCONTACTPHONENUMBER = MyBase.Columns("STRCONTACTPHONENUMBER")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTCOMPANY = MyBase.Columns("STRCONTACTCOMPANY")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTADDRESS2 = MyBase.Columns("STRCONTACTADDRESS2")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIP = MyBase.Columns("STRCONTACTZIP")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTROPTOUT = MyBase.Columns("STROPTOUT")
            Me.columnDBLVOCEMISSION = MyBase.Columns("DBLVOCEMISSION")
            Me.columnDBLNOXEMISSION = MyBase.Columns("DBLNOXEMISSION")
            Me.columnSTRCONFIRMATIONNBR = MyBase.Columns("STRCONFIRMATIONNBR")
            Me.columnSTRDATELASTLOGIN = MyBase.Columns("STRDATELASTLOGIN")
            Me.columnSTRTIMELASTLOGIN = MyBase.Columns("STRTIMELASTLOGIN")
            Me.columnDATTRANSACTION = MyBase.Columns("DATTRANSACTION")
            Me.columnSTRAIRSYEAR = MyBase.Columns("STRAIRSYEAR")
            Me.columnNUMUSERID = MyBase.Columns("NUMUSERID")
            Me.columnSTRCONTACTPREFIX = MyBase.Columns("STRCONTACTPREFIX")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnDBLXCOORDINATE = MyBase.Columns("DBLXCOORDINATE")
            Me.columnDBLYCOORDINATE = MyBase.Columns("DBLYCOORDINATE")
            Me.columnSTRHORIZONTALCOLLECTIONCODE = MyBase.Columns("STRHORIZONTALCOLLECTIONCODE")
            Me.columnSTRHORIZONTALACCURACYMEASURE = MyBase.Columns("STRHORIZONTALACCURACYMEASURE")
            Me.columnSTRHORIZONTALREFERENCECODE = MyBase.Columns("STRHORIZONTALREFERENCECODE")
            Me.columnSTRDATEFIRSTCONFIRM = MyBase.Columns("STRDATEFIRSTCONFIRM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTESYEAR = New Global.System.Data.DataColumn("INTESYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTESYEAR)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRFACILITYADDRESS = New Global.System.Data.DataColumn("STRFACILITYADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYADDRESS)
            Me.columnSTRFACILITYCITY = New Global.System.Data.DataColumn("STRFACILITYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITY)
            Me.columnSTRFACILITYSTATE = New Global.System.Data.DataColumn("STRFACILITYSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYSTATE)
            Me.columnSTRFACILITYZIP = New Global.System.Data.DataColumn("STRFACILITYZIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYZIP)
            Me.columnSTRCOUNTY = New Global.System.Data.DataColumn("STRCOUNTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOUNTY)
            Me.columnSTRCONTACTTITLE = New Global.System.Data.DataColumn("STRCONTACTTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTTITLE)
            Me.columnSTRCONTACTPHONENUMBER = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTCOMPANY = New Global.System.Data.DataColumn("STRCONTACTCOMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCOMPANY)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTADDRESS2 = New Global.System.Data.DataColumn("STRCONTACTADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS2)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIP = New Global.System.Data.DataColumn("STRCONTACTZIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIP)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTROPTOUT = New Global.System.Data.DataColumn("STROPTOUT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPTOUT)
            Me.columnDBLVOCEMISSION = New Global.System.Data.DataColumn("DBLVOCEMISSION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLVOCEMISSION)
            Me.columnDBLNOXEMISSION = New Global.System.Data.DataColumn("DBLNOXEMISSION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLNOXEMISSION)
            Me.columnSTRCONFIRMATIONNBR = New Global.System.Data.DataColumn("STRCONFIRMATIONNBR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONFIRMATIONNBR)
            Me.columnSTRDATELASTLOGIN = New Global.System.Data.DataColumn("STRDATELASTLOGIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRDATELASTLOGIN)
            Me.columnSTRTIMELASTLOGIN = New Global.System.Data.DataColumn("STRTIMELASTLOGIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRTIMELASTLOGIN)
            Me.columnDATTRANSACTION = New Global.System.Data.DataColumn("DATTRANSACTION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATTRANSACTION)
            Me.columnSTRAIRSYEAR = New Global.System.Data.DataColumn("STRAIRSYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSYEAR)
            Me.columnNUMUSERID = New Global.System.Data.DataColumn("NUMUSERID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMUSERID)
            Me.columnSTRCONTACTPREFIX = New Global.System.Data.DataColumn("STRCONTACTPREFIX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPREFIX)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnDBLXCOORDINATE = New Global.System.Data.DataColumn("DBLXCOORDINATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLXCOORDINATE)
            Me.columnDBLYCOORDINATE = New Global.System.Data.DataColumn("DBLYCOORDINATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBLYCOORDINATE)
            Me.columnSTRHORIZONTALCOLLECTIONCODE = New Global.System.Data.DataColumn("STRHORIZONTALCOLLECTIONCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRHORIZONTALCOLLECTIONCODE)
            Me.columnSTRHORIZONTALACCURACYMEASURE = New Global.System.Data.DataColumn("STRHORIZONTALACCURACYMEASURE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRHORIZONTALACCURACYMEASURE)
            Me.columnSTRHORIZONTALREFERENCECODE = New Global.System.Data.DataColumn("STRHORIZONTALREFERENCECODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRHORIZONTALREFERENCECODE)
            Me.columnSTRDATEFIRSTCONFIRM = New Global.System.Data.DataColumn("STRDATEFIRSTCONFIRM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRDATEFIRSTCONFIRM)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRFACILITYADDRESS.MaxLength = 100
            Me.columnSTRFACILITYCITY.MaxLength = 50
            Me.columnSTRFACILITYSTATE.MaxLength = 2
            Me.columnSTRFACILITYZIP.MaxLength = 10
            Me.columnSTRCOUNTY.MaxLength = 20
            Me.columnSTRCONTACTTITLE.MaxLength = 50
            Me.columnSTRCONTACTPHONENUMBER.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 10
            Me.columnSTRCONTACTCOMPANY.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTADDRESS2.MaxLength = 100
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIP.MaxLength = 10
            Me.columnSTRCONTACTEMAIL.MaxLength = 50
            Me.columnSTROPTOUT.MaxLength = 3
            Me.columnSTRCONFIRMATIONNBR.MaxLength = 25
            Me.columnSTRDATELASTLOGIN.MaxLength = 15
            Me.columnSTRTIMELASTLOGIN.MaxLength = 15
            Me.columnSTRAIRSYEAR.AllowDBNull = false
            Me.columnSTRAIRSYEAR.MaxLength = 20
            Me.columnSTRCONTACTPREFIX.MaxLength = 15
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 50
            Me.columnSTRCONTACTLASTNAME.MaxLength = 50
            Me.columnSTRHORIZONTALCOLLECTIONCODE.MaxLength = 3
            Me.columnSTRHORIZONTALACCURACYMEASURE.MaxLength = 6
            Me.columnSTRHORIZONTALREFERENCECODE.MaxLength = 3
            Me.columnSTRDATEFIRSTCONFIRM.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewESSCHEMARow() As ESSCHEMARow
            Return CType(Me.NewRow,ESSCHEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ESSCHEMARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ESSCHEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ESSCHEMARowChangedEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowChanged(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ESSCHEMARowChangingEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowChanging(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ESSCHEMARowDeletedEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowDeleted(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ESSCHEMARowDeletingEvent) Is Nothing) Then
                RaiseEvent ESSCHEMARowDeleting(Me, New ESSCHEMARowChangeEvent(CType(e.Row,ESSCHEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveESSCHEMARow(ByVal row As ESSCHEMARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ESSCHEMADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FSADDPAIDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnNUMPAYMENT As Global.System.Data.DataColumn
        
        Private columnDATPAYDATE As Global.System.Data.DataColumn
        
        Private columnSTRCHECKNO As Global.System.Data.DataColumn
        
        Private columnSTRDEPOSITNO As Global.System.Data.DataColumn
        
        Private columnSTRPAYTYPE As Global.System.Data.DataColumn
        
        Private columnSTRBATCHNO As Global.System.Data.DataColumn
        
        Private columnSTRENTRYPERSON As Global.System.Data.DataColumn
        
        Private columnSTRCOMMENTS As Global.System.Data.DataColumn
        
        Private columnINTFISCALYEAR As Global.System.Data.DataColumn
        
        Private columnINTPAYID As Global.System.Data.DataColumn
        
        Private columnSTRINVOICENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FSADDPAID"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPAYMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPAYMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATPAYDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATPAYDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCHECKNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCHECKNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRDEPOSITNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRDEPOSITNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPAYTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPAYTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRBATCHNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRBATCHNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRENTRYPERSONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRENTRYPERSON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTFISCALYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTFISCALYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTPAYIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTPAYID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRINVOICENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRINVOICENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FSADDPAIDRow
            Get
                Return CType(Me.Rows(index),FSADDPAIDRow)
            End Get
        End Property
        
        Public Event FSADDPAIDRowChanging As FSADDPAIDRowChangeEventHandler
        
        Public Event FSADDPAIDRowChanged As FSADDPAIDRowChangeEventHandler
        
        Public Event FSADDPAIDRowDeleting As FSADDPAIDRowChangeEventHandler
        
        Public Event FSADDPAIDRowDeleted As FSADDPAIDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFSADDPAIDRow(ByVal row As FSADDPAIDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFSADDPAIDRow(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal, ByVal NUMPAYMENT As Decimal, ByVal DATPAYDATE As Date, ByVal STRCHECKNO As String, ByVal STRDEPOSITNO As String, ByVal STRPAYTYPE As String, ByVal STRBATCHNO As String, ByVal STRENTRYPERSON As String, ByVal STRCOMMENTS As String, ByVal INTFISCALYEAR As Decimal, ByVal INTPAYID As Decimal, ByVal STRINVOICENO As String) As FSADDPAIDRow
            Dim rowFSADDPAIDRow As FSADDPAIDRow = CType(Me.NewRow,FSADDPAIDRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTYEAR, NUMPAYMENT, DATPAYDATE, STRCHECKNO, STRDEPOSITNO, STRPAYTYPE, STRBATCHNO, STRENTRYPERSON, STRCOMMENTS, INTFISCALYEAR, INTPAYID, STRINVOICENO}
            rowFSADDPAIDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFSADDPAIDRow)
            Return rowFSADDPAIDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByINTPAYID(ByVal INTPAYID As Decimal) As FSADDPAIDRow
            Return CType(Me.Rows.Find(New Object() {INTPAYID}),FSADDPAIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FSADDPAIDDataTable = CType(MyBase.Clone,FSADDPAIDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FSADDPAIDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnNUMPAYMENT = MyBase.Columns("NUMPAYMENT")
            Me.columnDATPAYDATE = MyBase.Columns("DATPAYDATE")
            Me.columnSTRCHECKNO = MyBase.Columns("STRCHECKNO")
            Me.columnSTRDEPOSITNO = MyBase.Columns("STRDEPOSITNO")
            Me.columnSTRPAYTYPE = MyBase.Columns("STRPAYTYPE")
            Me.columnSTRBATCHNO = MyBase.Columns("STRBATCHNO")
            Me.columnSTRENTRYPERSON = MyBase.Columns("STRENTRYPERSON")
            Me.columnSTRCOMMENTS = MyBase.Columns("STRCOMMENTS")
            Me.columnINTFISCALYEAR = MyBase.Columns("INTFISCALYEAR")
            Me.columnINTPAYID = MyBase.Columns("INTPAYID")
            Me.columnSTRINVOICENO = MyBase.Columns("STRINVOICENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnNUMPAYMENT = New Global.System.Data.DataColumn("NUMPAYMENT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPAYMENT)
            Me.columnDATPAYDATE = New Global.System.Data.DataColumn("DATPAYDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATPAYDATE)
            Me.columnSTRCHECKNO = New Global.System.Data.DataColumn("STRCHECKNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCHECKNO)
            Me.columnSTRDEPOSITNO = New Global.System.Data.DataColumn("STRDEPOSITNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRDEPOSITNO)
            Me.columnSTRPAYTYPE = New Global.System.Data.DataColumn("STRPAYTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPAYTYPE)
            Me.columnSTRBATCHNO = New Global.System.Data.DataColumn("STRBATCHNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRBATCHNO)
            Me.columnSTRENTRYPERSON = New Global.System.Data.DataColumn("STRENTRYPERSON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRENTRYPERSON)
            Me.columnSTRCOMMENTS = New Global.System.Data.DataColumn("STRCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMMENTS)
            Me.columnINTFISCALYEAR = New Global.System.Data.DataColumn("INTFISCALYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTFISCALYEAR)
            Me.columnINTPAYID = New Global.System.Data.DataColumn("INTPAYID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTPAYID)
            Me.columnSTRINVOICENO = New Global.System.Data.DataColumn("STRINVOICENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRINVOICENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnINTPAYID}, true))
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnNUMPAYMENT.AllowDBNull = false
            Me.columnSTRCHECKNO.MaxLength = 15
            Me.columnSTRDEPOSITNO.MaxLength = 20
            Me.columnSTRPAYTYPE.MaxLength = 20
            Me.columnSTRBATCHNO.MaxLength = 20
            Me.columnSTRENTRYPERSON.MaxLength = 25
            Me.columnSTRCOMMENTS.MaxLength = 4000
            Me.columnINTPAYID.AllowDBNull = false
            Me.columnINTPAYID.Unique = true
            Me.columnSTRINVOICENO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFSADDPAIDRow() As FSADDPAIDRow
            Return CType(Me.NewRow,FSADDPAIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FSADDPAIDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FSADDPAIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FSADDPAIDRowChangedEvent) Is Nothing) Then
                RaiseEvent FSADDPAIDRowChanged(Me, New FSADDPAIDRowChangeEvent(CType(e.Row,FSADDPAIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FSADDPAIDRowChangingEvent) Is Nothing) Then
                RaiseEvent FSADDPAIDRowChanging(Me, New FSADDPAIDRowChangeEvent(CType(e.Row,FSADDPAIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FSADDPAIDRowDeletedEvent) Is Nothing) Then
                RaiseEvent FSADDPAIDRowDeleted(Me, New FSADDPAIDRowChangeEvent(CType(e.Row,FSADDPAIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FSADDPAIDRowDeletingEvent) Is Nothing) Then
                RaiseEvent FSADDPAIDRowDeleting(Me, New FSADDPAIDRowChangeEvent(CType(e.Row,FSADDPAIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFSADDPAIDRow(ByVal row As FSADDPAIDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FSADDPAIDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FSCALCULATIONSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnINTVOCTONS As Global.System.Data.DataColumn
        
        Private columnINTPMTONS As Global.System.Data.DataColumn
        
        Private columnINTSO2TONS As Global.System.Data.DataColumn
        
        Private columnINTNOXTONS As Global.System.Data.DataColumn
        
        Private columnNUMPART70FEE As Global.System.Data.DataColumn
        
        Private columnNUMSMFEE As Global.System.Data.DataColumn
        
        Private columnNUMNSPSFEE As Global.System.Data.DataColumn
        
        Private columnNUMTOTALFEE As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPT As Global.System.Data.DataColumn
        
        Private columnSTRNSPSREASON As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnNUMFEERATE As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPTREASON As Global.System.Data.DataColumn
        
        Private columnSTRPART70 As Global.System.Data.DataColumn
        
        Private columnSTRSYNTHETICMINOR As Global.System.Data.DataColumn
        
        Private columnNUMCALCULATEDFEE As Global.System.Data.DataColumn
        
        Private columnSTRCLASS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPS1 As Global.System.Data.DataColumn
        
        Private columnSHUTDATE As Global.System.Data.DataColumn
        
        Private columnVARIANCECHECK As Global.System.Data.DataColumn
        
        Private columnVARIANCECOMMENTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FSCALCULATIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTVOCTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTVOCTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTPMTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTPMTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSO2TONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSO2TONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTNOXTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTNOXTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPART70FEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPART70FEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMSMFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMSMFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMNSPSFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMNSPSFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMTOTALFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMTOTALFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSREASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMFEERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMFEERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTREASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPTREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPART70Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPART70
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSYNTHETICMINORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSYNTHETICMINOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCALCULATEDFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCALCULATEDFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHUTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHUTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARIANCECHECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIANCECHECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VARIANCECOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIANCECOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FSCALCULATIONSRow
            Get
                Return CType(Me.Rows(index),FSCALCULATIONSRow)
            End Get
        End Property
        
        Public Event FSCALCULATIONSRowChanging As FSCALCULATIONSRowChangeEventHandler
        
        Public Event FSCALCULATIONSRowChanged As FSCALCULATIONSRowChangeEventHandler
        
        Public Event FSCALCULATIONSRowDeleting As FSCALCULATIONSRowChangeEventHandler
        
        Public Event FSCALCULATIONSRowDeleted As FSCALCULATIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFSCALCULATIONSRow(ByVal row As FSCALCULATIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFSCALCULATIONSRow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal INTVOCTONS As Decimal,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal NUMPART70FEE As Decimal,  _
                    ByVal NUMSMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STRNSPSREASON As String,  _
                    ByVal STROPERATE As String,  _
                    ByVal NUMFEERATE As Decimal,  _
                    ByVal STRNSPSEXEMPTREASON As String,  _
                    ByVal STRPART70 As String,  _
                    ByVal STRSYNTHETICMINOR As String,  _
                    ByVal NUMCALCULATEDFEE As Decimal,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String,  _
                    ByVal SHUTDATE As Date,  _
                    ByVal VARIANCECHECK As String,  _
                    ByVal VARIANCECOMMENTS As String) As FSCALCULATIONSRow
            Dim rowFSCALCULATIONSRow As FSCALCULATIONSRow = CType(Me.NewRow,FSCALCULATIONSRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTYEAR, INTVOCTONS, INTPMTONS, INTSO2TONS, INTNOXTONS, NUMPART70FEE, NUMSMFEE, NUMNSPSFEE, NUMTOTALFEE, STRNSPSEXEMPT, STRNSPSREASON, STROPERATE, NUMFEERATE, STRNSPSEXEMPTREASON, STRPART70, STRSYNTHETICMINOR, NUMCALCULATEDFEE, STRCLASS1, STRNSPS1, SHUTDATE, VARIANCECHECK, VARIANCECOMMENTS}
            rowFSCALCULATIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFSCALCULATIONSRow)
            Return rowFSCALCULATIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySTRAIRSNUMBERINTYEAR(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal) As FSCALCULATIONSRow
            Return CType(Me.Rows.Find(New Object() {STRAIRSNUMBER, INTYEAR}),FSCALCULATIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FSCALCULATIONSDataTable = CType(MyBase.Clone,FSCALCULATIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FSCALCULATIONSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnINTVOCTONS = MyBase.Columns("INTVOCTONS")
            Me.columnINTPMTONS = MyBase.Columns("INTPMTONS")
            Me.columnINTSO2TONS = MyBase.Columns("INTSO2TONS")
            Me.columnINTNOXTONS = MyBase.Columns("INTNOXTONS")
            Me.columnNUMPART70FEE = MyBase.Columns("NUMPART70FEE")
            Me.columnNUMSMFEE = MyBase.Columns("NUMSMFEE")
            Me.columnNUMNSPSFEE = MyBase.Columns("NUMNSPSFEE")
            Me.columnNUMTOTALFEE = MyBase.Columns("NUMTOTALFEE")
            Me.columnSTRNSPSEXEMPT = MyBase.Columns("STRNSPSEXEMPT")
            Me.columnSTRNSPSREASON = MyBase.Columns("STRNSPSREASON")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnNUMFEERATE = MyBase.Columns("NUMFEERATE")
            Me.columnSTRNSPSEXEMPTREASON = MyBase.Columns("STRNSPSEXEMPTREASON")
            Me.columnSTRPART70 = MyBase.Columns("STRPART70")
            Me.columnSTRSYNTHETICMINOR = MyBase.Columns("STRSYNTHETICMINOR")
            Me.columnNUMCALCULATEDFEE = MyBase.Columns("NUMCALCULATEDFEE")
            Me.columnSTRCLASS1 = MyBase.Columns("STRCLASS1")
            Me.columnSTRNSPS1 = MyBase.Columns("STRNSPS1")
            Me.columnSHUTDATE = MyBase.Columns("SHUTDATE")
            Me.columnVARIANCECHECK = MyBase.Columns("VARIANCECHECK")
            Me.columnVARIANCECOMMENTS = MyBase.Columns("VARIANCECOMMENTS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnINTVOCTONS = New Global.System.Data.DataColumn("INTVOCTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTVOCTONS)
            Me.columnINTPMTONS = New Global.System.Data.DataColumn("INTPMTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTPMTONS)
            Me.columnINTSO2TONS = New Global.System.Data.DataColumn("INTSO2TONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSO2TONS)
            Me.columnINTNOXTONS = New Global.System.Data.DataColumn("INTNOXTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTNOXTONS)
            Me.columnNUMPART70FEE = New Global.System.Data.DataColumn("NUMPART70FEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPART70FEE)
            Me.columnNUMSMFEE = New Global.System.Data.DataColumn("NUMSMFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMSMFEE)
            Me.columnNUMNSPSFEE = New Global.System.Data.DataColumn("NUMNSPSFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMNSPSFEE)
            Me.columnNUMTOTALFEE = New Global.System.Data.DataColumn("NUMTOTALFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMTOTALFEE)
            Me.columnSTRNSPSEXEMPT = New Global.System.Data.DataColumn("STRNSPSEXEMPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPT)
            Me.columnSTRNSPSREASON = New Global.System.Data.DataColumn("STRNSPSREASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSREASON)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnNUMFEERATE = New Global.System.Data.DataColumn("NUMFEERATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMFEERATE)
            Me.columnSTRNSPSEXEMPTREASON = New Global.System.Data.DataColumn("STRNSPSEXEMPTREASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPTREASON)
            Me.columnSTRPART70 = New Global.System.Data.DataColumn("STRPART70", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPART70)
            Me.columnSTRSYNTHETICMINOR = New Global.System.Data.DataColumn("STRSYNTHETICMINOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSYNTHETICMINOR)
            Me.columnNUMCALCULATEDFEE = New Global.System.Data.DataColumn("NUMCALCULATEDFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCALCULATEDFEE)
            Me.columnSTRCLASS1 = New Global.System.Data.DataColumn("STRCLASS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS1)
            Me.columnSTRNSPS1 = New Global.System.Data.DataColumn("STRNSPS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS1)
            Me.columnSHUTDATE = New Global.System.Data.DataColumn("SHUTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHUTDATE)
            Me.columnVARIANCECHECK = New Global.System.Data.DataColumn("VARIANCECHECK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIANCECHECK)
            Me.columnVARIANCECOMMENTS = New Global.System.Data.DataColumn("VARIANCECOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIANCECOMMENTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTRAIRSNUMBER, Me.columnINTYEAR}, true))
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnINTVOCTONS.AllowDBNull = false
            Me.columnINTPMTONS.AllowDBNull = false
            Me.columnINTSO2TONS.AllowDBNull = false
            Me.columnINTNOXTONS.AllowDBNull = false
            Me.columnNUMPART70FEE.AllowDBNull = false
            Me.columnNUMSMFEE.AllowDBNull = false
            Me.columnNUMNSPSFEE.AllowDBNull = false
            Me.columnNUMTOTALFEE.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.MaxLength = 3
            Me.columnSTRNSPSREASON.AllowDBNull = false
            Me.columnSTRNSPSREASON.MaxLength = 10
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
            Me.columnNUMFEERATE.AllowDBNull = false
            Me.columnSTRNSPSEXEMPTREASON.MaxLength = 4000
            Me.columnSTRPART70.AllowDBNull = false
            Me.columnSTRPART70.MaxLength = 3
            Me.columnSTRSYNTHETICMINOR.AllowDBNull = false
            Me.columnSTRSYNTHETICMINOR.MaxLength = 3
            Me.columnNUMCALCULATEDFEE.AllowDBNull = false
            Me.columnSTRCLASS1.MaxLength = 3
            Me.columnSTRNSPS1.MaxLength = 3
            Me.columnVARIANCECHECK.MaxLength = 3
            Me.columnVARIANCECOMMENTS.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFSCALCULATIONSRow() As FSCALCULATIONSRow
            Return CType(Me.NewRow,FSCALCULATIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FSCALCULATIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FSCALCULATIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FSCALCULATIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent FSCALCULATIONSRowChanged(Me, New FSCALCULATIONSRowChangeEvent(CType(e.Row,FSCALCULATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FSCALCULATIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent FSCALCULATIONSRowChanging(Me, New FSCALCULATIONSRowChangeEvent(CType(e.Row,FSCALCULATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FSCALCULATIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FSCALCULATIONSRowDeleted(Me, New FSCALCULATIONSRowChangeEvent(CType(e.Row,FSCALCULATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FSCALCULATIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FSCALCULATIONSRowDeleting(Me, New FSCALCULATIONSRowChangeEvent(CType(e.Row,FSCALCULATIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFSCALCULATIONSRow(ByVal row As FSCALCULATIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FSCALCULATIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FSPAYANDSUBMITDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnSTRPAYMENTTYPE As Global.System.Data.DataColumn
        
        Private columnINTSUBMITTAL As Global.System.Data.DataColumn
        
        Private columnSTROFFICIALNAME As Global.System.Data.DataColumn
        
        Private columnSTROFFICIALTITLE As Global.System.Data.DataColumn
        
        Private columnDATESUBMIT As Global.System.Data.DataColumn
        
        Private columnSTRCOMMENTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FSPAYANDSUBMIT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPAYMENTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPAYMENTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSUBMITTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSUBMITTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROFFICIALNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROFFICIALNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROFFICIALTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROFFICIALTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATESUBMITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATESUBMIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FSPAYANDSUBMITRow
            Get
                Return CType(Me.Rows(index),FSPAYANDSUBMITRow)
            End Get
        End Property
        
        Public Event FSPAYANDSUBMITRowChanging As FSPAYANDSUBMITRowChangeEventHandler
        
        Public Event FSPAYANDSUBMITRowChanged As FSPAYANDSUBMITRowChangeEventHandler
        
        Public Event FSPAYANDSUBMITRowDeleting As FSPAYANDSUBMITRowChangeEventHandler
        
        Public Event FSPAYANDSUBMITRowDeleted As FSPAYANDSUBMITRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFSPAYANDSUBMITRow(ByVal row As FSPAYANDSUBMITRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFSPAYANDSUBMITRow(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal, ByVal STRPAYMENTTYPE As String, ByVal INTSUBMITTAL As Decimal, ByVal STROFFICIALNAME As String, ByVal STROFFICIALTITLE As String, ByVal DATESUBMIT As Date, ByVal STRCOMMENTS As String) As FSPAYANDSUBMITRow
            Dim rowFSPAYANDSUBMITRow As FSPAYANDSUBMITRow = CType(Me.NewRow,FSPAYANDSUBMITRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTYEAR, STRPAYMENTTYPE, INTSUBMITTAL, STROFFICIALNAME, STROFFICIALTITLE, DATESUBMIT, STRCOMMENTS}
            rowFSPAYANDSUBMITRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFSPAYANDSUBMITRow)
            Return rowFSPAYANDSUBMITRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySTRAIRSNUMBERINTYEAR(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal) As FSPAYANDSUBMITRow
            Return CType(Me.Rows.Find(New Object() {STRAIRSNUMBER, INTYEAR}),FSPAYANDSUBMITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FSPAYANDSUBMITDataTable = CType(MyBase.Clone,FSPAYANDSUBMITDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FSPAYANDSUBMITDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnSTRPAYMENTTYPE = MyBase.Columns("STRPAYMENTTYPE")
            Me.columnINTSUBMITTAL = MyBase.Columns("INTSUBMITTAL")
            Me.columnSTROFFICIALNAME = MyBase.Columns("STROFFICIALNAME")
            Me.columnSTROFFICIALTITLE = MyBase.Columns("STROFFICIALTITLE")
            Me.columnDATESUBMIT = MyBase.Columns("DATESUBMIT")
            Me.columnSTRCOMMENTS = MyBase.Columns("STRCOMMENTS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnSTRPAYMENTTYPE = New Global.System.Data.DataColumn("STRPAYMENTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPAYMENTTYPE)
            Me.columnINTSUBMITTAL = New Global.System.Data.DataColumn("INTSUBMITTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSUBMITTAL)
            Me.columnSTROFFICIALNAME = New Global.System.Data.DataColumn("STROFFICIALNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROFFICIALNAME)
            Me.columnSTROFFICIALTITLE = New Global.System.Data.DataColumn("STROFFICIALTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROFFICIALTITLE)
            Me.columnDATESUBMIT = New Global.System.Data.DataColumn("DATESUBMIT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATESUBMIT)
            Me.columnSTRCOMMENTS = New Global.System.Data.DataColumn("STRCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMMENTS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTRAIRSNUMBER, Me.columnINTYEAR}, true))
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnSTRPAYMENTTYPE.AllowDBNull = false
            Me.columnSTRPAYMENTTYPE.MaxLength = 50
            Me.columnINTSUBMITTAL.AllowDBNull = false
            Me.columnSTROFFICIALNAME.AllowDBNull = false
            Me.columnSTROFFICIALNAME.MaxLength = 50
            Me.columnSTROFFICIALTITLE.AllowDBNull = false
            Me.columnSTROFFICIALTITLE.MaxLength = 50
            Me.columnDATESUBMIT.AllowDBNull = false
            Me.columnSTRCOMMENTS.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFSPAYANDSUBMITRow() As FSPAYANDSUBMITRow
            Return CType(Me.NewRow,FSPAYANDSUBMITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FSPAYANDSUBMITRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FSPAYANDSUBMITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FSPAYANDSUBMITRowChangedEvent) Is Nothing) Then
                RaiseEvent FSPAYANDSUBMITRowChanged(Me, New FSPAYANDSUBMITRowChangeEvent(CType(e.Row,FSPAYANDSUBMITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FSPAYANDSUBMITRowChangingEvent) Is Nothing) Then
                RaiseEvent FSPAYANDSUBMITRowChanging(Me, New FSPAYANDSUBMITRowChangeEvent(CType(e.Row,FSPAYANDSUBMITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FSPAYANDSUBMITRowDeletedEvent) Is Nothing) Then
                RaiseEvent FSPAYANDSUBMITRowDeleted(Me, New FSPAYANDSUBMITRowChangeEvent(CType(e.Row,FSPAYANDSUBMITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FSPAYANDSUBMITRowDeletingEvent) Is Nothing) Then
                RaiseEvent FSPAYANDSUBMITRowDeleting(Me, New FSPAYANDSUBMITRowChangeEvent(CType(e.Row,FSPAYANDSUBMITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFSPAYANDSUBMITRow(ByVal row As FSPAYANDSUBMITRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FSPAYANDSUBMITDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FEEREPORTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYSTREET1 As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTTITLE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnINTVOCTONS As Global.System.Data.DataColumn
        
        Private columnINTPMTONS As Global.System.Data.DataColumn
        
        Private columnINTNOXTONS As Global.System.Data.DataColumn
        
        Private columnINTSO2TONS As Global.System.Data.DataColumn
        
        Private columnNUMTOTALPART70FEE As Global.System.Data.DataColumn
        
        Private columnNUMPART70SMFEE As Global.System.Data.DataColumn
        
        Private columnNUMNSPSFEE As Global.System.Data.DataColumn
        
        Private columnNUMTOTALFEE As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPT As Global.System.Data.DataColumn
        
        Private columnSTRCLASS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPTREASON As Global.System.Data.DataColumn
        
        Private columnSTRPAYMENTTYPE As Global.System.Data.DataColumn
        
        Private columnSTROFFICIALNAME As Global.System.Data.DataColumn
        
        Private columnSTROFFICIALTITLE As Global.System.Data.DataColumn
        
        Private columnSTRCOMMENTS As Global.System.Data.DataColumn
        
        Private columnDATESUBMIT As Global.System.Data.DataColumn
        
        Private columnSHUTDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FEEREPORT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYSTREET1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYSTREET1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTVOCTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTVOCTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTPMTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTPMTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTNOXTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTNOXTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSO2TONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSO2TONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMTOTALPART70FEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMTOTALPART70FEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPART70SMFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPART70SMFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMNSPSFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMNSPSFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMTOTALFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMTOTALFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTREASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPTREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPAYMENTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPAYMENTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROFFICIALNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROFFICIALNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROFFICIALTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROFFICIALTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATESUBMITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATESUBMIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHUTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHUTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FEEREPORTRow
            Get
                Return CType(Me.Rows(index),FEEREPORTRow)
            End Get
        End Property
        
        Public Event FEEREPORTRowChanging As FEEREPORTRowChangeEventHandler
        
        Public Event FEEREPORTRowChanged As FEEREPORTRowChangeEventHandler
        
        Public Event FEEREPORTRowDeleting As FEEREPORTRowChangeEventHandler
        
        Public Event FEEREPORTRowDeleted As FEEREPORTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFEEREPORTRow(ByVal row As FEEREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFEEREPORTRow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYSTREET1 As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal STRCONTACTTITLE As String,  _
                    ByVal STRCONTACTPHONENUMBER1 As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIPCODE As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal INTVOCTONS As Decimal,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal NUMTOTALPART70FEE As Decimal,  _
                    ByVal NUMPART70SMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STROPERATE As String,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String,  _
                    ByVal STRNSPSEXEMPTREASON As String,  _
                    ByVal STRPAYMENTTYPE As String,  _
                    ByVal STROFFICIALNAME As String,  _
                    ByVal STROFFICIALTITLE As String,  _
                    ByVal STRCOMMENTS As String,  _
                    ByVal DATESUBMIT As Date,  _
                    ByVal SHUTDATE As Date) As FEEREPORTRow
            Dim rowFEEREPORTRow As FEEREPORTRow = CType(Me.NewRow,FEEREPORTRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, STRFACILITYSTREET1, STRFACILITYCITY, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTTITLE, STRCONTACTPHONENUMBER1, STRCONTACTFAXNUMBER, STRCONTACTEMAIL, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, INTYEAR, INTVOCTONS, INTPMTONS, INTNOXTONS, INTSO2TONS, NUMTOTALPART70FEE, NUMPART70SMFEE, NUMNSPSFEE, NUMTOTALFEE, STROPERATE, STRNSPSEXEMPT, STRCLASS1, STRNSPS1, STRNSPSEXEMPTREASON, STRPAYMENTTYPE, STROFFICIALNAME, STROFFICIALTITLE, STRCOMMENTS, DATESUBMIT, SHUTDATE}
            rowFEEREPORTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFEEREPORTRow)
            Return rowFEEREPORTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FEEREPORTDataTable = CType(MyBase.Clone,FEEREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FEEREPORTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRFACILITYSTREET1 = MyBase.Columns("STRFACILITYSTREET1")
            Me.columnSTRFACILITYCITY = MyBase.Columns("STRFACILITYCITY")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTTITLE = MyBase.Columns("STRCONTACTTITLE")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnINTVOCTONS = MyBase.Columns("INTVOCTONS")
            Me.columnINTPMTONS = MyBase.Columns("INTPMTONS")
            Me.columnINTNOXTONS = MyBase.Columns("INTNOXTONS")
            Me.columnINTSO2TONS = MyBase.Columns("INTSO2TONS")
            Me.columnNUMTOTALPART70FEE = MyBase.Columns("NUMTOTALPART70FEE")
            Me.columnNUMPART70SMFEE = MyBase.Columns("NUMPART70SMFEE")
            Me.columnNUMNSPSFEE = MyBase.Columns("NUMNSPSFEE")
            Me.columnNUMTOTALFEE = MyBase.Columns("NUMTOTALFEE")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnSTRNSPSEXEMPT = MyBase.Columns("STRNSPSEXEMPT")
            Me.columnSTRCLASS1 = MyBase.Columns("STRCLASS1")
            Me.columnSTRNSPS1 = MyBase.Columns("STRNSPS1")
            Me.columnSTRNSPSEXEMPTREASON = MyBase.Columns("STRNSPSEXEMPTREASON")
            Me.columnSTRPAYMENTTYPE = MyBase.Columns("STRPAYMENTTYPE")
            Me.columnSTROFFICIALNAME = MyBase.Columns("STROFFICIALNAME")
            Me.columnSTROFFICIALTITLE = MyBase.Columns("STROFFICIALTITLE")
            Me.columnSTRCOMMENTS = MyBase.Columns("STRCOMMENTS")
            Me.columnDATESUBMIT = MyBase.Columns("DATESUBMIT")
            Me.columnSHUTDATE = MyBase.Columns("SHUTDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRFACILITYSTREET1 = New Global.System.Data.DataColumn("STRFACILITYSTREET1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYSTREET1)
            Me.columnSTRFACILITYCITY = New Global.System.Data.DataColumn("STRFACILITYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITY)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTTITLE = New Global.System.Data.DataColumn("STRCONTACTTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTTITLE)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnINTVOCTONS = New Global.System.Data.DataColumn("INTVOCTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTVOCTONS)
            Me.columnINTPMTONS = New Global.System.Data.DataColumn("INTPMTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTPMTONS)
            Me.columnINTNOXTONS = New Global.System.Data.DataColumn("INTNOXTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTNOXTONS)
            Me.columnINTSO2TONS = New Global.System.Data.DataColumn("INTSO2TONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSO2TONS)
            Me.columnNUMTOTALPART70FEE = New Global.System.Data.DataColumn("NUMTOTALPART70FEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMTOTALPART70FEE)
            Me.columnNUMPART70SMFEE = New Global.System.Data.DataColumn("NUMPART70SMFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPART70SMFEE)
            Me.columnNUMNSPSFEE = New Global.System.Data.DataColumn("NUMNSPSFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMNSPSFEE)
            Me.columnNUMTOTALFEE = New Global.System.Data.DataColumn("NUMTOTALFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMTOTALFEE)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnSTRNSPSEXEMPT = New Global.System.Data.DataColumn("STRNSPSEXEMPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPT)
            Me.columnSTRCLASS1 = New Global.System.Data.DataColumn("STRCLASS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS1)
            Me.columnSTRNSPS1 = New Global.System.Data.DataColumn("STRNSPS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS1)
            Me.columnSTRNSPSEXEMPTREASON = New Global.System.Data.DataColumn("STRNSPSEXEMPTREASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPTREASON)
            Me.columnSTRPAYMENTTYPE = New Global.System.Data.DataColumn("STRPAYMENTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPAYMENTTYPE)
            Me.columnSTROFFICIALNAME = New Global.System.Data.DataColumn("STROFFICIALNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROFFICIALNAME)
            Me.columnSTROFFICIALTITLE = New Global.System.Data.DataColumn("STROFFICIALTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROFFICIALTITLE)
            Me.columnSTRCOMMENTS = New Global.System.Data.DataColumn("STRCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMMENTS)
            Me.columnDATESUBMIT = New Global.System.Data.DataColumn("DATESUBMIT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATESUBMIT)
            Me.columnSHUTDATE = New Global.System.Data.DataColumn("SHUTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHUTDATE)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRFACILITYSTREET1.AllowDBNull = false
            Me.columnSTRFACILITYSTREET1.MaxLength = 250
            Me.columnSTRFACILITYCITY.AllowDBNull = false
            Me.columnSTRFACILITYCITY.MaxLength = 50
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTTITLE.AllowDBNull = false
            Me.columnSTRCONTACTTITLE.MaxLength = 100
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 15
            Me.columnSTRCONTACTEMAIL.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnINTVOCTONS.AllowDBNull = false
            Me.columnINTPMTONS.AllowDBNull = false
            Me.columnINTNOXTONS.AllowDBNull = false
            Me.columnINTSO2TONS.AllowDBNull = false
            Me.columnNUMTOTALPART70FEE.AllowDBNull = false
            Me.columnNUMPART70SMFEE.AllowDBNull = false
            Me.columnNUMNSPSFEE.AllowDBNull = false
            Me.columnNUMTOTALFEE.AllowDBNull = false
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
            Me.columnSTRNSPSEXEMPT.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.MaxLength = 3
            Me.columnSTRCLASS1.MaxLength = 3
            Me.columnSTRNSPS1.MaxLength = 3
            Me.columnSTRNSPSEXEMPTREASON.MaxLength = 4000
            Me.columnSTRPAYMENTTYPE.AllowDBNull = false
            Me.columnSTRPAYMENTTYPE.MaxLength = 50
            Me.columnSTROFFICIALNAME.AllowDBNull = false
            Me.columnSTROFFICIALNAME.MaxLength = 50
            Me.columnSTROFFICIALTITLE.AllowDBNull = false
            Me.columnSTROFFICIALTITLE.MaxLength = 50
            Me.columnSTRCOMMENTS.MaxLength = 3000
            Me.columnDATESUBMIT.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFEEREPORTRow() As FEEREPORTRow
            Return CType(Me.NewRow,FEEREPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FEEREPORTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FEEREPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FEEREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent FEEREPORTRowChanged(Me, New FEEREPORTRowChangeEvent(CType(e.Row,FEEREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FEEREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent FEEREPORTRowChanging(Me, New FEEREPORTRowChangeEvent(CType(e.Row,FEEREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FEEREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FEEREPORTRowDeleted(Me, New FEEREPORTRowChangeEvent(CType(e.Row,FEEREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FEEREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FEEREPORTRowDeleting(Me, New FEEREPORTRowChangeEvent(CType(e.Row,FEEREPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFEEREPORTRow(ByVal row As FEEREPORTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FEEREPORTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FEESDUEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnTOTALDUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FEESDUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALDUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALDUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FEESDUERow
            Get
                Return CType(Me.Rows(index),FEESDUERow)
            End Get
        End Property
        
        Public Event FEESDUERowChanging As FEESDUERowChangeEventHandler
        
        Public Event FEESDUERowChanged As FEESDUERowChangeEventHandler
        
        Public Event FEESDUERowDeleting As FEESDUERowChangeEventHandler
        
        Public Event FEESDUERowDeleted As FEESDUERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFEESDUERow(ByVal row As FEESDUERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFEESDUERow(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal, ByVal TOTALDUE As Decimal) As FEESDUERow
            Dim rowFEESDUERow As FEESDUERow = CType(Me.NewRow,FEESDUERow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTYEAR, TOTALDUE}
            rowFEESDUERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFEESDUERow)
            Return rowFEESDUERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FEESDUEDataTable = CType(MyBase.Clone,FEESDUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FEESDUEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnTOTALDUE = MyBase.Columns("TOTALDUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnTOTALDUE = New Global.System.Data.DataColumn("TOTALDUE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALDUE)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnINTYEAR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFEESDUERow() As FEESDUERow
            Return CType(Me.NewRow,FEESDUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FEESDUERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FEESDUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FEESDUERowChangedEvent) Is Nothing) Then
                RaiseEvent FEESDUERowChanged(Me, New FEESDUERowChangeEvent(CType(e.Row,FEESDUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FEESDUERowChangingEvent) Is Nothing) Then
                RaiseEvent FEESDUERowChanging(Me, New FEESDUERowChangeEvent(CType(e.Row,FEESDUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FEESDUERowDeletedEvent) Is Nothing) Then
                RaiseEvent FEESDUERowDeleted(Me, New FEESDUERowChangeEvent(CType(e.Row,FEESDUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FEESDUERowDeletingEvent) Is Nothing) Then
                RaiseEvent FEESDUERowDeleting(Me, New FEESDUERowChangeEvent(CType(e.Row,FEESDUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFEESDUERow(ByVal row As FEESDUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FEESDUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FEESNONRESPONDENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAIRSNO As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnLASTNAME As Global.System.Data.DataColumn
        
        Private columnTITLE As Global.System.Data.DataColumn
        
        Private columnCONTACTCOMPANY As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnCITY As Global.System.Data.DataColumn
        
        Private columnSTATE As Global.System.Data.DataColumn
        
        Private columnZIP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FEESNONRESPONDENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AIRSNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIRSNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONTACTCOMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTACTCOMPANY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FEESNONRESPONDENTRow
            Get
                Return CType(Me.Rows(index),FEESNONRESPONDENTRow)
            End Get
        End Property
        
        Public Event FEESNONRESPONDENTRowChanging As FEESNONRESPONDENTRowChangeEventHandler
        
        Public Event FEESNONRESPONDENTRowChanged As FEESNONRESPONDENTRowChangeEventHandler
        
        Public Event FEESNONRESPONDENTRowDeleting As FEESNONRESPONDENTRowChangeEventHandler
        
        Public Event FEESNONRESPONDENTRowDeleted As FEESNONRESPONDENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFEESNONRESPONDENTRow(ByVal row As FEESNONRESPONDENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFEESNONRESPONDENTRow(ByVal AIRSNO As String, ByVal INTYEAR As Double, ByVal FACILITYNAME As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal TITLE As String, ByVal CONTACTCOMPANY As String, ByVal ADDRESS As String, ByVal CITY As String, ByVal STATE As String, ByVal ZIP As String) As FEESNONRESPONDENTRow
            Dim rowFEESNONRESPONDENTRow As FEESNONRESPONDENTRow = CType(Me.NewRow,FEESNONRESPONDENTRow)
            Dim columnValuesArray() As Object = New Object() {AIRSNO, INTYEAR, FACILITYNAME, FIRSTNAME, LASTNAME, TITLE, CONTACTCOMPANY, ADDRESS, CITY, STATE, ZIP}
            rowFEESNONRESPONDENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFEESNONRESPONDENTRow)
            Return rowFEESNONRESPONDENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FEESNONRESPONDENTDataTable = CType(MyBase.Clone,FEESNONRESPONDENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FEESNONRESPONDENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAIRSNO = MyBase.Columns("AIRSNO")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnFACILITYNAME = MyBase.Columns("FACILITYNAME")
            Me.columnFIRSTNAME = MyBase.Columns("FIRSTNAME")
            Me.columnLASTNAME = MyBase.Columns("LASTNAME")
            Me.columnTITLE = MyBase.Columns("TITLE")
            Me.columnCONTACTCOMPANY = MyBase.Columns("CONTACTCOMPANY")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnCITY = MyBase.Columns("CITY")
            Me.columnSTATE = MyBase.Columns("STATE")
            Me.columnZIP = MyBase.Columns("ZIP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAIRSNO = New Global.System.Data.DataColumn("AIRSNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIRSNO)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnFACILITYNAME = New Global.System.Data.DataColumn("FACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACILITYNAME)
            Me.columnFIRSTNAME = New Global.System.Data.DataColumn("FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIRSTNAME)
            Me.columnLASTNAME = New Global.System.Data.DataColumn("LASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTNAME)
            Me.columnTITLE = New Global.System.Data.DataColumn("TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITLE)
            Me.columnCONTACTCOMPANY = New Global.System.Data.DataColumn("CONTACTCOMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTACTCOMPANY)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnCITY = New Global.System.Data.DataColumn("CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCITY)
            Me.columnSTATE = New Global.System.Data.DataColumn("STATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATE)
            Me.columnZIP = New Global.System.Data.DataColumn("ZIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZIP)
            Me.columnAIRSNO.AllowDBNull = false
            Me.columnAIRSNO.MaxLength = 12
            Me.columnFACILITYNAME.MaxLength = 100
            Me.columnFIRSTNAME.AllowDBNull = false
            Me.columnFIRSTNAME.MaxLength = 35
            Me.columnLASTNAME.AllowDBNull = false
            Me.columnLASTNAME.MaxLength = 35
            Me.columnTITLE.AllowDBNull = false
            Me.columnTITLE.MaxLength = 100
            Me.columnCONTACTCOMPANY.AllowDBNull = false
            Me.columnCONTACTCOMPANY.MaxLength = 100
            Me.columnADDRESS.AllowDBNull = false
            Me.columnADDRESS.MaxLength = 100
            Me.columnCITY.AllowDBNull = false
            Me.columnCITY.MaxLength = 50
            Me.columnSTATE.AllowDBNull = false
            Me.columnSTATE.MaxLength = 2
            Me.columnZIP.AllowDBNull = false
            Me.columnZIP.MaxLength = 9
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFEESNONRESPONDENTRow() As FEESNONRESPONDENTRow
            Return CType(Me.NewRow,FEESNONRESPONDENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FEESNONRESPONDENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FEESNONRESPONDENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FEESNONRESPONDENTRowChangedEvent) Is Nothing) Then
                RaiseEvent FEESNONRESPONDENTRowChanged(Me, New FEESNONRESPONDENTRowChangeEvent(CType(e.Row,FEESNONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FEESNONRESPONDENTRowChangingEvent) Is Nothing) Then
                RaiseEvent FEESNONRESPONDENTRowChanging(Me, New FEESNONRESPONDENTRowChangeEvent(CType(e.Row,FEESNONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FEESNONRESPONDENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FEESNONRESPONDENTRowDeleted(Me, New FEESNONRESPONDENTRowChangeEvent(CType(e.Row,FEESNONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FEESNONRESPONDENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FEESNONRESPONDENTRowDeleting(Me, New FEESNONRESPONDENTRowChangeEvent(CType(e.Row,FEESNONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFEESNONRESPONDENTRow(ByVal row As FEESNONRESPONDENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FEESNONRESPONDENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FEEVARIANCEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnDIFFERENCE2005 As Global.System.Data.DataColumn
        
        Private columnDIFFERENCE2006 As Global.System.Data.DataColumn
        
        Private columnFEE2004 As Global.System.Data.DataColumn
        
        Private columnFEE2005 As Global.System.Data.DataColumn
        
        Private columnFEE2006 As Global.System.Data.DataColumn
        
        Private columnVCHECK2005 As Global.System.Data.DataColumn
        
        Private columnVCHECK2006 As Global.System.Data.DataColumn
        
        Private columnCOMMENTS2005 As Global.System.Data.DataColumn
        
        Private columnCOMMENTS2006 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FEEVARIANCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFFERENCE2005Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFFERENCE2005
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFFERENCE2006Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFFERENCE2006
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEE2004Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEE2004
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEE2005Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEE2005
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FEE2006Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFEE2006
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VCHECK2005Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVCHECK2005
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VCHECK2006Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVCHECK2006
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTS2005Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS2005
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTS2006Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS2006
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FEEVARIANCERow
            Get
                Return CType(Me.Rows(index),FEEVARIANCERow)
            End Get
        End Property
        
        Public Event FEEVARIANCERowChanging As FEEVARIANCERowChangeEventHandler
        
        Public Event FEEVARIANCERowChanged As FEEVARIANCERowChangeEventHandler
        
        Public Event FEEVARIANCERowDeleting As FEEVARIANCERowChangeEventHandler
        
        Public Event FEEVARIANCERowDeleted As FEEVARIANCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFEEVARIANCERow(ByVal row As FEEVARIANCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFEEVARIANCERow(ByVal STRAIRSNUMBER As String, ByVal DIFFERENCE2005 As Decimal, ByVal DIFFERENCE2006 As Decimal, ByVal FEE2004 As Decimal, ByVal FEE2005 As Decimal, ByVal FEE2006 As Decimal, ByVal VCHECK2005 As String, ByVal VCHECK2006 As String, ByVal COMMENTS2005 As String, ByVal COMMENTS2006 As String) As FEEVARIANCERow
            Dim rowFEEVARIANCERow As FEEVARIANCERow = CType(Me.NewRow,FEEVARIANCERow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, DIFFERENCE2005, DIFFERENCE2006, FEE2004, FEE2005, FEE2006, VCHECK2005, VCHECK2006, COMMENTS2005, COMMENTS2006}
            rowFEEVARIANCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFEEVARIANCERow)
            Return rowFEEVARIANCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FEEVARIANCEDataTable = CType(MyBase.Clone,FEEVARIANCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FEEVARIANCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnDIFFERENCE2005 = MyBase.Columns("DIFFERENCE2005")
            Me.columnDIFFERENCE2006 = MyBase.Columns("DIFFERENCE2006")
            Me.columnFEE2004 = MyBase.Columns("FEE2004")
            Me.columnFEE2005 = MyBase.Columns("FEE2005")
            Me.columnFEE2006 = MyBase.Columns("FEE2006")
            Me.columnVCHECK2005 = MyBase.Columns("VCHECK2005")
            Me.columnVCHECK2006 = MyBase.Columns("VCHECK2006")
            Me.columnCOMMENTS2005 = MyBase.Columns("COMMENTS2005")
            Me.columnCOMMENTS2006 = MyBase.Columns("COMMENTS2006")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnDIFFERENCE2005 = New Global.System.Data.DataColumn("DIFFERENCE2005", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFFERENCE2005)
            Me.columnDIFFERENCE2006 = New Global.System.Data.DataColumn("DIFFERENCE2006", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFFERENCE2006)
            Me.columnFEE2004 = New Global.System.Data.DataColumn("FEE2004", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEE2004)
            Me.columnFEE2005 = New Global.System.Data.DataColumn("FEE2005", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEE2005)
            Me.columnFEE2006 = New Global.System.Data.DataColumn("FEE2006", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFEE2006)
            Me.columnVCHECK2005 = New Global.System.Data.DataColumn("VCHECK2005", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVCHECK2005)
            Me.columnVCHECK2006 = New Global.System.Data.DataColumn("VCHECK2006", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVCHECK2006)
            Me.columnCOMMENTS2005 = New Global.System.Data.DataColumn("COMMENTS2005", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS2005)
            Me.columnCOMMENTS2006 = New Global.System.Data.DataColumn("COMMENTS2006", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS2006)
            Me.columnSTRAIRSNUMBER.MaxLength = 8
            Me.columnVCHECK2005.MaxLength = 3
            Me.columnVCHECK2006.MaxLength = 3
            Me.columnCOMMENTS2005.MaxLength = 1000
            Me.columnCOMMENTS2006.MaxLength = 1000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFEEVARIANCERow() As FEEVARIANCERow
            Return CType(Me.NewRow,FEEVARIANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FEEVARIANCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FEEVARIANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FEEVARIANCERowChangedEvent) Is Nothing) Then
                RaiseEvent FEEVARIANCERowChanged(Me, New FEEVARIANCERowChangeEvent(CType(e.Row,FEEVARIANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FEEVARIANCERowChangingEvent) Is Nothing) Then
                RaiseEvent FEEVARIANCERowChanging(Me, New FEEVARIANCERowChangeEvent(CType(e.Row,FEEVARIANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FEEVARIANCERowDeletedEvent) Is Nothing) Then
                RaiseEvent FEEVARIANCERowDeleted(Me, New FEEVARIANCERowChangeEvent(CType(e.Row,FEEVARIANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FEEVARIANCERowDeletingEvent) Is Nothing) Then
                RaiseEvent FEEVARIANCERowDeleting(Me, New FEEVARIANCERowChangeEvent(CType(e.Row,FEEVARIANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFEEVARIANCERow(ByVal row As FEEVARIANCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FEEVARIANCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_AUDIT_REPORTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnTOTALDUE As Global.System.Data.DataColumn
        
        Private columnTOTALPAID As Global.System.Data.DataColumn
        
        Private columnPAIDYEAR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_AUDIT_REPORT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALDUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALDUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_AUDIT_REPORTRow
            Get
                Return CType(Me.Rows(index),VW_AUDIT_REPORTRow)
            End Get
        End Property
        
        Public Event VW_AUDIT_REPORTRowChanging As VW_AUDIT_REPORTRowChangeEventHandler
        
        Public Event VW_AUDIT_REPORTRowChanged As VW_AUDIT_REPORTRowChangeEventHandler
        
        Public Event VW_AUDIT_REPORTRowDeleting As VW_AUDIT_REPORTRowChangeEventHandler
        
        Public Event VW_AUDIT_REPORTRowDeleted As VW_AUDIT_REPORTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_AUDIT_REPORTRow(ByVal row As VW_AUDIT_REPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_AUDIT_REPORTRow(ByVal STRAIRSNUMBER As String, ByVal STRFACILITYNAME As String, ByVal STRCONTACTFIRSTNAME As String, ByVal STRCONTACTLASTNAME As String, ByVal STRCONTACTADDRESS1 As String, ByVal STRCONTACTCITY As String, ByVal STRCONTACTSTATE As String, ByVal STRCONTACTZIPCODE As String, ByVal INTYEAR As Decimal, ByVal TOTALDUE As Double, ByVal TOTALPAID As Double, ByVal PAIDYEAR As Decimal) As VW_AUDIT_REPORTRow
            Dim rowVW_AUDIT_REPORTRow As VW_AUDIT_REPORTRow = CType(Me.NewRow,VW_AUDIT_REPORTRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, INTYEAR, TOTALDUE, TOTALPAID, PAIDYEAR}
            rowVW_AUDIT_REPORTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_AUDIT_REPORTRow)
            Return rowVW_AUDIT_REPORTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_AUDIT_REPORTDataTable = CType(MyBase.Clone,VW_AUDIT_REPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_AUDIT_REPORTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnTOTALDUE = MyBase.Columns("TOTALDUE")
            Me.columnTOTALPAID = MyBase.Columns("TOTALPAID")
            Me.columnPAIDYEAR = MyBase.Columns("PAIDYEAR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnTOTALDUE = New Global.System.Data.DataColumn("TOTALDUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALDUE)
            Me.columnTOTALPAID = New Global.System.Data.DataColumn("TOTALPAID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALPAID)
            Me.columnPAIDYEAR = New Global.System.Data.DataColumn("PAIDYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDYEAR)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_AUDIT_REPORTRow() As VW_AUDIT_REPORTRow
            Return CType(Me.NewRow,VW_AUDIT_REPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_AUDIT_REPORTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_AUDIT_REPORTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_AUDIT_REPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_AUDIT_REPORTRowChanged(Me, New VW_AUDIT_REPORTRowChangeEvent(CType(e.Row,VW_AUDIT_REPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_AUDIT_REPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_AUDIT_REPORTRowChanging(Me, New VW_AUDIT_REPORTRowChangeEvent(CType(e.Row,VW_AUDIT_REPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_AUDIT_REPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_AUDIT_REPORTRowDeleted(Me, New VW_AUDIT_REPORTRowChangeEvent(CType(e.Row,VW_AUDIT_REPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_AUDIT_REPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_AUDIT_REPORTRowDeleting(Me, New VW_AUDIT_REPORTRowChangeEvent(CType(e.Row,VW_AUDIT_REPORTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_AUDIT_REPORTRow(ByVal row As VW_AUDIT_REPORTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_AUDIT_REPORTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_BANKRUPTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnISBANKRUPT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_BANKRUPT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISBANKRUPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISBANKRUPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_BANKRUPTRow
            Get
                Return CType(Me.Rows(index),VW_BANKRUPTRow)
            End Get
        End Property
        
        Public Event VW_BANKRUPTRowChanging As VW_BANKRUPTRowChangeEventHandler
        
        Public Event VW_BANKRUPTRowChanged As VW_BANKRUPTRowChangeEventHandler
        
        Public Event VW_BANKRUPTRowDeleting As VW_BANKRUPTRowChangeEventHandler
        
        Public Event VW_BANKRUPTRowDeleted As VW_BANKRUPTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_BANKRUPTRow(ByVal row As VW_BANKRUPTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_BANKRUPTRow(ByVal STRAIRSNUMBER As String, ByVal STRFACILITYNAME As String, ByVal STRCONTACTFIRSTNAME As String, ByVal STRCONTACTLASTNAME As String, ByVal STRCONTACTPHONENUMBER1 As String, ByVal STRCONTACTFAXNUMBER As String, ByVal STRCONTACTEMAIL As String, ByVal STRCONTACTADDRESS1 As String, ByVal STRCONTACTCITY As String, ByVal STRCONTACTSTATE As String, ByVal STRCONTACTZIPCODE As String, ByVal ISBANKRUPT As String) As VW_BANKRUPTRow
            Dim rowVW_BANKRUPTRow As VW_BANKRUPTRow = CType(Me.NewRow,VW_BANKRUPTRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTPHONENUMBER1, STRCONTACTFAXNUMBER, STRCONTACTEMAIL, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, ISBANKRUPT}
            rowVW_BANKRUPTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_BANKRUPTRow)
            Return rowVW_BANKRUPTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_BANKRUPTDataTable = CType(MyBase.Clone,VW_BANKRUPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_BANKRUPTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnISBANKRUPT = MyBase.Columns("ISBANKRUPT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnISBANKRUPT = New Global.System.Data.DataColumn("ISBANKRUPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISBANKRUPT)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 15
            Me.columnSTRCONTACTEMAIL.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnISBANKRUPT.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_BANKRUPTRow() As VW_BANKRUPTRow
            Return CType(Me.NewRow,VW_BANKRUPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_BANKRUPTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_BANKRUPTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_BANKRUPTRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_BANKRUPTRowChanged(Me, New VW_BANKRUPTRowChangeEvent(CType(e.Row,VW_BANKRUPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_BANKRUPTRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_BANKRUPTRowChanging(Me, New VW_BANKRUPTRowChangeEvent(CType(e.Row,VW_BANKRUPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_BANKRUPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_BANKRUPTRowDeleted(Me, New VW_BANKRUPTRowChangeEvent(CType(e.Row,VW_BANKRUPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_BANKRUPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_BANKRUPTRowDeleting(Me, New VW_BANKRUPTRowChangeEvent(CType(e.Row,VW_BANKRUPTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_BANKRUPTRow(ByVal row As VW_BANKRUPTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_BANKRUPTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_CLASS_CHANGEDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnSTRCLASS1 As Global.System.Data.DataColumn
        
        Private columnSTRCLASS As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_CLASS_CHANGED"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_CLASS_CHANGEDRow
            Get
                Return CType(Me.Rows(index),VW_CLASS_CHANGEDRow)
            End Get
        End Property
        
        Public Event VW_CLASS_CHANGEDRowChanging As VW_CLASS_CHANGEDRowChangeEventHandler
        
        Public Event VW_CLASS_CHANGEDRowChanged As VW_CLASS_CHANGEDRowChangeEventHandler
        
        Public Event VW_CLASS_CHANGEDRowDeleting As VW_CLASS_CHANGEDRowChangeEventHandler
        
        Public Event VW_CLASS_CHANGEDRowDeleted As VW_CLASS_CHANGEDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_CLASS_CHANGEDRow(ByVal row As VW_CLASS_CHANGEDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_CLASS_CHANGEDRow(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal, ByVal STRCLASS1 As String, ByVal STRCLASS As String, ByVal STRCONTACTFIRSTNAME As String, ByVal STRCONTACTLASTNAME As String, ByVal STRCONTACTPHONENUMBER1 As String) As VW_CLASS_CHANGEDRow
            Dim rowVW_CLASS_CHANGEDRow As VW_CLASS_CHANGEDRow = CType(Me.NewRow,VW_CLASS_CHANGEDRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, INTYEAR, STRCLASS1, STRCLASS, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTPHONENUMBER1}
            rowVW_CLASS_CHANGEDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_CLASS_CHANGEDRow)
            Return rowVW_CLASS_CHANGEDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_CLASS_CHANGEDDataTable = CType(MyBase.Clone,VW_CLASS_CHANGEDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_CLASS_CHANGEDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnSTRCLASS1 = MyBase.Columns("STRCLASS1")
            Me.columnSTRCLASS = MyBase.Columns("STRCLASS")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnSTRCLASS1 = New Global.System.Data.DataColumn("STRCLASS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS1)
            Me.columnSTRCLASS = New Global.System.Data.DataColumn("STRCLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnSTRCLASS1.MaxLength = 3
            Me.columnSTRCLASS.AllowDBNull = false
            Me.columnSTRCLASS.MaxLength = 2
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_CLASS_CHANGEDRow() As VW_CLASS_CHANGEDRow
            Return CType(Me.NewRow,VW_CLASS_CHANGEDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_CLASS_CHANGEDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_CLASS_CHANGEDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_CLASS_CHANGEDRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_CLASS_CHANGEDRowChanged(Me, New VW_CLASS_CHANGEDRowChangeEvent(CType(e.Row,VW_CLASS_CHANGEDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_CLASS_CHANGEDRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_CLASS_CHANGEDRowChanging(Me, New VW_CLASS_CHANGEDRowChangeEvent(CType(e.Row,VW_CLASS_CHANGEDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_CLASS_CHANGEDRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_CLASS_CHANGEDRowDeleted(Me, New VW_CLASS_CHANGEDRowChangeEvent(CType(e.Row,VW_CLASS_CHANGEDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_CLASS_CHANGEDRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_CLASS_CHANGEDRowDeleting(Me, New VW_CLASS_CHANGEDRowChangeEvent(CType(e.Row,VW_CLASS_CHANGEDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_CLASS_CHANGEDRow(ByVal row As VW_CLASS_CHANGEDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_CLASS_CHANGEDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_FACILITY_BALANCEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnTOTALDUE As Global.System.Data.DataColumn
        
        Private columnPAIDYEAR As Global.System.Data.DataColumn
        
        Private columnTOTALPAID As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnSTRSICCODE As Global.System.Data.DataColumn
        
        Private columnSTRPAYMENTTYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_FACILITY_BALANCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALDUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALDUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSICCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSICCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPAYMENTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPAYMENTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_FACILITY_BALANCERow
            Get
                Return CType(Me.Rows(index),VW_FACILITY_BALANCERow)
            End Get
        End Property
        
        Public Event VW_FACILITY_BALANCERowChanging As VW_FACILITY_BALANCERowChangeEventHandler
        
        Public Event VW_FACILITY_BALANCERowChanged As VW_FACILITY_BALANCERowChangeEventHandler
        
        Public Event VW_FACILITY_BALANCERowDeleting As VW_FACILITY_BALANCERowChangeEventHandler
        
        Public Event VW_FACILITY_BALANCERowDeleted As VW_FACILITY_BALANCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_FACILITY_BALANCERow(ByVal row As VW_FACILITY_BALANCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_FACILITY_BALANCERow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal TOTALDUE As Double,  _
                    ByVal PAIDYEAR As Decimal,  _
                    ByVal TOTALPAID As Double,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal STRCONTACTPHONENUMBER1 As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIPCODE As String,  _
                    ByVal STRSICCODE As String,  _
                    ByVal STRPAYMENTTYPE As String) As VW_FACILITY_BALANCERow
            Dim rowVW_FACILITY_BALANCERow As VW_FACILITY_BALANCERow = CType(Me.NewRow,VW_FACILITY_BALANCERow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, INTYEAR, TOTALDUE, PAIDYEAR, TOTALPAID, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTPHONENUMBER1, STRCONTACTFAXNUMBER, STRCONTACTEMAIL, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, STRSICCODE, STRPAYMENTTYPE}
            rowVW_FACILITY_BALANCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_FACILITY_BALANCERow)
            Return rowVW_FACILITY_BALANCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_FACILITY_BALANCEDataTable = CType(MyBase.Clone,VW_FACILITY_BALANCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_FACILITY_BALANCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnTOTALDUE = MyBase.Columns("TOTALDUE")
            Me.columnPAIDYEAR = MyBase.Columns("PAIDYEAR")
            Me.columnTOTALPAID = MyBase.Columns("TOTALPAID")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnSTRSICCODE = MyBase.Columns("STRSICCODE")
            Me.columnSTRPAYMENTTYPE = MyBase.Columns("STRPAYMENTTYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnTOTALDUE = New Global.System.Data.DataColumn("TOTALDUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALDUE)
            Me.columnPAIDYEAR = New Global.System.Data.DataColumn("PAIDYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDYEAR)
            Me.columnTOTALPAID = New Global.System.Data.DataColumn("TOTALPAID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALPAID)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnSTRSICCODE = New Global.System.Data.DataColumn("STRSICCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSICCODE)
            Me.columnSTRPAYMENTTYPE = New Global.System.Data.DataColumn("STRPAYMENTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPAYMENTTYPE)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 15
            Me.columnSTRCONTACTEMAIL.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnSTRSICCODE.AllowDBNull = false
            Me.columnSTRSICCODE.MaxLength = 4
            Me.columnSTRPAYMENTTYPE.AllowDBNull = false
            Me.columnSTRPAYMENTTYPE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_FACILITY_BALANCERow() As VW_FACILITY_BALANCERow
            Return CType(Me.NewRow,VW_FACILITY_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_FACILITY_BALANCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_FACILITY_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_FACILITY_BALANCERowChangedEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_BALANCERowChanged(Me, New VW_FACILITY_BALANCERowChangeEvent(CType(e.Row,VW_FACILITY_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_FACILITY_BALANCERowChangingEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_BALANCERowChanging(Me, New VW_FACILITY_BALANCERowChangeEvent(CType(e.Row,VW_FACILITY_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_FACILITY_BALANCERowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_BALANCERowDeleted(Me, New VW_FACILITY_BALANCERowChangeEvent(CType(e.Row,VW_FACILITY_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_FACILITY_BALANCERowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_BALANCERowDeleting(Me, New VW_FACILITY_BALANCERowChangeEvent(CType(e.Row,VW_FACILITY_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_FACILITY_BALANCERow(ByVal row As VW_FACILITY_BALANCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_FACILITY_BALANCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_FACILITY_FEEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnTOTALDUE As Global.System.Data.DataColumn
        
        Private columnTOTALPAID As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnINTVOCTONS As Global.System.Data.DataColumn
        
        Private columnINTPMTONS As Global.System.Data.DataColumn
        
        Private columnINTSO2TONS As Global.System.Data.DataColumn
        
        Private columnINTNOXTONS As Global.System.Data.DataColumn
        
        Private columnNUMSMFEE As Global.System.Data.DataColumn
        
        Private columnNUMNSPSFEE As Global.System.Data.DataColumn
        
        Private columnNUMTOTALFEE As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPT As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPTREASON As Global.System.Data.DataColumn
        
        Private columnNUMCALCULATEDFEE As Global.System.Data.DataColumn
        
        Private columnSTRCLASS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPS1 As Global.System.Data.DataColumn
        
        Private columnSHUTDATE As Global.System.Data.DataColumn
        
        Private columnSTRPAYMENTTYPE As Global.System.Data.DataColumn
        
        Private columnSTROFFICIALNAME As Global.System.Data.DataColumn
        
        Private columnSTROFFICIALTITLE As Global.System.Data.DataColumn
        
        Private columnDATESUBMIT As Global.System.Data.DataColumn
        
        Private columnSTRCOMMENTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_FACILITY_FEE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALDUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALDUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALPAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALPAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTVOCTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTVOCTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTPMTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTPMTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSO2TONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSO2TONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTNOXTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTNOXTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMSMFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMSMFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMNSPSFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMNSPSFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMTOTALFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMTOTALFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTREASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPTREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCALCULATEDFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCALCULATEDFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHUTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHUTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPAYMENTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPAYMENTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROFFICIALNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROFFICIALNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROFFICIALTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROFFICIALTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATESUBMITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATESUBMIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_FACILITY_FEERow
            Get
                Return CType(Me.Rows(index),VW_FACILITY_FEERow)
            End Get
        End Property
        
        Public Event VW_FACILITY_FEERowChanging As VW_FACILITY_FEERowChangeEventHandler
        
        Public Event VW_FACILITY_FEERowChanged As VW_FACILITY_FEERowChangeEventHandler
        
        Public Event VW_FACILITY_FEERowDeleting As VW_FACILITY_FEERowChangeEventHandler
        
        Public Event VW_FACILITY_FEERowDeleted As VW_FACILITY_FEERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_FACILITY_FEERow(ByVal row As VW_FACILITY_FEERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_FACILITY_FEERow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal TOTALDUE As Double,  _
                    ByVal TOTALPAID As Double,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal STRCONTACTPHONENUMBER1 As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIPCODE As String,  _
                    ByVal INTVOCTONS As Date,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal NUMSMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STROPERATE As String,  _
                    ByVal STRNSPSEXEMPTREASON As String,  _
                    ByVal NUMCALCULATEDFEE As Decimal,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String,  _
                    ByVal SHUTDATE As Date,  _
                    ByVal STRPAYMENTTYPE As String,  _
                    ByVal STROFFICIALNAME As String,  _
                    ByVal STROFFICIALTITLE As String,  _
                    ByVal DATESUBMIT As Date,  _
                    ByVal STRCOMMENTS As String) As VW_FACILITY_FEERow
            Dim rowVW_FACILITY_FEERow As VW_FACILITY_FEERow = CType(Me.NewRow,VW_FACILITY_FEERow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, INTYEAR, TOTALDUE, TOTALPAID, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTPHONENUMBER1, STRCONTACTFAXNUMBER, STRCONTACTEMAIL, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, INTVOCTONS, INTPMTONS, INTSO2TONS, INTNOXTONS, NUMSMFEE, NUMNSPSFEE, NUMTOTALFEE, STRNSPSEXEMPT, STROPERATE, STRNSPSEXEMPTREASON, NUMCALCULATEDFEE, STRCLASS1, STRNSPS1, SHUTDATE, STRPAYMENTTYPE, STROFFICIALNAME, STROFFICIALTITLE, DATESUBMIT, STRCOMMENTS}
            rowVW_FACILITY_FEERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_FACILITY_FEERow)
            Return rowVW_FACILITY_FEERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_FACILITY_FEEDataTable = CType(MyBase.Clone,VW_FACILITY_FEEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_FACILITY_FEEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnTOTALDUE = MyBase.Columns("TOTALDUE")
            Me.columnTOTALPAID = MyBase.Columns("TOTALPAID")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnINTVOCTONS = MyBase.Columns("INTVOCTONS")
            Me.columnINTPMTONS = MyBase.Columns("INTPMTONS")
            Me.columnINTSO2TONS = MyBase.Columns("INTSO2TONS")
            Me.columnINTNOXTONS = MyBase.Columns("INTNOXTONS")
            Me.columnNUMSMFEE = MyBase.Columns("NUMSMFEE")
            Me.columnNUMNSPSFEE = MyBase.Columns("NUMNSPSFEE")
            Me.columnNUMTOTALFEE = MyBase.Columns("NUMTOTALFEE")
            Me.columnSTRNSPSEXEMPT = MyBase.Columns("STRNSPSEXEMPT")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnSTRNSPSEXEMPTREASON = MyBase.Columns("STRNSPSEXEMPTREASON")
            Me.columnNUMCALCULATEDFEE = MyBase.Columns("NUMCALCULATEDFEE")
            Me.columnSTRCLASS1 = MyBase.Columns("STRCLASS1")
            Me.columnSTRNSPS1 = MyBase.Columns("STRNSPS1")
            Me.columnSHUTDATE = MyBase.Columns("SHUTDATE")
            Me.columnSTRPAYMENTTYPE = MyBase.Columns("STRPAYMENTTYPE")
            Me.columnSTROFFICIALNAME = MyBase.Columns("STROFFICIALNAME")
            Me.columnSTROFFICIALTITLE = MyBase.Columns("STROFFICIALTITLE")
            Me.columnDATESUBMIT = MyBase.Columns("DATESUBMIT")
            Me.columnSTRCOMMENTS = MyBase.Columns("STRCOMMENTS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnTOTALDUE = New Global.System.Data.DataColumn("TOTALDUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALDUE)
            Me.columnTOTALPAID = New Global.System.Data.DataColumn("TOTALPAID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALPAID)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnINTVOCTONS = New Global.System.Data.DataColumn("INTVOCTONS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTVOCTONS)
            Me.columnINTPMTONS = New Global.System.Data.DataColumn("INTPMTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTPMTONS)
            Me.columnINTSO2TONS = New Global.System.Data.DataColumn("INTSO2TONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSO2TONS)
            Me.columnINTNOXTONS = New Global.System.Data.DataColumn("INTNOXTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTNOXTONS)
            Me.columnNUMSMFEE = New Global.System.Data.DataColumn("NUMSMFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMSMFEE)
            Me.columnNUMNSPSFEE = New Global.System.Data.DataColumn("NUMNSPSFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMNSPSFEE)
            Me.columnNUMTOTALFEE = New Global.System.Data.DataColumn("NUMTOTALFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMTOTALFEE)
            Me.columnSTRNSPSEXEMPT = New Global.System.Data.DataColumn("STRNSPSEXEMPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPT)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnSTRNSPSEXEMPTREASON = New Global.System.Data.DataColumn("STRNSPSEXEMPTREASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPTREASON)
            Me.columnNUMCALCULATEDFEE = New Global.System.Data.DataColumn("NUMCALCULATEDFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCALCULATEDFEE)
            Me.columnSTRCLASS1 = New Global.System.Data.DataColumn("STRCLASS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS1)
            Me.columnSTRNSPS1 = New Global.System.Data.DataColumn("STRNSPS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS1)
            Me.columnSHUTDATE = New Global.System.Data.DataColumn("SHUTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHUTDATE)
            Me.columnSTRPAYMENTTYPE = New Global.System.Data.DataColumn("STRPAYMENTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPAYMENTTYPE)
            Me.columnSTROFFICIALNAME = New Global.System.Data.DataColumn("STROFFICIALNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROFFICIALNAME)
            Me.columnSTROFFICIALTITLE = New Global.System.Data.DataColumn("STROFFICIALTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROFFICIALTITLE)
            Me.columnDATESUBMIT = New Global.System.Data.DataColumn("DATESUBMIT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATESUBMIT)
            Me.columnSTRCOMMENTS = New Global.System.Data.DataColumn("STRCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMMENTS)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 15
            Me.columnSTRCONTACTEMAIL.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnINTVOCTONS.AllowDBNull = false
            Me.columnINTPMTONS.AllowDBNull = false
            Me.columnINTSO2TONS.AllowDBNull = false
            Me.columnINTNOXTONS.AllowDBNull = false
            Me.columnNUMSMFEE.AllowDBNull = false
            Me.columnNUMNSPSFEE.AllowDBNull = false
            Me.columnNUMTOTALFEE.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.MaxLength = 3
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
            Me.columnSTRNSPSEXEMPTREASON.MaxLength = 4000
            Me.columnNUMCALCULATEDFEE.AllowDBNull = false
            Me.columnSTRCLASS1.MaxLength = 3
            Me.columnSTRNSPS1.MaxLength = 3
            Me.columnSTRPAYMENTTYPE.AllowDBNull = false
            Me.columnSTRPAYMENTTYPE.MaxLength = 50
            Me.columnSTROFFICIALNAME.AllowDBNull = false
            Me.columnSTROFFICIALNAME.MaxLength = 50
            Me.columnSTROFFICIALTITLE.AllowDBNull = false
            Me.columnSTROFFICIALTITLE.MaxLength = 50
            Me.columnDATESUBMIT.AllowDBNull = false
            Me.columnSTRCOMMENTS.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_FACILITY_FEERow() As VW_FACILITY_FEERow
            Return CType(Me.NewRow,VW_FACILITY_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_FACILITY_FEERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_FACILITY_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_FACILITY_FEERowChangedEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_FEERowChanged(Me, New VW_FACILITY_FEERowChangeEvent(CType(e.Row,VW_FACILITY_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_FACILITY_FEERowChangingEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_FEERowChanging(Me, New VW_FACILITY_FEERowChangeEvent(CType(e.Row,VW_FACILITY_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_FACILITY_FEERowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_FEERowDeleted(Me, New VW_FACILITY_FEERowChangeEvent(CType(e.Row,VW_FACILITY_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_FACILITY_FEERowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_FEERowDeleting(Me, New VW_FACILITY_FEERowChangeEvent(CType(e.Row,VW_FACILITY_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_FACILITY_FEERow(ByVal row As VW_FACILITY_FEERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_FACILITY_FEEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_FACILITY_INFODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYSTREET1 As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITY As Global.System.Data.DataColumn
        
        Private columnSTRAIRSNUMBERTEMP As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAMETEMP As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYSTREET1TEMP As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITYTEMP As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCOMPANYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_FACILITY_INFO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYSTREET1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYSTREET1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERTEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBERTEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMETEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAMETEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYSTREET1TEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYSTREET1TEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYTEMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITYTEMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCOMPANYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCOMPANYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_FACILITY_INFORow
            Get
                Return CType(Me.Rows(index),VW_FACILITY_INFORow)
            End Get
        End Property
        
        Public Event VW_FACILITY_INFORowChanging As VW_FACILITY_INFORowChangeEventHandler
        
        Public Event VW_FACILITY_INFORowChanged As VW_FACILITY_INFORowChangeEventHandler
        
        Public Event VW_FACILITY_INFORowDeleting As VW_FACILITY_INFORowChangeEventHandler
        
        Public Event VW_FACILITY_INFORowDeleted As VW_FACILITY_INFORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_FACILITY_INFORow(ByVal row As VW_FACILITY_INFORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_FACILITY_INFORow(ByVal STRAIRSNUMBER As String, ByVal STRFACILITYNAME As String, ByVal STRFACILITYSTREET1 As String, ByVal STRFACILITYCITY As String, ByVal STRAIRSNUMBERTEMP As String, ByVal STRFACILITYNAMETEMP As String, ByVal STRFACILITYSTREET1TEMP As String, ByVal STRFACILITYCITYTEMP As String, ByVal STRCONTACTFIRSTNAME As String, ByVal STRCONTACTLASTNAME As String, ByVal STRCONTACTCOMPANYNAME As String, ByVal STRCONTACTPHONENUMBER1 As String, ByVal STRCONTACTEMAIL As String) As VW_FACILITY_INFORow
            Dim rowVW_FACILITY_INFORow As VW_FACILITY_INFORow = CType(Me.NewRow,VW_FACILITY_INFORow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, STRFACILITYSTREET1, STRFACILITYCITY, STRAIRSNUMBERTEMP, STRFACILITYNAMETEMP, STRFACILITYSTREET1TEMP, STRFACILITYCITYTEMP, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTCOMPANYNAME, STRCONTACTPHONENUMBER1, STRCONTACTEMAIL}
            rowVW_FACILITY_INFORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_FACILITY_INFORow)
            Return rowVW_FACILITY_INFORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_FACILITY_INFODataTable = CType(MyBase.Clone,VW_FACILITY_INFODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_FACILITY_INFODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRFACILITYSTREET1 = MyBase.Columns("STRFACILITYSTREET1")
            Me.columnSTRFACILITYCITY = MyBase.Columns("STRFACILITYCITY")
            Me.columnSTRAIRSNUMBERTEMP = MyBase.Columns("STRAIRSNUMBERTEMP")
            Me.columnSTRFACILITYNAMETEMP = MyBase.Columns("STRFACILITYNAMETEMP")
            Me.columnSTRFACILITYSTREET1TEMP = MyBase.Columns("STRFACILITYSTREET1TEMP")
            Me.columnSTRFACILITYCITYTEMP = MyBase.Columns("STRFACILITYCITYTEMP")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTCOMPANYNAME = MyBase.Columns("STRCONTACTCOMPANYNAME")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRFACILITYSTREET1 = New Global.System.Data.DataColumn("STRFACILITYSTREET1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYSTREET1)
            Me.columnSTRFACILITYCITY = New Global.System.Data.DataColumn("STRFACILITYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITY)
            Me.columnSTRAIRSNUMBERTEMP = New Global.System.Data.DataColumn("STRAIRSNUMBERTEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBERTEMP)
            Me.columnSTRFACILITYNAMETEMP = New Global.System.Data.DataColumn("STRFACILITYNAMETEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAMETEMP)
            Me.columnSTRFACILITYSTREET1TEMP = New Global.System.Data.DataColumn("STRFACILITYSTREET1TEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYSTREET1TEMP)
            Me.columnSTRFACILITYCITYTEMP = New Global.System.Data.DataColumn("STRFACILITYCITYTEMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITYTEMP)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTCOMPANYNAME = New Global.System.Data.DataColumn("STRCONTACTCOMPANYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCOMPANYNAME)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRFACILITYSTREET1.AllowDBNull = false
            Me.columnSTRFACILITYSTREET1.MaxLength = 250
            Me.columnSTRFACILITYCITY.AllowDBNull = false
            Me.columnSTRFACILITYCITY.MaxLength = 50
            Me.columnSTRAIRSNUMBERTEMP.AllowDBNull = false
            Me.columnSTRAIRSNUMBERTEMP.MaxLength = 12
            Me.columnSTRFACILITYNAMETEMP.MaxLength = 100
            Me.columnSTRFACILITYSTREET1TEMP.MaxLength = 100
            Me.columnSTRFACILITYCITYTEMP.MaxLength = 50
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTCOMPANYNAME.AllowDBNull = false
            Me.columnSTRCONTACTCOMPANYNAME.MaxLength = 100
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
            Me.columnSTRCONTACTEMAIL.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_FACILITY_INFORow() As VW_FACILITY_INFORow
            Return CType(Me.NewRow,VW_FACILITY_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_FACILITY_INFORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_FACILITY_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_FACILITY_INFORowChangedEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_INFORowChanged(Me, New VW_FACILITY_INFORowChangeEvent(CType(e.Row,VW_FACILITY_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_FACILITY_INFORowChangingEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_INFORowChanging(Me, New VW_FACILITY_INFORowChangeEvent(CType(e.Row,VW_FACILITY_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_FACILITY_INFORowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_INFORowDeleted(Me, New VW_FACILITY_INFORowChangeEvent(CType(e.Row,VW_FACILITY_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_FACILITY_INFORowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_FACILITY_INFORowDeleting(Me, New VW_FACILITY_INFORowChangeEvent(CType(e.Row,VW_FACILITY_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_FACILITY_INFORow(ByVal row As VW_FACILITY_INFORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_FACILITY_INFODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_FEES_BY_AIRSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnNUMPAYMENT As Global.System.Data.DataColumn
        
        Private columnDATPAYDATE As Global.System.Data.DataColumn
        
        Private columnSTRCHECKNO As Global.System.Data.DataColumn
        
        Private columnSTRDEPOSITNO As Global.System.Data.DataColumn
        
        Private columnSTRPAYTYPE As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnINTVOCTONS As Global.System.Data.DataColumn
        
        Private columnINTPMTONS As Global.System.Data.DataColumn
        
        Private columnINTSO2TONS As Global.System.Data.DataColumn
        
        Private columnINTNOXTONS As Global.System.Data.DataColumn
        
        Private columnNUMPART70FEE As Global.System.Data.DataColumn
        
        Private columnNUMSMFEE As Global.System.Data.DataColumn
        
        Private columnNUMNSPSFEE As Global.System.Data.DataColumn
        
        Private columnNUMTOTALFEE As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPT As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnNUMCALCULATEDFEE As Global.System.Data.DataColumn
        
        Private columnSTRCLASS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPS1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_FEES_BY_AIRS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPAYMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPAYMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATPAYDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATPAYDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCHECKNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCHECKNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRDEPOSITNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRDEPOSITNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPAYTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPAYTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTVOCTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTVOCTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTPMTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTPMTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSO2TONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSO2TONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTNOXTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTNOXTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPART70FEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPART70FEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMSMFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMSMFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMNSPSFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMNSPSFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMTOTALFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMTOTALFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCALCULATEDFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCALCULATEDFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_FEES_BY_AIRSRow
            Get
                Return CType(Me.Rows(index),VW_FEES_BY_AIRSRow)
            End Get
        End Property
        
        Public Event VW_FEES_BY_AIRSRowChanging As VW_FEES_BY_AIRSRowChangeEventHandler
        
        Public Event VW_FEES_BY_AIRSRowChanged As VW_FEES_BY_AIRSRowChangeEventHandler
        
        Public Event VW_FEES_BY_AIRSRowDeleting As VW_FEES_BY_AIRSRowChangeEventHandler
        
        Public Event VW_FEES_BY_AIRSRowDeleted As VW_FEES_BY_AIRSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_FEES_BY_AIRSRow(ByVal row As VW_FEES_BY_AIRSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_FEES_BY_AIRSRow( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal NUMPAYMENT As Decimal,  _
                    ByVal DATPAYDATE As Date,  _
                    ByVal STRCHECKNO As String,  _
                    ByVal STRDEPOSITNO As String,  _
                    ByVal STRPAYTYPE As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal INTVOCTONS As Decimal,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal NUMPART70FEE As Decimal,  _
                    ByVal NUMSMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STROPERATE As String,  _
                    ByVal NUMCALCULATEDFEE As Decimal,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String) As VW_FEES_BY_AIRSRow
            Dim rowVW_FEES_BY_AIRSRow As VW_FEES_BY_AIRSRow = CType(Me.NewRow,VW_FEES_BY_AIRSRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, NUMPAYMENT, DATPAYDATE, STRCHECKNO, STRDEPOSITNO, STRPAYTYPE, INTYEAR, INTVOCTONS, INTPMTONS, INTSO2TONS, INTNOXTONS, NUMPART70FEE, NUMSMFEE, NUMNSPSFEE, NUMTOTALFEE, STRNSPSEXEMPT, STROPERATE, NUMCALCULATEDFEE, STRCLASS1, STRNSPS1}
            rowVW_FEES_BY_AIRSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_FEES_BY_AIRSRow)
            Return rowVW_FEES_BY_AIRSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_FEES_BY_AIRSDataTable = CType(MyBase.Clone,VW_FEES_BY_AIRSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_FEES_BY_AIRSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnNUMPAYMENT = MyBase.Columns("NUMPAYMENT")
            Me.columnDATPAYDATE = MyBase.Columns("DATPAYDATE")
            Me.columnSTRCHECKNO = MyBase.Columns("STRCHECKNO")
            Me.columnSTRDEPOSITNO = MyBase.Columns("STRDEPOSITNO")
            Me.columnSTRPAYTYPE = MyBase.Columns("STRPAYTYPE")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnINTVOCTONS = MyBase.Columns("INTVOCTONS")
            Me.columnINTPMTONS = MyBase.Columns("INTPMTONS")
            Me.columnINTSO2TONS = MyBase.Columns("INTSO2TONS")
            Me.columnINTNOXTONS = MyBase.Columns("INTNOXTONS")
            Me.columnNUMPART70FEE = MyBase.Columns("NUMPART70FEE")
            Me.columnNUMSMFEE = MyBase.Columns("NUMSMFEE")
            Me.columnNUMNSPSFEE = MyBase.Columns("NUMNSPSFEE")
            Me.columnNUMTOTALFEE = MyBase.Columns("NUMTOTALFEE")
            Me.columnSTRNSPSEXEMPT = MyBase.Columns("STRNSPSEXEMPT")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnNUMCALCULATEDFEE = MyBase.Columns("NUMCALCULATEDFEE")
            Me.columnSTRCLASS1 = MyBase.Columns("STRCLASS1")
            Me.columnSTRNSPS1 = MyBase.Columns("STRNSPS1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnNUMPAYMENT = New Global.System.Data.DataColumn("NUMPAYMENT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPAYMENT)
            Me.columnDATPAYDATE = New Global.System.Data.DataColumn("DATPAYDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATPAYDATE)
            Me.columnSTRCHECKNO = New Global.System.Data.DataColumn("STRCHECKNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCHECKNO)
            Me.columnSTRDEPOSITNO = New Global.System.Data.DataColumn("STRDEPOSITNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRDEPOSITNO)
            Me.columnSTRPAYTYPE = New Global.System.Data.DataColumn("STRPAYTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPAYTYPE)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnINTVOCTONS = New Global.System.Data.DataColumn("INTVOCTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTVOCTONS)
            Me.columnINTPMTONS = New Global.System.Data.DataColumn("INTPMTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTPMTONS)
            Me.columnINTSO2TONS = New Global.System.Data.DataColumn("INTSO2TONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSO2TONS)
            Me.columnINTNOXTONS = New Global.System.Data.DataColumn("INTNOXTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTNOXTONS)
            Me.columnNUMPART70FEE = New Global.System.Data.DataColumn("NUMPART70FEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPART70FEE)
            Me.columnNUMSMFEE = New Global.System.Data.DataColumn("NUMSMFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMSMFEE)
            Me.columnNUMNSPSFEE = New Global.System.Data.DataColumn("NUMNSPSFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMNSPSFEE)
            Me.columnNUMTOTALFEE = New Global.System.Data.DataColumn("NUMTOTALFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMTOTALFEE)
            Me.columnSTRNSPSEXEMPT = New Global.System.Data.DataColumn("STRNSPSEXEMPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPT)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnNUMCALCULATEDFEE = New Global.System.Data.DataColumn("NUMCALCULATEDFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCALCULATEDFEE)
            Me.columnSTRCLASS1 = New Global.System.Data.DataColumn("STRCLASS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS1)
            Me.columnSTRNSPS1 = New Global.System.Data.DataColumn("STRNSPS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS1)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnNUMPAYMENT.AllowDBNull = false
            Me.columnSTRCHECKNO.MaxLength = 15
            Me.columnSTRDEPOSITNO.MaxLength = 20
            Me.columnSTRPAYTYPE.MaxLength = 20
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnINTVOCTONS.AllowDBNull = false
            Me.columnINTPMTONS.AllowDBNull = false
            Me.columnINTSO2TONS.AllowDBNull = false
            Me.columnINTNOXTONS.AllowDBNull = false
            Me.columnNUMPART70FEE.AllowDBNull = false
            Me.columnNUMSMFEE.AllowDBNull = false
            Me.columnNUMNSPSFEE.AllowDBNull = false
            Me.columnNUMTOTALFEE.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.MaxLength = 3
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
            Me.columnNUMCALCULATEDFEE.AllowDBNull = false
            Me.columnSTRCLASS1.MaxLength = 3
            Me.columnSTRNSPS1.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_FEES_BY_AIRSRow() As VW_FEES_BY_AIRSRow
            Return CType(Me.NewRow,VW_FEES_BY_AIRSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_FEES_BY_AIRSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_FEES_BY_AIRSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_FEES_BY_AIRSRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_FEES_BY_AIRSRowChanged(Me, New VW_FEES_BY_AIRSRowChangeEvent(CType(e.Row,VW_FEES_BY_AIRSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_FEES_BY_AIRSRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_FEES_BY_AIRSRowChanging(Me, New VW_FEES_BY_AIRSRowChangeEvent(CType(e.Row,VW_FEES_BY_AIRSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_FEES_BY_AIRSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_FEES_BY_AIRSRowDeleted(Me, New VW_FEES_BY_AIRSRowChangeEvent(CType(e.Row,VW_FEES_BY_AIRSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_FEES_BY_AIRSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_FEES_BY_AIRSRowDeleting(Me, New VW_FEES_BY_AIRSRowChangeEvent(CType(e.Row,VW_FEES_BY_AIRSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_FEES_BY_AIRSRow(ByVal row As VW_FEES_BY_AIRSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_FEES_BY_AIRSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_NO_OPERATEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTPHONENUMBER1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFAXNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnSHUTDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_NO_OPERATE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTPHONENUMBER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTPHONENUMBER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFAXNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFAXNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHUTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHUTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_NO_OPERATERow
            Get
                Return CType(Me.Rows(index),VW_NO_OPERATERow)
            End Get
        End Property
        
        Public Event VW_NO_OPERATERowChanging As VW_NO_OPERATERowChangeEventHandler
        
        Public Event VW_NO_OPERATERowChanged As VW_NO_OPERATERowChangeEventHandler
        
        Public Event VW_NO_OPERATERowDeleting As VW_NO_OPERATERowChangeEventHandler
        
        Public Event VW_NO_OPERATERowDeleted As VW_NO_OPERATERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_NO_OPERATERow(ByVal row As VW_NO_OPERATERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_NO_OPERATERow(ByVal STRAIRSNUMBER As String, ByVal STRFACILITYNAME As String, ByVal STRCONTACTFIRSTNAME As String, ByVal STRCONTACTLASTNAME As String, ByVal STRCONTACTPHONENUMBER1 As String, ByVal STRCONTACTFAXNUMBER As String, ByVal STRCONTACTEMAIL As String, ByVal STRCONTACTADDRESS1 As String, ByVal STRCONTACTCITY As String, ByVal STRCONTACTSTATE As String, ByVal STRCONTACTZIPCODE As String, ByVal INTYEAR As Decimal, ByVal STROPERATE As String, ByVal SHUTDATE As Date) As VW_NO_OPERATERow
            Dim rowVW_NO_OPERATERow As VW_NO_OPERATERow = CType(Me.NewRow,VW_NO_OPERATERow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTPHONENUMBER1, STRCONTACTFAXNUMBER, STRCONTACTEMAIL, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, INTYEAR, STROPERATE, SHUTDATE}
            rowVW_NO_OPERATERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_NO_OPERATERow)
            Return rowVW_NO_OPERATERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_NO_OPERATEDataTable = CType(MyBase.Clone,VW_NO_OPERATEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_NO_OPERATEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTPHONENUMBER1 = MyBase.Columns("STRCONTACTPHONENUMBER1")
            Me.columnSTRCONTACTFAXNUMBER = MyBase.Columns("STRCONTACTFAXNUMBER")
            Me.columnSTRCONTACTEMAIL = MyBase.Columns("STRCONTACTEMAIL")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnSHUTDATE = MyBase.Columns("SHUTDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTPHONENUMBER1 = New Global.System.Data.DataColumn("STRCONTACTPHONENUMBER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTPHONENUMBER1)
            Me.columnSTRCONTACTFAXNUMBER = New Global.System.Data.DataColumn("STRCONTACTFAXNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFAXNUMBER)
            Me.columnSTRCONTACTEMAIL = New Global.System.Data.DataColumn("STRCONTACTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTEMAIL)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnSHUTDATE = New Global.System.Data.DataColumn("SHUTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHUTDATE)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTPHONENUMBER1.AllowDBNull = false
            Me.columnSTRCONTACTPHONENUMBER1.MaxLength = 15
            Me.columnSTRCONTACTFAXNUMBER.MaxLength = 15
            Me.columnSTRCONTACTEMAIL.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_NO_OPERATERow() As VW_NO_OPERATERow
            Return CType(Me.NewRow,VW_NO_OPERATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_NO_OPERATERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_NO_OPERATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_NO_OPERATERowChangedEvent) Is Nothing) Then
                RaiseEvent VW_NO_OPERATERowChanged(Me, New VW_NO_OPERATERowChangeEvent(CType(e.Row,VW_NO_OPERATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_NO_OPERATERowChangingEvent) Is Nothing) Then
                RaiseEvent VW_NO_OPERATERowChanging(Me, New VW_NO_OPERATERowChangeEvent(CType(e.Row,VW_NO_OPERATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_NO_OPERATERowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_NO_OPERATERowDeleted(Me, New VW_NO_OPERATERowChangeEvent(CType(e.Row,VW_NO_OPERATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_NO_OPERATERowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_NO_OPERATERowDeleting(Me, New VW_NO_OPERATERowChangeEvent(CType(e.Row,VW_NO_OPERATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_NO_OPERATERow(ByVal row As VW_NO_OPERATERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_NO_OPERATEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_NONRESPONDENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRKEY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTTITLE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCOMPANYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnINTSUBMITTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_NONRESPONDENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCOMPANYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCOMPANYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSUBMITTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSUBMITTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_NONRESPONDENTRow
            Get
                Return CType(Me.Rows(index),VW_NONRESPONDENTRow)
            End Get
        End Property
        
        Public Event VW_NONRESPONDENTRowChanging As VW_NONRESPONDENTRowChangeEventHandler
        
        Public Event VW_NONRESPONDENTRowChanged As VW_NONRESPONDENTRowChangeEventHandler
        
        Public Event VW_NONRESPONDENTRowDeleting As VW_NONRESPONDENTRowChangeEventHandler
        
        Public Event VW_NONRESPONDENTRowDeleted As VW_NONRESPONDENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_NONRESPONDENTRow(ByVal row As VW_NONRESPONDENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_NONRESPONDENTRow(ByVal STRAIRSNUMBER As String, ByVal STRFACILITYNAME As String, ByVal STRKEY As String, ByVal STRCONTACTFIRSTNAME As String, ByVal STRCONTACTLASTNAME As String, ByVal STRCONTACTTITLE As String, ByVal STRCONTACTCOMPANYNAME As String, ByVal STRCONTACTADDRESS1 As String, ByVal STRCONTACTCITY As String, ByVal STRCONTACTSTATE As String, ByVal STRCONTACTZIPCODE As String, ByVal INTYEAR As Decimal, ByVal INTSUBMITTAL As Decimal) As VW_NONRESPONDENTRow
            Dim rowVW_NONRESPONDENTRow As VW_NONRESPONDENTRow = CType(Me.NewRow,VW_NONRESPONDENTRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRFACILITYNAME, STRKEY, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTTITLE, STRCONTACTCOMPANYNAME, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, INTYEAR, INTSUBMITTAL}
            rowVW_NONRESPONDENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_NONRESPONDENTRow)
            Return rowVW_NONRESPONDENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_NONRESPONDENTDataTable = CType(MyBase.Clone,VW_NONRESPONDENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_NONRESPONDENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRKEY = MyBase.Columns("STRKEY")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTTITLE = MyBase.Columns("STRCONTACTTITLE")
            Me.columnSTRCONTACTCOMPANYNAME = MyBase.Columns("STRCONTACTCOMPANYNAME")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnINTSUBMITTAL = MyBase.Columns("INTSUBMITTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRKEY = New Global.System.Data.DataColumn("STRKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRKEY)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTTITLE = New Global.System.Data.DataColumn("STRCONTACTTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTTITLE)
            Me.columnSTRCONTACTCOMPANYNAME = New Global.System.Data.DataColumn("STRCONTACTCOMPANYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCOMPANYNAME)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnINTSUBMITTAL = New Global.System.Data.DataColumn("INTSUBMITTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSUBMITTAL)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRKEY.AllowDBNull = false
            Me.columnSTRKEY.MaxLength = 2
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTTITLE.AllowDBNull = false
            Me.columnSTRCONTACTTITLE.MaxLength = 100
            Me.columnSTRCONTACTCOMPANYNAME.AllowDBNull = false
            Me.columnSTRCONTACTCOMPANYNAME.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnINTSUBMITTAL.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_NONRESPONDENTRow() As VW_NONRESPONDENTRow
            Return CType(Me.NewRow,VW_NONRESPONDENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_NONRESPONDENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_NONRESPONDENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_NONRESPONDENTRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_NONRESPONDENTRowChanged(Me, New VW_NONRESPONDENTRowChangeEvent(CType(e.Row,VW_NONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_NONRESPONDENTRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_NONRESPONDENTRowChanging(Me, New VW_NONRESPONDENTRowChangeEvent(CType(e.Row,VW_NONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_NONRESPONDENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_NONRESPONDENTRowDeleted(Me, New VW_NONRESPONDENTRowChangeEvent(CType(e.Row,VW_NONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_NONRESPONDENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_NONRESPONDENTRowDeleting(Me, New VW_NONRESPONDENTRowChangeEvent(CType(e.Row,VW_NONRESPONDENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_NONRESPONDENTRow(ByVal row As VW_NONRESPONDENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_NONRESPONDENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_NSPS_STATUSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRNSPS1 As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPT As Global.System.Data.DataColumn
        
        Private columnSTRNSPS As Global.System.Data.DataColumn
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnSTRNSPSEXEMPTREASON As Global.System.Data.DataColumn
        
        Private columnSTROPERATE As Global.System.Data.DataColumn
        
        Private columnSHUTDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_NSPS_STATUS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRNSPSEXEMPTREASONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRNSPSEXEMPTREASON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SHUTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSHUTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_NSPS_STATUSRow
            Get
                Return CType(Me.Rows(index),VW_NSPS_STATUSRow)
            End Get
        End Property
        
        Public Event VW_NSPS_STATUSRowChanging As VW_NSPS_STATUSRowChangeEventHandler
        
        Public Event VW_NSPS_STATUSRowChanged As VW_NSPS_STATUSRowChangeEventHandler
        
        Public Event VW_NSPS_STATUSRowDeleting As VW_NSPS_STATUSRowChangeEventHandler
        
        Public Event VW_NSPS_STATUSRowDeleted As VW_NSPS_STATUSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_NSPS_STATUSRow(ByVal row As VW_NSPS_STATUSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_NSPS_STATUSRow(ByVal STRAIRSNUMBER As String, ByVal STRNSPS1 As String, ByVal STRNSPSEXEMPT As String, ByVal STRNSPS As String, ByVal INTYEAR As Decimal, ByVal STRNSPSEXEMPTREASON As String, ByVal STROPERATE As String, ByVal SHUTDATE As Date) As VW_NSPS_STATUSRow
            Dim rowVW_NSPS_STATUSRow As VW_NSPS_STATUSRow = CType(Me.NewRow,VW_NSPS_STATUSRow)
            Dim columnValuesArray() As Object = New Object() {STRAIRSNUMBER, STRNSPS1, STRNSPSEXEMPT, STRNSPS, INTYEAR, STRNSPSEXEMPTREASON, STROPERATE, SHUTDATE}
            rowVW_NSPS_STATUSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_NSPS_STATUSRow)
            Return rowVW_NSPS_STATUSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_NSPS_STATUSDataTable = CType(MyBase.Clone,VW_NSPS_STATUSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_NSPS_STATUSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRNSPS1 = MyBase.Columns("STRNSPS1")
            Me.columnSTRNSPSEXEMPT = MyBase.Columns("STRNSPSEXEMPT")
            Me.columnSTRNSPS = MyBase.Columns("STRNSPS")
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnSTRNSPSEXEMPTREASON = MyBase.Columns("STRNSPSEXEMPTREASON")
            Me.columnSTROPERATE = MyBase.Columns("STROPERATE")
            Me.columnSHUTDATE = MyBase.Columns("SHUTDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRNSPS1 = New Global.System.Data.DataColumn("STRNSPS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS1)
            Me.columnSTRNSPSEXEMPT = New Global.System.Data.DataColumn("STRNSPSEXEMPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPT)
            Me.columnSTRNSPS = New Global.System.Data.DataColumn("STRNSPS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPS)
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnSTRNSPSEXEMPTREASON = New Global.System.Data.DataColumn("STRNSPSEXEMPTREASON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRNSPSEXEMPTREASON)
            Me.columnSTROPERATE = New Global.System.Data.DataColumn("STROPERATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATE)
            Me.columnSHUTDATE = New Global.System.Data.DataColumn("SHUTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSHUTDATE)
            Me.columnSTRAIRSNUMBER.AllowDBNull = false
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRNSPS1.MaxLength = 3
            Me.columnSTRNSPSEXEMPT.AllowDBNull = false
            Me.columnSTRNSPSEXEMPT.MaxLength = 3
            Me.columnSTRNSPS.MaxLength = 3
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnSTRNSPSEXEMPTREASON.MaxLength = 4000
            Me.columnSTROPERATE.AllowDBNull = false
            Me.columnSTROPERATE.MaxLength = 3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_NSPS_STATUSRow() As VW_NSPS_STATUSRow
            Return CType(Me.NewRow,VW_NSPS_STATUSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_NSPS_STATUSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_NSPS_STATUSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_NSPS_STATUSRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowChanged(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_NSPS_STATUSRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowChanging(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_NSPS_STATUSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowDeleted(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_NSPS_STATUSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_NSPS_STATUSRowDeleting(Me, New VW_NSPS_STATUSRowChangeEvent(CType(e.Row,VW_NSPS_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_NSPS_STATUSRow(ByVal row As VW_NSPS_STATUSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_NSPS_STATUSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_TITLE_V_RENEWALSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRKEY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCOMPANYNAME As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTADDRESS1 As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTZIPCODE As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYNAME As Global.System.Data.DataColumn
        
        Private columnSTRFACILITYCITY As Global.System.Data.DataColumn
        
        Private columnSTROPERATIONALSTATUS As Global.System.Data.DataColumn
        
        Private columnSTRAPPLICATIONTYPE As Global.System.Data.DataColumn
        
        Private columnDATPERMITISSUED As Global.System.Data.DataColumn
        
        Private columnDATEFFECTIVE As Global.System.Data.DataColumn
        
        Private columnSTRPERMITNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCLASS As Global.System.Data.DataColumn
        
        Private columnSTRAPPLICATIONNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnPERMITNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCOUNTYNAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_TITLE_V_RENEWALS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCOMPANYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCOMPANYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTADDRESS1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTADDRESS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFACILITYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFACILITYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STROPERATIONALSTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTROPERATIONALSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAPPLICATIONTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAPPLICATIONTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATPERMITISSUEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATPERMITISSUED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATEFFECTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEFFECTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPERMITNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPERMITNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLASSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLASS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAPPLICATIONNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAPPLICATIONNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERMITNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERMITNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOUNTYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOUNTYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_TITLE_V_RENEWALSRow
            Get
                Return CType(Me.Rows(index),VW_TITLE_V_RENEWALSRow)
            End Get
        End Property
        
        Public Event VW_TITLE_V_RENEWALSRowChanging As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        Public Event VW_TITLE_V_RENEWALSRowChanged As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        Public Event VW_TITLE_V_RENEWALSRowDeleting As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        Public Event VW_TITLE_V_RENEWALSRowDeleted As VW_TITLE_V_RENEWALSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_TITLE_V_RENEWALSRow(ByVal row As VW_TITLE_V_RENEWALSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_TITLE_V_RENEWALSRow( _
                    ByVal STRKEY As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal STRCONTACTCOMPANYNAME As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIPCODE As String,  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STROPERATIONALSTATUS As String,  _
                    ByVal STRAPPLICATIONTYPE As String,  _
                    ByVal DATPERMITISSUED As Date,  _
                    ByVal DATEFFECTIVE As Date,  _
                    ByVal STRPERMITNUMBER As String,  _
                    ByVal STRCLASS As String,  _
                    ByVal STRAPPLICATIONNUMBER As String,  _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal AIRSNUMBER As String,  _
                    ByVal PERMITNUMBER As String,  _
                    ByVal STRCOUNTYNAME As String) As VW_TITLE_V_RENEWALSRow
            Dim rowVW_TITLE_V_RENEWALSRow As VW_TITLE_V_RENEWALSRow = CType(Me.NewRow,VW_TITLE_V_RENEWALSRow)
            Dim columnValuesArray() As Object = New Object() {STRKEY, STRCONTACTFIRSTNAME, STRCONTACTLASTNAME, STRCONTACTCOMPANYNAME, STRCONTACTADDRESS1, STRCONTACTCITY, STRCONTACTSTATE, STRCONTACTZIPCODE, STRFACILITYNAME, STRFACILITYCITY, STROPERATIONALSTATUS, STRAPPLICATIONTYPE, DATPERMITISSUED, DATEFFECTIVE, STRPERMITNUMBER, STRCLASS, STRAPPLICATIONNUMBER, STRAIRSNUMBER, AIRSNUMBER, PERMITNUMBER, STRCOUNTYNAME}
            rowVW_TITLE_V_RENEWALSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_TITLE_V_RENEWALSRow)
            Return rowVW_TITLE_V_RENEWALSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_TITLE_V_RENEWALSDataTable = CType(MyBase.Clone,VW_TITLE_V_RENEWALSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_TITLE_V_RENEWALSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRKEY = MyBase.Columns("STRKEY")
            Me.columnSTRCONTACTFIRSTNAME = MyBase.Columns("STRCONTACTFIRSTNAME")
            Me.columnSTRCONTACTLASTNAME = MyBase.Columns("STRCONTACTLASTNAME")
            Me.columnSTRCONTACTCOMPANYNAME = MyBase.Columns("STRCONTACTCOMPANYNAME")
            Me.columnSTRCONTACTADDRESS1 = MyBase.Columns("STRCONTACTADDRESS1")
            Me.columnSTRCONTACTCITY = MyBase.Columns("STRCONTACTCITY")
            Me.columnSTRCONTACTSTATE = MyBase.Columns("STRCONTACTSTATE")
            Me.columnSTRCONTACTZIPCODE = MyBase.Columns("STRCONTACTZIPCODE")
            Me.columnSTRFACILITYNAME = MyBase.Columns("STRFACILITYNAME")
            Me.columnSTRFACILITYCITY = MyBase.Columns("STRFACILITYCITY")
            Me.columnSTROPERATIONALSTATUS = MyBase.Columns("STROPERATIONALSTATUS")
            Me.columnSTRAPPLICATIONTYPE = MyBase.Columns("STRAPPLICATIONTYPE")
            Me.columnDATPERMITISSUED = MyBase.Columns("DATPERMITISSUED")
            Me.columnDATEFFECTIVE = MyBase.Columns("DATEFFECTIVE")
            Me.columnSTRPERMITNUMBER = MyBase.Columns("STRPERMITNUMBER")
            Me.columnSTRCLASS = MyBase.Columns("STRCLASS")
            Me.columnSTRAPPLICATIONNUMBER = MyBase.Columns("STRAPPLICATIONNUMBER")
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnAIRSNUMBER = MyBase.Columns("AIRSNUMBER")
            Me.columnPERMITNUMBER = MyBase.Columns("PERMITNUMBER")
            Me.columnSTRCOUNTYNAME = MyBase.Columns("STRCOUNTYNAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRKEY = New Global.System.Data.DataColumn("STRKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRKEY)
            Me.columnSTRCONTACTFIRSTNAME = New Global.System.Data.DataColumn("STRCONTACTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTFIRSTNAME)
            Me.columnSTRCONTACTLASTNAME = New Global.System.Data.DataColumn("STRCONTACTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTLASTNAME)
            Me.columnSTRCONTACTCOMPANYNAME = New Global.System.Data.DataColumn("STRCONTACTCOMPANYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCOMPANYNAME)
            Me.columnSTRCONTACTADDRESS1 = New Global.System.Data.DataColumn("STRCONTACTADDRESS1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTADDRESS1)
            Me.columnSTRCONTACTCITY = New Global.System.Data.DataColumn("STRCONTACTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTCITY)
            Me.columnSTRCONTACTSTATE = New Global.System.Data.DataColumn("STRCONTACTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTSTATE)
            Me.columnSTRCONTACTZIPCODE = New Global.System.Data.DataColumn("STRCONTACTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTZIPCODE)
            Me.columnSTRFACILITYNAME = New Global.System.Data.DataColumn("STRFACILITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYNAME)
            Me.columnSTRFACILITYCITY = New Global.System.Data.DataColumn("STRFACILITYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFACILITYCITY)
            Me.columnSTROPERATIONALSTATUS = New Global.System.Data.DataColumn("STROPERATIONALSTATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTROPERATIONALSTATUS)
            Me.columnSTRAPPLICATIONTYPE = New Global.System.Data.DataColumn("STRAPPLICATIONTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAPPLICATIONTYPE)
            Me.columnDATPERMITISSUED = New Global.System.Data.DataColumn("DATPERMITISSUED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATPERMITISSUED)
            Me.columnDATEFFECTIVE = New Global.System.Data.DataColumn("DATEFFECTIVE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEFFECTIVE)
            Me.columnSTRPERMITNUMBER = New Global.System.Data.DataColumn("STRPERMITNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPERMITNUMBER)
            Me.columnSTRCLASS = New Global.System.Data.DataColumn("STRCLASS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLASS)
            Me.columnSTRAPPLICATIONNUMBER = New Global.System.Data.DataColumn("STRAPPLICATIONNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAPPLICATIONNUMBER)
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnAIRSNUMBER = New Global.System.Data.DataColumn("AIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAIRSNUMBER)
            Me.columnPERMITNUMBER = New Global.System.Data.DataColumn("PERMITNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERMITNUMBER)
            Me.columnSTRCOUNTYNAME = New Global.System.Data.DataColumn("STRCOUNTYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOUNTYNAME)
            Me.columnSTRKEY.AllowDBNull = false
            Me.columnSTRKEY.MaxLength = 2
            Me.columnSTRCONTACTFIRSTNAME.AllowDBNull = false
            Me.columnSTRCONTACTFIRSTNAME.MaxLength = 35
            Me.columnSTRCONTACTLASTNAME.AllowDBNull = false
            Me.columnSTRCONTACTLASTNAME.MaxLength = 35
            Me.columnSTRCONTACTCOMPANYNAME.AllowDBNull = false
            Me.columnSTRCONTACTCOMPANYNAME.MaxLength = 100
            Me.columnSTRCONTACTADDRESS1.AllowDBNull = false
            Me.columnSTRCONTACTADDRESS1.MaxLength = 100
            Me.columnSTRCONTACTCITY.AllowDBNull = false
            Me.columnSTRCONTACTCITY.MaxLength = 50
            Me.columnSTRCONTACTSTATE.AllowDBNull = false
            Me.columnSTRCONTACTSTATE.MaxLength = 2
            Me.columnSTRCONTACTZIPCODE.AllowDBNull = false
            Me.columnSTRCONTACTZIPCODE.MaxLength = 9
            Me.columnSTRFACILITYNAME.AllowDBNull = false
            Me.columnSTRFACILITYNAME.MaxLength = 100
            Me.columnSTRFACILITYCITY.AllowDBNull = false
            Me.columnSTRFACILITYCITY.MaxLength = 50
            Me.columnSTROPERATIONALSTATUS.AllowDBNull = false
            Me.columnSTROPERATIONALSTATUS.MaxLength = 1
            Me.columnSTRAPPLICATIONTYPE.MaxLength = 10
            Me.columnSTRPERMITNUMBER.MaxLength = 15
            Me.columnSTRCLASS.AllowDBNull = false
            Me.columnSTRCLASS.MaxLength = 2
            Me.columnSTRAPPLICATIONNUMBER.AllowDBNull = false
            Me.columnSTRAPPLICATIONNUMBER.MaxLength = 10
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnAIRSNUMBER.MaxLength = 9
            Me.columnPERMITNUMBER.MaxLength = 20
            Me.columnSTRCOUNTYNAME.AllowDBNull = false
            Me.columnSTRCOUNTYNAME.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_TITLE_V_RENEWALSRow() As VW_TITLE_V_RENEWALSRow
            Return CType(Me.NewRow,VW_TITLE_V_RENEWALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_TITLE_V_RENEWALSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_TITLE_V_RENEWALSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowChanged(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowChanging(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowDeleted(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_TITLE_V_RENEWALSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_TITLE_V_RENEWALSRowDeleting(Me, New VW_TITLE_V_RENEWALSRowChangeEvent(CType(e.Row,VW_TITLE_V_RENEWALSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_TITLE_V_RENEWALSRow(ByVal row As VW_TITLE_V_RENEWALSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_TITLE_V_RENEWALSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_TOTAL_FEEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINTYEAR As Global.System.Data.DataColumn
        
        Private columnINTVOCTONS As Global.System.Data.DataColumn
        
        Private columnINTPMTONS As Global.System.Data.DataColumn
        
        Private columnINTSO2TONS As Global.System.Data.DataColumn
        
        Private columnINTNOXTONS As Global.System.Data.DataColumn
        
        Private columnNUMSMFEE As Global.System.Data.DataColumn
        
        Private columnNUMNSPSFEE As Global.System.Data.DataColumn
        
        Private columnNUMTOTALFEE As Global.System.Data.DataColumn
        
        Private columnNUMFEERATE As Global.System.Data.DataColumn
        
        Private columnTITLEVMINFEE As Global.System.Data.DataColumn
        
        Private columnTITLEVFEE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_TOTAL_FEE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTVOCTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTVOCTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTPMTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTPMTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTSO2TONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTSO2TONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INTNOXTONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINTNOXTONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMSMFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMSMFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMNSPSFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMNSPSFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMTOTALFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMTOTALFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMFEERATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMFEERATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TITLEVMINFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITLEVMINFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TITLEVFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITLEVFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_TOTAL_FEERow
            Get
                Return CType(Me.Rows(index),VW_TOTAL_FEERow)
            End Get
        End Property
        
        Public Event VW_TOTAL_FEERowChanging As VW_TOTAL_FEERowChangeEventHandler
        
        Public Event VW_TOTAL_FEERowChanged As VW_TOTAL_FEERowChangeEventHandler
        
        Public Event VW_TOTAL_FEERowDeleting As VW_TOTAL_FEERowChangeEventHandler
        
        Public Event VW_TOTAL_FEERowDeleted As VW_TOTAL_FEERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_TOTAL_FEERow(ByVal row As VW_TOTAL_FEERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_TOTAL_FEERow(ByVal INTYEAR As Decimal, ByVal INTVOCTONS As Decimal, ByVal INTPMTONS As Decimal, ByVal INTSO2TONS As Decimal, ByVal INTNOXTONS As Decimal, ByVal NUMSMFEE As Decimal, ByVal NUMNSPSFEE As Decimal, ByVal NUMTOTALFEE As Decimal, ByVal NUMFEERATE As Decimal, ByVal TITLEVMINFEE As Double, ByVal TITLEVFEE As Double) As VW_TOTAL_FEERow
            Dim rowVW_TOTAL_FEERow As VW_TOTAL_FEERow = CType(Me.NewRow,VW_TOTAL_FEERow)
            Dim columnValuesArray() As Object = New Object() {INTYEAR, INTVOCTONS, INTPMTONS, INTSO2TONS, INTNOXTONS, NUMSMFEE, NUMNSPSFEE, NUMTOTALFEE, NUMFEERATE, TITLEVMINFEE, TITLEVFEE}
            rowVW_TOTAL_FEERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_TOTAL_FEERow)
            Return rowVW_TOTAL_FEERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_TOTAL_FEEDataTable = CType(MyBase.Clone,VW_TOTAL_FEEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_TOTAL_FEEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINTYEAR = MyBase.Columns("INTYEAR")
            Me.columnINTVOCTONS = MyBase.Columns("INTVOCTONS")
            Me.columnINTPMTONS = MyBase.Columns("INTPMTONS")
            Me.columnINTSO2TONS = MyBase.Columns("INTSO2TONS")
            Me.columnINTNOXTONS = MyBase.Columns("INTNOXTONS")
            Me.columnNUMSMFEE = MyBase.Columns("NUMSMFEE")
            Me.columnNUMNSPSFEE = MyBase.Columns("NUMNSPSFEE")
            Me.columnNUMTOTALFEE = MyBase.Columns("NUMTOTALFEE")
            Me.columnNUMFEERATE = MyBase.Columns("NUMFEERATE")
            Me.columnTITLEVMINFEE = MyBase.Columns("TITLEVMINFEE")
            Me.columnTITLEVFEE = MyBase.Columns("TITLEVFEE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINTYEAR = New Global.System.Data.DataColumn("INTYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTYEAR)
            Me.columnINTVOCTONS = New Global.System.Data.DataColumn("INTVOCTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTVOCTONS)
            Me.columnINTPMTONS = New Global.System.Data.DataColumn("INTPMTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTPMTONS)
            Me.columnINTSO2TONS = New Global.System.Data.DataColumn("INTSO2TONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTSO2TONS)
            Me.columnINTNOXTONS = New Global.System.Data.DataColumn("INTNOXTONS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINTNOXTONS)
            Me.columnNUMSMFEE = New Global.System.Data.DataColumn("NUMSMFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMSMFEE)
            Me.columnNUMNSPSFEE = New Global.System.Data.DataColumn("NUMNSPSFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMNSPSFEE)
            Me.columnNUMTOTALFEE = New Global.System.Data.DataColumn("NUMTOTALFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMTOTALFEE)
            Me.columnNUMFEERATE = New Global.System.Data.DataColumn("NUMFEERATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMFEERATE)
            Me.columnTITLEVMINFEE = New Global.System.Data.DataColumn("TITLEVMINFEE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITLEVMINFEE)
            Me.columnTITLEVFEE = New Global.System.Data.DataColumn("TITLEVFEE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITLEVFEE)
            Me.columnINTYEAR.AllowDBNull = false
            Me.columnINTVOCTONS.AllowDBNull = false
            Me.columnINTPMTONS.AllowDBNull = false
            Me.columnINTSO2TONS.AllowDBNull = false
            Me.columnINTNOXTONS.AllowDBNull = false
            Me.columnNUMSMFEE.AllowDBNull = false
            Me.columnNUMNSPSFEE.AllowDBNull = false
            Me.columnNUMTOTALFEE.AllowDBNull = false
            Me.columnNUMFEERATE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_TOTAL_FEERow() As VW_TOTAL_FEERow
            Return CType(Me.NewRow,VW_TOTAL_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_TOTAL_FEERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_TOTAL_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_TOTAL_FEERowChangedEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_FEERowChanged(Me, New VW_TOTAL_FEERowChangeEvent(CType(e.Row,VW_TOTAL_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_TOTAL_FEERowChangingEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_FEERowChanging(Me, New VW_TOTAL_FEERowChangeEvent(CType(e.Row,VW_TOTAL_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_TOTAL_FEERowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_FEERowDeleted(Me, New VW_TOTAL_FEERowChangeEvent(CType(e.Row,VW_TOTAL_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_TOTAL_FEERowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_FEERowDeleting(Me, New VW_TOTAL_FEERowChangeEvent(CType(e.Row,VW_TOTAL_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_TOTAL_FEERow(ByVal row As VW_TOTAL_FEERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_TOTAL_FEEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_TOTAL_PAYMENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPAIDYEAR As Global.System.Data.DataColumn
        
        Private columnTOTALPAIDSUM As Global.System.Data.DataColumn
        
        Private columnTOTALDUESUM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_TOTAL_PAYMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALPAIDSUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALPAIDSUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALDUESUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTALDUESUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_TOTAL_PAYMENTRow
            Get
                Return CType(Me.Rows(index),VW_TOTAL_PAYMENTRow)
            End Get
        End Property
        
        Public Event VW_TOTAL_PAYMENTRowChanging As VW_TOTAL_PAYMENTRowChangeEventHandler
        
        Public Event VW_TOTAL_PAYMENTRowChanged As VW_TOTAL_PAYMENTRowChangeEventHandler
        
        Public Event VW_TOTAL_PAYMENTRowDeleting As VW_TOTAL_PAYMENTRowChangeEventHandler
        
        Public Event VW_TOTAL_PAYMENTRowDeleted As VW_TOTAL_PAYMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_TOTAL_PAYMENTRow(ByVal row As VW_TOTAL_PAYMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_TOTAL_PAYMENTRow(ByVal PAIDYEAR As Decimal, ByVal TOTALPAIDSUM As Double, ByVal TOTALDUESUM As Double) As VW_TOTAL_PAYMENTRow
            Dim rowVW_TOTAL_PAYMENTRow As VW_TOTAL_PAYMENTRow = CType(Me.NewRow,VW_TOTAL_PAYMENTRow)
            Dim columnValuesArray() As Object = New Object() {PAIDYEAR, TOTALPAIDSUM, TOTALDUESUM}
            rowVW_TOTAL_PAYMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_TOTAL_PAYMENTRow)
            Return rowVW_TOTAL_PAYMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_TOTAL_PAYMENTDataTable = CType(MyBase.Clone,VW_TOTAL_PAYMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_TOTAL_PAYMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPAIDYEAR = MyBase.Columns("PAIDYEAR")
            Me.columnTOTALPAIDSUM = MyBase.Columns("TOTALPAIDSUM")
            Me.columnTOTALDUESUM = MyBase.Columns("TOTALDUESUM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPAIDYEAR = New Global.System.Data.DataColumn("PAIDYEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDYEAR)
            Me.columnTOTALPAIDSUM = New Global.System.Data.DataColumn("TOTALPAIDSUM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALPAIDSUM)
            Me.columnTOTALDUESUM = New Global.System.Data.DataColumn("TOTALDUESUM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTALDUESUM)
            Me.columnPAIDYEAR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_TOTAL_PAYMENTRow() As VW_TOTAL_PAYMENTRow
            Return CType(Me.NewRow,VW_TOTAL_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_TOTAL_PAYMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_TOTAL_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_TOTAL_PAYMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_PAYMENTRowChanged(Me, New VW_TOTAL_PAYMENTRowChangeEvent(CType(e.Row,VW_TOTAL_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_TOTAL_PAYMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_PAYMENTRowChanging(Me, New VW_TOTAL_PAYMENTRowChangeEvent(CType(e.Row,VW_TOTAL_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_TOTAL_PAYMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_PAYMENTRowDeleted(Me, New VW_TOTAL_PAYMENTRowChangeEvent(CType(e.Row,VW_TOTAL_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_TOTAL_PAYMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_TOTAL_PAYMENTRowDeleting(Me, New VW_TOTAL_PAYMENTRowChangeEvent(CType(e.Row,VW_TOTAL_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_TOTAL_PAYMENTRow(ByVal row As VW_TOTAL_PAYMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_TOTAL_PAYMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VW_TRAINING_REGDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTRUSEREMAIL As Global.System.Data.DataColumn
        
        Private columnSTRFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYNAME As Global.System.Data.DataColumn
        
        Private columnSTRPHONENUMBER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VW_TRAINING_REG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRUSEREMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRUSEREMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPHONENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPHONENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_TRAINING_REGRow
            Get
                Return CType(Me.Rows(index),VW_TRAINING_REGRow)
            End Get
        End Property
        
        Public Event VW_TRAINING_REGRowChanging As VW_TRAINING_REGRowChangeEventHandler
        
        Public Event VW_TRAINING_REGRowChanged As VW_TRAINING_REGRowChangeEventHandler
        
        Public Event VW_TRAINING_REGRowDeleting As VW_TRAINING_REGRowChangeEventHandler
        
        Public Event VW_TRAINING_REGRowDeleted As VW_TRAINING_REGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVW_TRAINING_REGRow(ByVal row As VW_TRAINING_REGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVW_TRAINING_REGRow(ByVal STRUSEREMAIL As String, ByVal STRFIRSTNAME As String, ByVal STRLASTNAME As String, ByVal STRCOMPANYNAME As String, ByVal STRPHONENUMBER As String) As VW_TRAINING_REGRow
            Dim rowVW_TRAINING_REGRow As VW_TRAINING_REGRow = CType(Me.NewRow,VW_TRAINING_REGRow)
            Dim columnValuesArray() As Object = New Object() {STRUSEREMAIL, STRFIRSTNAME, STRLASTNAME, STRCOMPANYNAME, STRPHONENUMBER}
            rowVW_TRAINING_REGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVW_TRAINING_REGRow)
            Return rowVW_TRAINING_REGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VW_TRAINING_REGDataTable = CType(MyBase.Clone,VW_TRAINING_REGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VW_TRAINING_REGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRUSEREMAIL = MyBase.Columns("STRUSEREMAIL")
            Me.columnSTRFIRSTNAME = MyBase.Columns("STRFIRSTNAME")
            Me.columnSTRLASTNAME = MyBase.Columns("STRLASTNAME")
            Me.columnSTRCOMPANYNAME = MyBase.Columns("STRCOMPANYNAME")
            Me.columnSTRPHONENUMBER = MyBase.Columns("STRPHONENUMBER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRUSEREMAIL = New Global.System.Data.DataColumn("STRUSEREMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRUSEREMAIL)
            Me.columnSTRFIRSTNAME = New Global.System.Data.DataColumn("STRFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFIRSTNAME)
            Me.columnSTRLASTNAME = New Global.System.Data.DataColumn("STRLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRLASTNAME)
            Me.columnSTRCOMPANYNAME = New Global.System.Data.DataColumn("STRCOMPANYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYNAME)
            Me.columnSTRPHONENUMBER = New Global.System.Data.DataColumn("STRPHONENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPHONENUMBER)
            Me.columnSTRUSEREMAIL.AllowDBNull = false
            Me.columnSTRUSEREMAIL.MaxLength = 4000
            Me.columnSTRFIRSTNAME.AllowDBNull = false
            Me.columnSTRFIRSTNAME.MaxLength = 50
            Me.columnSTRLASTNAME.AllowDBNull = false
            Me.columnSTRLASTNAME.MaxLength = 50
            Me.columnSTRCOMPANYNAME.AllowDBNull = false
            Me.columnSTRCOMPANYNAME.MaxLength = 200
            Me.columnSTRPHONENUMBER.AllowDBNull = false
            Me.columnSTRPHONENUMBER.MaxLength = 15
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVW_TRAINING_REGRow() As VW_TRAINING_REGRow
            Return CType(Me.NewRow,VW_TRAINING_REGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VW_TRAINING_REGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VW_TRAINING_REGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_TRAINING_REGRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_TRAINING_REGRowChanged(Me, New VW_TRAINING_REGRowChangeEvent(CType(e.Row,VW_TRAINING_REGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_TRAINING_REGRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_TRAINING_REGRowChanging(Me, New VW_TRAINING_REGRowChangeEvent(CType(e.Row,VW_TRAINING_REGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_TRAINING_REGRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_TRAINING_REGRowDeleted(Me, New VW_TRAINING_REGRowChangeEvent(CType(e.Row,VW_TRAINING_REGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_TRAINING_REGRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_TRAINING_REGRowDeleting(Me, New VW_TRAINING_REGRowChangeEvent(CType(e.Row,VW_TRAINING_REGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVW_TRAINING_REGRow(ByVal row As VW_TRAINING_REGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIAIP = New dsIAIP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VW_TRAINING_REGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ESSCHEMARow
        Inherits Global.System.Data.DataRow
        
        Private tableESSCHEMA As ESSCHEMADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableESSCHEMA = CType(Me.Table,ESSCHEMADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableESSCHEMA.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableESSCHEMA.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTESYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.INTESYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTESYEAR' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.INTESYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYNAME' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYADDRESS' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYCITY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYSTATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYZIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRFACILITYZIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYZIP' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRFACILITYZIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOUNTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCOUNTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOUNTY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCOUNTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTTITLE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTPHONENUMBER' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCOMPANY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTCOMPANY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTADDRESS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTADDRESS1' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTADDRESS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTADDRESS2' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTADDRESS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTCITY' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTSTATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTZIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTZIP' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTZIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPTOUT() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STROPTOUTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STROPTOUT' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STROPTOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLVOCEMISSION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLVOCEMISSIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLVOCEMISSION' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLVOCEMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLNOXEMISSION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLNOXEMISSIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLNOXEMISSION' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLNOXEMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONFIRMATIONNBR() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONFIRMATIONNBR' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRDATELASTLOGIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRDATELASTLOGINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRDATELASTLOGIN' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRDATELASTLOGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRTIMELASTLOGIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRTIMELASTLOGINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRTIMELASTLOGIN' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRTIMELASTLOGINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATTRANSACTION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DATTRANSACTIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATTRANSACTION' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DATTRANSACTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSYEAR() As String
            Get
                Return CType(Me(Me.tableESSCHEMA.STRAIRSYEARColumn),String)
            End Get
            Set
                Me(Me.tableESSCHEMA.STRAIRSYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMUSERID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.NUMUSERIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMUSERID' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.NUMUSERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPREFIX() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTPREFIXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTPREFIX' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTPREFIXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFIRSTNAME' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTLASTNAME' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLXCOORDINATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLXCOORDINATEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLXCOORDINATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLXCOORDINATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBLYCOORDINATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.DBLYCOORDINATEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBLYCOORDINATE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.DBLYCOORDINATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRHORIZONTALCOLLECTIONCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRHORIZONTALCOLLECTIONCODE' in table 'ESSCHEMA' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRHORIZONTALACCURACYMEASURE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRHORIZONTALACCURACYMEASURE' in table 'ESSCHEMA' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRHORIZONTALREFERENCECODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRHORIZONTALREFERENCECODE' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRDATEFIRSTCONFIRM() As String
            Get
                Try 
                    Return CType(Me(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRDATEFIRSTCONFIRM' in table 'ESSCHEMA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTESYEARNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.INTESYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTESYEARNull()
            Me(Me.tableESSCHEMA.INTESYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYNAMENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYNAMENull()
            Me(Me.tableESSCHEMA.STRFACILITYNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYADDRESSNull()
            Me(Me.tableESSCHEMA.STRFACILITYADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYCITYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYCITYNull()
            Me(Me.tableESSCHEMA.STRFACILITYCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYSTATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYSTATENull()
            Me(Me.tableESSCHEMA.STRFACILITYSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYZIPNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRFACILITYZIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYZIPNull()
            Me(Me.tableESSCHEMA.STRFACILITYZIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOUNTYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCOUNTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOUNTYNull()
            Me(Me.tableESSCHEMA.STRCOUNTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTTITLENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTTITLENull()
            Me(Me.tableESSCHEMA.STRCONTACTTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTPHONENUMBERNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTPHONENUMBERNull()
            Me(Me.tableESSCHEMA.STRCONTACTPHONENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableESSCHEMA.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTCOMPANYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTCOMPANYNull()
            Me(Me.tableESSCHEMA.STRCONTACTCOMPANYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTADDRESS1Null() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTADDRESS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTADDRESS1Null()
            Me(Me.tableESSCHEMA.STRCONTACTADDRESS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTADDRESS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTADDRESS2Null()
            Me(Me.tableESSCHEMA.STRCONTACTADDRESS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTCITYNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTCITYNull()
            Me(Me.tableESSCHEMA.STRCONTACTCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTSTATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTSTATENull()
            Me(Me.tableESSCHEMA.STRCONTACTSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTZIPNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTZIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTZIPNull()
            Me(Me.tableESSCHEMA.STRCONTACTZIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableESSCHEMA.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTROPTOUTNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STROPTOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTROPTOUTNull()
            Me(Me.tableESSCHEMA.STROPTOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLVOCEMISSIONNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLVOCEMISSIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLVOCEMISSIONNull()
            Me(Me.tableESSCHEMA.DBLVOCEMISSIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLNOXEMISSIONNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLNOXEMISSIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLNOXEMISSIONNull()
            Me(Me.tableESSCHEMA.DBLNOXEMISSIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONFIRMATIONNBRNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONFIRMATIONNBRNull()
            Me(Me.tableESSCHEMA.STRCONFIRMATIONNBRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRDATELASTLOGINNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRDATELASTLOGINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRDATELASTLOGINNull()
            Me(Me.tableESSCHEMA.STRDATELASTLOGINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRTIMELASTLOGINNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRTIMELASTLOGINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRTIMELASTLOGINNull()
            Me(Me.tableESSCHEMA.STRTIMELASTLOGINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATTRANSACTIONNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DATTRANSACTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATTRANSACTIONNull()
            Me(Me.tableESSCHEMA.DATTRANSACTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMUSERIDNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.NUMUSERIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMUSERIDNull()
            Me(Me.tableESSCHEMA.NUMUSERIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTPREFIXNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTPREFIXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTPREFIXNull()
            Me(Me.tableESSCHEMA.STRCONTACTPREFIXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFIRSTNAMENull()
            Me(Me.tableESSCHEMA.STRCONTACTFIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTLASTNAMENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTLASTNAMENull()
            Me(Me.tableESSCHEMA.STRCONTACTLASTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLXCOORDINATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLXCOORDINATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLXCOORDINATENull()
            Me(Me.tableESSCHEMA.DBLXCOORDINATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBLYCOORDINATENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.DBLYCOORDINATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBLYCOORDINATENull()
            Me(Me.tableESSCHEMA.DBLYCOORDINATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRHORIZONTALCOLLECTIONCODENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRHORIZONTALCOLLECTIONCODENull()
            Me(Me.tableESSCHEMA.STRHORIZONTALCOLLECTIONCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRHORIZONTALACCURACYMEASURENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRHORIZONTALACCURACYMEASURENull()
            Me(Me.tableESSCHEMA.STRHORIZONTALACCURACYMEASUREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRHORIZONTALREFERENCECODENull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRHORIZONTALREFERENCECODENull()
            Me(Me.tableESSCHEMA.STRHORIZONTALREFERENCECODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRDATEFIRSTCONFIRMNull() As Boolean
            Return Me.IsNull(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRDATEFIRSTCONFIRMNull()
            Me(Me.tableESSCHEMA.STRDATEFIRSTCONFIRMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FSADDPAIDRow
        Inherits Global.System.Data.DataRow
        
        Private tableFSADDPAID As FSADDPAIDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFSADDPAID = CType(Me.Table,FSADDPAIDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableFSADDPAID.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableFSADDPAID.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableFSADDPAID.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSADDPAID.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPAYMENT() As Decimal
            Get
                Return CType(Me(Me.tableFSADDPAID.NUMPAYMENTColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSADDPAID.NUMPAYMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATPAYDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.DATPAYDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATPAYDATE' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.DATPAYDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCHECKNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRCHECKNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCHECKNO' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRCHECKNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRDEPOSITNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRDEPOSITNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRDEPOSITNO' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRDEPOSITNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPAYTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRPAYTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRPAYTYPE' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRPAYTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRBATCHNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRBATCHNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRBATCHNO' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRBATCHNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRENTRYPERSON() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRENTRYPERSONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRENTRYPERSON' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRENTRYPERSONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMMENTS' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTFISCALYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.INTFISCALYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTFISCALYEAR' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.INTFISCALYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTPAYID() As Decimal
            Get
                Return CType(Me(Me.tableFSADDPAID.INTPAYIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSADDPAID.INTPAYIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRINVOICENO() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSADDPAID.STRINVOICENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRINVOICENO' in table 'FSADDPAID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSADDPAID.STRINVOICENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATPAYDATENull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.DATPAYDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATPAYDATENull()
            Me(Me.tableFSADDPAID.DATPAYDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCHECKNONull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRCHECKNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCHECKNONull()
            Me(Me.tableFSADDPAID.STRCHECKNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRDEPOSITNONull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRDEPOSITNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRDEPOSITNONull()
            Me(Me.tableFSADDPAID.STRDEPOSITNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRPAYTYPENull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRPAYTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRPAYTYPENull()
            Me(Me.tableFSADDPAID.STRPAYTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRBATCHNONull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRBATCHNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRBATCHNONull()
            Me(Me.tableFSADDPAID.STRBATCHNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRENTRYPERSONNull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRENTRYPERSONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRENTRYPERSONNull()
            Me(Me.tableFSADDPAID.STRENTRYPERSONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMMENTSNull()
            Me(Me.tableFSADDPAID.STRCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTFISCALYEARNull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.INTFISCALYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTFISCALYEARNull()
            Me(Me.tableFSADDPAID.INTFISCALYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRINVOICENONull() As Boolean
            Return Me.IsNull(Me.tableFSADDPAID.STRINVOICENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRINVOICENONull()
            Me(Me.tableFSADDPAID.STRINVOICENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FSCALCULATIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFSCALCULATIONS As FSCALCULATIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFSCALCULATIONS = CType(Me.Table,FSCALCULATIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTVOCTONS() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.INTVOCTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.INTVOCTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTPMTONS() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.INTPMTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.INTPMTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSO2TONS() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.INTSO2TONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.INTSO2TONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTNOXTONS() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.INTNOXTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.INTNOXTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPART70FEE() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.NUMPART70FEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.NUMPART70FEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMSMFEE() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.NUMSMFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.NUMSMFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMNSPSFEE() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.NUMNSPSFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.NUMNSPSFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMTOTALFEE() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.NUMTOTALFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.NUMTOTALFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPT() As String
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.STRNSPSEXEMPTColumn),String)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRNSPSEXEMPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSREASON() As String
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.STRNSPSREASONColumn),String)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRNSPSREASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMFEERATE() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.NUMFEERATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.NUMFEERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPTREASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSCALCULATIONS.STRNSPSEXEMPTREASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPSEXEMPTREASON' in table 'FSCALCULATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRNSPSEXEMPTREASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPART70() As String
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.STRPART70Column),String)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRPART70Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSYNTHETICMINOR() As String
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.STRSYNTHETICMINORColumn),String)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRSYNTHETICMINORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCALCULATEDFEE() As Decimal
            Get
                Return CType(Me(Me.tableFSCALCULATIONS.NUMCALCULATEDFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.NUMCALCULATEDFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSCALCULATIONS.STRCLASS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLASS1' in table 'FSCALCULATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRCLASS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSCALCULATIONS.STRNSPS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS1' in table 'FSCALCULATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.STRNSPS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHUTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFSCALCULATIONS.SHUTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHUTDATE' in table 'FSCALCULATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.SHUTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARIANCECHECK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSCALCULATIONS.VARIANCECHECKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VARIANCECHECK' in table 'FSCALCULATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.VARIANCECHECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VARIANCECOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSCALCULATIONS.VARIANCECOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VARIANCECOMMENTS' in table 'FSCALCULATIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSCALCULATIONS.VARIANCECOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSEXEMPTREASONNull() As Boolean
            Return Me.IsNull(Me.tableFSCALCULATIONS.STRNSPSEXEMPTREASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSEXEMPTREASONNull()
            Me(Me.tableFSCALCULATIONS.STRNSPSEXEMPTREASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLASS1Null() As Boolean
            Return Me.IsNull(Me.tableFSCALCULATIONS.STRCLASS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLASS1Null()
            Me(Me.tableFSCALCULATIONS.STRCLASS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPS1Null() As Boolean
            Return Me.IsNull(Me.tableFSCALCULATIONS.STRNSPS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPS1Null()
            Me(Me.tableFSCALCULATIONS.STRNSPS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHUTDATENull() As Boolean
            Return Me.IsNull(Me.tableFSCALCULATIONS.SHUTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHUTDATENull()
            Me(Me.tableFSCALCULATIONS.SHUTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARIANCECHECKNull() As Boolean
            Return Me.IsNull(Me.tableFSCALCULATIONS.VARIANCECHECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARIANCECHECKNull()
            Me(Me.tableFSCALCULATIONS.VARIANCECHECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVARIANCECOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableFSCALCULATIONS.VARIANCECOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVARIANCECOMMENTSNull()
            Me(Me.tableFSCALCULATIONS.VARIANCECOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FSPAYANDSUBMITRow
        Inherits Global.System.Data.DataRow
        
        Private tableFSPAYANDSUBMIT As FSPAYANDSUBMITDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFSPAYANDSUBMIT = CType(Me.Table,FSPAYANDSUBMITDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPAYMENTTYPE() As String
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.STRPAYMENTTYPEColumn),String)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.STRPAYMENTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSUBMITTAL() As Decimal
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.INTSUBMITTALColumn),Decimal)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.INTSUBMITTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROFFICIALNAME() As String
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.STROFFICIALNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.STROFFICIALNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROFFICIALTITLE() As String
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.STROFFICIALTITLEColumn),String)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.STROFFICIALTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATESUBMIT() As Date
            Get
                Return CType(Me(Me.tableFSPAYANDSUBMIT.DATESUBMITColumn),Date)
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.DATESUBMITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFSPAYANDSUBMIT.STRCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMMENTS' in table 'FSPAYANDSUBMIT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFSPAYANDSUBMIT.STRCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableFSPAYANDSUBMIT.STRCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMMENTSNull()
            Me(Me.tableFSPAYANDSUBMIT.STRCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FEEREPORTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFEEREPORT As FEEREPORTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFEEREPORT = CType(Me.Table,FEEREPORTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYSTREET1() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRFACILITYSTREET1Column),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRFACILITYSTREET1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITY() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRFACILITYCITYColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRFACILITYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTTITLE() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTTITLEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTVOCTONS() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.INTVOCTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.INTVOCTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTPMTONS() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.INTPMTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.INTPMTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTNOXTONS() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.INTNOXTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.INTNOXTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSO2TONS() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.INTSO2TONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.INTSO2TONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMTOTALPART70FEE() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.NUMTOTALPART70FEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.NUMTOTALPART70FEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPART70SMFEE() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.NUMPART70SMFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.NUMPART70SMFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMNSPSFEE() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.NUMNSPSFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.NUMNSPSFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMTOTALFEE() As Decimal
            Get
                Return CType(Me(Me.tableFEEREPORT.NUMTOTALFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEEREPORT.NUMTOTALFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPT() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRNSPSEXEMPTColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRNSPSEXEMPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.STRCLASS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLASS1' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCLASS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.STRNSPS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS1' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.STRNSPS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPTREASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.STRNSPSEXEMPTREASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPSEXEMPTREASON' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.STRNSPSEXEMPTREASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPAYMENTTYPE() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STRPAYMENTTYPEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STRPAYMENTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROFFICIALNAME() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STROFFICIALNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STROFFICIALNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROFFICIALTITLE() As String
            Get
                Return CType(Me(Me.tableFEEREPORT.STROFFICIALTITLEColumn),String)
            End Get
            Set
                Me(Me.tableFEEREPORT.STROFFICIALTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.STRCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMMENTS' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.STRCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATESUBMIT() As Date
            Get
                Return CType(Me(Me.tableFEEREPORT.DATESUBMITColumn),Date)
            End Get
            Set
                Me(Me.tableFEEREPORT.DATESUBMITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHUTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFEEREPORT.SHUTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHUTDATE' in table 'FEEREPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEREPORT.SHUTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableFEEREPORT.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableFEEREPORT.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLASS1Null() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.STRCLASS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLASS1Null()
            Me(Me.tableFEEREPORT.STRCLASS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPS1Null() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.STRNSPS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPS1Null()
            Me(Me.tableFEEREPORT.STRNSPS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSEXEMPTREASONNull() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.STRNSPSEXEMPTREASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSEXEMPTREASONNull()
            Me(Me.tableFEEREPORT.STRNSPSEXEMPTREASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.STRCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMMENTSNull()
            Me(Me.tableFEEREPORT.STRCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHUTDATENull() As Boolean
            Return Me.IsNull(Me.tableFEEREPORT.SHUTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHUTDATENull()
            Me(Me.tableFEEREPORT.SHUTDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FEESDUERow
        Inherits Global.System.Data.DataRow
        
        Private tableFEESDUE As FEESDUEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFEESDUE = CType(Me.Table,FEESDUEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableFEESDUE.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableFEESDUE.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableFEESDUE.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableFEESDUE.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALDUE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFEESDUE.TOTALDUEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALDUE' in table 'FEESDUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEESDUE.TOTALDUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALDUENull() As Boolean
            Return Me.IsNull(Me.tableFEESDUE.TOTALDUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALDUENull()
            Me(Me.tableFEESDUE.TOTALDUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FEESNONRESPONDENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFEESNONRESPONDENT As FEESNONRESPONDENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFEESNONRESPONDENT = CType(Me.Table,FEESNONRESPONDENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AIRSNO() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.AIRSNOColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.AIRSNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFEESNONRESPONDENT.INTYEARColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTYEAR' in table 'FEESNONRESPONDENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACILITYNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEESNONRESPONDENT.FACILITYNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FACILITYNAME' in table 'FEESNONRESPONDENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.FACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIRSTNAME() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.FIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.FIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTNAME() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.LASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.LASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TITLE() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.TITLEColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.TITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONTACTCOMPANY() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.CONTACTCOMPANYColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.CONTACTCOMPANYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDRESS() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.ADDRESSColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CITY() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.CITYColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.CITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATE() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.STATEColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.STATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZIP() As String
            Get
                Return CType(Me(Me.tableFEESNONRESPONDENT.ZIPColumn),String)
            End Get
            Set
                Me(Me.tableFEESNONRESPONDENT.ZIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTYEARNull() As Boolean
            Return Me.IsNull(Me.tableFEESNONRESPONDENT.INTYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTYEARNull()
            Me(Me.tableFEESNONRESPONDENT.INTYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFACILITYNAMENull() As Boolean
            Return Me.IsNull(Me.tableFEESNONRESPONDENT.FACILITYNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFACILITYNAMENull()
            Me(Me.tableFEESNONRESPONDENT.FACILITYNAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FEEVARIANCERow
        Inherits Global.System.Data.DataRow
        
        Private tableFEEVARIANCE As FEEVARIANCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFEEVARIANCE = CType(Me.Table,FEEVARIANCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.STRAIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRSNUMBER' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFFERENCE2005() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.DIFFERENCE2005Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIFFERENCE2005' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.DIFFERENCE2005Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFFERENCE2006() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.DIFFERENCE2006Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIFFERENCE2006' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.DIFFERENCE2006Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEE2004() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.FEE2004Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FEE2004' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.FEE2004Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEE2005() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.FEE2005Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FEE2005' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.FEE2005Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FEE2006() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.FEE2006Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FEE2006' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.FEE2006Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VCHECK2005() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.VCHECK2005Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VCHECK2005' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.VCHECK2005Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VCHECK2006() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.VCHECK2006Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VCHECK2006' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.VCHECK2006Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENTS2005() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.COMMENTS2005Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS2005' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.COMMENTS2005Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENTS2006() As String
            Get
                Try 
                    Return CType(Me(Me.tableFEEVARIANCE.COMMENTS2006Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS2006' in table 'FEEVARIANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFEEVARIANCE.COMMENTS2006Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.STRAIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRSNUMBERNull()
            Me(Me.tableFEEVARIANCE.STRAIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFFERENCE2005Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.DIFFERENCE2005Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFFERENCE2005Null()
            Me(Me.tableFEEVARIANCE.DIFFERENCE2005Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFFERENCE2006Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.DIFFERENCE2006Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFFERENCE2006Null()
            Me(Me.tableFEEVARIANCE.DIFFERENCE2006Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEE2004Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.FEE2004Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEE2004Null()
            Me(Me.tableFEEVARIANCE.FEE2004Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEE2005Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.FEE2005Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEE2005Null()
            Me(Me.tableFEEVARIANCE.FEE2005Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFEE2006Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.FEE2006Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFEE2006Null()
            Me(Me.tableFEEVARIANCE.FEE2006Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVCHECK2005Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.VCHECK2005Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVCHECK2005Null()
            Me(Me.tableFEEVARIANCE.VCHECK2005Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVCHECK2006Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.VCHECK2006Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVCHECK2006Null()
            Me(Me.tableFEEVARIANCE.VCHECK2006Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTS2005Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.COMMENTS2005Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTS2005Null()
            Me(Me.tableFEEVARIANCE.COMMENTS2005Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTS2006Null() As Boolean
            Return Me.IsNull(Me.tableFEEVARIANCE.COMMENTS2006Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTS2006Null()
            Me(Me.tableFEEVARIANCE.COMMENTS2006Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_AUDIT_REPORTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_AUDIT_REPORT As VW_AUDIT_REPORTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_AUDIT_REPORT = CType(Me.Table,VW_AUDIT_REPORTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_AUDIT_REPORT.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVW_AUDIT_REPORT.INTYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTYEAR' in table 'VW_AUDIT_REPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALDUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_AUDIT_REPORT.TOTALDUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALDUE' in table 'VW_AUDIT_REPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.TOTALDUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALPAID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_AUDIT_REPORT.TOTALPAIDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALPAID' in table 'VW_AUDIT_REPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.TOTALPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVW_AUDIT_REPORT.PAIDYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDYEAR' in table 'VW_AUDIT_REPORT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_AUDIT_REPORT.PAIDYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTYEARNull() As Boolean
            Return Me.IsNull(Me.tableVW_AUDIT_REPORT.INTYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTYEARNull()
            Me(Me.tableVW_AUDIT_REPORT.INTYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALDUENull() As Boolean
            Return Me.IsNull(Me.tableVW_AUDIT_REPORT.TOTALDUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALDUENull()
            Me(Me.tableVW_AUDIT_REPORT.TOTALDUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALPAIDNull() As Boolean
            Return Me.IsNull(Me.tableVW_AUDIT_REPORT.TOTALPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALPAIDNull()
            Me(Me.tableVW_AUDIT_REPORT.TOTALPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAIDYEARNull() As Boolean
            Return Me.IsNull(Me.tableVW_AUDIT_REPORT.PAIDYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAIDYEARNull()
            Me(Me.tableVW_AUDIT_REPORT.PAIDYEARColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_BANKRUPTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_BANKRUPT As VW_BANKRUPTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_BANKRUPT = CType(Me.Table,VW_BANKRUPTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'VW_BANKRUPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'VW_BANKRUPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_BANKRUPT.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISBANKRUPT() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_BANKRUPT.ISBANKRUPTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISBANKRUPT' in table 'VW_BANKRUPT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_BANKRUPT.ISBANKRUPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_BANKRUPT.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableVW_BANKRUPT.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVW_BANKRUPT.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableVW_BANKRUPT.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISBANKRUPTNull() As Boolean
            Return Me.IsNull(Me.tableVW_BANKRUPT.ISBANKRUPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISBANKRUPTNull()
            Me(Me.tableVW_BANKRUPT.ISBANKRUPTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_CLASS_CHANGEDRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_CLASS_CHANGED As VW_CLASS_CHANGEDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_CLASS_CHANGED = CType(Me.Table,VW_CLASS_CHANGEDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_CLASS_CHANGED.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_CLASS_CHANGED.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_CLASS_CHANGED.STRCLASS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLASS1' in table 'VW_CLASS_CHANGED' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.STRCLASS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS() As String
            Get
                Return CType(Me(Me.tableVW_CLASS_CHANGED.STRCLASSColumn),String)
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.STRCLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_CLASS_CHANGED.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_CLASS_CHANGED.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableVW_CLASS_CHANGED.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableVW_CLASS_CHANGED.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLASS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_CLASS_CHANGED.STRCLASS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLASS1Null()
            Me(Me.tableVW_CLASS_CHANGED.STRCLASS1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_FACILITY_BALANCERow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_FACILITY_BALANCE As VW_FACILITY_BALANCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_FACILITY_BALANCE = CType(Me.Table,VW_FACILITY_BALANCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_BALANCE.INTYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTYEAR' in table 'VW_FACILITY_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALDUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_BALANCE.TOTALDUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALDUE' in table 'VW_FACILITY_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.TOTALDUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_BALANCE.PAIDYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDYEAR' in table 'VW_FACILITY_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.PAIDYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALPAID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_BALANCE.TOTALPAIDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALPAID' in table 'VW_FACILITY_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.TOTALPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'VW_FACILITY_BALANCE' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'VW_FACILITY_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSICCODE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRSICCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRSICCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPAYMENTTYPE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_BALANCE.STRPAYMENTTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_BALANCE.STRPAYMENTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTYEARNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_BALANCE.INTYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTYEARNull()
            Me(Me.tableVW_FACILITY_BALANCE.INTYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALDUENull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_BALANCE.TOTALDUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALDUENull()
            Me(Me.tableVW_FACILITY_BALANCE.TOTALDUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAIDYEARNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_BALANCE.PAIDYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAIDYEARNull()
            Me(Me.tableVW_FACILITY_BALANCE.PAIDYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALPAIDNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_BALANCE.TOTALPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALPAIDNull()
            Me(Me.tableVW_FACILITY_BALANCE.TOTALPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_BALANCE.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_BALANCE.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableVW_FACILITY_BALANCE.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_FACILITY_FEERow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_FACILITY_FEE As VW_FACILITY_FEEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_FACILITY_FEE = CType(Me.Table,VW_FACILITY_FEEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.INTYEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INTYEAR' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALDUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.TOTALDUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALDUE' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.TOTALDUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALPAID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.TOTALPAIDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALPAID' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.TOTALPAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTVOCTONS() As Date
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.INTVOCTONSColumn),Date)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.INTVOCTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTPMTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.INTPMTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.INTPMTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSO2TONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.INTSO2TONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.INTSO2TONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTNOXTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.INTNOXTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.INTNOXTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMSMFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.NUMSMFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.NUMSMFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMNSPSFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.NUMNSPSFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.NUMNSPSFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMTOTALFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.NUMTOTALFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.NUMTOTALFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPT() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRNSPSEXEMPTColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRNSPSEXEMPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPTREASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.STRNSPSEXEMPTREASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPSEXEMPTREASON' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRNSPSEXEMPTREASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCALCULATEDFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.NUMCALCULATEDFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.NUMCALCULATEDFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.STRCLASS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLASS1' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCLASS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.STRNSPS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS1' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRNSPS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHUTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.SHUTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHUTDATE' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.SHUTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPAYMENTTYPE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STRPAYMENTTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRPAYMENTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROFFICIALNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STROFFICIALNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STROFFICIALNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROFFICIALTITLE() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.STROFFICIALTITLEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STROFFICIALTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATESUBMIT() As Date
            Get
                Return CType(Me(Me.tableVW_FACILITY_FEE.DATESUBMITColumn),Date)
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.DATESUBMITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_FEE.STRCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMMENTS' in table 'VW_FACILITY_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_FEE.STRCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINTYEARNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.INTYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINTYEARNull()
            Me(Me.tableVW_FACILITY_FEE.INTYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALDUENull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.TOTALDUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALDUENull()
            Me(Me.tableVW_FACILITY_FEE.TOTALDUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALPAIDNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.TOTALPAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALPAIDNull()
            Me(Me.tableVW_FACILITY_FEE.TOTALPAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableVW_FACILITY_FEE.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableVW_FACILITY_FEE.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSEXEMPTREASONNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.STRNSPSEXEMPTREASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSEXEMPTREASONNull()
            Me(Me.tableVW_FACILITY_FEE.STRNSPSEXEMPTREASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLASS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.STRCLASS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLASS1Null()
            Me(Me.tableVW_FACILITY_FEE.STRCLASS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.STRNSPS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPS1Null()
            Me(Me.tableVW_FACILITY_FEE.STRNSPS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHUTDATENull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.SHUTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHUTDATENull()
            Me(Me.tableVW_FACILITY_FEE.SHUTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_FEE.STRCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMMENTSNull()
            Me(Me.tableVW_FACILITY_FEE.STRCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_FACILITY_INFORow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_FACILITY_INFO As VW_FACILITY_INFODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_FACILITY_INFO = CType(Me.Table,VW_FACILITY_INFODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYSTREET1() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRFACILITYSTREET1Column),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRFACILITYSTREET1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITY() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRFACILITYCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRFACILITYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBERTEMP() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRAIRSNUMBERTEMPColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRAIRSNUMBERTEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAMETEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_INFO.STRFACILITYNAMETEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYNAMETEMP' in table 'VW_FACILITY_INFO' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRFACILITYNAMETEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYSTREET1TEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_INFO.STRFACILITYSTREET1TEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYSTREET1TEMP' in table 'VW_FACILITY_INFO' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRFACILITYSTREET1TEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITYTEMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_INFO.STRFACILITYCITYTEMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFACILITYCITYTEMP' in table 'VW_FACILITY_INFO' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRFACILITYCITYTEMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCOMPANYNAME() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRCONTACTCOMPANYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRCONTACTCOMPANYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableVW_FACILITY_INFO.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FACILITY_INFO.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'VW_FACILITY_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FACILITY_INFO.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYNAMETEMPNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_INFO.STRFACILITYNAMETEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYNAMETEMPNull()
            Me(Me.tableVW_FACILITY_INFO.STRFACILITYNAMETEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYSTREET1TEMPNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_INFO.STRFACILITYSTREET1TEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYSTREET1TEMPNull()
            Me(Me.tableVW_FACILITY_INFO.STRFACILITYSTREET1TEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFACILITYCITYTEMPNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_INFO.STRFACILITYCITYTEMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFACILITYCITYTEMPNull()
            Me(Me.tableVW_FACILITY_INFO.STRFACILITYCITYTEMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVW_FACILITY_INFO.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableVW_FACILITY_INFO.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_FEES_BY_AIRSRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_FEES_BY_AIRS As VW_FEES_BY_AIRSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_FEES_BY_AIRS = CType(Me.Table,VW_FEES_BY_AIRSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPAYMENT() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.NUMPAYMENTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.NUMPAYMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATPAYDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_FEES_BY_AIRS.DATPAYDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATPAYDATE' in table 'VW_FEES_BY_AIRS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.DATPAYDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCHECKNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRCHECKNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCHECKNO' in table 'VW_FEES_BY_AIRS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRCHECKNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRDEPOSITNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRDEPOSITNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRDEPOSITNO' in table 'VW_FEES_BY_AIRS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRDEPOSITNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPAYTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRPAYTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRPAYTYPE' in table 'VW_FEES_BY_AIRS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRPAYTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTVOCTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.INTVOCTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.INTVOCTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTPMTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.INTPMTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.INTPMTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSO2TONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.INTSO2TONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.INTSO2TONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTNOXTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.INTNOXTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.INTNOXTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPART70FEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.NUMPART70FEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.NUMPART70FEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMSMFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.NUMSMFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.NUMSMFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMNSPSFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.NUMNSPSFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.NUMNSPSFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMTOTALFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.NUMTOTALFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.NUMTOTALFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPT() As String
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRNSPSEXEMPTColumn),String)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRNSPSEXEMPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCALCULATEDFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_FEES_BY_AIRS.NUMCALCULATEDFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.NUMCALCULATEDFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRCLASS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLASS1' in table 'VW_FEES_BY_AIRS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRCLASS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_FEES_BY_AIRS.STRNSPS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS1' in table 'VW_FEES_BY_AIRS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_FEES_BY_AIRS.STRNSPS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATPAYDATENull() As Boolean
            Return Me.IsNull(Me.tableVW_FEES_BY_AIRS.DATPAYDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATPAYDATENull()
            Me(Me.tableVW_FEES_BY_AIRS.DATPAYDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCHECKNONull() As Boolean
            Return Me.IsNull(Me.tableVW_FEES_BY_AIRS.STRCHECKNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCHECKNONull()
            Me(Me.tableVW_FEES_BY_AIRS.STRCHECKNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRDEPOSITNONull() As Boolean
            Return Me.IsNull(Me.tableVW_FEES_BY_AIRS.STRDEPOSITNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRDEPOSITNONull()
            Me(Me.tableVW_FEES_BY_AIRS.STRDEPOSITNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRPAYTYPENull() As Boolean
            Return Me.IsNull(Me.tableVW_FEES_BY_AIRS.STRPAYTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRPAYTYPENull()
            Me(Me.tableVW_FEES_BY_AIRS.STRPAYTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLASS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_FEES_BY_AIRS.STRCLASS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLASS1Null()
            Me(Me.tableVW_FEES_BY_AIRS.STRCLASS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_FEES_BY_AIRS.STRNSPS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPS1Null()
            Me(Me.tableVW_FEES_BY_AIRS.STRNSPS1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_NO_OPERATERow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_NO_OPERATE As VW_NO_OPERATEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_NO_OPERATE = CType(Me.Table,VW_NO_OPERATEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTPHONENUMBER1() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTPHONENUMBER1Column),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTPHONENUMBER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFAXNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTFAXNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTFAXNUMBER' in table 'VW_NO_OPERATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTFAXNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTEMAIL' in table 'VW_NO_OPERATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableVW_NO_OPERATE.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHUTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_NO_OPERATE.SHUTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHUTDATE' in table 'VW_NO_OPERATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NO_OPERATE.SHUTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTFAXNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_NO_OPERATE.STRCONTACTFAXNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTFAXNUMBERNull()
            Me(Me.tableVW_NO_OPERATE.STRCONTACTFAXNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVW_NO_OPERATE.STRCONTACTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTEMAILNull()
            Me(Me.tableVW_NO_OPERATE.STRCONTACTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHUTDATENull() As Boolean
            Return Me.IsNull(Me.tableVW_NO_OPERATE.SHUTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHUTDATENull()
            Me(Me.tableVW_NO_OPERATE.SHUTDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_NONRESPONDENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_NONRESPONDENT As VW_NONRESPONDENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_NONRESPONDENT = CType(Me.Table,VW_NONRESPONDENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRKEY() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRKEYColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTTITLE() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTTITLEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCOMPANYNAME() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTCOMPANYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTCOMPANYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSUBMITTAL() As Decimal
            Get
                Return CType(Me(Me.tableVW_NONRESPONDENT.INTSUBMITTALColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_NONRESPONDENT.INTSUBMITTALColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_NSPS_STATUSRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_NSPS_STATUS As VW_NSPS_STATUSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_NSPS_STATUS = CType(Me.Table,VW_NSPS_STATUSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.STRAIRSNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPS1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS1' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPT() As String
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTColumn),String)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPS() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPS' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRNSPSEXEMPTREASON() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRNSPSEXEMPTREASON' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATE() As String
            Get
                Return CType(Me(Me.tableVW_NSPS_STATUS.STROPERATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.STROPERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SHUTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_NSPS_STATUS.SHUTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SHUTDATE' in table 'VW_NSPS_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_NSPS_STATUS.SHUTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPS1Null() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.STRNSPS1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPS1Null()
            Me(Me.tableVW_NSPS_STATUS.STRNSPS1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSNull() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.STRNSPSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSNull()
            Me(Me.tableVW_NSPS_STATUS.STRNSPSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRNSPSEXEMPTREASONNull() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRNSPSEXEMPTREASONNull()
            Me(Me.tableVW_NSPS_STATUS.STRNSPSEXEMPTREASONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSHUTDATENull() As Boolean
            Return Me.IsNull(Me.tableVW_NSPS_STATUS.SHUTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSHUTDATENull()
            Me(Me.tableVW_NSPS_STATUS.SHUTDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_TITLE_V_RENEWALSRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_TITLE_V_RENEWALS As VW_TITLE_V_RENEWALSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_TITLE_V_RENEWALS = CType(Me.Table,VW_TITLE_V_RENEWALSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRKEY() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRKEYColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCOMPANYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCOMPANYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCOMPANYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTADDRESS1() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTADDRESS1Column),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTADDRESS1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTCITY() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTSTATE() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTSTATEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTZIPCODE() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTZIPCODEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCONTACTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFACILITYCITY() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYCITYColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRFACILITYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STROPERATIONALSTATUS() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STROPERATIONALSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STROPERATIONALSTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAPPLICATIONTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAPPLICATIONTYPE' in table 'VW_TITLE_V_RENEWALS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATPERMITISSUED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATPERMITISSUED' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATEFFECTIVE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEFFECTIVE' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPERMITNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRPERMITNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLASS() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCLASSColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCLASSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAPPLICATIONNUMBER() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONNUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRSNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AIRSNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERMITNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERMITNUMBER' in table 'VW_TITLE_V_RENEWALS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOUNTYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TITLE_V_RENEWALS.STRCOUNTYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TITLE_V_RENEWALS.STRCOUNTYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAPPLICATIONTYPENull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAPPLICATIONTYPENull()
            Me(Me.tableVW_TITLE_V_RENEWALS.STRAPPLICATIONTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATPERMITISSUEDNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATPERMITISSUEDNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.DATPERMITISSUEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATEFFECTIVENull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATEFFECTIVENull()
            Me(Me.tableVW_TITLE_V_RENEWALS.DATEFFECTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRPERMITNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRPERMITNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.STRPERMITNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRSNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.STRAIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAIRSNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.AIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERMITNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERMITNUMBERNull()
            Me(Me.tableVW_TITLE_V_RENEWALS.PERMITNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_TOTAL_FEERow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_TOTAL_FEE As VW_TOTAL_FEEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_TOTAL_FEE = CType(Me.Table,VW_TOTAL_FEEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.INTYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.INTYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTVOCTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.INTVOCTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.INTVOCTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTPMTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.INTPMTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.INTPMTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTSO2TONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.INTSO2TONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.INTSO2TONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INTNOXTONS() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.INTNOXTONSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.INTNOXTONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMSMFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.NUMSMFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.NUMSMFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMNSPSFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.NUMNSPSFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.NUMNSPSFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMTOTALFEE() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.NUMTOTALFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.NUMTOTALFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMFEERATE() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_FEE.NUMFEERATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.NUMFEERATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TITLEVMINFEE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_TOTAL_FEE.TITLEVMINFEEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TITLEVMINFEE' in table 'VW_TOTAL_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.TITLEVMINFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TITLEVFEE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_TOTAL_FEE.TITLEVFEEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TITLEVFEE' in table 'VW_TOTAL_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TOTAL_FEE.TITLEVFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTITLEVMINFEENull() As Boolean
            Return Me.IsNull(Me.tableVW_TOTAL_FEE.TITLEVMINFEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTITLEVMINFEENull()
            Me(Me.tableVW_TOTAL_FEE.TITLEVMINFEEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTITLEVFEENull() As Boolean
            Return Me.IsNull(Me.tableVW_TOTAL_FEE.TITLEVFEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTITLEVFEENull()
            Me(Me.tableVW_TOTAL_FEE.TITLEVFEEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_TOTAL_PAYMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_TOTAL_PAYMENT As VW_TOTAL_PAYMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_TOTAL_PAYMENT = CType(Me.Table,VW_TOTAL_PAYMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDYEAR() As Decimal
            Get
                Return CType(Me(Me.tableVW_TOTAL_PAYMENT.PAIDYEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVW_TOTAL_PAYMENT.PAIDYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALPAIDSUM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_TOTAL_PAYMENT.TOTALPAIDSUMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALPAIDSUM' in table 'VW_TOTAL_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TOTAL_PAYMENT.TOTALPAIDSUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTALDUESUM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableVW_TOTAL_PAYMENT.TOTALDUESUMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTALDUESUM' in table 'VW_TOTAL_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_TOTAL_PAYMENT.TOTALDUESUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALPAIDSUMNull() As Boolean
            Return Me.IsNull(Me.tableVW_TOTAL_PAYMENT.TOTALPAIDSUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALPAIDSUMNull()
            Me(Me.tableVW_TOTAL_PAYMENT.TOTALPAIDSUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALDUESUMNull() As Boolean
            Return Me.IsNull(Me.tableVW_TOTAL_PAYMENT.TOTALDUESUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALDUESUMNull()
            Me(Me.tableVW_TOTAL_PAYMENT.TOTALDUESUMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VW_TRAINING_REGRow
        Inherits Global.System.Data.DataRow
        
        Private tableVW_TRAINING_REG As VW_TRAINING_REGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_TRAINING_REG = CType(Me.Table,VW_TRAINING_REGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRUSEREMAIL() As String
            Get
                Return CType(Me(Me.tableVW_TRAINING_REG.STRUSEREMAILColumn),String)
            End Get
            Set
                Me(Me.tableVW_TRAINING_REG.STRUSEREMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFIRSTNAME() As String
            Get
                Return CType(Me(Me.tableVW_TRAINING_REG.STRFIRSTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TRAINING_REG.STRFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRLASTNAME() As String
            Get
                Return CType(Me(Me.tableVW_TRAINING_REG.STRLASTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TRAINING_REG.STRLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYNAME() As String
            Get
                Return CType(Me(Me.tableVW_TRAINING_REG.STRCOMPANYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVW_TRAINING_REG.STRCOMPANYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPHONENUMBER() As String
            Get
                Return CType(Me(Me.tableVW_TRAINING_REG.STRPHONENUMBERColumn),String)
            End Get
            Set
                Me(Me.tableVW_TRAINING_REG.STRPHONENUMBERColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ESSCHEMARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ESSCHEMARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ESSCHEMARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ESSCHEMARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FSADDPAIDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FSADDPAIDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FSADDPAIDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FSADDPAIDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FSCALCULATIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FSCALCULATIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FSCALCULATIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FSCALCULATIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FSPAYANDSUBMITRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FSPAYANDSUBMITRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FSPAYANDSUBMITRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FSPAYANDSUBMITRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FEEREPORTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FEEREPORTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FEEREPORTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FEEREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FEESDUERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FEESDUERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FEESDUERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FEESDUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FEESNONRESPONDENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FEESNONRESPONDENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FEESNONRESPONDENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FEESNONRESPONDENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FEEVARIANCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FEEVARIANCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FEEVARIANCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FEEVARIANCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_AUDIT_REPORTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_AUDIT_REPORTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_AUDIT_REPORTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_AUDIT_REPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_BANKRUPTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_BANKRUPTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_BANKRUPTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_BANKRUPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_CLASS_CHANGEDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_CLASS_CHANGEDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_CLASS_CHANGEDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_CLASS_CHANGEDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_FACILITY_BALANCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_FACILITY_BALANCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_FACILITY_BALANCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_FACILITY_BALANCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_FACILITY_FEERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_FACILITY_FEERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_FACILITY_FEERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_FACILITY_FEERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_FACILITY_INFORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_FACILITY_INFORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_FACILITY_INFORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_FACILITY_INFORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_FEES_BY_AIRSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_FEES_BY_AIRSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_FEES_BY_AIRSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_FEES_BY_AIRSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_NO_OPERATERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_NO_OPERATERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_NO_OPERATERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_NO_OPERATERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_NONRESPONDENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_NONRESPONDENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_NONRESPONDENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_NONRESPONDENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_NSPS_STATUSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_NSPS_STATUSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_NSPS_STATUSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_NSPS_STATUSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_TITLE_V_RENEWALSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_TITLE_V_RENEWALSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_TITLE_V_RENEWALSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_TITLE_V_RENEWALSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_TOTAL_FEERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_TOTAL_FEERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_TOTAL_FEERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_TOTAL_FEERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_TOTAL_PAYMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_TOTAL_PAYMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_TOTAL_PAYMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_TOTAL_PAYMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VW_TRAINING_REGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VW_TRAINING_REGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VW_TRAINING_REGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VW_TRAINING_REGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsIAIPTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ESSCHEMATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ESSCHEMA"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTESYEAR", "INTESYEAR")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRFACILITYADDRESS", "STRFACILITYADDRESS")
            tableMapping.ColumnMappings.Add("STRFACILITYCITY", "STRFACILITYCITY")
            tableMapping.ColumnMappings.Add("STRFACILITYSTATE", "STRFACILITYSTATE")
            tableMapping.ColumnMappings.Add("STRFACILITYZIP", "STRFACILITYZIP")
            tableMapping.ColumnMappings.Add("STRCOUNTY", "STRCOUNTY")
            tableMapping.ColumnMappings.Add("STRCONTACTTITLE", "STRCONTACTTITLE")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER", "STRCONTACTPHONENUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTCOMPANY", "STRCONTACTCOMPANY")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS2", "STRCONTACTADDRESS2")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIP", "STRCONTACTZIP")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STROPTOUT", "STROPTOUT")
            tableMapping.ColumnMappings.Add("DBLVOCEMISSION", "DBLVOCEMISSION")
            tableMapping.ColumnMappings.Add("DBLNOXEMISSION", "DBLNOXEMISSION")
            tableMapping.ColumnMappings.Add("STRCONFIRMATIONNBR", "STRCONFIRMATIONNBR")
            tableMapping.ColumnMappings.Add("STRDATELASTLOGIN", "STRDATELASTLOGIN")
            tableMapping.ColumnMappings.Add("STRTIMELASTLOGIN", "STRTIMELASTLOGIN")
            tableMapping.ColumnMappings.Add("DATTRANSACTION", "DATTRANSACTION")
            tableMapping.ColumnMappings.Add("STRAIRSYEAR", "STRAIRSYEAR")
            tableMapping.ColumnMappings.Add("NUMUSERID", "NUMUSERID")
            tableMapping.ColumnMappings.Add("STRCONTACTPREFIX", "STRCONTACTPREFIX")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("DBLXCOORDINATE", "DBLXCOORDINATE")
            tableMapping.ColumnMappings.Add("DBLYCOORDINATE", "DBLYCOORDINATE")
            tableMapping.ColumnMappings.Add("STRHORIZONTALCOLLECTIONCODE", "STRHORIZONTALCOLLECTIONCODE")
            tableMapping.ColumnMappings.Add("STRHORIZONTALACCURACYMEASURE", "STRHORIZONTALACCURACYMEASURE")
            tableMapping.ColumnMappings.Add("STRHORIZONTALREFERENCECODE", "STRHORIZONTALREFERENCECODE")
            tableMapping.ColumnMappings.Add("STRDATEFIRSTCONFIRM", "STRDATEFIRSTCONFIRM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""ESSCHEMA"" (""STRAIRSNUMBER"", ""INTESYEAR"", ""STRFACILITYNAM"& _ 
                "E"", ""STRFACILITYADDRESS"", ""STRFACILITYCITY"", ""STRFACILITYSTATE"", ""STRFACILITYZIP"& _ 
                """, ""STRCOUNTY"", ""STRCONTACTTITLE"", ""STRCONTACTPHONENUMBER"", ""STRCONTACTFAXNUMBER"& _ 
                """, ""STRCONTACTCOMPANY"", ""STRCONTACTADDRESS1"", ""STRCONTACTADDRESS2"", ""STRCONTACTC"& _ 
                "ITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIP"", ""STRCONTACTEMAIL"", ""STROPTOUT"", ""DBLVO"& _ 
                "CEMISSION"", ""DBLNOXEMISSION"", ""STRCONFIRMATIONNBR"", ""STRDATELASTLOGIN"", ""STRTIME"& _ 
                "LASTLOGIN"", ""DATTRANSACTION"", ""STRAIRSYEAR"", ""NUMUSERID"", ""STRCONTACTPREFIX"", ""S"& _ 
                "TRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""DBLXCOORDINATE"", ""DBLYCOORDINATE"", """& _ 
                "STRHORIZONTALCOLLECTIONCODE"", ""STRHORIZONTALACCURACYMEASURE"", ""STRHORIZONTALREFE"& _ 
                "RENCECODE"", ""STRDATEFIRSTCONFIRM"") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTESYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(4,Byte), CType(0,Byte), "INTESYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYADDRESS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYCITY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYSTATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRFACILITYZIP", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRFACILITYZIP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCOUNTY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOUNTY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTTITLE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTPHONENUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTPHONENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTFAXNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTFAXNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTCOMPANY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTCOMPANY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTADDRESS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTADDRESS1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTADDRESS2", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTADDRESS2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTCITY", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTSTATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTZIP", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTZIP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTEMAIL", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTEMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROPTOUT", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROPTOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLVOCEMISSION", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(3,Byte), "DBLVOCEMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLNOXEMISSION", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(3,Byte), "DBLNOXEMISSION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONFIRMATIONNBR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONFIRMATIONNBR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRDATELASTLOGIN", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDATELASTLOGIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRTIMELASTLOGIN", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRTIMELASTLOGIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATTRANSACTION", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATTRANSACTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSYEAR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMUSERID", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(0,Byte), "NUMUSERID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTPREFIX", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTPREFIX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTFIRSTNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTFIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCONTACTLASTNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCONTACTLASTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLXCOORDINATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(10,Byte), "DBLXCOORDINATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DBLYCOORDINATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(10,Byte), "DBLYCOORDINATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRHORIZONTALCOLLECTIONCODE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRHORIZONTALCOLLECTIONCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRHORIZONTALACCURACYMEASURE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRHORIZONTALACCURACYMEASURE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRHORIZONTALREFERENCECODE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRHORIZONTALREFERENCECODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRDATEFIRSTCONFIRM", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDATEFIRSTCONFIRM", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTESYEAR"", ""STRFACILITYNAME"", ""STRFACILITYADDRESS"", ""ST"& _ 
                "RFACILITYCITY"", ""STRFACILITYSTATE"", ""STRFACILITYZIP"", ""STRCOUNTY"", ""STRCONTACTTI"& _ 
                "TLE"", ""STRCONTACTPHONENUMBER"", ""STRCONTACTFAXNUMBER"", ""STRCONTACTCOMPANY"", ""STRC"& _ 
                "ONTACTADDRESS1"", ""STRCONTACTADDRESS2"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STR"& _ 
                "CONTACTZIP"", ""STRCONTACTEMAIL"", ""STROPTOUT"", ""DBLVOCEMISSION"", ""DBLNOXEMISSION"","& _ 
                " ""STRCONFIRMATIONNBR"", ""STRDATELASTLOGIN"", ""STRTIMELASTLOGIN"", ""DATTRANSACTION"","& _ 
                " ""STRAIRSYEAR"", ""NUMUSERID"", ""STRCONTACTPREFIX"", ""STRCONTACTFIRSTNAME"", ""STRCONT"& _ 
                "ACTLASTNAME"", ""DBLXCOORDINATE"", ""DBLYCOORDINATE"", ""STRHORIZONTALCOLLECTIONCODE"","& _ 
                " ""STRHORIZONTALACCURACYMEASURE"", ""STRHORIZONTALREFERENCECODE"", ""STRDATEFIRSTCONF"& _ 
                "IRM"" FROM ""AIRBRANCH"".""ESSCHEMA"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.ESSCHEMADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.ESSCHEMADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.ESSCHEMADataTable = New dsIAIP.ESSCHEMADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsIAIP.ESSCHEMADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsIAIP) As Integer
            Return Me.Adapter.Update(dataSet, "ESSCHEMA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTESYEAR As Global.System.Nullable(Of Decimal),  _
                    ByVal STRFACILITYNAME As String,  _
                    ByVal STRFACILITYADDRESS As String,  _
                    ByVal STRFACILITYCITY As String,  _
                    ByVal STRFACILITYSTATE As String,  _
                    ByVal STRFACILITYZIP As String,  _
                    ByVal STRCOUNTY As String,  _
                    ByVal STRCONTACTTITLE As String,  _
                    ByVal STRCONTACTPHONENUMBER As String,  _
                    ByVal STRCONTACTFAXNUMBER As String,  _
                    ByVal STRCONTACTCOMPANY As String,  _
                    ByVal STRCONTACTADDRESS1 As String,  _
                    ByVal STRCONTACTADDRESS2 As String,  _
                    ByVal STRCONTACTCITY As String,  _
                    ByVal STRCONTACTSTATE As String,  _
                    ByVal STRCONTACTZIP As String,  _
                    ByVal STRCONTACTEMAIL As String,  _
                    ByVal STROPTOUT As String,  _
                    ByVal DBLVOCEMISSION As Global.System.Nullable(Of Decimal),  _
                    ByVal DBLNOXEMISSION As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCONFIRMATIONNBR As String,  _
                    ByVal STRDATELASTLOGIN As String,  _
                    ByVal STRTIMELASTLOGIN As String,  _
                    ByVal DATTRANSACTION As Global.System.Nullable(Of Date),  _
                    ByVal STRAIRSYEAR As String,  _
                    ByVal NUMUSERID As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCONTACTPREFIX As String,  _
                    ByVal STRCONTACTFIRSTNAME As String,  _
                    ByVal STRCONTACTLASTNAME As String,  _
                    ByVal DBLXCOORDINATE As Global.System.Nullable(Of Decimal),  _
                    ByVal DBLYCOORDINATE As Global.System.Nullable(Of Decimal),  _
                    ByVal STRHORIZONTALCOLLECTIONCODE As String,  _
                    ByVal STRHORIZONTALACCURACYMEASURE As String,  _
                    ByVal STRHORIZONTALREFERENCECODE As String,  _
                    ByVal STRDATEFIRSTCONFIRM As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            If (INTESYEAR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(INTESYEAR.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (STRFACILITYNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRFACILITYNAME,String)
            End If
            If (STRFACILITYADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRFACILITYADDRESS,String)
            End If
            If (STRFACILITYCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRFACILITYCITY,String)
            End If
            If (STRFACILITYSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRFACILITYSTATE,String)
            End If
            If (STRFACILITYZIP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRFACILITYZIP,String)
            End If
            If (STRCOUNTY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRCOUNTY,String)
            End If
            If (STRCONTACTTITLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRCONTACTTITLE,String)
            End If
            If (STRCONTACTPHONENUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRCONTACTPHONENUMBER,String)
            End If
            If (STRCONTACTFAXNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STRCONTACTFAXNUMBER,String)
            End If
            If (STRCONTACTCOMPANY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRCONTACTCOMPANY,String)
            End If
            If (STRCONTACTADDRESS1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STRCONTACTADDRESS1,String)
            End If
            If (STRCONTACTADDRESS2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STRCONTACTADDRESS2,String)
            End If
            If (STRCONTACTCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STRCONTACTCITY,String)
            End If
            If (STRCONTACTSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STRCONTACTSTATE,String)
            End If
            If (STRCONTACTZIP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STRCONTACTZIP,String)
            End If
            If (STRCONTACTEMAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STRCONTACTEMAIL,String)
            End If
            If (STROPTOUT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(STROPTOUT,String)
            End If
            If (DBLVOCEMISSION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DBLVOCEMISSION.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (DBLNOXEMISSION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(DBLNOXEMISSION.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (STRCONFIRMATIONNBR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(STRCONFIRMATIONNBR,String)
            End If
            If (STRDATELASTLOGIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(STRDATELASTLOGIN,String)
            End If
            If (STRTIMELASTLOGIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(STRTIMELASTLOGIN,String)
            End If
            If (DATTRANSACTION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(DATTRANSACTION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (STRAIRSYEAR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSYEAR")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(STRAIRSYEAR,String)
            End If
            If (NUMUSERID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(NUMUSERID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (STRCONTACTPREFIX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(STRCONTACTPREFIX,String)
            End If
            If (STRCONTACTFIRSTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(STRCONTACTFIRSTNAME,String)
            End If
            If (STRCONTACTLASTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(STRCONTACTLASTNAME,String)
            End If
            If (DBLXCOORDINATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(DBLXCOORDINATE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (DBLYCOORDINATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(DBLYCOORDINATE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (STRHORIZONTALCOLLECTIONCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(STRHORIZONTALCOLLECTIONCODE,String)
            End If
            If (STRHORIZONTALACCURACYMEASURE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(STRHORIZONTALACCURACYMEASURE,String)
            End If
            If (STRHORIZONTALREFERENCECODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(STRHORIZONTALREFERENCECODE,String)
            End If
            If (STRDATEFIRSTCONFIRM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(STRDATEFIRSTCONFIRM,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FSADDPAIDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FSADDPAID"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("NUMPAYMENT", "NUMPAYMENT")
            tableMapping.ColumnMappings.Add("DATPAYDATE", "DATPAYDATE")
            tableMapping.ColumnMappings.Add("STRCHECKNO", "STRCHECKNO")
            tableMapping.ColumnMappings.Add("STRDEPOSITNO", "STRDEPOSITNO")
            tableMapping.ColumnMappings.Add("STRPAYTYPE", "STRPAYTYPE")
            tableMapping.ColumnMappings.Add("STRBATCHNO", "STRBATCHNO")
            tableMapping.ColumnMappings.Add("STRENTRYPERSON", "STRENTRYPERSON")
            tableMapping.ColumnMappings.Add("STRCOMMENTS", "STRCOMMENTS")
            tableMapping.ColumnMappings.Add("INTFISCALYEAR", "INTFISCALYEAR")
            tableMapping.ColumnMappings.Add("INTPAYID", "INTPAYID")
            tableMapping.ColumnMappings.Add("STRINVOICENO", "STRINVOICENO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AIRBRANCH"".""FSADDPAID"" WHERE ((""STRAIRSNUMBER"" = ?) AND (""INTYEAR"" ="& _ 
                " ?) AND (""NUMPAYMENT"" = ?) AND ((? = 1 AND ""DATPAYDATE"" IS NULL) OR (""DATPAYDATE"& _ 
                """ = ?)) AND ((? = 1 AND ""STRCHECKNO"" IS NULL) OR (""STRCHECKNO"" = ?)) AND ((? = 1"& _ 
                " AND ""STRDEPOSITNO"" IS NULL) OR (""STRDEPOSITNO"" = ?)) AND ((? = 1 AND ""STRPAYTYP"& _ 
                "E"" IS NULL) OR (""STRPAYTYPE"" = ?)) AND ((? = 1 AND ""STRBATCHNO"" IS NULL) OR (""ST"& _ 
                "RBATCHNO"" = ?)) AND ((? = 1 AND ""STRENTRYPERSON"" IS NULL) OR (""STRENTRYPERSON"" ="& _ 
                " ?)) AND ((? = 1 AND ""STRCOMMENTS"" IS NULL) OR (""STRCOMMENTS"" = ?)) AND ((? = 1 "& _ 
                "AND ""INTFISCALYEAR"" IS NULL) OR (""INTFISCALYEAR"" = ?)) AND (""INTPAYID"" = ?) AND "& _ 
                "((? = 1 AND ""STRINVOICENO"" IS NULL) OR (""STRINVOICENO"" = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMPAYMENT", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(2,Byte), "NUMPAYMENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DATPAYDATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATPAYDATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DATPAYDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATPAYDATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCHECKNO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCHECKNO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCHECKNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCHECKNO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRDEPOSITNO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDEPOSITNO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRDEPOSITNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDEPOSITNO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRPAYTYPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRPAYTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRBATCHNO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRBATCHNO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRBATCHNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRBATCHNO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRENTRYPERSON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRENTRYPERSON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRENTRYPERSON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRENTRYPERSON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INTFISCALYEAR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INTFISCALYEAR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTFISCALYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTFISCALYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTPAYID", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(0,Byte), "INTPAYID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRINVOICENO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRINVOICENO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRINVOICENO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRINVOICENO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""FSADDPAID"" (""STRAIRSNUMBER"", ""INTYEAR"", ""NUMPAYMENT"", ""D"& _ 
                "ATPAYDATE"", ""STRCHECKNO"", ""STRDEPOSITNO"", ""STRPAYTYPE"", ""STRBATCHNO"", ""STRENTRYP"& _ 
                "ERSON"", ""STRCOMMENTS"", ""INTFISCALYEAR"", ""INTPAYID"", ""STRINVOICENO"") VALUES (?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMPAYMENT", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(2,Byte), "NUMPAYMENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATPAYDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATPAYDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCHECKNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCHECKNO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRDEPOSITNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDEPOSITNO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRPAYTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRBATCHNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRBATCHNO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRENTRYPERSON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRENTRYPERSON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTFISCALYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTFISCALYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTPAYID", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(0,Byte), "INTPAYID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRINVOICENO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRINVOICENO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AIRBRANCH"".""FSADDPAID"" SET ""STRAIRSNUMBER"" = ?, ""INTYEAR"" = ?, ""NUMPAYMEN"& _ 
                "T"" = ?, ""DATPAYDATE"" = ?, ""STRCHECKNO"" = ?, ""STRDEPOSITNO"" = ?, ""STRPAYTYPE"" = ?"& _ 
                ", ""STRBATCHNO"" = ?, ""STRENTRYPERSON"" = ?, ""STRCOMMENTS"" = ?, ""INTFISCALYEAR"" = ?"& _ 
                ", ""INTPAYID"" = ?, ""STRINVOICENO"" = ? WHERE ((""STRAIRSNUMBER"" = ?) AND (""INTYEAR"""& _ 
                " = ?) AND (""NUMPAYMENT"" = ?) AND ((? = 1 AND ""DATPAYDATE"" IS NULL) OR (""DATPAYDA"& _ 
                "TE"" = ?)) AND ((? = 1 AND ""STRCHECKNO"" IS NULL) OR (""STRCHECKNO"" = ?)) AND ((? ="& _ 
                " 1 AND ""STRDEPOSITNO"" IS NULL) OR (""STRDEPOSITNO"" = ?)) AND ((? = 1 AND ""STRPAYT"& _ 
                "YPE"" IS NULL) OR (""STRPAYTYPE"" = ?)) AND ((? = 1 AND ""STRBATCHNO"" IS NULL) OR ("""& _ 
                "STRBATCHNO"" = ?)) AND ((? = 1 AND ""STRENTRYPERSON"" IS NULL) OR (""STRENTRYPERSON"""& _ 
                " = ?)) AND ((? = 1 AND ""STRCOMMENTS"" IS NULL) OR (""STRCOMMENTS"" = ?)) AND ((? = "& _ 
                "1 AND ""INTFISCALYEAR"" IS NULL) OR (""INTFISCALYEAR"" = ?)) AND (""INTPAYID"" = ?) AN"& _ 
                "D ((? = 1 AND ""STRINVOICENO"" IS NULL) OR (""STRINVOICENO"" = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMPAYMENT", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(2,Byte), "NUMPAYMENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATPAYDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATPAYDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCHECKNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCHECKNO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRDEPOSITNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDEPOSITNO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRPAYTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRBATCHNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRBATCHNO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRENTRYPERSON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRENTRYPERSON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTFISCALYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTFISCALYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTPAYID", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(0,Byte), "INTPAYID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRINVOICENO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRINVOICENO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMPAYMENT", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(2,Byte), "NUMPAYMENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DATPAYDATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATPAYDATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DATPAYDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATPAYDATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCHECKNO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCHECKNO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCHECKNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCHECKNO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRDEPOSITNO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDEPOSITNO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRDEPOSITNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRDEPOSITNO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRPAYTYPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRPAYTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRBATCHNO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRBATCHNO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRBATCHNO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRBATCHNO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRENTRYPERSON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRENTRYPERSON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRENTRYPERSON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRENTRYPERSON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_INTFISCALYEAR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "INTFISCALYEAR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTFISCALYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTFISCALYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTPAYID", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(0,Byte), "INTPAYID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRINVOICENO", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRINVOICENO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRINVOICENO", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRINVOICENO", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTYEAR"", ""NUMPAYMENT"", ""DATPAYDATE"", ""STRCHECKNO"", ""STR"& _ 
                "DEPOSITNO"", ""STRPAYTYPE"", ""STRBATCHNO"", ""STRENTRYPERSON"", ""STRCOMMENTS"", ""INTFIS"& _ 
                "CALYEAR"", ""INTPAYID"", ""STRINVOICENO"" FROM ""AIRBRANCH"".""FSADDPAID"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FSADDPAIDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FSADDPAIDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FSADDPAIDDataTable = New dsIAIP.FSADDPAIDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsIAIP.FSADDPAIDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsIAIP) As Integer
            Return Me.Adapter.Update(dataSet, "FSADDPAID")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_STRAIRSNUMBER As String, ByVal Original_INTYEAR As Decimal, ByVal Original_NUMPAYMENT As Decimal, ByVal Original_DATPAYDATE As Global.System.Nullable(Of Date), ByVal Original_STRCHECKNO As String, ByVal Original_STRDEPOSITNO As String, ByVal Original_STRPAYTYPE As String, ByVal Original_STRBATCHNO As String, ByVal Original_STRENTRYPERSON As String, ByVal Original_STRCOMMENTS As String, ByVal Original_INTFISCALYEAR As Global.System.Nullable(Of Decimal), ByVal Original_INTPAYID As Decimal, ByVal Original_STRINVOICENO As String) As Integer
            If (Original_STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRAIRSNUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STRAIRSNUMBER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_INTYEAR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NUMPAYMENT,Decimal)
            If (Original_DATPAYDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DATPAYDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_STRCHECKNO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_STRCHECKNO,String)
            End If
            If (Original_STRDEPOSITNO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_STRDEPOSITNO,String)
            End If
            If (Original_STRPAYTYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_STRPAYTYPE,String)
            End If
            If (Original_STRBATCHNO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_STRBATCHNO,String)
            End If
            If (Original_STRENTRYPERSON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_STRENTRYPERSON,String)
            End If
            If (Original_STRCOMMENTS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_STRCOMMENTS,String)
            End If
            If (Original_INTFISCALYEAR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_INTFISCALYEAR.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_INTPAYID,Decimal)
            If (Original_STRINVOICENO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_STRINVOICENO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal, ByVal NUMPAYMENT As Decimal, ByVal DATPAYDATE As Global.System.Nullable(Of Date), ByVal STRCHECKNO As String, ByVal STRDEPOSITNO As String, ByVal STRPAYTYPE As String, ByVal STRBATCHNO As String, ByVal STRENTRYPERSON As String, ByVal STRCOMMENTS As String, ByVal INTFISCALYEAR As Global.System.Nullable(Of Decimal), ByVal INTPAYID As Decimal, ByVal STRINVOICENO As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(INTYEAR,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(NUMPAYMENT,Decimal)
            If (DATPAYDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATPAYDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (STRCHECKNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRCHECKNO,String)
            End If
            If (STRDEPOSITNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRDEPOSITNO,String)
            End If
            If (STRPAYTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRPAYTYPE,String)
            End If
            If (STRBATCHNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRBATCHNO,String)
            End If
            If (STRENTRYPERSON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRENTRYPERSON,String)
            End If
            If (STRCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRCOMMENTS,String)
            End If
            If (INTFISCALYEAR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(INTFISCALYEAR.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(INTPAYID,Decimal)
            If (STRINVOICENO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STRINVOICENO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal NUMPAYMENT As Decimal,  _
                    ByVal DATPAYDATE As Global.System.Nullable(Of Date),  _
                    ByVal STRCHECKNO As String,  _
                    ByVal STRDEPOSITNO As String,  _
                    ByVal STRPAYTYPE As String,  _
                    ByVal STRBATCHNO As String,  _
                    ByVal STRENTRYPERSON As String,  _
                    ByVal STRCOMMENTS As String,  _
                    ByVal INTFISCALYEAR As Global.System.Nullable(Of Decimal),  _
                    ByVal INTPAYID As Decimal,  _
                    ByVal STRINVOICENO As String,  _
                    ByVal Original_STRAIRSNUMBER As String,  _
                    ByVal Original_INTYEAR As Decimal,  _
                    ByVal Original_NUMPAYMENT As Decimal,  _
                    ByVal Original_DATPAYDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_STRCHECKNO As String,  _
                    ByVal Original_STRDEPOSITNO As String,  _
                    ByVal Original_STRPAYTYPE As String,  _
                    ByVal Original_STRBATCHNO As String,  _
                    ByVal Original_STRENTRYPERSON As String,  _
                    ByVal Original_STRCOMMENTS As String,  _
                    ByVal Original_INTFISCALYEAR As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INTPAYID As Decimal,  _
                    ByVal Original_STRINVOICENO As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(INTYEAR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NUMPAYMENT,Decimal)
            If (DATPAYDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DATPAYDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (STRCHECKNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(STRCHECKNO,String)
            End If
            If (STRDEPOSITNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(STRDEPOSITNO,String)
            End If
            If (STRPAYTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(STRPAYTYPE,String)
            End If
            If (STRBATCHNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(STRBATCHNO,String)
            End If
            If (STRENTRYPERSON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(STRENTRYPERSON,String)
            End If
            If (STRCOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(STRCOMMENTS,String)
            End If
            If (INTFISCALYEAR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(INTFISCALYEAR.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(INTPAYID,Decimal)
            If (STRINVOICENO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(STRINVOICENO,String)
            End If
            If (Original_STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRAIRSNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_STRAIRSNUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_INTYEAR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_NUMPAYMENT,Decimal)
            If (Original_DATPAYDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_DATPAYDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_STRCHECKNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_STRCHECKNO,String)
            End If
            If (Original_STRDEPOSITNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_STRDEPOSITNO,String)
            End If
            If (Original_STRPAYTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_STRPAYTYPE,String)
            End If
            If (Original_STRBATCHNO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_STRBATCHNO,String)
            End If
            If (Original_STRENTRYPERSON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_STRENTRYPERSON,String)
            End If
            If (Original_STRCOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_STRCOMMENTS,String)
            End If
            If (Original_INTFISCALYEAR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_INTFISCALYEAR.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_INTPAYID,Decimal)
            If (Original_STRINVOICENO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_STRINVOICENO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal NUMPAYMENT As Decimal,  _
                    ByVal DATPAYDATE As Global.System.Nullable(Of Date),  _
                    ByVal STRCHECKNO As String,  _
                    ByVal STRDEPOSITNO As String,  _
                    ByVal STRPAYTYPE As String,  _
                    ByVal STRBATCHNO As String,  _
                    ByVal STRENTRYPERSON As String,  _
                    ByVal STRCOMMENTS As String,  _
                    ByVal INTFISCALYEAR As Global.System.Nullable(Of Decimal),  _
                    ByVal STRINVOICENO As String,  _
                    ByVal Original_STRAIRSNUMBER As String,  _
                    ByVal Original_INTYEAR As Decimal,  _
                    ByVal Original_NUMPAYMENT As Decimal,  _
                    ByVal Original_DATPAYDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_STRCHECKNO As String,  _
                    ByVal Original_STRDEPOSITNO As String,  _
                    ByVal Original_STRPAYTYPE As String,  _
                    ByVal Original_STRBATCHNO As String,  _
                    ByVal Original_STRENTRYPERSON As String,  _
                    ByVal Original_STRCOMMENTS As String,  _
                    ByVal Original_INTFISCALYEAR As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INTPAYID As Decimal,  _
                    ByVal Original_STRINVOICENO As String) As Integer
            Return Me.Update(STRAIRSNUMBER, INTYEAR, NUMPAYMENT, DATPAYDATE, STRCHECKNO, STRDEPOSITNO, STRPAYTYPE, STRBATCHNO, STRENTRYPERSON, STRCOMMENTS, INTFISCALYEAR, Original_INTPAYID, STRINVOICENO, Original_STRAIRSNUMBER, Original_INTYEAR, Original_NUMPAYMENT, Original_DATPAYDATE, Original_STRCHECKNO, Original_STRDEPOSITNO, Original_STRPAYTYPE, Original_STRBATCHNO, Original_STRENTRYPERSON, Original_STRCOMMENTS, Original_INTFISCALYEAR, Original_INTPAYID, Original_STRINVOICENO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FSCALCULATIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FSCALCULATIONS"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("INTVOCTONS", "INTVOCTONS")
            tableMapping.ColumnMappings.Add("INTPMTONS", "INTPMTONS")
            tableMapping.ColumnMappings.Add("INTSO2TONS", "INTSO2TONS")
            tableMapping.ColumnMappings.Add("INTNOXTONS", "INTNOXTONS")
            tableMapping.ColumnMappings.Add("NUMPART70FEE", "NUMPART70FEE")
            tableMapping.ColumnMappings.Add("NUMSMFEE", "NUMSMFEE")
            tableMapping.ColumnMappings.Add("NUMNSPSFEE", "NUMNSPSFEE")
            tableMapping.ColumnMappings.Add("NUMTOTALFEE", "NUMTOTALFEE")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPT", "STRNSPSEXEMPT")
            tableMapping.ColumnMappings.Add("STRNSPSREASON", "STRNSPSREASON")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("NUMFEERATE", "NUMFEERATE")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPTREASON", "STRNSPSEXEMPTREASON")
            tableMapping.ColumnMappings.Add("STRPART70", "STRPART70")
            tableMapping.ColumnMappings.Add("STRSYNTHETICMINOR", "STRSYNTHETICMINOR")
            tableMapping.ColumnMappings.Add("NUMCALCULATEDFEE", "NUMCALCULATEDFEE")
            tableMapping.ColumnMappings.Add("STRCLASS1", "STRCLASS1")
            tableMapping.ColumnMappings.Add("STRNSPS1", "STRNSPS1")
            tableMapping.ColumnMappings.Add("SHUTDATE", "SHUTDATE")
            tableMapping.ColumnMappings.Add("VARIANCECHECK", "VARIANCECHECK")
            tableMapping.ColumnMappings.Add("VARIANCECOMMENTS", "VARIANCECOMMENTS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AIRBRANCH"".""FSCALCULATIONS"" WHERE ((""STRAIRSNUMBER"" = ?) AND (""INTYE"& _ 
                "AR"" = ?) AND (""INTVOCTONS"" = ?) AND (""INTPMTONS"" = ?) AND (""INTSO2TONS"" = ?) AND"& _ 
                " (""INTNOXTONS"" = ?) AND (""NUMPART70FEE"" = ?) AND (""NUMSMFEE"" = ?) AND (""NUMNSPSF"& _ 
                "EE"" = ?) AND (""NUMTOTALFEE"" = ?) AND (""STRNSPSEXEMPT"" = ?) AND (""STRNSPSREASON"" "& _ 
                "= ?) AND (""STROPERATE"" = ?) AND (""NUMFEERATE"" = ?) AND ((? = 1 AND ""STRNSPSEXEMP"& _ 
                "TREASON"" IS NULL) OR (""STRNSPSEXEMPTREASON"" = ?)) AND (""STRPART70"" = ?) AND (""ST"& _ 
                "RSYNTHETICMINOR"" = ?) AND (""NUMCALCULATEDFEE"" = ?) AND ((? = 1 AND ""STRCLASS1"" I"& _ 
                "S NULL) OR (""STRCLASS1"" = ?)) AND ((? = 1 AND ""STRNSPS1"" IS NULL) OR (""STRNSPS1"""& _ 
                " = ?)) AND ((? = 1 AND ""SHUTDATE"" IS NULL) OR (""SHUTDATE"" = ?)) AND ((? = 1 AND "& _ 
                """VARIANCECHECK"" IS NULL) OR (""VARIANCECHECK"" = ?)) AND ((? = 1 AND ""VARIANCECOMM"& _ 
                "ENTS"" IS NULL) OR (""VARIANCECOMMENTS"" = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTVOCTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTVOCTONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTPMTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTPMTONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTSO2TONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTSO2TONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTNOXTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTNOXTONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMPART70FEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMPART70FEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMSMFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMSMFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMNSPSFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMNSPSFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMTOTALFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMTOTALFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPSEXEMPT", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPSREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSREASON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STROPERATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROPERATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMFEERATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMFEERATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRNSPSEXEMPTREASON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPTREASON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPSEXEMPTREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPTREASON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRPART70", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPART70", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRSYNTHETICMINOR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRSYNTHETICMINOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMCALCULATEDFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMCALCULATEDFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCLASS1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCLASS1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCLASS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCLASS1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRNSPS1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPS1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPS1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SHUTDATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SHUTDATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SHUTDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SHUTDATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VARIANCECHECK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECHECK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VARIANCECHECK", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECHECK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VARIANCECOMMENTS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECOMMENTS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VARIANCECOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECOMMENTS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""FSCALCULATIONS"" (""STRAIRSNUMBER"", ""INTYEAR"", ""INTVOCTONS"& _ 
                """, ""INTPMTONS"", ""INTSO2TONS"", ""INTNOXTONS"", ""NUMPART70FEE"", ""NUMSMFEE"", ""NUMNSPS"& _ 
                "FEE"", ""NUMTOTALFEE"", ""STRNSPSEXEMPT"", ""STRNSPSREASON"", ""STROPERATE"", ""NUMFEERATE"& _ 
                """, ""STRNSPSEXEMPTREASON"", ""STRPART70"", ""STRSYNTHETICMINOR"", ""NUMCALCULATEDFEE"", "& _ 
                """STRCLASS1"", ""STRNSPS1"", ""SHUTDATE"", ""VARIANCECHECK"", ""VARIANCECOMMENTS"") VALUES"& _ 
                " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTVOCTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTVOCTONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTPMTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTPMTONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTSO2TONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTSO2TONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTNOXTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTNOXTONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMPART70FEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMPART70FEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMSMFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMSMFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMNSPSFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMNSPSFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMTOTALFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMTOTALFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPSEXEMPT", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPSREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSREASON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROPERATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROPERATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMFEERATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMFEERATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPSEXEMPTREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPTREASON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRPART70", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPART70", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRSYNTHETICMINOR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRSYNTHETICMINOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMCALCULATEDFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMCALCULATEDFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCLASS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCLASS1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPS1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SHUTDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SHUTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VARIANCECHECK", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECHECK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VARIANCECOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AIRBRANCH"".""FSCALCULATIONS"" SET ""STRAIRSNUMBER"" = ?, ""INTYEAR"" = ?, ""INTV"& _ 
                "OCTONS"" = ?, ""INTPMTONS"" = ?, ""INTSO2TONS"" = ?, ""INTNOXTONS"" = ?, ""NUMPART70FEE"""& _ 
                " = ?, ""NUMSMFEE"" = ?, ""NUMNSPSFEE"" = ?, ""NUMTOTALFEE"" = ?, ""STRNSPSEXEMPT"" = ?, "& _ 
                """STRNSPSREASON"" = ?, ""STROPERATE"" = ?, ""NUMFEERATE"" = ?, ""STRNSPSEXEMPTREASON"" ="& _ 
                " ?, ""STRPART70"" = ?, ""STRSYNTHETICMINOR"" = ?, ""NUMCALCULATEDFEE"" = ?, ""STRCLASS1"& _ 
                """ = ?, ""STRNSPS1"" = ?, ""SHUTDATE"" = ?, ""VARIANCECHECK"" = ?, ""VARIANCECOMMENTS"" ="& _ 
                " ? WHERE ((""STRAIRSNUMBER"" = ?) AND (""INTYEAR"" = ?) AND (""INTVOCTONS"" = ?) AND ("& _ 
                """INTPMTONS"" = ?) AND (""INTSO2TONS"" = ?) AND (""INTNOXTONS"" = ?) AND (""NUMPART70FE"& _ 
                "E"" = ?) AND (""NUMSMFEE"" = ?) AND (""NUMNSPSFEE"" = ?) AND (""NUMTOTALFEE"" = ?) AND "& _ 
                "(""STRNSPSEXEMPT"" = ?) AND (""STRNSPSREASON"" = ?) AND (""STROPERATE"" = ?) AND (""NUM"& _ 
                "FEERATE"" = ?) AND ((? = 1 AND ""STRNSPSEXEMPTREASON"" IS NULL) OR (""STRNSPSEXEMPTR"& _ 
                "EASON"" = ?)) AND (""STRPART70"" = ?) AND (""STRSYNTHETICMINOR"" = ?) AND (""NUMCALCUL"& _ 
                "ATEDFEE"" = ?) AND ((? = 1 AND ""STRCLASS1"" IS NULL) OR (""STRCLASS1"" = ?)) AND ((?"& _ 
                " = 1 AND ""STRNSPS1"" IS NULL) OR (""STRNSPS1"" = ?)) AND ((? = 1 AND ""SHUTDATE"" IS "& _ 
                "NULL) OR (""SHUTDATE"" = ?)) AND ((? = 1 AND ""VARIANCECHECK"" IS NULL) OR (""VARIANC"& _ 
                "ECHECK"" = ?)) AND ((? = 1 AND ""VARIANCECOMMENTS"" IS NULL) OR (""VARIANCECOMMENTS"""& _ 
                " = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTVOCTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTVOCTONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTPMTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTPMTONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTSO2TONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTSO2TONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTNOXTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTNOXTONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMPART70FEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMPART70FEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMSMFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMSMFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMNSPSFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMNSPSFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMTOTALFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMTOTALFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPSEXEMPT", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPSREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSREASON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROPERATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROPERATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMFEERATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMFEERATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPSEXEMPTREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPTREASON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRPART70", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPART70", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRSYNTHETICMINOR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRSYNTHETICMINOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NUMCALCULATEDFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMCALCULATEDFEE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCLASS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCLASS1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRNSPS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPS1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SHUTDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SHUTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VARIANCECHECK", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECHECK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("VARIANCECOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTVOCTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTVOCTONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTPMTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTPMTONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTSO2TONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTSO2TONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTNOXTONS", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTNOXTONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMPART70FEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMPART70FEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMSMFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMSMFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMNSPSFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMNSPSFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMTOTALFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMTOTALFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPSEXEMPT", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPSREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSREASON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STROPERATE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROPERATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMFEERATE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMFEERATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRNSPSEXEMPTREASON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPTREASON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPSEXEMPTREASON", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPSEXEMPTREASON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRPART70", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPART70", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRSYNTHETICMINOR", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRSYNTHETICMINOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NUMCALCULATEDFEE", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(10,Byte), CType(2,Byte), "NUMCALCULATEDFEE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCLASS1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCLASS1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCLASS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCLASS1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRNSPS1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPS1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRNSPS1", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRNSPS1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SHUTDATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SHUTDATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SHUTDATE", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SHUTDATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VARIANCECHECK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECHECK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VARIANCECHECK", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECHECK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_VARIANCECOMMENTS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECOMMENTS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_VARIANCECOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "VARIANCECOMMENTS", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTYEAR"", ""INTVOCTONS"", ""INTPMTONS"", ""INTSO2TONS"", ""INTN"& _ 
                "OXTONS"", ""NUMPART70FEE"", ""NUMSMFEE"", ""NUMNSPSFEE"", ""NUMTOTALFEE"", ""STRNSPSEXEMPT"& _ 
                """, ""STRNSPSREASON"", ""STROPERATE"", ""NUMFEERATE"", ""STRNSPSEXEMPTREASON"", ""STRPART7"& _ 
                "0"", ""STRSYNTHETICMINOR"", ""NUMCALCULATEDFEE"", ""STRCLASS1"", ""STRNSPS1"", ""SHUTDATE"""& _ 
                ", ""VARIANCECHECK"", ""VARIANCECOMMENTS"" FROM ""AIRBRANCH"".""FSCALCULATIONS"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FSCALCULATIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FSCALCULATIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FSCALCULATIONSDataTable = New dsIAIP.FSCALCULATIONSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsIAIP.FSCALCULATIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsIAIP) As Integer
            Return Me.Adapter.Update(dataSet, "FSCALCULATIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_STRAIRSNUMBER As String,  _
                    ByVal Original_INTYEAR As Decimal,  _
                    ByVal Original_INTVOCTONS As Decimal,  _
                    ByVal Original_INTPMTONS As Decimal,  _
                    ByVal Original_INTSO2TONS As Decimal,  _
                    ByVal Original_INTNOXTONS As Decimal,  _
                    ByVal Original_NUMPART70FEE As Decimal,  _
                    ByVal Original_NUMSMFEE As Decimal,  _
                    ByVal Original_NUMNSPSFEE As Decimal,  _
                    ByVal Original_NUMTOTALFEE As Decimal,  _
                    ByVal Original_STRNSPSEXEMPT As String,  _
                    ByVal Original_STRNSPSREASON As String,  _
                    ByVal Original_STROPERATE As String,  _
                    ByVal Original_NUMFEERATE As Decimal,  _
                    ByVal Original_STRNSPSEXEMPTREASON As String,  _
                    ByVal Original_STRPART70 As String,  _
                    ByVal Original_STRSYNTHETICMINOR As String,  _
                    ByVal Original_NUMCALCULATEDFEE As Decimal,  _
                    ByVal Original_STRCLASS1 As String,  _
                    ByVal Original_STRNSPS1 As String,  _
                    ByVal Original_SHUTDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_VARIANCECHECK As String,  _
                    ByVal Original_VARIANCECOMMENTS As String) As Integer
            If (Original_STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRAIRSNUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STRAIRSNUMBER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_INTYEAR,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_INTVOCTONS,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_INTPMTONS,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_INTSO2TONS,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_INTNOXTONS,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_NUMPART70FEE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_NUMSMFEE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_NUMNSPSFEE,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_NUMTOTALFEE,Decimal)
            If (Original_STRNSPSEXEMPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRNSPSEXEMPT")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_STRNSPSEXEMPT,String)
            End If
            If (Original_STRNSPSREASON Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRNSPSREASON")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_STRNSPSREASON,String)
            End If
            If (Original_STROPERATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STROPERATE")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_STROPERATE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_NUMFEERATE,Decimal)
            If (Original_STRNSPSEXEMPTREASON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_STRNSPSEXEMPTREASON,String)
            End If
            If (Original_STRPART70 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRPART70")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_STRPART70,String)
            End If
            If (Original_STRSYNTHETICMINOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRSYNTHETICMINOR")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_STRSYNTHETICMINOR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_NUMCALCULATEDFEE,Decimal)
            If (Original_STRCLASS1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_STRCLASS1,String)
            End If
            If (Original_STRNSPS1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_STRNSPS1,String)
            End If
            If (Original_SHUTDATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SHUTDATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_VARIANCECHECK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_VARIANCECHECK,String)
            End If
            If (Original_VARIANCECOMMENTS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_VARIANCECOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal INTVOCTONS As Decimal,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal NUMPART70FEE As Decimal,  _
                    ByVal NUMSMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STRNSPSREASON As String,  _
                    ByVal STROPERATE As String,  _
                    ByVal NUMFEERATE As Decimal,  _
                    ByVal STRNSPSEXEMPTREASON As String,  _
                    ByVal STRPART70 As String,  _
                    ByVal STRSYNTHETICMINOR As String,  _
                    ByVal NUMCALCULATEDFEE As Decimal,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String,  _
                    ByVal SHUTDATE As Global.System.Nullable(Of Date),  _
                    ByVal VARIANCECHECK As String,  _
                    ByVal VARIANCECOMMENTS As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(INTYEAR,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(INTVOCTONS,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(INTPMTONS,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(INTSO2TONS,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(INTNOXTONS,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(NUMPART70FEE,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(NUMSMFEE,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(NUMNSPSFEE,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(NUMTOTALFEE,Decimal)
            If (STRNSPSEXEMPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRNSPSEXEMPT")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STRNSPSEXEMPT,String)
            End If
            If (STRNSPSREASON Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRNSPSREASON")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRNSPSREASON,String)
            End If
            If (STROPERATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STROPERATE")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STROPERATE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(NUMFEERATE,Decimal)
            If (STRNSPSEXEMPTREASON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STRNSPSEXEMPTREASON,String)
            End If
            If (STRPART70 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRPART70")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STRPART70,String)
            End If
            If (STRSYNTHETICMINOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRSYNTHETICMINOR")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STRSYNTHETICMINOR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(NUMCALCULATEDFEE,Decimal)
            If (STRCLASS1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(STRCLASS1,String)
            End If
            If (STRNSPS1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(STRNSPS1,String)
            End If
            If (SHUTDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SHUTDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (VARIANCECHECK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(VARIANCECHECK,String)
            End If
            If (VARIANCECOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(VARIANCECOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal INTVOCTONS As Decimal,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal NUMPART70FEE As Decimal,  _
                    ByVal NUMSMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STRNSPSREASON As String,  _
                    ByVal STROPERATE As String,  _
                    ByVal NUMFEERATE As Decimal,  _
                    ByVal STRNSPSEXEMPTREASON As String,  _
                    ByVal STRPART70 As String,  _
                    ByVal STRSYNTHETICMINOR As String,  _
                    ByVal NUMCALCULATEDFEE As Decimal,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String,  _
                    ByVal SHUTDATE As Global.System.Nullable(Of Date),  _
                    ByVal VARIANCECHECK As String,  _
                    ByVal VARIANCECOMMENTS As String,  _
                    ByVal Original_STRAIRSNUMBER As String,  _
                    ByVal Original_INTYEAR As Decimal,  _
                    ByVal Original_INTVOCTONS As Decimal,  _
                    ByVal Original_INTPMTONS As Decimal,  _
                    ByVal Original_INTSO2TONS As Decimal,  _
                    ByVal Original_INTNOXTONS As Decimal,  _
                    ByVal Original_NUMPART70FEE As Decimal,  _
                    ByVal Original_NUMSMFEE As Decimal,  _
                    ByVal Original_NUMNSPSFEE As Decimal,  _
                    ByVal Original_NUMTOTALFEE As Decimal,  _
                    ByVal Original_STRNSPSEXEMPT As String,  _
                    ByVal Original_STRNSPSREASON As String,  _
                    ByVal Original_STROPERATE As String,  _
                    ByVal Original_NUMFEERATE As Decimal,  _
                    ByVal Original_STRNSPSEXEMPTREASON As String,  _
                    ByVal Original_STRPART70 As String,  _
                    ByVal Original_STRSYNTHETICMINOR As String,  _
                    ByVal Original_NUMCALCULATEDFEE As Decimal,  _
                    ByVal Original_STRCLASS1 As String,  _
                    ByVal Original_STRNSPS1 As String,  _
                    ByVal Original_SHUTDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_VARIANCECHECK As String,  _
                    ByVal Original_VARIANCECOMMENTS As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(INTYEAR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(INTVOCTONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(INTPMTONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(INTSO2TONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(INTNOXTONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NUMPART70FEE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(NUMSMFEE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(NUMNSPSFEE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(NUMTOTALFEE,Decimal)
            If (STRNSPSEXEMPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRNSPSEXEMPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(STRNSPSEXEMPT,String)
            End If
            If (STRNSPSREASON Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRNSPSREASON")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(STRNSPSREASON,String)
            End If
            If (STROPERATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STROPERATE")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(STROPERATE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NUMFEERATE,Decimal)
            If (STRNSPSEXEMPTREASON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(STRNSPSEXEMPTREASON,String)
            End If
            If (STRPART70 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRPART70")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(STRPART70,String)
            End If
            If (STRSYNTHETICMINOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRSYNTHETICMINOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(STRSYNTHETICMINOR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NUMCALCULATEDFEE,Decimal)
            If (STRCLASS1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(STRCLASS1,String)
            End If
            If (STRNSPS1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(STRNSPS1,String)
            End If
            If (SHUTDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SHUTDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (VARIANCECHECK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(VARIANCECHECK,String)
            End If
            If (VARIANCECOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(VARIANCECOMMENTS,String)
            End If
            If (Original_STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRAIRSNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_STRAIRSNUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_INTYEAR,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_INTVOCTONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_INTPMTONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_INTSO2TONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_INTNOXTONS,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_NUMPART70FEE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_NUMSMFEE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_NUMNSPSFEE,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_NUMTOTALFEE,Decimal)
            If (Original_STRNSPSEXEMPT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRNSPSEXEMPT")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_STRNSPSEXEMPT,String)
            End If
            If (Original_STRNSPSREASON Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRNSPSREASON")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_STRNSPSREASON,String)
            End If
            If (Original_STROPERATE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STROPERATE")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_STROPERATE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_NUMFEERATE,Decimal)
            If (Original_STRNSPSEXEMPTREASON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_STRNSPSEXEMPTREASON,String)
            End If
            If (Original_STRPART70 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRPART70")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_STRPART70,String)
            End If
            If (Original_STRSYNTHETICMINOR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRSYNTHETICMINOR")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_STRSYNTHETICMINOR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_NUMCALCULATEDFEE,Decimal)
            If (Original_STRCLASS1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_STRCLASS1,String)
            End If
            If (Original_STRNSPS1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_STRNSPS1,String)
            End If
            If (Original_SHUTDATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_SHUTDATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_VARIANCECHECK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_VARIANCECHECK,String)
            End If
            If (Original_VARIANCECOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_VARIANCECOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal INTVOCTONS As Decimal,  _
                    ByVal INTPMTONS As Decimal,  _
                    ByVal INTSO2TONS As Decimal,  _
                    ByVal INTNOXTONS As Decimal,  _
                    ByVal NUMPART70FEE As Decimal,  _
                    ByVal NUMSMFEE As Decimal,  _
                    ByVal NUMNSPSFEE As Decimal,  _
                    ByVal NUMTOTALFEE As Decimal,  _
                    ByVal STRNSPSEXEMPT As String,  _
                    ByVal STRNSPSREASON As String,  _
                    ByVal STROPERATE As String,  _
                    ByVal NUMFEERATE As Decimal,  _
                    ByVal STRNSPSEXEMPTREASON As String,  _
                    ByVal STRPART70 As String,  _
                    ByVal STRSYNTHETICMINOR As String,  _
                    ByVal NUMCALCULATEDFEE As Decimal,  _
                    ByVal STRCLASS1 As String,  _
                    ByVal STRNSPS1 As String,  _
                    ByVal SHUTDATE As Global.System.Nullable(Of Date),  _
                    ByVal VARIANCECHECK As String,  _
                    ByVal VARIANCECOMMENTS As String,  _
                    ByVal Original_STRAIRSNUMBER As String,  _
                    ByVal Original_INTYEAR As Decimal,  _
                    ByVal Original_INTVOCTONS As Decimal,  _
                    ByVal Original_INTPMTONS As Decimal,  _
                    ByVal Original_INTSO2TONS As Decimal,  _
                    ByVal Original_INTNOXTONS As Decimal,  _
                    ByVal Original_NUMPART70FEE As Decimal,  _
                    ByVal Original_NUMSMFEE As Decimal,  _
                    ByVal Original_NUMNSPSFEE As Decimal,  _
                    ByVal Original_NUMTOTALFEE As Decimal,  _
                    ByVal Original_STRNSPSEXEMPT As String,  _
                    ByVal Original_STRNSPSREASON As String,  _
                    ByVal Original_STROPERATE As String,  _
                    ByVal Original_NUMFEERATE As Decimal,  _
                    ByVal Original_STRNSPSEXEMPTREASON As String,  _
                    ByVal Original_STRPART70 As String,  _
                    ByVal Original_STRSYNTHETICMINOR As String,  _
                    ByVal Original_NUMCALCULATEDFEE As Decimal,  _
                    ByVal Original_STRCLASS1 As String,  _
                    ByVal Original_STRNSPS1 As String,  _
                    ByVal Original_SHUTDATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_VARIANCECHECK As String,  _
                    ByVal Original_VARIANCECOMMENTS As String) As Integer
            Return Me.Update(Original_STRAIRSNUMBER, Original_INTYEAR, INTVOCTONS, INTPMTONS, INTSO2TONS, INTNOXTONS, NUMPART70FEE, NUMSMFEE, NUMNSPSFEE, NUMTOTALFEE, STRNSPSEXEMPT, STRNSPSREASON, STROPERATE, NUMFEERATE, STRNSPSEXEMPTREASON, STRPART70, STRSYNTHETICMINOR, NUMCALCULATEDFEE, STRCLASS1, STRNSPS1, SHUTDATE, VARIANCECHECK, VARIANCECOMMENTS, Original_STRAIRSNUMBER, Original_INTYEAR, Original_INTVOCTONS, Original_INTPMTONS, Original_INTSO2TONS, Original_INTNOXTONS, Original_NUMPART70FEE, Original_NUMSMFEE, Original_NUMNSPSFEE, Original_NUMTOTALFEE, Original_STRNSPSEXEMPT, Original_STRNSPSREASON, Original_STROPERATE, Original_NUMFEERATE, Original_STRNSPSEXEMPTREASON, Original_STRPART70, Original_STRSYNTHETICMINOR, Original_NUMCALCULATEDFEE, Original_STRCLASS1, Original_STRNSPS1, Original_SHUTDATE, Original_VARIANCECHECK, Original_VARIANCECOMMENTS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FSPAYANDSUBMITTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FSPAYANDSUBMIT"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("STRPAYMENTTYPE", "STRPAYMENTTYPE")
            tableMapping.ColumnMappings.Add("INTSUBMITTAL", "INTSUBMITTAL")
            tableMapping.ColumnMappings.Add("STROFFICIALNAME", "STROFFICIALNAME")
            tableMapping.ColumnMappings.Add("STROFFICIALTITLE", "STROFFICIALTITLE")
            tableMapping.ColumnMappings.Add("DATESUBMIT", "DATESUBMIT")
            tableMapping.ColumnMappings.Add("STRCOMMENTS", "STRCOMMENTS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AIRBRANCH"".""FSPAYANDSUBMIT"" WHERE ((""STRAIRSNUMBER"" = ?) AND (""INTYE"& _ 
                "AR"" = ?) AND (""STRPAYMENTTYPE"" = ?) AND (""INTSUBMITTAL"" = ?) AND (""STROFFICIALNA"& _ 
                "ME"" = ?) AND (""STROFFICIALTITLE"" = ?) AND (""DATESUBMIT"" = ?) AND ((? = 1 AND ""ST"& _ 
                "RCOMMENTS"" IS NULL) OR (""STRCOMMENTS"" = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRPAYMENTTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYMENTTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTSUBMITTAL", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(1,Byte), CType(0,Byte), "INTSUBMITTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STROFFICIALNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALNAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STROFFICIALTITLE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALTITLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DATESUBMIT", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATESUBMIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""FSPAYANDSUBMIT"" (""STRAIRSNUMBER"", ""INTYEAR"", ""STRPAYMENT"& _ 
                "TYPE"", ""INTSUBMITTAL"", ""STROFFICIALNAME"", ""STROFFICIALTITLE"", ""DATESUBMIT"", ""STR"& _ 
                "COMMENTS"") VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRPAYMENTTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYMENTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTSUBMITTAL", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(1,Byte), CType(0,Byte), "INTSUBMITTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROFFICIALNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROFFICIALTITLE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATESUBMIT", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATESUBMIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AIRBRANCH"".""FSPAYANDSUBMIT"" SET ""STRAIRSNUMBER"" = ?, ""INTYEAR"" = ?, ""STRP"& _ 
                "AYMENTTYPE"" = ?, ""INTSUBMITTAL"" = ?, ""STROFFICIALNAME"" = ?, ""STROFFICIALTITLE"" ="& _ 
                " ?, ""DATESUBMIT"" = ?, ""STRCOMMENTS"" = ? WHERE ((""STRAIRSNUMBER"" = ?) AND (""INTYE"& _ 
                "AR"" = ?) AND (""STRPAYMENTTYPE"" = ?) AND (""INTSUBMITTAL"" = ?) AND (""STROFFICIALNA"& _ 
                "ME"" = ?) AND (""STROFFICIALTITLE"" = ?) AND (""DATESUBMIT"" = ?) AND ((? = 1 AND ""ST"& _ 
                "RCOMMENTS"" IS NULL) OR (""STRCOMMENTS"" = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRPAYMENTTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYMENTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("INTSUBMITTAL", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(1,Byte), CType(0,Byte), "INTSUBMITTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROFFICIALNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STROFFICIALTITLE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATESUBMIT", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATESUBMIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRAIRSNUMBER", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTYEAR", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(38,Byte), CType(0,Byte), "INTYEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRPAYMENTTYPE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRPAYMENTTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_INTSUBMITTAL", Global.System.Data.OleDb.OleDbType.Numeric, 0, Global.System.Data.ParameterDirection.Input, CType(1,Byte), CType(0,Byte), "INTSUBMITTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STROFFICIALNAME", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALNAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STROFFICIALTITLE", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STROFFICIALTITLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DATESUBMIT", Global.System.Data.OleDb.OleDbType.DBTimeStamp, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATESUBMIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STRCOMMENTS", Global.System.Data.OleDb.OleDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STRCOMMENTS", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTYEAR"", ""STRPAYMENTTYPE"", ""INTSUBMITTAL"", ""STROFFICIAL"& _ 
                "NAME"", ""STROFFICIALTITLE"", ""DATESUBMIT"", ""STRCOMMENTS"" FROM ""AIRBRANCH"".""FSPAYAN"& _ 
                "DSUBMIT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FSPAYANDSUBMITDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FSPAYANDSUBMITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FSPAYANDSUBMITDataTable = New dsIAIP.FSPAYANDSUBMITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsIAIP.FSPAYANDSUBMITDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsIAIP) As Integer
            Return Me.Adapter.Update(dataSet, "FSPAYANDSUBMIT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_STRAIRSNUMBER As String, ByVal Original_INTYEAR As Decimal, ByVal Original_STRPAYMENTTYPE As String, ByVal Original_INTSUBMITTAL As Decimal, ByVal Original_STROFFICIALNAME As String, ByVal Original_STROFFICIALTITLE As String, ByVal Original_DATESUBMIT As Date, ByVal Original_STRCOMMENTS As String) As Integer
            If (Original_STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRAIRSNUMBER")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STRAIRSNUMBER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_INTYEAR,Decimal)
            If (Original_STRPAYMENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRPAYMENTTYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STRPAYMENTTYPE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_INTSUBMITTAL,Decimal)
            If (Original_STROFFICIALNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STROFFICIALNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_STROFFICIALNAME,String)
            End If
            If (Original_STROFFICIALTITLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STROFFICIALTITLE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_STROFFICIALTITLE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DATESUBMIT,Date)
            If (Original_STRCOMMENTS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_STRCOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STRAIRSNUMBER As String, ByVal INTYEAR As Decimal, ByVal STRPAYMENTTYPE As String, ByVal INTSUBMITTAL As Decimal, ByVal STROFFICIALNAME As String, ByVal STROFFICIALTITLE As String, ByVal DATESUBMIT As Date, ByVal STRCOMMENTS As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(INTYEAR,Decimal)
            If (STRPAYMENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRPAYMENTTYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRPAYMENTTYPE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(INTSUBMITTAL,Decimal)
            If (STROFFICIALNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STROFFICIALNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STROFFICIALNAME,String)
            End If
            If (STROFFICIALTITLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STROFFICIALTITLE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STROFFICIALTITLE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(DATESUBMIT,Date)
            If (STRCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRCOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal INTYEAR As Decimal,  _
                    ByVal STRPAYMENTTYPE As String,  _
                    ByVal INTSUBMITTAL As Decimal,  _
                    ByVal STROFFICIALNAME As String,  _
                    ByVal STROFFICIALTITLE As String,  _
                    ByVal DATESUBMIT As Date,  _
                    ByVal STRCOMMENTS As String,  _
                    ByVal Original_STRAIRSNUMBER As String,  _
                    ByVal Original_INTYEAR As Decimal,  _
                    ByVal Original_STRPAYMENTTYPE As String,  _
                    ByVal Original_INTSUBMITTAL As Decimal,  _
                    ByVal Original_STROFFICIALNAME As String,  _
                    ByVal Original_STROFFICIALTITLE As String,  _
                    ByVal Original_DATESUBMIT As Date,  _
                    ByVal Original_STRCOMMENTS As String) As Integer
            If (STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRAIRSNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STRAIRSNUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(INTYEAR,Decimal)
            If (STRPAYMENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STRPAYMENTTYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(STRPAYMENTTYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(INTSUBMITTAL,Decimal)
            If (STROFFICIALNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STROFFICIALNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(STROFFICIALNAME,String)
            End If
            If (STROFFICIALTITLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STROFFICIALTITLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(STROFFICIALTITLE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DATESUBMIT,Date)
            If (STRCOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(STRCOMMENTS,String)
            End If
            If (Original_STRAIRSNUMBER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRAIRSNUMBER")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_STRAIRSNUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_INTYEAR,Decimal)
            If (Original_STRPAYMENTTYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STRPAYMENTTYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_STRPAYMENTTYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_INTSUBMITTAL,Decimal)
            If (Original_STROFFICIALNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STROFFICIALNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_STROFFICIALNAME,String)
            End If
            If (Original_STROFFICIALTITLE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STROFFICIALTITLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_STROFFICIALTITLE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DATESUBMIT,Date)
            If (Original_STRCOMMENTS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_STRCOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STRPAYMENTTYPE As String, ByVal INTSUBMITTAL As Decimal, ByVal STROFFICIALNAME As String, ByVal STROFFICIALTITLE As String, ByVal DATESUBMIT As Date, ByVal STRCOMMENTS As String, ByVal Original_STRAIRSNUMBER As String, ByVal Original_INTYEAR As Decimal, ByVal Original_STRPAYMENTTYPE As String, ByVal Original_INTSUBMITTAL As Decimal, ByVal Original_STROFFICIALNAME As String, ByVal Original_STROFFICIALTITLE As String, ByVal Original_DATESUBMIT As Date, ByVal Original_STRCOMMENTS As String) As Integer
            Return Me.Update(Original_STRAIRSNUMBER, Original_INTYEAR, STRPAYMENTTYPE, INTSUBMITTAL, STROFFICIALNAME, STROFFICIALTITLE, DATESUBMIT, STRCOMMENTS, Original_STRAIRSNUMBER, Original_INTYEAR, Original_STRPAYMENTTYPE, Original_INTSUBMITTAL, Original_STROFFICIALNAME, Original_STROFFICIALTITLE, Original_DATESUBMIT, Original_STRCOMMENTS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FEEREPORTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FEEREPORT"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRFACILITYSTREET1", "STRFACILITYSTREET1")
            tableMapping.ColumnMappings.Add("STRFACILITYCITY", "STRFACILITYCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTTITLE", "STRCONTACTTITLE")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("INTVOCTONS", "INTVOCTONS")
            tableMapping.ColumnMappings.Add("INTPMTONS", "INTPMTONS")
            tableMapping.ColumnMappings.Add("INTNOXTONS", "INTNOXTONS")
            tableMapping.ColumnMappings.Add("INTSO2TONS", "INTSO2TONS")
            tableMapping.ColumnMappings.Add("NUMTOTALPART70FEE", "NUMTOTALPART70FEE")
            tableMapping.ColumnMappings.Add("NUMPART70SMFEE", "NUMPART70SMFEE")
            tableMapping.ColumnMappings.Add("NUMNSPSFEE", "NUMNSPSFEE")
            tableMapping.ColumnMappings.Add("NUMTOTALFEE", "NUMTOTALFEE")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPT", "STRNSPSEXEMPT")
            tableMapping.ColumnMappings.Add("STRCLASS1", "STRCLASS1")
            tableMapping.ColumnMappings.Add("STRNSPS1", "STRNSPS1")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPTREASON", "STRNSPSEXEMPTREASON")
            tableMapping.ColumnMappings.Add("STRPAYMENTTYPE", "STRPAYMENTTYPE")
            tableMapping.ColumnMappings.Add("STROFFICIALNAME", "STROFFICIALNAME")
            tableMapping.ColumnMappings.Add("STROFFICIALTITLE", "STROFFICIALTITLE")
            tableMapping.ColumnMappings.Add("STRCOMMENTS", "STRCOMMENTS")
            tableMapping.ColumnMappings.Add("DATESUBMIT", "DATESUBMIT")
            tableMapping.ColumnMappings.Add("SHUTDATE", "SHUTDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""STRFACILITYSTREET1"", ""STRFACILITYCITY"& _ 
                """, ""STRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""STRCONTACTTITLE"", ""STRCONTACTPH"& _ 
                "ONENUMBER1"", ""STRCONTACTFAXNUMBER"", ""STRCONTACTEMAIL"", ""STRCONTACTADDRESS1"", ""ST"& _ 
                "RCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIPCODE"", ""INTYEAR"", ""INTVOCTONS"", "& _ 
                """INTPMTONS"", ""INTNOXTONS"", ""INTSO2TONS"", ""NUMTOTALPART70FEE"", ""NUMPART70SMFEE"", "& _ 
                """NUMNSPSFEE"", ""NUMTOTALFEE"", ""STROPERATE"", ""STRNSPSEXEMPT"", ""STRCLASS1"", ""STRNSP"& _ 
                "S1"", ""STRNSPSEXEMPTREASON"", ""STRPAYMENTTYPE"", ""STROFFICIALNAME"", ""STROFFICIALTIT"& _ 
                "LE"", ""STRCOMMENTS"", ""DATESUBMIT"", ""SHUTDATE"" FROM ""AIRBRANCH"".""FEEREPORT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FEEREPORTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FEEREPORTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FEEREPORTDataTable = New dsIAIP.FEEREPORTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FEESDUETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FEESDUE"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("TOTALDUE", "TOTALDUE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTYEAR"", ""TOTALDUE"" FROM ""AIRBRANCH"".""FEESDUE"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FEESDUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FEESDUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FEESDUEDataTable = New dsIAIP.FEESDUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FEESNONRESPONDENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FEESNONRESPONDENT"
            tableMapping.ColumnMappings.Add("AIRSNO", "AIRSNO")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("FACILITYNAME", "FACILITYNAME")
            tableMapping.ColumnMappings.Add("FIRSTNAME", "FIRSTNAME")
            tableMapping.ColumnMappings.Add("LASTNAME", "LASTNAME")
            tableMapping.ColumnMappings.Add("TITLE", "TITLE")
            tableMapping.ColumnMappings.Add("CONTACTCOMPANY", "CONTACTCOMPANY")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("CITY", "CITY")
            tableMapping.ColumnMappings.Add("STATE", "STATE")
            tableMapping.ColumnMappings.Add("ZIP", "ZIP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""AIRSNO"", ""INTYEAR"", ""FACILITYNAME"", ""FIRSTNAME"", ""LASTNAME"", ""TITLE"", ""CO"& _ 
                "NTACTCOMPANY"", ""ADDRESS"", ""CITY"", ""STATE"", ""ZIP"" FROM ""AIRBRANCH"".""FEESNONRESPON"& _ 
                "DENT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FEESNONRESPONDENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FEESNONRESPONDENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FEESNONRESPONDENTDataTable = New dsIAIP.FEESNONRESPONDENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FEEVARIANCETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FEEVARIANCE"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("DIFFERENCE2005", "DIFFERENCE2005")
            tableMapping.ColumnMappings.Add("DIFFERENCE2006", "DIFFERENCE2006")
            tableMapping.ColumnMappings.Add("FEE2004", "FEE2004")
            tableMapping.ColumnMappings.Add("FEE2005", "FEE2005")
            tableMapping.ColumnMappings.Add("FEE2006", "FEE2006")
            tableMapping.ColumnMappings.Add("VCHECK2005", "VCHECK2005")
            tableMapping.ColumnMappings.Add("VCHECK2006", "VCHECK2006")
            tableMapping.ColumnMappings.Add("COMMENTS2005", "COMMENTS2005")
            tableMapping.ColumnMappings.Add("COMMENTS2006", "COMMENTS2006")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""DIFFERENCE2005"", ""DIFFERENCE2006"", ""FEE2004"", ""FEE2005"","& _ 
                " ""FEE2006"", ""VCHECK2005"", ""VCHECK2006"", ""COMMENTS2005"", ""COMMENTS2006"" FROM ""AIR"& _ 
                "BRANCH"".""FEEVARIANCE"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.FEEVARIANCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.FEEVARIANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.FEEVARIANCEDataTable = New dsIAIP.FEEVARIANCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_AUDIT_REPORTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_AUDIT_REPORT"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("TOTALDUE", "TOTALDUE")
            tableMapping.ColumnMappings.Add("TOTALPAID", "TOTALPAID")
            tableMapping.ColumnMappings.Add("PAIDYEAR", "PAIDYEAR")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLAST"& _ 
                "NAME"", ""STRCONTACTADDRESS1"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIP"& _ 
                "CODE"", ""INTYEAR"", ""TOTALDUE"", ""TOTALPAID"", ""PAIDYEAR"" FROM ""AIRBRANCH"".""VW_AUDIT"& _ 
                "_REPORT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_AUDIT_REPORTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_AUDIT_REPORTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_AUDIT_REPORTDataTable = New dsIAIP.VW_AUDIT_REPORTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_BANKRUPTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_BANKRUPT"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("ISBANKRUPT", "ISBANKRUPT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLAST"& _ 
                "NAME"", ""STRCONTACTPHONENUMBER1"", ""STRCONTACTFAXNUMBER"", ""STRCONTACTEMAIL"", ""STRC"& _ 
                "ONTACTADDRESS1"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIPCODE"", ""ISBA"& _ 
                "NKRUPT"" FROM ""AIRBRANCH"".""VW_BANKRUPT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_BANKRUPTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_BANKRUPTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_BANKRUPTDataTable = New dsIAIP.VW_BANKRUPTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_CLASS_CHANGEDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_CLASS_CHANGED"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("STRCLASS1", "STRCLASS1")
            tableMapping.ColumnMappings.Add("STRCLASS", "STRCLASS")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""INTYEAR"", ""STRCLASS1"", ""STRCLASS"", ""STRCONTACTFIRSTNAME"""& _ 
                ", ""STRCONTACTLASTNAME"", ""STRCONTACTPHONENUMBER1"" FROM ""AIRBRANCH"".""VW_CLASS_CHAN"& _ 
                "GED"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_CLASS_CHANGEDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_CLASS_CHANGEDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_CLASS_CHANGEDDataTable = New dsIAIP.VW_CLASS_CHANGEDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_FACILITY_BALANCETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_FACILITY_BALANCE"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("TOTALDUE", "TOTALDUE")
            tableMapping.ColumnMappings.Add("PAIDYEAR", "PAIDYEAR")
            tableMapping.ColumnMappings.Add("TOTALPAID", "TOTALPAID")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("STRSICCODE", "STRSICCODE")
            tableMapping.ColumnMappings.Add("STRPAYMENTTYPE", "STRPAYMENTTYPE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""INTYEAR"", ""TOTALDUE"", ""PAIDYEAR"", ""TO"& _ 
                "TALPAID"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""STRCONTACTPHONENUMBER1"","& _ 
                " ""STRCONTACTFAXNUMBER"", ""STRCONTACTEMAIL"", ""STRCONTACTADDRESS1"", ""STRCONTACTCITY"& _ 
                """, ""STRCONTACTSTATE"", ""STRCONTACTZIPCODE"", ""STRSICCODE"", ""STRPAYMENTTYPE"" FROM """& _ 
                "AIRBRANCH"".""VW_FACILITY_BALANCE"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_FACILITY_BALANCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_FACILITY_BALANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_FACILITY_BALANCEDataTable = New dsIAIP.VW_FACILITY_BALANCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_FACILITY_FEETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_FACILITY_FEE"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("TOTALDUE", "TOTALDUE")
            tableMapping.ColumnMappings.Add("TOTALPAID", "TOTALPAID")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("INTVOCTONS", "INTVOCTONS")
            tableMapping.ColumnMappings.Add("INTPMTONS", "INTPMTONS")
            tableMapping.ColumnMappings.Add("INTSO2TONS", "INTSO2TONS")
            tableMapping.ColumnMappings.Add("INTNOXTONS", "INTNOXTONS")
            tableMapping.ColumnMappings.Add("NUMSMFEE", "NUMSMFEE")
            tableMapping.ColumnMappings.Add("NUMNSPSFEE", "NUMNSPSFEE")
            tableMapping.ColumnMappings.Add("NUMTOTALFEE", "NUMTOTALFEE")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPT", "STRNSPSEXEMPT")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPTREASON", "STRNSPSEXEMPTREASON")
            tableMapping.ColumnMappings.Add("NUMCALCULATEDFEE", "NUMCALCULATEDFEE")
            tableMapping.ColumnMappings.Add("STRCLASS1", "STRCLASS1")
            tableMapping.ColumnMappings.Add("STRNSPS1", "STRNSPS1")
            tableMapping.ColumnMappings.Add("SHUTDATE", "SHUTDATE")
            tableMapping.ColumnMappings.Add("STRPAYMENTTYPE", "STRPAYMENTTYPE")
            tableMapping.ColumnMappings.Add("STROFFICIALNAME", "STROFFICIALNAME")
            tableMapping.ColumnMappings.Add("STROFFICIALTITLE", "STROFFICIALTITLE")
            tableMapping.ColumnMappings.Add("DATESUBMIT", "DATESUBMIT")
            tableMapping.ColumnMappings.Add("STRCOMMENTS", "STRCOMMENTS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""INTYEAR"", ""TOTALDUE"", ""TOTALPAID"", ""S"& _ 
                "TRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""STRCONTACTPHONENUMBER1"", ""STRCONTACT"& _ 
                "FAXNUMBER"", ""STRCONTACTEMAIL"", ""STRCONTACTADDRESS1"", ""STRCONTACTCITY"", ""STRCONTA"& _ 
                "CTSTATE"", ""STRCONTACTZIPCODE"", ""INTVOCTONS"", ""INTPMTONS"", ""INTSO2TONS"", ""INTNOXT"& _ 
                "ONS"", ""NUMSMFEE"", ""NUMNSPSFEE"", ""NUMTOTALFEE"", ""STRNSPSEXEMPT"", ""STROPERATE"", ""S"& _ 
                "TRNSPSEXEMPTREASON"", ""NUMCALCULATEDFEE"", ""STRCLASS1"", ""STRNSPS1"", ""SHUTDATE"", ""S"& _ 
                "TRPAYMENTTYPE"", ""STROFFICIALNAME"", ""STROFFICIALTITLE"", ""DATESUBMIT"", ""STRCOMMENT"& _ 
                "S"" FROM ""AIRBRANCH"".""VW_FACILITY_FEE"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_FACILITY_FEEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_FACILITY_FEEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_FACILITY_FEEDataTable = New dsIAIP.VW_FACILITY_FEEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_FACILITY_INFOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_FACILITY_INFO"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRFACILITYSTREET1", "STRFACILITYSTREET1")
            tableMapping.ColumnMappings.Add("STRFACILITYCITY", "STRFACILITYCITY")
            tableMapping.ColumnMappings.Add("STRAIRSNUMBERTEMP", "STRAIRSNUMBERTEMP")
            tableMapping.ColumnMappings.Add("STRFACILITYNAMETEMP", "STRFACILITYNAMETEMP")
            tableMapping.ColumnMappings.Add("STRFACILITYSTREET1TEMP", "STRFACILITYSTREET1TEMP")
            tableMapping.ColumnMappings.Add("STRFACILITYCITYTEMP", "STRFACILITYCITYTEMP")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTCOMPANYNAME", "STRCONTACTCOMPANYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""STRFACILITYSTREET1"", ""STRFACILITYCITY"& _ 
                """, ""STRAIRSNUMBERTEMP"", ""STRFACILITYNAMETEMP"", ""STRFACILITYSTREET1TEMP"", ""STRFAC"& _ 
                "ILITYCITYTEMP"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""STRCONTACTCOMPANYN"& _ 
                "AME"", ""STRCONTACTPHONENUMBER1"", ""STRCONTACTEMAIL"" FROM ""AIRBRANCH"".""VW_FACILITY_"& _ 
                "INFO"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_FACILITY_INFODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_FACILITY_INFODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_FACILITY_INFODataTable = New dsIAIP.VW_FACILITY_INFODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_FEES_BY_AIRSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_FEES_BY_AIRS"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("NUMPAYMENT", "NUMPAYMENT")
            tableMapping.ColumnMappings.Add("DATPAYDATE", "DATPAYDATE")
            tableMapping.ColumnMappings.Add("STRCHECKNO", "STRCHECKNO")
            tableMapping.ColumnMappings.Add("STRDEPOSITNO", "STRDEPOSITNO")
            tableMapping.ColumnMappings.Add("STRPAYTYPE", "STRPAYTYPE")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("INTVOCTONS", "INTVOCTONS")
            tableMapping.ColumnMappings.Add("INTPMTONS", "INTPMTONS")
            tableMapping.ColumnMappings.Add("INTSO2TONS", "INTSO2TONS")
            tableMapping.ColumnMappings.Add("INTNOXTONS", "INTNOXTONS")
            tableMapping.ColumnMappings.Add("NUMPART70FEE", "NUMPART70FEE")
            tableMapping.ColumnMappings.Add("NUMSMFEE", "NUMSMFEE")
            tableMapping.ColumnMappings.Add("NUMNSPSFEE", "NUMNSPSFEE")
            tableMapping.ColumnMappings.Add("NUMTOTALFEE", "NUMTOTALFEE")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPT", "STRNSPSEXEMPT")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("NUMCALCULATEDFEE", "NUMCALCULATEDFEE")
            tableMapping.ColumnMappings.Add("STRCLASS1", "STRCLASS1")
            tableMapping.ColumnMappings.Add("STRNSPS1", "STRNSPS1")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""NUMPAYMENT"", ""DATPAYDATE"", ""STRCHECKN"& _ 
                "O"", ""STRDEPOSITNO"", ""STRPAYTYPE"", ""INTYEAR"", ""INTVOCTONS"", ""INTPMTONS"", ""INTSO2T"& _ 
                "ONS"", ""INTNOXTONS"", ""NUMPART70FEE"", ""NUMSMFEE"", ""NUMNSPSFEE"", ""NUMTOTALFEE"", ""ST"& _ 
                "RNSPSEXEMPT"", ""STROPERATE"", ""NUMCALCULATEDFEE"", ""STRCLASS1"", ""STRNSPS1"" FROM ""AI"& _ 
                "RBRANCH"".""VW_FEES_BY_AIRS"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_FEES_BY_AIRSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_FEES_BY_AIRSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_FEES_BY_AIRSDataTable = New dsIAIP.VW_FEES_BY_AIRSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_NO_OPERATETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_NO_OPERATE"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTPHONENUMBER1", "STRCONTACTPHONENUMBER1")
            tableMapping.ColumnMappings.Add("STRCONTACTFAXNUMBER", "STRCONTACTFAXNUMBER")
            tableMapping.ColumnMappings.Add("STRCONTACTEMAIL", "STRCONTACTEMAIL")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("SHUTDATE", "SHUTDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLAST"& _ 
                "NAME"", ""STRCONTACTPHONENUMBER1"", ""STRCONTACTFAXNUMBER"", ""STRCONTACTEMAIL"", ""STRC"& _ 
                "ONTACTADDRESS1"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIPCODE"", ""INTY"& _ 
                "EAR"", ""STROPERATE"", ""SHUTDATE"" FROM ""AIRBRANCH"".""VW_NO_OPERATE"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_NO_OPERATEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_NO_OPERATEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_NO_OPERATEDataTable = New dsIAIP.VW_NO_OPERATEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_NONRESPONDENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_NONRESPONDENT"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRKEY", "STRKEY")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTTITLE", "STRCONTACTTITLE")
            tableMapping.ColumnMappings.Add("STRCONTACTCOMPANYNAME", "STRCONTACTCOMPANYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("INTSUBMITTAL", "INTSUBMITTAL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRFACILITYNAME"", ""STRKEY"", ""STRCONTACTFIRSTNAME"", ""STRC"& _ 
                "ONTACTLASTNAME"", ""STRCONTACTTITLE"", ""STRCONTACTCOMPANYNAME"", ""STRCONTACTADDRESS1"& _ 
                """, ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIPCODE"", ""INTYEAR"", ""INTSUBM"& _ 
                "ITTAL"" FROM ""AIRBRANCH"".""VW_NONRESPONDENT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_NONRESPONDENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_NONRESPONDENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_NONRESPONDENTDataTable = New dsIAIP.VW_NONRESPONDENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_NSPS_STATUSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_NSPS_STATUS"
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRNSPS1", "STRNSPS1")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPT", "STRNSPSEXEMPT")
            tableMapping.ColumnMappings.Add("STRNSPS", "STRNSPS")
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("STRNSPSEXEMPTREASON", "STRNSPSEXEMPTREASON")
            tableMapping.ColumnMappings.Add("STROPERATE", "STROPERATE")
            tableMapping.ColumnMappings.Add("SHUTDATE", "SHUTDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRAIRSNUMBER"", ""STRNSPS1"", ""STRNSPSEXEMPT"", ""STRNSPS"", ""INTYEAR"", ""STRNS"& _ 
                "PSEXEMPTREASON"", ""STROPERATE"", ""SHUTDATE"" FROM ""AIRBRANCH"".""VW_NSPS_STATUS"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_NSPS_STATUSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_NSPS_STATUSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_NSPS_STATUSDataTable = New dsIAIP.VW_NSPS_STATUSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_TITLE_V_RENEWALSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_TITLE_V_RENEWALS"
            tableMapping.ColumnMappings.Add("STRKEY", "STRKEY")
            tableMapping.ColumnMappings.Add("STRCONTACTFIRSTNAME", "STRCONTACTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTLASTNAME", "STRCONTACTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTCOMPANYNAME", "STRCONTACTCOMPANYNAME")
            tableMapping.ColumnMappings.Add("STRCONTACTADDRESS1", "STRCONTACTADDRESS1")
            tableMapping.ColumnMappings.Add("STRCONTACTCITY", "STRCONTACTCITY")
            tableMapping.ColumnMappings.Add("STRCONTACTSTATE", "STRCONTACTSTATE")
            tableMapping.ColumnMappings.Add("STRCONTACTZIPCODE", "STRCONTACTZIPCODE")
            tableMapping.ColumnMappings.Add("STRFACILITYNAME", "STRFACILITYNAME")
            tableMapping.ColumnMappings.Add("STRFACILITYCITY", "STRFACILITYCITY")
            tableMapping.ColumnMappings.Add("STROPERATIONALSTATUS", "STROPERATIONALSTATUS")
            tableMapping.ColumnMappings.Add("STRAPPLICATIONTYPE", "STRAPPLICATIONTYPE")
            tableMapping.ColumnMappings.Add("DATPERMITISSUED", "DATPERMITISSUED")
            tableMapping.ColumnMappings.Add("DATEFFECTIVE", "DATEFFECTIVE")
            tableMapping.ColumnMappings.Add("STRPERMITNUMBER", "STRPERMITNUMBER")
            tableMapping.ColumnMappings.Add("STRCLASS", "STRCLASS")
            tableMapping.ColumnMappings.Add("STRAPPLICATIONNUMBER", "STRAPPLICATIONNUMBER")
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("AIRSNUMBER", "AIRSNUMBER")
            tableMapping.ColumnMappings.Add("PERMITNUMBER", "PERMITNUMBER")
            tableMapping.ColumnMappings.Add("STRCOUNTYNAME", "STRCOUNTYNAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRKEY"", ""STRCONTACTFIRSTNAME"", ""STRCONTACTLASTNAME"", ""STRCONTACTCOMPANYN"& _ 
                "AME"", ""STRCONTACTADDRESS1"", ""STRCONTACTCITY"", ""STRCONTACTSTATE"", ""STRCONTACTZIPC"& _ 
                "ODE"", ""STRFACILITYNAME"", ""STRFACILITYCITY"", ""STROPERATIONALSTATUS"", ""STRAPPLICAT"& _ 
                "IONTYPE"", ""DATPERMITISSUED"", ""DATEFFECTIVE"", ""STRPERMITNUMBER"", ""STRCLASS"", ""STR"& _ 
                "APPLICATIONNUMBER"", ""STRAIRSNUMBER"", ""AIRSNUMBER"", ""PERMITNUMBER"", ""STRCOUNTYNAM"& _ 
                "E"" FROM ""AIRBRANCH"".""VW_TITLE_V_RENEWALS"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_TITLE_V_RENEWALSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_TITLE_V_RENEWALSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_TITLE_V_RENEWALSDataTable = New dsIAIP.VW_TITLE_V_RENEWALSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_TOTAL_FEETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_TOTAL_FEE"
            tableMapping.ColumnMappings.Add("INTYEAR", "INTYEAR")
            tableMapping.ColumnMappings.Add("INTVOCTONS", "INTVOCTONS")
            tableMapping.ColumnMappings.Add("INTPMTONS", "INTPMTONS")
            tableMapping.ColumnMappings.Add("INTSO2TONS", "INTSO2TONS")
            tableMapping.ColumnMappings.Add("INTNOXTONS", "INTNOXTONS")
            tableMapping.ColumnMappings.Add("NUMSMFEE", "NUMSMFEE")
            tableMapping.ColumnMappings.Add("NUMNSPSFEE", "NUMNSPSFEE")
            tableMapping.ColumnMappings.Add("NUMTOTALFEE", "NUMTOTALFEE")
            tableMapping.ColumnMappings.Add("NUMFEERATE", "NUMFEERATE")
            tableMapping.ColumnMappings.Add("TITLEVMINFEE", "TITLEVMINFEE")
            tableMapping.ColumnMappings.Add("TITLEVFEE", "TITLEVFEE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""INTYEAR"", ""INTVOCTONS"", ""INTPMTONS"", ""INTSO2TONS"", ""INTNOXTONS"", ""NUMSMFE"& _ 
                "E"", ""NUMNSPSFEE"", ""NUMTOTALFEE"", ""NUMFEERATE"", ""TITLEVMINFEE"", ""TITLEVFEE"" FROM "& _ 
                """AIRBRANCH"".""VW_TOTAL_FEE"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_TOTAL_FEEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_TOTAL_FEEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_TOTAL_FEEDataTable = New dsIAIP.VW_TOTAL_FEEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_TOTAL_PAYMENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_TOTAL_PAYMENT"
            tableMapping.ColumnMappings.Add("PAIDYEAR", "PAIDYEAR")
            tableMapping.ColumnMappings.Add("TOTALPAIDSUM", "TOTALPAIDSUM")
            tableMapping.ColumnMappings.Add("TOTALDUESUM", "TOTALDUESUM")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""PAIDYEAR"", ""TOTALPAIDSUM"", ""TOTALDUESUM"" FROM ""AIRBRANCH"".""VW_TOTAL_PAYME"& _ 
                "NT"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_TOTAL_PAYMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_TOTAL_PAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_TOTAL_PAYMENTDataTable = New dsIAIP.VW_TOTAL_PAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VW_TRAINING_REGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VW_TRAINING_REG"
            tableMapping.ColumnMappings.Add("STRUSEREMAIL", "STRUSEREMAIL")
            tableMapping.ColumnMappings.Add("STRFIRSTNAME", "STRFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRLASTNAME", "STRLASTNAME")
            tableMapping.ColumnMappings.Add("STRCOMPANYNAME", "STRCOMPANYNAME")
            tableMapping.ColumnMappings.Add("STRPHONENUMBER", "STRPHONENUMBER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.JohnGaltProject.My.MySettings.Default.IAIPconnPRD
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""STRUSEREMAIL"", ""STRFIRSTNAME"", ""STRLASTNAME"", ""STRCOMPANYNAME"", ""STRPHONE"& _ 
                "NUMBER"" FROM ""AIRBRANCH"".""VW_TRAINING_REG"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsIAIP.VW_TRAINING_REGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsIAIP.VW_TRAINING_REGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsIAIP.VW_TRAINING_REGDataTable = New dsIAIP.VW_TRAINING_REGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
