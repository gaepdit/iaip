'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3649
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsFullSBEAP"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsFullSBEAP
    Inherits Global.System.Data.DataSet
    
    Private tableLOOKUPSBEAPACCOUNTS As LOOKUPSBEAPACCOUNTSDataTable
    
    Private tableLOOKUPSBEAPCASEWORK As LOOKUPSBEAPCASEWORKDataTable
    
    Private tableLOOKUPSBEAPFORMS As LOOKUPSBEAPFORMSDataTable
    
    Private tableSBEAPACTIONLOG As SBEAPACTIONLOGDataTable
    
    Private tableSBEAPCASELOG As SBEAPCASELOGDataTable
    
    Private tableSBEAPCASELOGLINK As SBEAPCASELOGLINKDataTable
    
    Private tableSBEAPCLIENTCONTACTS As SBEAPCLIENTCONTACTSDataTable
    
    Private tableSBEAPCLIENTDATA As SBEAPCLIENTDATADataTable
    
    Private tableSBEAPCLIENTLINK As SBEAPCLIENTLINKDataTable
    
    Private tableSBEAPCLIENTS As SBEAPCLIENTSDataTable
    
    Private tableSBEAPCONFERENCELOG As SBEAPCONFERENCELOGDataTable
    
    Private tableSBEAPERRORLOG As SBEAPERRORLOGDataTable
    
    Private tableSBEAPOTHERLOG As SBEAPOTHERLOGDataTable
    
    Private tableSBEAPPERMISSIONS As SBEAPPERMISSIONSDataTable
    
    Private tableSBEAPPHONELOG As SBEAPPHONELOGDataTable
    
    Private tableSBEAPTECHNICALASSIST As SBEAPTECHNICALASSISTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LOOKUPSBEAPACCOUNTS")) Is Nothing) Then
                MyBase.Tables.Add(New LOOKUPSBEAPACCOUNTSDataTable(ds.Tables("LOOKUPSBEAPACCOUNTS")))
            End If
            If (Not (ds.Tables("LOOKUPSBEAPCASEWORK")) Is Nothing) Then
                MyBase.Tables.Add(New LOOKUPSBEAPCASEWORKDataTable(ds.Tables("LOOKUPSBEAPCASEWORK")))
            End If
            If (Not (ds.Tables("LOOKUPSBEAPFORMS")) Is Nothing) Then
                MyBase.Tables.Add(New LOOKUPSBEAPFORMSDataTable(ds.Tables("LOOKUPSBEAPFORMS")))
            End If
            If (Not (ds.Tables("SBEAPACTIONLOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPACTIONLOGDataTable(ds.Tables("SBEAPACTIONLOG")))
            End If
            If (Not (ds.Tables("SBEAPCASELOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCASELOGDataTable(ds.Tables("SBEAPCASELOG")))
            End If
            If (Not (ds.Tables("SBEAPCASELOGLINK")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCASELOGLINKDataTable(ds.Tables("SBEAPCASELOGLINK")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTCONTACTS")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTCONTACTSDataTable(ds.Tables("SBEAPCLIENTCONTACTS")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTDATA")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTDATADataTable(ds.Tables("SBEAPCLIENTDATA")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTLINK")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTLINKDataTable(ds.Tables("SBEAPCLIENTLINK")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTSDataTable(ds.Tables("SBEAPCLIENTS")))
            End If
            If (Not (ds.Tables("SBEAPCONFERENCELOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCONFERENCELOGDataTable(ds.Tables("SBEAPCONFERENCELOG")))
            End If
            If (Not (ds.Tables("SBEAPERRORLOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPERRORLOGDataTable(ds.Tables("SBEAPERRORLOG")))
            End If
            If (Not (ds.Tables("SBEAPOTHERLOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPOTHERLOGDataTable(ds.Tables("SBEAPOTHERLOG")))
            End If
            If (Not (ds.Tables("SBEAPPERMISSIONS")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPPERMISSIONSDataTable(ds.Tables("SBEAPPERMISSIONS")))
            End If
            If (Not (ds.Tables("SBEAPPHONELOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPPHONELOGDataTable(ds.Tables("SBEAPPHONELOG")))
            End If
            If (Not (ds.Tables("SBEAPTECHNICALASSIST")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPTECHNICALASSISTDataTable(ds.Tables("SBEAPTECHNICALASSIST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOOKUPSBEAPACCOUNTS() As LOOKUPSBEAPACCOUNTSDataTable
        Get
            Return Me.tableLOOKUPSBEAPACCOUNTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOOKUPSBEAPCASEWORK() As LOOKUPSBEAPCASEWORKDataTable
        Get
            Return Me.tableLOOKUPSBEAPCASEWORK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOOKUPSBEAPFORMS() As LOOKUPSBEAPFORMSDataTable
        Get
            Return Me.tableLOOKUPSBEAPFORMS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPACTIONLOG() As SBEAPACTIONLOGDataTable
        Get
            Return Me.tableSBEAPACTIONLOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCASELOG() As SBEAPCASELOGDataTable
        Get
            Return Me.tableSBEAPCASELOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCASELOGLINK() As SBEAPCASELOGLINKDataTable
        Get
            Return Me.tableSBEAPCASELOGLINK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCLIENTCONTACTS() As SBEAPCLIENTCONTACTSDataTable
        Get
            Return Me.tableSBEAPCLIENTCONTACTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCLIENTDATA() As SBEAPCLIENTDATADataTable
        Get
            Return Me.tableSBEAPCLIENTDATA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCLIENTLINK() As SBEAPCLIENTLINKDataTable
        Get
            Return Me.tableSBEAPCLIENTLINK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCLIENTS() As SBEAPCLIENTSDataTable
        Get
            Return Me.tableSBEAPCLIENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPCONFERENCELOG() As SBEAPCONFERENCELOGDataTable
        Get
            Return Me.tableSBEAPCONFERENCELOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPERRORLOG() As SBEAPERRORLOGDataTable
        Get
            Return Me.tableSBEAPERRORLOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPOTHERLOG() As SBEAPOTHERLOGDataTable
        Get
            Return Me.tableSBEAPOTHERLOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPPERMISSIONS() As SBEAPPERMISSIONSDataTable
        Get
            Return Me.tableSBEAPPERMISSIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPPHONELOG() As SBEAPPHONELOGDataTable
        Get
            Return Me.tableSBEAPPHONELOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SBEAPTECHNICALASSIST() As SBEAPTECHNICALASSISTDataTable
        Get
            Return Me.tableSBEAPTECHNICALASSIST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsFullSBEAP = CType(MyBase.Clone,dsFullSBEAP)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("LOOKUPSBEAPACCOUNTS")) Is Nothing) Then
                MyBase.Tables.Add(New LOOKUPSBEAPACCOUNTSDataTable(ds.Tables("LOOKUPSBEAPACCOUNTS")))
            End If
            If (Not (ds.Tables("LOOKUPSBEAPCASEWORK")) Is Nothing) Then
                MyBase.Tables.Add(New LOOKUPSBEAPCASEWORKDataTable(ds.Tables("LOOKUPSBEAPCASEWORK")))
            End If
            If (Not (ds.Tables("LOOKUPSBEAPFORMS")) Is Nothing) Then
                MyBase.Tables.Add(New LOOKUPSBEAPFORMSDataTable(ds.Tables("LOOKUPSBEAPFORMS")))
            End If
            If (Not (ds.Tables("SBEAPACTIONLOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPACTIONLOGDataTable(ds.Tables("SBEAPACTIONLOG")))
            End If
            If (Not (ds.Tables("SBEAPCASELOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCASELOGDataTable(ds.Tables("SBEAPCASELOG")))
            End If
            If (Not (ds.Tables("SBEAPCASELOGLINK")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCASELOGLINKDataTable(ds.Tables("SBEAPCASELOGLINK")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTCONTACTS")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTCONTACTSDataTable(ds.Tables("SBEAPCLIENTCONTACTS")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTDATA")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTDATADataTable(ds.Tables("SBEAPCLIENTDATA")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTLINK")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTLINKDataTable(ds.Tables("SBEAPCLIENTLINK")))
            End If
            If (Not (ds.Tables("SBEAPCLIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCLIENTSDataTable(ds.Tables("SBEAPCLIENTS")))
            End If
            If (Not (ds.Tables("SBEAPCONFERENCELOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPCONFERENCELOGDataTable(ds.Tables("SBEAPCONFERENCELOG")))
            End If
            If (Not (ds.Tables("SBEAPERRORLOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPERRORLOGDataTable(ds.Tables("SBEAPERRORLOG")))
            End If
            If (Not (ds.Tables("SBEAPOTHERLOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPOTHERLOGDataTable(ds.Tables("SBEAPOTHERLOG")))
            End If
            If (Not (ds.Tables("SBEAPPERMISSIONS")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPPERMISSIONSDataTable(ds.Tables("SBEAPPERMISSIONS")))
            End If
            If (Not (ds.Tables("SBEAPPHONELOG")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPPHONELOGDataTable(ds.Tables("SBEAPPHONELOG")))
            End If
            If (Not (ds.Tables("SBEAPTECHNICALASSIST")) Is Nothing) Then
                MyBase.Tables.Add(New SBEAPTECHNICALASSISTDataTable(ds.Tables("SBEAPTECHNICALASSIST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLOOKUPSBEAPACCOUNTS = CType(MyBase.Tables("LOOKUPSBEAPACCOUNTS"),LOOKUPSBEAPACCOUNTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOOKUPSBEAPACCOUNTS) Is Nothing) Then
                Me.tableLOOKUPSBEAPACCOUNTS.InitVars
            End If
        End If
        Me.tableLOOKUPSBEAPCASEWORK = CType(MyBase.Tables("LOOKUPSBEAPCASEWORK"),LOOKUPSBEAPCASEWORKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOOKUPSBEAPCASEWORK) Is Nothing) Then
                Me.tableLOOKUPSBEAPCASEWORK.InitVars
            End If
        End If
        Me.tableLOOKUPSBEAPFORMS = CType(MyBase.Tables("LOOKUPSBEAPFORMS"),LOOKUPSBEAPFORMSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOOKUPSBEAPFORMS) Is Nothing) Then
                Me.tableLOOKUPSBEAPFORMS.InitVars
            End If
        End If
        Me.tableSBEAPACTIONLOG = CType(MyBase.Tables("SBEAPACTIONLOG"),SBEAPACTIONLOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPACTIONLOG) Is Nothing) Then
                Me.tableSBEAPACTIONLOG.InitVars
            End If
        End If
        Me.tableSBEAPCASELOG = CType(MyBase.Tables("SBEAPCASELOG"),SBEAPCASELOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCASELOG) Is Nothing) Then
                Me.tableSBEAPCASELOG.InitVars
            End If
        End If
        Me.tableSBEAPCASELOGLINK = CType(MyBase.Tables("SBEAPCASELOGLINK"),SBEAPCASELOGLINKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCASELOGLINK) Is Nothing) Then
                Me.tableSBEAPCASELOGLINK.InitVars
            End If
        End If
        Me.tableSBEAPCLIENTCONTACTS = CType(MyBase.Tables("SBEAPCLIENTCONTACTS"),SBEAPCLIENTCONTACTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCLIENTCONTACTS) Is Nothing) Then
                Me.tableSBEAPCLIENTCONTACTS.InitVars
            End If
        End If
        Me.tableSBEAPCLIENTDATA = CType(MyBase.Tables("SBEAPCLIENTDATA"),SBEAPCLIENTDATADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCLIENTDATA) Is Nothing) Then
                Me.tableSBEAPCLIENTDATA.InitVars
            End If
        End If
        Me.tableSBEAPCLIENTLINK = CType(MyBase.Tables("SBEAPCLIENTLINK"),SBEAPCLIENTLINKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCLIENTLINK) Is Nothing) Then
                Me.tableSBEAPCLIENTLINK.InitVars
            End If
        End If
        Me.tableSBEAPCLIENTS = CType(MyBase.Tables("SBEAPCLIENTS"),SBEAPCLIENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCLIENTS) Is Nothing) Then
                Me.tableSBEAPCLIENTS.InitVars
            End If
        End If
        Me.tableSBEAPCONFERENCELOG = CType(MyBase.Tables("SBEAPCONFERENCELOG"),SBEAPCONFERENCELOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPCONFERENCELOG) Is Nothing) Then
                Me.tableSBEAPCONFERENCELOG.InitVars
            End If
        End If
        Me.tableSBEAPERRORLOG = CType(MyBase.Tables("SBEAPERRORLOG"),SBEAPERRORLOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPERRORLOG) Is Nothing) Then
                Me.tableSBEAPERRORLOG.InitVars
            End If
        End If
        Me.tableSBEAPOTHERLOG = CType(MyBase.Tables("SBEAPOTHERLOG"),SBEAPOTHERLOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPOTHERLOG) Is Nothing) Then
                Me.tableSBEAPOTHERLOG.InitVars
            End If
        End If
        Me.tableSBEAPPERMISSIONS = CType(MyBase.Tables("SBEAPPERMISSIONS"),SBEAPPERMISSIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPPERMISSIONS) Is Nothing) Then
                Me.tableSBEAPPERMISSIONS.InitVars
            End If
        End If
        Me.tableSBEAPPHONELOG = CType(MyBase.Tables("SBEAPPHONELOG"),SBEAPPHONELOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPPHONELOG) Is Nothing) Then
                Me.tableSBEAPPHONELOG.InitVars
            End If
        End If
        Me.tableSBEAPTECHNICALASSIST = CType(MyBase.Tables("SBEAPTECHNICALASSIST"),SBEAPTECHNICALASSISTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSBEAPTECHNICALASSIST) Is Nothing) Then
                Me.tableSBEAPTECHNICALASSIST.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsFullSBEAP"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsFullSBEAP.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLOOKUPSBEAPACCOUNTS = New LOOKUPSBEAPACCOUNTSDataTable
        MyBase.Tables.Add(Me.tableLOOKUPSBEAPACCOUNTS)
        Me.tableLOOKUPSBEAPCASEWORK = New LOOKUPSBEAPCASEWORKDataTable
        MyBase.Tables.Add(Me.tableLOOKUPSBEAPCASEWORK)
        Me.tableLOOKUPSBEAPFORMS = New LOOKUPSBEAPFORMSDataTable
        MyBase.Tables.Add(Me.tableLOOKUPSBEAPFORMS)
        Me.tableSBEAPACTIONLOG = New SBEAPACTIONLOGDataTable
        MyBase.Tables.Add(Me.tableSBEAPACTIONLOG)
        Me.tableSBEAPCASELOG = New SBEAPCASELOGDataTable
        MyBase.Tables.Add(Me.tableSBEAPCASELOG)
        Me.tableSBEAPCASELOGLINK = New SBEAPCASELOGLINKDataTable
        MyBase.Tables.Add(Me.tableSBEAPCASELOGLINK)
        Me.tableSBEAPCLIENTCONTACTS = New SBEAPCLIENTCONTACTSDataTable
        MyBase.Tables.Add(Me.tableSBEAPCLIENTCONTACTS)
        Me.tableSBEAPCLIENTDATA = New SBEAPCLIENTDATADataTable
        MyBase.Tables.Add(Me.tableSBEAPCLIENTDATA)
        Me.tableSBEAPCLIENTLINK = New SBEAPCLIENTLINKDataTable
        MyBase.Tables.Add(Me.tableSBEAPCLIENTLINK)
        Me.tableSBEAPCLIENTS = New SBEAPCLIENTSDataTable
        MyBase.Tables.Add(Me.tableSBEAPCLIENTS)
        Me.tableSBEAPCONFERENCELOG = New SBEAPCONFERENCELOGDataTable
        MyBase.Tables.Add(Me.tableSBEAPCONFERENCELOG)
        Me.tableSBEAPERRORLOG = New SBEAPERRORLOGDataTable
        MyBase.Tables.Add(Me.tableSBEAPERRORLOG)
        Me.tableSBEAPOTHERLOG = New SBEAPOTHERLOGDataTable
        MyBase.Tables.Add(Me.tableSBEAPOTHERLOG)
        Me.tableSBEAPPERMISSIONS = New SBEAPPERMISSIONSDataTable
        MyBase.Tables.Add(Me.tableSBEAPPERMISSIONS)
        Me.tableSBEAPPHONELOG = New SBEAPPHONELOGDataTable
        MyBase.Tables.Add(Me.tableSBEAPPHONELOG)
        Me.tableSBEAPTECHNICALASSIST = New SBEAPTECHNICALASSISTDataTable
        MyBase.Tables.Add(Me.tableSBEAPTECHNICALASSIST)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOOKUPSBEAPACCOUNTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOOKUPSBEAPCASEWORK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLOOKUPSBEAPFORMS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPACTIONLOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCASELOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCASELOGLINK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCLIENTCONTACTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCLIENTDATA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCLIENTLINK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCLIENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPCONFERENCELOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPERRORLOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPOTHERLOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPPERMISSIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPPHONELOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSBEAPTECHNICALASSIST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsFullSBEAP = New dsFullSBEAP
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub LOOKUPSBEAPACCOUNTSRowChangeEventHandler(ByVal sender As Object, ByVal e As LOOKUPSBEAPACCOUNTSRowChangeEvent)
    
    Public Delegate Sub LOOKUPSBEAPCASEWORKRowChangeEventHandler(ByVal sender As Object, ByVal e As LOOKUPSBEAPCASEWORKRowChangeEvent)
    
    Public Delegate Sub LOOKUPSBEAPFORMSRowChangeEventHandler(ByVal sender As Object, ByVal e As LOOKUPSBEAPFORMSRowChangeEvent)
    
    Public Delegate Sub SBEAPACTIONLOGRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPACTIONLOGRowChangeEvent)
    
    Public Delegate Sub SBEAPCASELOGRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCASELOGRowChangeEvent)
    
    Public Delegate Sub SBEAPCASELOGLINKRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCASELOGLINKRowChangeEvent)
    
    Public Delegate Sub SBEAPCLIENTCONTACTSRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCLIENTCONTACTSRowChangeEvent)
    
    Public Delegate Sub SBEAPCLIENTDATARowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCLIENTDATARowChangeEvent)
    
    Public Delegate Sub SBEAPCLIENTLINKRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCLIENTLINKRowChangeEvent)
    
    Public Delegate Sub SBEAPCLIENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCLIENTSRowChangeEvent)
    
    Public Delegate Sub SBEAPCONFERENCELOGRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPCONFERENCELOGRowChangeEvent)
    
    Public Delegate Sub SBEAPERRORLOGRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPERRORLOGRowChangeEvent)
    
    Public Delegate Sub SBEAPOTHERLOGRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPOTHERLOGRowChangeEvent)
    
    Public Delegate Sub SBEAPPERMISSIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPPERMISSIONSRowChangeEvent)
    
    Public Delegate Sub SBEAPPHONELOGRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPPHONELOGRowChangeEvent)
    
    Public Delegate Sub SBEAPTECHNICALASSISTRowChangeEventHandler(ByVal sender As Object, ByVal e As SBEAPTECHNICALASSISTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOOKUPSBEAPACCOUNTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOOKUPSBEAPACCOUNTSRow)
        
        Private columnNUMACCOUNTCODE As Global.System.Data.DataColumn
        
        Private columnSTRACCOUNTDESC As Global.System.Data.DataColumn
        
        Private columnNUMBRANCHCODE As Global.System.Data.DataColumn
        
        Private columnNUMPROGRAMCODE As Global.System.Data.DataColumn
        
        Private columnNUMUNITCODE As Global.System.Data.DataColumn
        
        Private columnSTRFORMACCESS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOOKUPSBEAPACCOUNTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACCOUNTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACCOUNTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRACCOUNTDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRACCOUNTDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMBRANCHCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMBRANCHCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMPROGRAMCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMPROGRAMCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMUNITCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMUNITCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFORMACCESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFORMACCESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOOKUPSBEAPACCOUNTSRow
            Get
                Return CType(Me.Rows(index),LOOKUPSBEAPACCOUNTSRow)
            End Get
        End Property
        
        Public Event LOOKUPSBEAPACCOUNTSRowChanging As LOOKUPSBEAPACCOUNTSRowChangeEventHandler
        
        Public Event LOOKUPSBEAPACCOUNTSRowChanged As LOOKUPSBEAPACCOUNTSRowChangeEventHandler
        
        Public Event LOOKUPSBEAPACCOUNTSRowDeleting As LOOKUPSBEAPACCOUNTSRowChangeEventHandler
        
        Public Event LOOKUPSBEAPACCOUNTSRowDeleted As LOOKUPSBEAPACCOUNTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOOKUPSBEAPACCOUNTSRow(ByVal row As LOOKUPSBEAPACCOUNTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOOKUPSBEAPACCOUNTSRow(ByVal NUMACCOUNTCODE As Decimal, ByVal STRACCOUNTDESC As String, ByVal NUMBRANCHCODE As Decimal, ByVal NUMPROGRAMCODE As Decimal, ByVal NUMUNITCODE As Decimal, ByVal STRFORMACCESS As String) As LOOKUPSBEAPACCOUNTSRow
            Dim rowLOOKUPSBEAPACCOUNTSRow As LOOKUPSBEAPACCOUNTSRow = CType(Me.NewRow,LOOKUPSBEAPACCOUNTSRow)
            Dim columnValuesArray() As Object = New Object() {NUMACCOUNTCODE, STRACCOUNTDESC, NUMBRANCHCODE, NUMPROGRAMCODE, NUMUNITCODE, STRFORMACCESS}
            rowLOOKUPSBEAPACCOUNTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOOKUPSBEAPACCOUNTSRow)
            Return rowLOOKUPSBEAPACCOUNTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNUMACCOUNTCODE(ByVal NUMACCOUNTCODE As Decimal) As LOOKUPSBEAPACCOUNTSRow
            Return CType(Me.Rows.Find(New Object() {NUMACCOUNTCODE}),LOOKUPSBEAPACCOUNTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOOKUPSBEAPACCOUNTSDataTable = CType(MyBase.Clone,LOOKUPSBEAPACCOUNTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOOKUPSBEAPACCOUNTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACCOUNTCODE = MyBase.Columns("NUMACCOUNTCODE")
            Me.columnSTRACCOUNTDESC = MyBase.Columns("STRACCOUNTDESC")
            Me.columnNUMBRANCHCODE = MyBase.Columns("NUMBRANCHCODE")
            Me.columnNUMPROGRAMCODE = MyBase.Columns("NUMPROGRAMCODE")
            Me.columnNUMUNITCODE = MyBase.Columns("NUMUNITCODE")
            Me.columnSTRFORMACCESS = MyBase.Columns("STRFORMACCESS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACCOUNTCODE = New Global.System.Data.DataColumn("NUMACCOUNTCODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACCOUNTCODE)
            Me.columnSTRACCOUNTDESC = New Global.System.Data.DataColumn("STRACCOUNTDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRACCOUNTDESC)
            Me.columnNUMBRANCHCODE = New Global.System.Data.DataColumn("NUMBRANCHCODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMBRANCHCODE)
            Me.columnNUMPROGRAMCODE = New Global.System.Data.DataColumn("NUMPROGRAMCODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMPROGRAMCODE)
            Me.columnNUMUNITCODE = New Global.System.Data.DataColumn("NUMUNITCODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMUNITCODE)
            Me.columnSTRFORMACCESS = New Global.System.Data.DataColumn("STRFORMACCESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFORMACCESS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNUMACCOUNTCODE}, true))
            Me.columnNUMACCOUNTCODE.AllowDBNull = false
            Me.columnNUMACCOUNTCODE.Unique = true
            Me.columnSTRACCOUNTDESC.MaxLength = 4000
            Me.columnSTRFORMACCESS.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOOKUPSBEAPACCOUNTSRow() As LOOKUPSBEAPACCOUNTSRow
            Return CType(Me.NewRow,LOOKUPSBEAPACCOUNTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOOKUPSBEAPACCOUNTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOOKUPSBEAPACCOUNTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOOKUPSBEAPACCOUNTSRowChangedEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPACCOUNTSRowChanged(Me, New LOOKUPSBEAPACCOUNTSRowChangeEvent(CType(e.Row,LOOKUPSBEAPACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOOKUPSBEAPACCOUNTSRowChangingEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPACCOUNTSRowChanging(Me, New LOOKUPSBEAPACCOUNTSRowChangeEvent(CType(e.Row,LOOKUPSBEAPACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOOKUPSBEAPACCOUNTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPACCOUNTSRowDeleted(Me, New LOOKUPSBEAPACCOUNTSRowChangeEvent(CType(e.Row,LOOKUPSBEAPACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOOKUPSBEAPACCOUNTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPACCOUNTSRowDeleting(Me, New LOOKUPSBEAPACCOUNTSRowChangeEvent(CType(e.Row,LOOKUPSBEAPACCOUNTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOOKUPSBEAPACCOUNTSRow(ByVal row As LOOKUPSBEAPACCOUNTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOOKUPSBEAPACCOUNTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOOKUPSBEAPCASEWORKDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOOKUPSBEAPCASEWORKRow)
        
        Private columnNUMACTIONTYPE As Global.System.Data.DataColumn
        
        Private columnSTRWORKDESCRIPTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOOKUPSBEAPCASEWORK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRWORKDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRWORKDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOOKUPSBEAPCASEWORKRow
            Get
                Return CType(Me.Rows(index),LOOKUPSBEAPCASEWORKRow)
            End Get
        End Property
        
        Public Event LOOKUPSBEAPCASEWORKRowChanging As LOOKUPSBEAPCASEWORKRowChangeEventHandler
        
        Public Event LOOKUPSBEAPCASEWORKRowChanged As LOOKUPSBEAPCASEWORKRowChangeEventHandler
        
        Public Event LOOKUPSBEAPCASEWORKRowDeleting As LOOKUPSBEAPCASEWORKRowChangeEventHandler
        
        Public Event LOOKUPSBEAPCASEWORKRowDeleted As LOOKUPSBEAPCASEWORKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOOKUPSBEAPCASEWORKRow(ByVal row As LOOKUPSBEAPCASEWORKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOOKUPSBEAPCASEWORKRow(ByVal NUMACTIONTYPE As Decimal, ByVal STRWORKDESCRIPTION As String) As LOOKUPSBEAPCASEWORKRow
            Dim rowLOOKUPSBEAPCASEWORKRow As LOOKUPSBEAPCASEWORKRow = CType(Me.NewRow,LOOKUPSBEAPCASEWORKRow)
            Dim columnValuesArray() As Object = New Object() {NUMACTIONTYPE, STRWORKDESCRIPTION}
            rowLOOKUPSBEAPCASEWORKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOOKUPSBEAPCASEWORKRow)
            Return rowLOOKUPSBEAPCASEWORKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNUMACTIONTYPE(ByVal NUMACTIONTYPE As Decimal) As LOOKUPSBEAPCASEWORKRow
            Return CType(Me.Rows.Find(New Object() {NUMACTIONTYPE}),LOOKUPSBEAPCASEWORKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOOKUPSBEAPCASEWORKDataTable = CType(MyBase.Clone,LOOKUPSBEAPCASEWORKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOOKUPSBEAPCASEWORKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACTIONTYPE = MyBase.Columns("NUMACTIONTYPE")
            Me.columnSTRWORKDESCRIPTION = MyBase.Columns("STRWORKDESCRIPTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACTIONTYPE = New Global.System.Data.DataColumn("NUMACTIONTYPE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONTYPE)
            Me.columnSTRWORKDESCRIPTION = New Global.System.Data.DataColumn("STRWORKDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRWORKDESCRIPTION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNUMACTIONTYPE}, true))
            Me.columnNUMACTIONTYPE.AllowDBNull = false
            Me.columnNUMACTIONTYPE.Unique = true
            Me.columnSTRWORKDESCRIPTION.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOOKUPSBEAPCASEWORKRow() As LOOKUPSBEAPCASEWORKRow
            Return CType(Me.NewRow,LOOKUPSBEAPCASEWORKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOOKUPSBEAPCASEWORKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOOKUPSBEAPCASEWORKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOOKUPSBEAPCASEWORKRowChangedEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPCASEWORKRowChanged(Me, New LOOKUPSBEAPCASEWORKRowChangeEvent(CType(e.Row,LOOKUPSBEAPCASEWORKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOOKUPSBEAPCASEWORKRowChangingEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPCASEWORKRowChanging(Me, New LOOKUPSBEAPCASEWORKRowChangeEvent(CType(e.Row,LOOKUPSBEAPCASEWORKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOOKUPSBEAPCASEWORKRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPCASEWORKRowDeleted(Me, New LOOKUPSBEAPCASEWORKRowChangeEvent(CType(e.Row,LOOKUPSBEAPCASEWORKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOOKUPSBEAPCASEWORKRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPCASEWORKRowDeleting(Me, New LOOKUPSBEAPCASEWORKRowChangeEvent(CType(e.Row,LOOKUPSBEAPCASEWORKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOOKUPSBEAPCASEWORKRow(ByVal row As LOOKUPSBEAPCASEWORKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOOKUPSBEAPCASEWORKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOOKUPSBEAPFORMSDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOOKUPSBEAPFORMSRow)
        
        Private columnNUMFORMCODE As Global.System.Data.DataColumn
        
        Private columnSTRFORM As Global.System.Data.DataColumn
        
        Private columnSTRFORMDESC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOOKUPSBEAPFORMS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMFORMCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMFORMCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFORMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFORM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFORMDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFORMDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOOKUPSBEAPFORMSRow
            Get
                Return CType(Me.Rows(index),LOOKUPSBEAPFORMSRow)
            End Get
        End Property
        
        Public Event LOOKUPSBEAPFORMSRowChanging As LOOKUPSBEAPFORMSRowChangeEventHandler
        
        Public Event LOOKUPSBEAPFORMSRowChanged As LOOKUPSBEAPFORMSRowChangeEventHandler
        
        Public Event LOOKUPSBEAPFORMSRowDeleting As LOOKUPSBEAPFORMSRowChangeEventHandler
        
        Public Event LOOKUPSBEAPFORMSRowDeleted As LOOKUPSBEAPFORMSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLOOKUPSBEAPFORMSRow(ByVal row As LOOKUPSBEAPFORMSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLOOKUPSBEAPFORMSRow(ByVal NUMFORMCODE As Decimal, ByVal STRFORM As String, ByVal STRFORMDESC As String) As LOOKUPSBEAPFORMSRow
            Dim rowLOOKUPSBEAPFORMSRow As LOOKUPSBEAPFORMSRow = CType(Me.NewRow,LOOKUPSBEAPFORMSRow)
            Dim columnValuesArray() As Object = New Object() {NUMFORMCODE, STRFORM, STRFORMDESC}
            rowLOOKUPSBEAPFORMSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOOKUPSBEAPFORMSRow)
            Return rowLOOKUPSBEAPFORMSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNUMFORMCODE(ByVal NUMFORMCODE As Decimal) As LOOKUPSBEAPFORMSRow
            Return CType(Me.Rows.Find(New Object() {NUMFORMCODE}),LOOKUPSBEAPFORMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOOKUPSBEAPFORMSDataTable = CType(MyBase.Clone,LOOKUPSBEAPFORMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOOKUPSBEAPFORMSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMFORMCODE = MyBase.Columns("NUMFORMCODE")
            Me.columnSTRFORM = MyBase.Columns("STRFORM")
            Me.columnSTRFORMDESC = MyBase.Columns("STRFORMDESC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMFORMCODE = New Global.System.Data.DataColumn("NUMFORMCODE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMFORMCODE)
            Me.columnSTRFORM = New Global.System.Data.DataColumn("STRFORM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFORM)
            Me.columnSTRFORMDESC = New Global.System.Data.DataColumn("STRFORMDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFORMDESC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNUMFORMCODE}, true))
            Me.columnNUMFORMCODE.AllowDBNull = false
            Me.columnNUMFORMCODE.Unique = true
            Me.columnSTRFORM.MaxLength = 4000
            Me.columnSTRFORMDESC.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLOOKUPSBEAPFORMSRow() As LOOKUPSBEAPFORMSRow
            Return CType(Me.NewRow,LOOKUPSBEAPFORMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOOKUPSBEAPFORMSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOOKUPSBEAPFORMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOOKUPSBEAPFORMSRowChangedEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPFORMSRowChanged(Me, New LOOKUPSBEAPFORMSRowChangeEvent(CType(e.Row,LOOKUPSBEAPFORMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOOKUPSBEAPFORMSRowChangingEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPFORMSRowChanging(Me, New LOOKUPSBEAPFORMSRowChangeEvent(CType(e.Row,LOOKUPSBEAPFORMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOOKUPSBEAPFORMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPFORMSRowDeleted(Me, New LOOKUPSBEAPFORMSRowChangeEvent(CType(e.Row,LOOKUPSBEAPFORMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOOKUPSBEAPFORMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent LOOKUPSBEAPFORMSRowDeleting(Me, New LOOKUPSBEAPFORMSRowChangeEvent(CType(e.Row,LOOKUPSBEAPFORMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLOOKUPSBEAPFORMSRow(ByVal row As LOOKUPSBEAPFORMSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOOKUPSBEAPFORMSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPACTIONLOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPACTIONLOGRow)
        
        Private columnNUMACTIONID As Global.System.Data.DataColumn
        
        Private columnNUMCASEID As Global.System.Data.DataColumn
        
        Private columnNUMACTIONTYPE As Global.System.Data.DataColumn
        
        Private columnNUMMODIFINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        Private columnSTRCREATINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATCREATIONDATE As Global.System.Data.DataColumn
        
        Private columnDATACTIONOCCURED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPACTIONLOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCASEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCASEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMMODIFINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMMODIFINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCREATINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCREATINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCREATIONDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCREATIONDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATACTIONOCCUREDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATACTIONOCCURED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPACTIONLOGRow
            Get
                Return CType(Me.Rows(index),SBEAPACTIONLOGRow)
            End Get
        End Property
        
        Public Event SBEAPACTIONLOGRowChanging As SBEAPACTIONLOGRowChangeEventHandler
        
        Public Event SBEAPACTIONLOGRowChanged As SBEAPACTIONLOGRowChangeEventHandler
        
        Public Event SBEAPACTIONLOGRowDeleting As SBEAPACTIONLOGRowChangeEventHandler
        
        Public Event SBEAPACTIONLOGRowDeleted As SBEAPACTIONLOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPACTIONLOGRow(ByVal row As SBEAPACTIONLOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPACTIONLOGRow(ByVal NUMACTIONID As Decimal, ByVal NUMCASEID As Decimal, ByVal NUMACTIONTYPE As Decimal, ByVal NUMMODIFINGSTAFF As Decimal, ByVal DATMODIFINGDATE As Date, ByVal STRCREATINGSTAFF As String, ByVal DATCREATIONDATE As Date, ByVal DATACTIONOCCURED As Date) As SBEAPACTIONLOGRow
            Dim rowSBEAPACTIONLOGRow As SBEAPACTIONLOGRow = CType(Me.NewRow,SBEAPACTIONLOGRow)
            Dim columnValuesArray() As Object = New Object() {NUMACTIONID, NUMCASEID, NUMACTIONTYPE, NUMMODIFINGSTAFF, DATMODIFINGDATE, STRCREATINGSTAFF, DATCREATIONDATE, DATACTIONOCCURED}
            rowSBEAPACTIONLOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPACTIONLOGRow)
            Return rowSBEAPACTIONLOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPACTIONLOGDataTable = CType(MyBase.Clone,SBEAPACTIONLOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPACTIONLOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACTIONID = MyBase.Columns("NUMACTIONID")
            Me.columnNUMCASEID = MyBase.Columns("NUMCASEID")
            Me.columnNUMACTIONTYPE = MyBase.Columns("NUMACTIONTYPE")
            Me.columnNUMMODIFINGSTAFF = MyBase.Columns("NUMMODIFINGSTAFF")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
            Me.columnSTRCREATINGSTAFF = MyBase.Columns("STRCREATINGSTAFF")
            Me.columnDATCREATIONDATE = MyBase.Columns("DATCREATIONDATE")
            Me.columnDATACTIONOCCURED = MyBase.Columns("DATACTIONOCCURED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACTIONID = New Global.System.Data.DataColumn("NUMACTIONID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONID)
            Me.columnNUMCASEID = New Global.System.Data.DataColumn("NUMCASEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCASEID)
            Me.columnNUMACTIONTYPE = New Global.System.Data.DataColumn("NUMACTIONTYPE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONTYPE)
            Me.columnNUMMODIFINGSTAFF = New Global.System.Data.DataColumn("NUMMODIFINGSTAFF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMMODIFINGSTAFF)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRCREATINGSTAFF = New Global.System.Data.DataColumn("STRCREATINGSTAFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCREATINGSTAFF)
            Me.columnDATCREATIONDATE = New Global.System.Data.DataColumn("DATCREATIONDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCREATIONDATE)
            Me.columnDATACTIONOCCURED = New Global.System.Data.DataColumn("DATACTIONOCCURED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATACTIONOCCURED)
            Me.columnSTRCREATINGSTAFF.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPACTIONLOGRow() As SBEAPACTIONLOGRow
            Return CType(Me.NewRow,SBEAPACTIONLOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPACTIONLOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPACTIONLOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPACTIONLOGRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPACTIONLOGRowChanged(Me, New SBEAPACTIONLOGRowChangeEvent(CType(e.Row,SBEAPACTIONLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPACTIONLOGRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPACTIONLOGRowChanging(Me, New SBEAPACTIONLOGRowChangeEvent(CType(e.Row,SBEAPACTIONLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPACTIONLOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPACTIONLOGRowDeleted(Me, New SBEAPACTIONLOGRowChangeEvent(CType(e.Row,SBEAPACTIONLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPACTIONLOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPACTIONLOGRowDeleting(Me, New SBEAPACTIONLOGRowChangeEvent(CType(e.Row,SBEAPACTIONLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPACTIONLOGRow(ByVal row As SBEAPACTIONLOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPACTIONLOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCASELOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCASELOGRow)
        
        Private columnNUMCASEID As Global.System.Data.DataColumn
        
        Private columnNUMSTAFFRESPONSIBLE As Global.System.Data.DataColumn
        
        Private columnDATCASEOPENED As Global.System.Data.DataColumn
        
        Private columnSTRCASESUMMARY As Global.System.Data.DataColumn
        
        Private columnCLIENTID As Global.System.Data.DataColumn
        
        Private columnDATCASECLOSED As Global.System.Data.DataColumn
        
        Private columnNUMMODIFINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        Private columnSTRINTERAGENCY As Global.System.Data.DataColumn
        
        Private columnSTRREFERRALCOMMENTS As Global.System.Data.DataColumn
        
        Private columnDATREFERRALDATE As Global.System.Data.DataColumn
        
        Private columnSTRCOMPLAINTBASED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCASELOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCASEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCASEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMSTAFFRESPONSIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMSTAFFRESPONSIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCASEOPENEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCASEOPENED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCASESUMMARYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCASESUMMARY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCASECLOSEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCASECLOSED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMMODIFINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMMODIFINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRINTERAGENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRINTERAGENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRREFERRALCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRREFERRALCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATREFERRALDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATREFERRALDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPLAINTBASEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPLAINTBASED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCASELOGRow
            Get
                Return CType(Me.Rows(index),SBEAPCASELOGRow)
            End Get
        End Property
        
        Public Event SBEAPCASELOGRowChanging As SBEAPCASELOGRowChangeEventHandler
        
        Public Event SBEAPCASELOGRowChanged As SBEAPCASELOGRowChangeEventHandler
        
        Public Event SBEAPCASELOGRowDeleting As SBEAPCASELOGRowChangeEventHandler
        
        Public Event SBEAPCASELOGRowDeleted As SBEAPCASELOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCASELOGRow(ByVal row As SBEAPCASELOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCASELOGRow(ByVal NUMCASEID As Decimal, ByVal NUMSTAFFRESPONSIBLE As Decimal, ByVal DATCASEOPENED As Date, ByVal STRCASESUMMARY As String, ByVal CLIENTID As Decimal, ByVal DATCASECLOSED As Date, ByVal NUMMODIFINGSTAFF As Decimal, ByVal DATMODIFINGDATE As Date, ByVal STRINTERAGENCY As String, ByVal STRREFERRALCOMMENTS As String, ByVal DATREFERRALDATE As Date, ByVal STRCOMPLAINTBASED As String) As SBEAPCASELOGRow
            Dim rowSBEAPCASELOGRow As SBEAPCASELOGRow = CType(Me.NewRow,SBEAPCASELOGRow)
            Dim columnValuesArray() As Object = New Object() {NUMCASEID, NUMSTAFFRESPONSIBLE, DATCASEOPENED, STRCASESUMMARY, CLIENTID, DATCASECLOSED, NUMMODIFINGSTAFF, DATMODIFINGDATE, STRINTERAGENCY, STRREFERRALCOMMENTS, DATREFERRALDATE, STRCOMPLAINTBASED}
            rowSBEAPCASELOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCASELOGRow)
            Return rowSBEAPCASELOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCASELOGDataTable = CType(MyBase.Clone,SBEAPCASELOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCASELOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMCASEID = MyBase.Columns("NUMCASEID")
            Me.columnNUMSTAFFRESPONSIBLE = MyBase.Columns("NUMSTAFFRESPONSIBLE")
            Me.columnDATCASEOPENED = MyBase.Columns("DATCASEOPENED")
            Me.columnSTRCASESUMMARY = MyBase.Columns("STRCASESUMMARY")
            Me.columnCLIENTID = MyBase.Columns("CLIENTID")
            Me.columnDATCASECLOSED = MyBase.Columns("DATCASECLOSED")
            Me.columnNUMMODIFINGSTAFF = MyBase.Columns("NUMMODIFINGSTAFF")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
            Me.columnSTRINTERAGENCY = MyBase.Columns("STRINTERAGENCY")
            Me.columnSTRREFERRALCOMMENTS = MyBase.Columns("STRREFERRALCOMMENTS")
            Me.columnDATREFERRALDATE = MyBase.Columns("DATREFERRALDATE")
            Me.columnSTRCOMPLAINTBASED = MyBase.Columns("STRCOMPLAINTBASED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMCASEID = New Global.System.Data.DataColumn("NUMCASEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCASEID)
            Me.columnNUMSTAFFRESPONSIBLE = New Global.System.Data.DataColumn("NUMSTAFFRESPONSIBLE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMSTAFFRESPONSIBLE)
            Me.columnDATCASEOPENED = New Global.System.Data.DataColumn("DATCASEOPENED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCASEOPENED)
            Me.columnSTRCASESUMMARY = New Global.System.Data.DataColumn("STRCASESUMMARY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCASESUMMARY)
            Me.columnCLIENTID = New Global.System.Data.DataColumn("CLIENTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTID)
            Me.columnDATCASECLOSED = New Global.System.Data.DataColumn("DATCASECLOSED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCASECLOSED)
            Me.columnNUMMODIFINGSTAFF = New Global.System.Data.DataColumn("NUMMODIFINGSTAFF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMMODIFINGSTAFF)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRINTERAGENCY = New Global.System.Data.DataColumn("STRINTERAGENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRINTERAGENCY)
            Me.columnSTRREFERRALCOMMENTS = New Global.System.Data.DataColumn("STRREFERRALCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRREFERRALCOMMENTS)
            Me.columnDATREFERRALDATE = New Global.System.Data.DataColumn("DATREFERRALDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATREFERRALDATE)
            Me.columnSTRCOMPLAINTBASED = New Global.System.Data.DataColumn("STRCOMPLAINTBASED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPLAINTBASED)
            Me.columnSTRCASESUMMARY.MaxLength = 4000
            Me.columnSTRINTERAGENCY.MaxLength = 4000
            Me.columnSTRREFERRALCOMMENTS.MaxLength = 4000
            Me.columnSTRCOMPLAINTBASED.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCASELOGRow() As SBEAPCASELOGRow
            Return CType(Me.NewRow,SBEAPCASELOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCASELOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCASELOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCASELOGRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGRowChanged(Me, New SBEAPCASELOGRowChangeEvent(CType(e.Row,SBEAPCASELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCASELOGRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGRowChanging(Me, New SBEAPCASELOGRowChangeEvent(CType(e.Row,SBEAPCASELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCASELOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGRowDeleted(Me, New SBEAPCASELOGRowChangeEvent(CType(e.Row,SBEAPCASELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCASELOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGRowDeleting(Me, New SBEAPCASELOGRowChangeEvent(CType(e.Row,SBEAPCASELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCASELOGRow(ByVal row As SBEAPCASELOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCASELOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCASELOGLINKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCASELOGLINKRow)
        
        Private columnNUMCASEID As Global.System.Data.DataColumn
        
        Private columnCLIENTID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCASELOGLINK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCASEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCASEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCASELOGLINKRow
            Get
                Return CType(Me.Rows(index),SBEAPCASELOGLINKRow)
            End Get
        End Property
        
        Public Event SBEAPCASELOGLINKRowChanging As SBEAPCASELOGLINKRowChangeEventHandler
        
        Public Event SBEAPCASELOGLINKRowChanged As SBEAPCASELOGLINKRowChangeEventHandler
        
        Public Event SBEAPCASELOGLINKRowDeleting As SBEAPCASELOGLINKRowChangeEventHandler
        
        Public Event SBEAPCASELOGLINKRowDeleted As SBEAPCASELOGLINKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCASELOGLINKRow(ByVal row As SBEAPCASELOGLINKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCASELOGLINKRow(ByVal NUMCASEID As Decimal, ByVal CLIENTID As Decimal) As SBEAPCASELOGLINKRow
            Dim rowSBEAPCASELOGLINKRow As SBEAPCASELOGLINKRow = CType(Me.NewRow,SBEAPCASELOGLINKRow)
            Dim columnValuesArray() As Object = New Object() {NUMCASEID, CLIENTID}
            rowSBEAPCASELOGLINKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCASELOGLINKRow)
            Return rowSBEAPCASELOGLINKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCASELOGLINKDataTable = CType(MyBase.Clone,SBEAPCASELOGLINKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCASELOGLINKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMCASEID = MyBase.Columns("NUMCASEID")
            Me.columnCLIENTID = MyBase.Columns("CLIENTID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMCASEID = New Global.System.Data.DataColumn("NUMCASEID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCASEID)
            Me.columnCLIENTID = New Global.System.Data.DataColumn("CLIENTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTID)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCASELOGLINKRow() As SBEAPCASELOGLINKRow
            Return CType(Me.NewRow,SBEAPCASELOGLINKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCASELOGLINKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCASELOGLINKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCASELOGLINKRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGLINKRowChanged(Me, New SBEAPCASELOGLINKRowChangeEvent(CType(e.Row,SBEAPCASELOGLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCASELOGLINKRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGLINKRowChanging(Me, New SBEAPCASELOGLINKRowChangeEvent(CType(e.Row,SBEAPCASELOGLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCASELOGLINKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGLINKRowDeleted(Me, New SBEAPCASELOGLINKRowChangeEvent(CType(e.Row,SBEAPCASELOGLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCASELOGLINKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCASELOGLINKRowDeleting(Me, New SBEAPCASELOGLINKRowChangeEvent(CType(e.Row,SBEAPCASELOGLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCASELOGLINKRow(ByVal row As SBEAPCASELOGLINKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCASELOGLINKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCLIENTCONTACTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCLIENTCONTACTSRow)
        
        Private columnCLIENTCONTACTID As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTFIRSTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTLASTNAME As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTSALUTATION As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTCREDENTIALS As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTTITLE As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTPHONENUMBER As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTCELLPHONE As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTFAX As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTEMAIL As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTADDRESS As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTCITY As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTZIPCODE As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTCREATOR As Global.System.Data.DataColumn
        
        Private columnDATCLIENTCREATED As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGPERSON As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        Private columnSTRCONTACTNOTES As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCLIENTCONTACTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTCONTACTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTCONTACTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTFIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTFIRSTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTLASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTLASTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTSALUTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTSALUTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTCREDENTIALSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTCREDENTIALS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTPHONENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTPHONENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTCELLPHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTCELLPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTFAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTEMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTCREATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTCREATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCLIENTCREATEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCLIENTCREATED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGPERSONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGPERSON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONTACTNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONTACTNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCLIENTCONTACTSRow
            Get
                Return CType(Me.Rows(index),SBEAPCLIENTCONTACTSRow)
            End Get
        End Property
        
        Public Event SBEAPCLIENTCONTACTSRowChanging As SBEAPCLIENTCONTACTSRowChangeEventHandler
        
        Public Event SBEAPCLIENTCONTACTSRowChanged As SBEAPCLIENTCONTACTSRowChangeEventHandler
        
        Public Event SBEAPCLIENTCONTACTSRowDeleting As SBEAPCLIENTCONTACTSRowChangeEventHandler
        
        Public Event SBEAPCLIENTCONTACTSRowDeleted As SBEAPCLIENTCONTACTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCLIENTCONTACTSRow(ByVal row As SBEAPCLIENTCONTACTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCLIENTCONTACTSRow( _
                    ByVal CLIENTCONTACTID As Decimal,  _
                    ByVal STRCLIENTFIRSTNAME As String,  _
                    ByVal STRCLIENTLASTNAME As String,  _
                    ByVal STRCLIENTSALUTATION As String,  _
                    ByVal STRCLIENTCREDENTIALS As String,  _
                    ByVal STRCLIENTTITLE As String,  _
                    ByVal STRCLIENTPHONENUMBER As String,  _
                    ByVal STRCLIENTCELLPHONE As String,  _
                    ByVal STRCLIENTFAX As String,  _
                    ByVal STRCLIENTEMAIL As String,  _
                    ByVal STRCLIENTADDRESS As String,  _
                    ByVal STRCLIENTCITY As String,  _
                    ByVal STRCLIENTSTATE As String,  _
                    ByVal STRCLIENTZIPCODE As String,  _
                    ByVal STRCLIENTCREATOR As String,  _
                    ByVal DATCLIENTCREATED As Date,  _
                    ByVal STRMODIFINGPERSON As String,  _
                    ByVal DATMODIFINGDATE As Date,  _
                    ByVal STRCONTACTNOTES As String) As SBEAPCLIENTCONTACTSRow
            Dim rowSBEAPCLIENTCONTACTSRow As SBEAPCLIENTCONTACTSRow = CType(Me.NewRow,SBEAPCLIENTCONTACTSRow)
            Dim columnValuesArray() As Object = New Object() {CLIENTCONTACTID, STRCLIENTFIRSTNAME, STRCLIENTLASTNAME, STRCLIENTSALUTATION, STRCLIENTCREDENTIALS, STRCLIENTTITLE, STRCLIENTPHONENUMBER, STRCLIENTCELLPHONE, STRCLIENTFAX, STRCLIENTEMAIL, STRCLIENTADDRESS, STRCLIENTCITY, STRCLIENTSTATE, STRCLIENTZIPCODE, STRCLIENTCREATOR, DATCLIENTCREATED, STRMODIFINGPERSON, DATMODIFINGDATE, STRCONTACTNOTES}
            rowSBEAPCLIENTCONTACTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCLIENTCONTACTSRow)
            Return rowSBEAPCLIENTCONTACTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCLIENTCONTACTSDataTable = CType(MyBase.Clone,SBEAPCLIENTCONTACTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCLIENTCONTACTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENTCONTACTID = MyBase.Columns("CLIENTCONTACTID")
            Me.columnSTRCLIENTFIRSTNAME = MyBase.Columns("STRCLIENTFIRSTNAME")
            Me.columnSTRCLIENTLASTNAME = MyBase.Columns("STRCLIENTLASTNAME")
            Me.columnSTRCLIENTSALUTATION = MyBase.Columns("STRCLIENTSALUTATION")
            Me.columnSTRCLIENTCREDENTIALS = MyBase.Columns("STRCLIENTCREDENTIALS")
            Me.columnSTRCLIENTTITLE = MyBase.Columns("STRCLIENTTITLE")
            Me.columnSTRCLIENTPHONENUMBER = MyBase.Columns("STRCLIENTPHONENUMBER")
            Me.columnSTRCLIENTCELLPHONE = MyBase.Columns("STRCLIENTCELLPHONE")
            Me.columnSTRCLIENTFAX = MyBase.Columns("STRCLIENTFAX")
            Me.columnSTRCLIENTEMAIL = MyBase.Columns("STRCLIENTEMAIL")
            Me.columnSTRCLIENTADDRESS = MyBase.Columns("STRCLIENTADDRESS")
            Me.columnSTRCLIENTCITY = MyBase.Columns("STRCLIENTCITY")
            Me.columnSTRCLIENTSTATE = MyBase.Columns("STRCLIENTSTATE")
            Me.columnSTRCLIENTZIPCODE = MyBase.Columns("STRCLIENTZIPCODE")
            Me.columnSTRCLIENTCREATOR = MyBase.Columns("STRCLIENTCREATOR")
            Me.columnDATCLIENTCREATED = MyBase.Columns("DATCLIENTCREATED")
            Me.columnSTRMODIFINGPERSON = MyBase.Columns("STRMODIFINGPERSON")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
            Me.columnSTRCONTACTNOTES = MyBase.Columns("STRCONTACTNOTES")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENTCONTACTID = New Global.System.Data.DataColumn("CLIENTCONTACTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTCONTACTID)
            Me.columnSTRCLIENTFIRSTNAME = New Global.System.Data.DataColumn("STRCLIENTFIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTFIRSTNAME)
            Me.columnSTRCLIENTLASTNAME = New Global.System.Data.DataColumn("STRCLIENTLASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTLASTNAME)
            Me.columnSTRCLIENTSALUTATION = New Global.System.Data.DataColumn("STRCLIENTSALUTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTSALUTATION)
            Me.columnSTRCLIENTCREDENTIALS = New Global.System.Data.DataColumn("STRCLIENTCREDENTIALS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTCREDENTIALS)
            Me.columnSTRCLIENTTITLE = New Global.System.Data.DataColumn("STRCLIENTTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTTITLE)
            Me.columnSTRCLIENTPHONENUMBER = New Global.System.Data.DataColumn("STRCLIENTPHONENUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTPHONENUMBER)
            Me.columnSTRCLIENTCELLPHONE = New Global.System.Data.DataColumn("STRCLIENTCELLPHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTCELLPHONE)
            Me.columnSTRCLIENTFAX = New Global.System.Data.DataColumn("STRCLIENTFAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTFAX)
            Me.columnSTRCLIENTEMAIL = New Global.System.Data.DataColumn("STRCLIENTEMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTEMAIL)
            Me.columnSTRCLIENTADDRESS = New Global.System.Data.DataColumn("STRCLIENTADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTADDRESS)
            Me.columnSTRCLIENTCITY = New Global.System.Data.DataColumn("STRCLIENTCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTCITY)
            Me.columnSTRCLIENTSTATE = New Global.System.Data.DataColumn("STRCLIENTSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTSTATE)
            Me.columnSTRCLIENTZIPCODE = New Global.System.Data.DataColumn("STRCLIENTZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTZIPCODE)
            Me.columnSTRCLIENTCREATOR = New Global.System.Data.DataColumn("STRCLIENTCREATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTCREATOR)
            Me.columnDATCLIENTCREATED = New Global.System.Data.DataColumn("DATCLIENTCREATED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCLIENTCREATED)
            Me.columnSTRMODIFINGPERSON = New Global.System.Data.DataColumn("STRMODIFINGPERSON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGPERSON)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRCONTACTNOTES = New Global.System.Data.DataColumn("STRCONTACTNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONTACTNOTES)
            Me.columnSTRCLIENTFIRSTNAME.MaxLength = 250
            Me.columnSTRCLIENTLASTNAME.MaxLength = 250
            Me.columnSTRCLIENTSALUTATION.MaxLength = 100
            Me.columnSTRCLIENTCREDENTIALS.MaxLength = 100
            Me.columnSTRCLIENTTITLE.MaxLength = 250
            Me.columnSTRCLIENTPHONENUMBER.MaxLength = 4000
            Me.columnSTRCLIENTCELLPHONE.MaxLength = 4000
            Me.columnSTRCLIENTFAX.MaxLength = 4000
            Me.columnSTRCLIENTEMAIL.MaxLength = 4000
            Me.columnSTRCLIENTADDRESS.MaxLength = 4000
            Me.columnSTRCLIENTCITY.MaxLength = 4000
            Me.columnSTRCLIENTSTATE.MaxLength = 5
            Me.columnSTRCLIENTZIPCODE.MaxLength = 4000
            Me.columnSTRCLIENTCREATOR.MaxLength = 1000
            Me.columnSTRMODIFINGPERSON.MaxLength = 1000
            Me.columnSTRCONTACTNOTES.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCLIENTCONTACTSRow() As SBEAPCLIENTCONTACTSRow
            Return CType(Me.NewRow,SBEAPCLIENTCONTACTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCLIENTCONTACTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCLIENTCONTACTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCLIENTCONTACTSRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTCONTACTSRowChanged(Me, New SBEAPCLIENTCONTACTSRowChangeEvent(CType(e.Row,SBEAPCLIENTCONTACTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCLIENTCONTACTSRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTCONTACTSRowChanging(Me, New SBEAPCLIENTCONTACTSRowChangeEvent(CType(e.Row,SBEAPCLIENTCONTACTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCLIENTCONTACTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTCONTACTSRowDeleted(Me, New SBEAPCLIENTCONTACTSRowChangeEvent(CType(e.Row,SBEAPCLIENTCONTACTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCLIENTCONTACTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTCONTACTSRowDeleting(Me, New SBEAPCLIENTCONTACTSRowChangeEvent(CType(e.Row,SBEAPCLIENTCONTACTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCLIENTCONTACTSRow(ByVal row As SBEAPCLIENTCONTACTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCLIENTCONTACTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCLIENTDATADataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCLIENTDATARow)
        
        Private columnCLIENTID As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTWEBSITE As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTSIC As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTNAICS As Global.System.Data.DataColumn
        
        Private columnSTRCLIENTEMPLOYEES As Global.System.Data.DataColumn
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRAIRPROGRAMCODES As Global.System.Data.DataColumn
        
        Private columnSTRSTATEPROGRAMCODES As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGPERSON As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGCOMMENTS As Global.System.Data.DataColumn
        
        Private columnSTRAIRPERMITNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRSSCPENGINEER As Global.System.Data.DataColumn
        
        Private columnSTRSSCPUNIT As Global.System.Data.DataColumn
        
        Private columnSTRSSPPENGINEER As Global.System.Data.DataColumn
        
        Private columnSTRSSPPUNIT As Global.System.Data.DataColumn
        
        Private columnSTRISMPENGINEER As Global.System.Data.DataColumn
        
        Private columnSTRISMPUNIT As Global.System.Data.DataColumn
        
        Private columnSTRAIRDESCRIPTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCLIENTDATA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTWEBSITEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTWEBSITE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTSICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTSIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTNAICSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTNAICS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCLIENTEMPLOYEESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCLIENTEMPLOYEES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRPROGRAMCODESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRPROGRAMCODES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSTATEPROGRAMCODESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSTATEPROGRAMCODES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGPERSONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGPERSON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRPERMITNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRPERMITNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSSCPENGINEERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSSCPENGINEER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSSCPUNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSSCPUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSSPPENGINEERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSSPPENGINEER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSSPPUNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSSPPUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRISMPENGINEERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRISMPENGINEER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRISMPUNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRISMPUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCLIENTDATARow
            Get
                Return CType(Me.Rows(index),SBEAPCLIENTDATARow)
            End Get
        End Property
        
        Public Event SBEAPCLIENTDATARowChanging As SBEAPCLIENTDATARowChangeEventHandler
        
        Public Event SBEAPCLIENTDATARowChanged As SBEAPCLIENTDATARowChangeEventHandler
        
        Public Event SBEAPCLIENTDATARowDeleting As SBEAPCLIENTDATARowChangeEventHandler
        
        Public Event SBEAPCLIENTDATARowDeleted As SBEAPCLIENTDATARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCLIENTDATARow(ByVal row As SBEAPCLIENTDATARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCLIENTDATARow( _
                    ByVal CLIENTID As Decimal,  _
                    ByVal STRCLIENTDESCRIPTION As String,  _
                    ByVal STRCLIENTWEBSITE As String,  _
                    ByVal STRCLIENTSIC As String,  _
                    ByVal STRCLIENTNAICS As String,  _
                    ByVal STRCLIENTEMPLOYEES As Decimal,  _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal STRAIRPROGRAMCODES As String,  _
                    ByVal STRSTATEPROGRAMCODES As String,  _
                    ByVal STRMODIFINGPERSON As String,  _
                    ByVal DATMODIFINGDATE As Date,  _
                    ByVal STRMODIFINGCOMMENTS As String,  _
                    ByVal STRAIRPERMITNUMBER As String,  _
                    ByVal STRSSCPENGINEER As String,  _
                    ByVal STRSSCPUNIT As String,  _
                    ByVal STRSSPPENGINEER As String,  _
                    ByVal STRSSPPUNIT As String,  _
                    ByVal STRISMPENGINEER As String,  _
                    ByVal STRISMPUNIT As String,  _
                    ByVal STRAIRDESCRIPTION As String) As SBEAPCLIENTDATARow
            Dim rowSBEAPCLIENTDATARow As SBEAPCLIENTDATARow = CType(Me.NewRow,SBEAPCLIENTDATARow)
            Dim columnValuesArray() As Object = New Object() {CLIENTID, STRCLIENTDESCRIPTION, STRCLIENTWEBSITE, STRCLIENTSIC, STRCLIENTNAICS, STRCLIENTEMPLOYEES, STRAIRSNUMBER, STRAIRPROGRAMCODES, STRSTATEPROGRAMCODES, STRMODIFINGPERSON, DATMODIFINGDATE, STRMODIFINGCOMMENTS, STRAIRPERMITNUMBER, STRSSCPENGINEER, STRSSCPUNIT, STRSSPPENGINEER, STRSSPPUNIT, STRISMPENGINEER, STRISMPUNIT, STRAIRDESCRIPTION}
            rowSBEAPCLIENTDATARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCLIENTDATARow)
            Return rowSBEAPCLIENTDATARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCLIENTDATADataTable = CType(MyBase.Clone,SBEAPCLIENTDATADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCLIENTDATADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENTID = MyBase.Columns("CLIENTID")
            Me.columnSTRCLIENTDESCRIPTION = MyBase.Columns("STRCLIENTDESCRIPTION")
            Me.columnSTRCLIENTWEBSITE = MyBase.Columns("STRCLIENTWEBSITE")
            Me.columnSTRCLIENTSIC = MyBase.Columns("STRCLIENTSIC")
            Me.columnSTRCLIENTNAICS = MyBase.Columns("STRCLIENTNAICS")
            Me.columnSTRCLIENTEMPLOYEES = MyBase.Columns("STRCLIENTEMPLOYEES")
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRAIRPROGRAMCODES = MyBase.Columns("STRAIRPROGRAMCODES")
            Me.columnSTRSTATEPROGRAMCODES = MyBase.Columns("STRSTATEPROGRAMCODES")
            Me.columnSTRMODIFINGPERSON = MyBase.Columns("STRMODIFINGPERSON")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
            Me.columnSTRMODIFINGCOMMENTS = MyBase.Columns("STRMODIFINGCOMMENTS")
            Me.columnSTRAIRPERMITNUMBER = MyBase.Columns("STRAIRPERMITNUMBER")
            Me.columnSTRSSCPENGINEER = MyBase.Columns("STRSSCPENGINEER")
            Me.columnSTRSSCPUNIT = MyBase.Columns("STRSSCPUNIT")
            Me.columnSTRSSPPENGINEER = MyBase.Columns("STRSSPPENGINEER")
            Me.columnSTRSSPPUNIT = MyBase.Columns("STRSSPPUNIT")
            Me.columnSTRISMPENGINEER = MyBase.Columns("STRISMPENGINEER")
            Me.columnSTRISMPUNIT = MyBase.Columns("STRISMPUNIT")
            Me.columnSTRAIRDESCRIPTION = MyBase.Columns("STRAIRDESCRIPTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENTID = New Global.System.Data.DataColumn("CLIENTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTID)
            Me.columnSTRCLIENTDESCRIPTION = New Global.System.Data.DataColumn("STRCLIENTDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTDESCRIPTION)
            Me.columnSTRCLIENTWEBSITE = New Global.System.Data.DataColumn("STRCLIENTWEBSITE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTWEBSITE)
            Me.columnSTRCLIENTSIC = New Global.System.Data.DataColumn("STRCLIENTSIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTSIC)
            Me.columnSTRCLIENTNAICS = New Global.System.Data.DataColumn("STRCLIENTNAICS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTNAICS)
            Me.columnSTRCLIENTEMPLOYEES = New Global.System.Data.DataColumn("STRCLIENTEMPLOYEES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCLIENTEMPLOYEES)
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRAIRPROGRAMCODES = New Global.System.Data.DataColumn("STRAIRPROGRAMCODES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRPROGRAMCODES)
            Me.columnSTRSTATEPROGRAMCODES = New Global.System.Data.DataColumn("STRSTATEPROGRAMCODES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSTATEPROGRAMCODES)
            Me.columnSTRMODIFINGPERSON = New Global.System.Data.DataColumn("STRMODIFINGPERSON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGPERSON)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRMODIFINGCOMMENTS = New Global.System.Data.DataColumn("STRMODIFINGCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGCOMMENTS)
            Me.columnSTRAIRPERMITNUMBER = New Global.System.Data.DataColumn("STRAIRPERMITNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRPERMITNUMBER)
            Me.columnSTRSSCPENGINEER = New Global.System.Data.DataColumn("STRSSCPENGINEER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSSCPENGINEER)
            Me.columnSTRSSCPUNIT = New Global.System.Data.DataColumn("STRSSCPUNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSSCPUNIT)
            Me.columnSTRSSPPENGINEER = New Global.System.Data.DataColumn("STRSSPPENGINEER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSSPPENGINEER)
            Me.columnSTRSSPPUNIT = New Global.System.Data.DataColumn("STRSSPPUNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSSPPUNIT)
            Me.columnSTRISMPENGINEER = New Global.System.Data.DataColumn("STRISMPENGINEER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRISMPENGINEER)
            Me.columnSTRISMPUNIT = New Global.System.Data.DataColumn("STRISMPUNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRISMPUNIT)
            Me.columnSTRAIRDESCRIPTION = New Global.System.Data.DataColumn("STRAIRDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRDESCRIPTION)
            Me.columnSTRCLIENTDESCRIPTION.MaxLength = 4000
            Me.columnSTRCLIENTWEBSITE.MaxLength = 4000
            Me.columnSTRCLIENTSIC.MaxLength = 4
            Me.columnSTRCLIENTNAICS.MaxLength = 6
            Me.columnSTRAIRSNUMBER.MaxLength = 12
            Me.columnSTRAIRPROGRAMCODES.MaxLength = 15
            Me.columnSTRSTATEPROGRAMCODES.MaxLength = 5
            Me.columnSTRMODIFINGPERSON.MaxLength = 4000
            Me.columnSTRMODIFINGCOMMENTS.MaxLength = 4000
            Me.columnSTRAIRPERMITNUMBER.MaxLength = 4000
            Me.columnSTRSSCPENGINEER.MaxLength = 4000
            Me.columnSTRSSCPUNIT.MaxLength = 4000
            Me.columnSTRSSPPENGINEER.MaxLength = 4000
            Me.columnSTRSSPPUNIT.MaxLength = 4000
            Me.columnSTRISMPENGINEER.MaxLength = 4000
            Me.columnSTRISMPUNIT.MaxLength = 4000
            Me.columnSTRAIRDESCRIPTION.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCLIENTDATARow() As SBEAPCLIENTDATARow
            Return CType(Me.NewRow,SBEAPCLIENTDATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCLIENTDATARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCLIENTDATARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCLIENTDATARowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTDATARowChanged(Me, New SBEAPCLIENTDATARowChangeEvent(CType(e.Row,SBEAPCLIENTDATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCLIENTDATARowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTDATARowChanging(Me, New SBEAPCLIENTDATARowChangeEvent(CType(e.Row,SBEAPCLIENTDATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCLIENTDATARowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTDATARowDeleted(Me, New SBEAPCLIENTDATARowChangeEvent(CType(e.Row,SBEAPCLIENTDATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCLIENTDATARowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTDATARowDeleting(Me, New SBEAPCLIENTDATARowChangeEvent(CType(e.Row,SBEAPCLIENTDATARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCLIENTDATARow(ByVal row As SBEAPCLIENTDATARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCLIENTDATADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCLIENTLINKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCLIENTLINKRow)
        
        Private columnCLIENTID As Global.System.Data.DataColumn
        
        Private columnCLIENTCONTACTID As Global.System.Data.DataColumn
        
        Private columnSTRMAINCONTACT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCLIENTLINK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTCONTACTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTCONTACTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMAINCONTACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMAINCONTACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCLIENTLINKRow
            Get
                Return CType(Me.Rows(index),SBEAPCLIENTLINKRow)
            End Get
        End Property
        
        Public Event SBEAPCLIENTLINKRowChanging As SBEAPCLIENTLINKRowChangeEventHandler
        
        Public Event SBEAPCLIENTLINKRowChanged As SBEAPCLIENTLINKRowChangeEventHandler
        
        Public Event SBEAPCLIENTLINKRowDeleting As SBEAPCLIENTLINKRowChangeEventHandler
        
        Public Event SBEAPCLIENTLINKRowDeleted As SBEAPCLIENTLINKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCLIENTLINKRow(ByVal row As SBEAPCLIENTLINKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCLIENTLINKRow(ByVal CLIENTID As Decimal, ByVal CLIENTCONTACTID As Decimal, ByVal STRMAINCONTACT As String) As SBEAPCLIENTLINKRow
            Dim rowSBEAPCLIENTLINKRow As SBEAPCLIENTLINKRow = CType(Me.NewRow,SBEAPCLIENTLINKRow)
            Dim columnValuesArray() As Object = New Object() {CLIENTID, CLIENTCONTACTID, STRMAINCONTACT}
            rowSBEAPCLIENTLINKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCLIENTLINKRow)
            Return rowSBEAPCLIENTLINKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCLIENTLINKDataTable = CType(MyBase.Clone,SBEAPCLIENTLINKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCLIENTLINKDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENTID = MyBase.Columns("CLIENTID")
            Me.columnCLIENTCONTACTID = MyBase.Columns("CLIENTCONTACTID")
            Me.columnSTRMAINCONTACT = MyBase.Columns("STRMAINCONTACT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENTID = New Global.System.Data.DataColumn("CLIENTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTID)
            Me.columnCLIENTCONTACTID = New Global.System.Data.DataColumn("CLIENTCONTACTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTCONTACTID)
            Me.columnSTRMAINCONTACT = New Global.System.Data.DataColumn("STRMAINCONTACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMAINCONTACT)
            Me.columnSTRMAINCONTACT.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCLIENTLINKRow() As SBEAPCLIENTLINKRow
            Return CType(Me.NewRow,SBEAPCLIENTLINKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCLIENTLINKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCLIENTLINKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCLIENTLINKRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTLINKRowChanged(Me, New SBEAPCLIENTLINKRowChangeEvent(CType(e.Row,SBEAPCLIENTLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCLIENTLINKRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTLINKRowChanging(Me, New SBEAPCLIENTLINKRowChangeEvent(CType(e.Row,SBEAPCLIENTLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCLIENTLINKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTLINKRowDeleted(Me, New SBEAPCLIENTLINKRowChangeEvent(CType(e.Row,SBEAPCLIENTLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCLIENTLINKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTLINKRowDeleting(Me, New SBEAPCLIENTLINKRowChangeEvent(CType(e.Row,SBEAPCLIENTLINKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCLIENTLINKRow(ByVal row As SBEAPCLIENTLINKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCLIENTLINKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCLIENTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCLIENTSRow)
        
        Private columnCLIENTID As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYNAME As Global.System.Data.DataColumn
        
        Private columnDATSTARTDATE As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYADDRESS As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYADDRESS2 As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYCITY As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYSTATE As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYZIPCODE As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYCOUNTY As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYLATITUDE As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYLONGITUDE As Global.System.Data.DataColumn
        
        Private columnSTRMAILINGADDRESS As Global.System.Data.DataColumn
        
        Private columnSTRMAILINGADDRESS2 As Global.System.Data.DataColumn
        
        Private columnSTRMAILINGCITY As Global.System.Data.DataColumn
        
        Private columnSTRMAILINGSTATE As Global.System.Data.DataColumn
        
        Private columnSTRMAILINGZIPCODE As Global.System.Data.DataColumn
        
        Private columnSTRCOMPANYCREATOR As Global.System.Data.DataColumn
        
        Private columnDATCOMPANYCREATED As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGPERSON As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGCOMMENTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCLIENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENTIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENTID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATSTARTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATSTARTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYADDRESS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYCOUNTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYCOUNTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYLATITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYLATITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYLONGITUDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYLONGITUDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMAILINGADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMAILINGADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMAILINGADDRESS2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMAILINGADDRESS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMAILINGCITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMAILINGCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMAILINGSTATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMAILINGSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMAILINGZIPCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMAILINGZIPCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCOMPANYCREATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCOMPANYCREATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCOMPANYCREATEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCOMPANYCREATED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGPERSONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGPERSON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGCOMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCLIENTSRow
            Get
                Return CType(Me.Rows(index),SBEAPCLIENTSRow)
            End Get
        End Property
        
        Public Event SBEAPCLIENTSRowChanging As SBEAPCLIENTSRowChangeEventHandler
        
        Public Event SBEAPCLIENTSRowChanged As SBEAPCLIENTSRowChangeEventHandler
        
        Public Event SBEAPCLIENTSRowDeleting As SBEAPCLIENTSRowChangeEventHandler
        
        Public Event SBEAPCLIENTSRowDeleted As SBEAPCLIENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCLIENTSRow(ByVal row As SBEAPCLIENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCLIENTSRow( _
                    ByVal CLIENTID As Decimal,  _
                    ByVal STRCOMPANYNAME As String,  _
                    ByVal DATSTARTDATE As Date,  _
                    ByVal STRCOMPANYADDRESS As String,  _
                    ByVal STRCOMPANYADDRESS2 As String,  _
                    ByVal STRCOMPANYCITY As String,  _
                    ByVal STRCOMPANYSTATE As String,  _
                    ByVal STRCOMPANYZIPCODE As String,  _
                    ByVal STRCOMPANYCOUNTY As String,  _
                    ByVal STRCOMPANYLATITUDE As String,  _
                    ByVal STRCOMPANYLONGITUDE As String,  _
                    ByVal STRMAILINGADDRESS As String,  _
                    ByVal STRMAILINGADDRESS2 As String,  _
                    ByVal STRMAILINGCITY As String,  _
                    ByVal STRMAILINGSTATE As String,  _
                    ByVal STRMAILINGZIPCODE As String,  _
                    ByVal STRCOMPANYCREATOR As String,  _
                    ByVal DATCOMPANYCREATED As Date,  _
                    ByVal STRMODIFINGPERSON As String,  _
                    ByVal DATMODIFINGDATE As Date,  _
                    ByVal STRMODIFINGCOMMENTS As String) As SBEAPCLIENTSRow
            Dim rowSBEAPCLIENTSRow As SBEAPCLIENTSRow = CType(Me.NewRow,SBEAPCLIENTSRow)
            Dim columnValuesArray() As Object = New Object() {CLIENTID, STRCOMPANYNAME, DATSTARTDATE, STRCOMPANYADDRESS, STRCOMPANYADDRESS2, STRCOMPANYCITY, STRCOMPANYSTATE, STRCOMPANYZIPCODE, STRCOMPANYCOUNTY, STRCOMPANYLATITUDE, STRCOMPANYLONGITUDE, STRMAILINGADDRESS, STRMAILINGADDRESS2, STRMAILINGCITY, STRMAILINGSTATE, STRMAILINGZIPCODE, STRCOMPANYCREATOR, DATCOMPANYCREATED, STRMODIFINGPERSON, DATMODIFINGDATE, STRMODIFINGCOMMENTS}
            rowSBEAPCLIENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCLIENTSRow)
            Return rowSBEAPCLIENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCLIENTSDataTable = CType(MyBase.Clone,SBEAPCLIENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCLIENTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENTID = MyBase.Columns("CLIENTID")
            Me.columnSTRCOMPANYNAME = MyBase.Columns("STRCOMPANYNAME")
            Me.columnDATSTARTDATE = MyBase.Columns("DATSTARTDATE")
            Me.columnSTRCOMPANYADDRESS = MyBase.Columns("STRCOMPANYADDRESS")
            Me.columnSTRCOMPANYADDRESS2 = MyBase.Columns("STRCOMPANYADDRESS2")
            Me.columnSTRCOMPANYCITY = MyBase.Columns("STRCOMPANYCITY")
            Me.columnSTRCOMPANYSTATE = MyBase.Columns("STRCOMPANYSTATE")
            Me.columnSTRCOMPANYZIPCODE = MyBase.Columns("STRCOMPANYZIPCODE")
            Me.columnSTRCOMPANYCOUNTY = MyBase.Columns("STRCOMPANYCOUNTY")
            Me.columnSTRCOMPANYLATITUDE = MyBase.Columns("STRCOMPANYLATITUDE")
            Me.columnSTRCOMPANYLONGITUDE = MyBase.Columns("STRCOMPANYLONGITUDE")
            Me.columnSTRMAILINGADDRESS = MyBase.Columns("STRMAILINGADDRESS")
            Me.columnSTRMAILINGADDRESS2 = MyBase.Columns("STRMAILINGADDRESS2")
            Me.columnSTRMAILINGCITY = MyBase.Columns("STRMAILINGCITY")
            Me.columnSTRMAILINGSTATE = MyBase.Columns("STRMAILINGSTATE")
            Me.columnSTRMAILINGZIPCODE = MyBase.Columns("STRMAILINGZIPCODE")
            Me.columnSTRCOMPANYCREATOR = MyBase.Columns("STRCOMPANYCREATOR")
            Me.columnDATCOMPANYCREATED = MyBase.Columns("DATCOMPANYCREATED")
            Me.columnSTRMODIFINGPERSON = MyBase.Columns("STRMODIFINGPERSON")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
            Me.columnSTRMODIFINGCOMMENTS = MyBase.Columns("STRMODIFINGCOMMENTS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENTID = New Global.System.Data.DataColumn("CLIENTID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENTID)
            Me.columnSTRCOMPANYNAME = New Global.System.Data.DataColumn("STRCOMPANYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYNAME)
            Me.columnDATSTARTDATE = New Global.System.Data.DataColumn("DATSTARTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATSTARTDATE)
            Me.columnSTRCOMPANYADDRESS = New Global.System.Data.DataColumn("STRCOMPANYADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYADDRESS)
            Me.columnSTRCOMPANYADDRESS2 = New Global.System.Data.DataColumn("STRCOMPANYADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYADDRESS2)
            Me.columnSTRCOMPANYCITY = New Global.System.Data.DataColumn("STRCOMPANYCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYCITY)
            Me.columnSTRCOMPANYSTATE = New Global.System.Data.DataColumn("STRCOMPANYSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYSTATE)
            Me.columnSTRCOMPANYZIPCODE = New Global.System.Data.DataColumn("STRCOMPANYZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYZIPCODE)
            Me.columnSTRCOMPANYCOUNTY = New Global.System.Data.DataColumn("STRCOMPANYCOUNTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYCOUNTY)
            Me.columnSTRCOMPANYLATITUDE = New Global.System.Data.DataColumn("STRCOMPANYLATITUDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYLATITUDE)
            Me.columnSTRCOMPANYLONGITUDE = New Global.System.Data.DataColumn("STRCOMPANYLONGITUDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYLONGITUDE)
            Me.columnSTRMAILINGADDRESS = New Global.System.Data.DataColumn("STRMAILINGADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMAILINGADDRESS)
            Me.columnSTRMAILINGADDRESS2 = New Global.System.Data.DataColumn("STRMAILINGADDRESS2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMAILINGADDRESS2)
            Me.columnSTRMAILINGCITY = New Global.System.Data.DataColumn("STRMAILINGCITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMAILINGCITY)
            Me.columnSTRMAILINGSTATE = New Global.System.Data.DataColumn("STRMAILINGSTATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMAILINGSTATE)
            Me.columnSTRMAILINGZIPCODE = New Global.System.Data.DataColumn("STRMAILINGZIPCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMAILINGZIPCODE)
            Me.columnSTRCOMPANYCREATOR = New Global.System.Data.DataColumn("STRCOMPANYCREATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCOMPANYCREATOR)
            Me.columnDATCOMPANYCREATED = New Global.System.Data.DataColumn("DATCOMPANYCREATED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCOMPANYCREATED)
            Me.columnSTRMODIFINGPERSON = New Global.System.Data.DataColumn("STRMODIFINGPERSON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGPERSON)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRMODIFINGCOMMENTS = New Global.System.Data.DataColumn("STRMODIFINGCOMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGCOMMENTS)
            Me.columnSTRCOMPANYNAME.MaxLength = 4000
            Me.columnSTRCOMPANYADDRESS.MaxLength = 4000
            Me.columnSTRCOMPANYADDRESS2.MaxLength = 4000
            Me.columnSTRCOMPANYCITY.MaxLength = 4000
            Me.columnSTRCOMPANYSTATE.MaxLength = 5
            Me.columnSTRCOMPANYZIPCODE.MaxLength = 4000
            Me.columnSTRCOMPANYCOUNTY.MaxLength = 5
            Me.columnSTRCOMPANYLATITUDE.MaxLength = 8
            Me.columnSTRCOMPANYLONGITUDE.MaxLength = 8
            Me.columnSTRMAILINGADDRESS.MaxLength = 4000
            Me.columnSTRMAILINGADDRESS2.MaxLength = 4000
            Me.columnSTRMAILINGCITY.MaxLength = 4000
            Me.columnSTRMAILINGSTATE.MaxLength = 5
            Me.columnSTRMAILINGZIPCODE.MaxLength = 4000
            Me.columnSTRCOMPANYCREATOR.MaxLength = 4000
            Me.columnSTRMODIFINGPERSON.MaxLength = 4000
            Me.columnSTRMODIFINGCOMMENTS.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCLIENTSRow() As SBEAPCLIENTSRow
            Return CType(Me.NewRow,SBEAPCLIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCLIENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCLIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCLIENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTSRowChanged(Me, New SBEAPCLIENTSRowChangeEvent(CType(e.Row,SBEAPCLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCLIENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTSRowChanging(Me, New SBEAPCLIENTSRowChangeEvent(CType(e.Row,SBEAPCLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCLIENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTSRowDeleted(Me, New SBEAPCLIENTSRowChangeEvent(CType(e.Row,SBEAPCLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCLIENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCLIENTSRowDeleting(Me, New SBEAPCLIENTSRowChangeEvent(CType(e.Row,SBEAPCLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCLIENTSRow(ByVal row As SBEAPCLIENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCLIENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPCONFERENCELOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPCONFERENCELOGRow)
        
        Private columnNUMACTIONID As Global.System.Data.DataColumn
        
        Private columnSTRCONFERENCEATTENDED As Global.System.Data.DataColumn
        
        Private columnSTRCONFERENCELOCATION As Global.System.Data.DataColumn
        
        Private columnSTRCONFERENCETOPIC As Global.System.Data.DataColumn
        
        Private columnSTRATTENDEES As Global.System.Data.DataColumn
        
        Private columnDATCONFERENCESTARTED As Global.System.Data.DataColumn
        
        Private columnDATCONFERENCEENDED As Global.System.Data.DataColumn
        
        Private columnSTRSBEAPPRESENTATION As Global.System.Data.DataColumn
        
        Private columnSTRLISTOFBUSINESSSECTORS As Global.System.Data.DataColumn
        
        Private columnSTRCONFERENCEFOLLOWUP As Global.System.Data.DataColumn
        
        Private columnSTRSTAFFATTENDING As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPCONFERENCELOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONFERENCEATTENDEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONFERENCEATTENDED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONFERENCELOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONFERENCELOCATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONFERENCETOPICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONFERENCETOPIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRATTENDEESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRATTENDEES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCONFERENCESTARTEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCONFERENCESTARTED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATCONFERENCEENDEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATCONFERENCEENDED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSBEAPPRESENTATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSBEAPPRESENTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRLISTOFBUSINESSSECTORSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRLISTOFBUSINESSSECTORS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCONFERENCEFOLLOWUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCONFERENCEFOLLOWUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSTAFFATTENDINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSTAFFATTENDING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPCONFERENCELOGRow
            Get
                Return CType(Me.Rows(index),SBEAPCONFERENCELOGRow)
            End Get
        End Property
        
        Public Event SBEAPCONFERENCELOGRowChanging As SBEAPCONFERENCELOGRowChangeEventHandler
        
        Public Event SBEAPCONFERENCELOGRowChanged As SBEAPCONFERENCELOGRowChangeEventHandler
        
        Public Event SBEAPCONFERENCELOGRowDeleting As SBEAPCONFERENCELOGRowChangeEventHandler
        
        Public Event SBEAPCONFERENCELOGRowDeleted As SBEAPCONFERENCELOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPCONFERENCELOGRow(ByVal row As SBEAPCONFERENCELOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPCONFERENCELOGRow(ByVal NUMACTIONID As Decimal, ByVal STRCONFERENCEATTENDED As String, ByVal STRCONFERENCELOCATION As String, ByVal STRCONFERENCETOPIC As String, ByVal STRATTENDEES As String, ByVal DATCONFERENCESTARTED As Date, ByVal DATCONFERENCEENDED As Date, ByVal STRSBEAPPRESENTATION As String, ByVal STRLISTOFBUSINESSSECTORS As String, ByVal STRCONFERENCEFOLLOWUP As String, ByVal STRSTAFFATTENDING As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As Date) As SBEAPCONFERENCELOGRow
            Dim rowSBEAPCONFERENCELOGRow As SBEAPCONFERENCELOGRow = CType(Me.NewRow,SBEAPCONFERENCELOGRow)
            Dim columnValuesArray() As Object = New Object() {NUMACTIONID, STRCONFERENCEATTENDED, STRCONFERENCELOCATION, STRCONFERENCETOPIC, STRATTENDEES, DATCONFERENCESTARTED, DATCONFERENCEENDED, STRSBEAPPRESENTATION, STRLISTOFBUSINESSSECTORS, STRCONFERENCEFOLLOWUP, STRSTAFFATTENDING, STRMODIFINGSTAFF, DATMODIFINGDATE}
            rowSBEAPCONFERENCELOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPCONFERENCELOGRow)
            Return rowSBEAPCONFERENCELOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPCONFERENCELOGDataTable = CType(MyBase.Clone,SBEAPCONFERENCELOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPCONFERENCELOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACTIONID = MyBase.Columns("NUMACTIONID")
            Me.columnSTRCONFERENCEATTENDED = MyBase.Columns("STRCONFERENCEATTENDED")
            Me.columnSTRCONFERENCELOCATION = MyBase.Columns("STRCONFERENCELOCATION")
            Me.columnSTRCONFERENCETOPIC = MyBase.Columns("STRCONFERENCETOPIC")
            Me.columnSTRATTENDEES = MyBase.Columns("STRATTENDEES")
            Me.columnDATCONFERENCESTARTED = MyBase.Columns("DATCONFERENCESTARTED")
            Me.columnDATCONFERENCEENDED = MyBase.Columns("DATCONFERENCEENDED")
            Me.columnSTRSBEAPPRESENTATION = MyBase.Columns("STRSBEAPPRESENTATION")
            Me.columnSTRLISTOFBUSINESSSECTORS = MyBase.Columns("STRLISTOFBUSINESSSECTORS")
            Me.columnSTRCONFERENCEFOLLOWUP = MyBase.Columns("STRCONFERENCEFOLLOWUP")
            Me.columnSTRSTAFFATTENDING = MyBase.Columns("STRSTAFFATTENDING")
            Me.columnSTRMODIFINGSTAFF = MyBase.Columns("STRMODIFINGSTAFF")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACTIONID = New Global.System.Data.DataColumn("NUMACTIONID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONID)
            Me.columnSTRCONFERENCEATTENDED = New Global.System.Data.DataColumn("STRCONFERENCEATTENDED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONFERENCEATTENDED)
            Me.columnSTRCONFERENCELOCATION = New Global.System.Data.DataColumn("STRCONFERENCELOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONFERENCELOCATION)
            Me.columnSTRCONFERENCETOPIC = New Global.System.Data.DataColumn("STRCONFERENCETOPIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONFERENCETOPIC)
            Me.columnSTRATTENDEES = New Global.System.Data.DataColumn("STRATTENDEES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRATTENDEES)
            Me.columnDATCONFERENCESTARTED = New Global.System.Data.DataColumn("DATCONFERENCESTARTED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCONFERENCESTARTED)
            Me.columnDATCONFERENCEENDED = New Global.System.Data.DataColumn("DATCONFERENCEENDED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATCONFERENCEENDED)
            Me.columnSTRSBEAPPRESENTATION = New Global.System.Data.DataColumn("STRSBEAPPRESENTATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSBEAPPRESENTATION)
            Me.columnSTRLISTOFBUSINESSSECTORS = New Global.System.Data.DataColumn("STRLISTOFBUSINESSSECTORS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRLISTOFBUSINESSSECTORS)
            Me.columnSTRCONFERENCEFOLLOWUP = New Global.System.Data.DataColumn("STRCONFERENCEFOLLOWUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCONFERENCEFOLLOWUP)
            Me.columnSTRSTAFFATTENDING = New Global.System.Data.DataColumn("STRSTAFFATTENDING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSTAFFATTENDING)
            Me.columnSTRMODIFINGSTAFF = New Global.System.Data.DataColumn("STRMODIFINGSTAFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGSTAFF)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRCONFERENCEATTENDED.MaxLength = 4000
            Me.columnSTRCONFERENCELOCATION.MaxLength = 4000
            Me.columnSTRCONFERENCETOPIC.MaxLength = 4000
            Me.columnSTRATTENDEES.MaxLength = 4000
            Me.columnSTRSBEAPPRESENTATION.MaxLength = 4000
            Me.columnSTRLISTOFBUSINESSSECTORS.MaxLength = 4000
            Me.columnSTRCONFERENCEFOLLOWUP.MaxLength = 4000
            Me.columnSTRSTAFFATTENDING.MaxLength = 4000
            Me.columnSTRMODIFINGSTAFF.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPCONFERENCELOGRow() As SBEAPCONFERENCELOGRow
            Return CType(Me.NewRow,SBEAPCONFERENCELOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPCONFERENCELOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPCONFERENCELOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPCONFERENCELOGRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPCONFERENCELOGRowChanged(Me, New SBEAPCONFERENCELOGRowChangeEvent(CType(e.Row,SBEAPCONFERENCELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPCONFERENCELOGRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPCONFERENCELOGRowChanging(Me, New SBEAPCONFERENCELOGRowChangeEvent(CType(e.Row,SBEAPCONFERENCELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPCONFERENCELOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPCONFERENCELOGRowDeleted(Me, New SBEAPCONFERENCELOGRowChangeEvent(CType(e.Row,SBEAPCONFERENCELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPCONFERENCELOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPCONFERENCELOGRowDeleting(Me, New SBEAPCONFERENCELOGRowChangeEvent(CType(e.Row,SBEAPCONFERENCELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPCONFERENCELOGRow(ByVal row As SBEAPCONFERENCELOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPCONFERENCELOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPERRORLOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPERRORLOGRow)
        
        Private columnSTRERRORNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRUSER As Global.System.Data.DataColumn
        
        Private columnSTRERRORLOCATION As Global.System.Data.DataColumn
        
        Private columnSTRERRORMESSAGE As Global.System.Data.DataColumn
        
        Private columnDATERRORDATE As Global.System.Data.DataColumn
        
        Private columnSTRSOLUTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPERRORLOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRERRORNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRERRORNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRUSERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRERRORLOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRERRORLOCATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRERRORMESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRERRORMESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATERRORDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATERRORDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSOLUTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSOLUTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPERRORLOGRow
            Get
                Return CType(Me.Rows(index),SBEAPERRORLOGRow)
            End Get
        End Property
        
        Public Event SBEAPERRORLOGRowChanging As SBEAPERRORLOGRowChangeEventHandler
        
        Public Event SBEAPERRORLOGRowChanged As SBEAPERRORLOGRowChangeEventHandler
        
        Public Event SBEAPERRORLOGRowDeleting As SBEAPERRORLOGRowChangeEventHandler
        
        Public Event SBEAPERRORLOGRowDeleted As SBEAPERRORLOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPERRORLOGRow(ByVal row As SBEAPERRORLOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPERRORLOGRow(ByVal STRERRORNUMBER As Decimal, ByVal STRUSER As String, ByVal STRERRORLOCATION As String, ByVal STRERRORMESSAGE As String, ByVal DATERRORDATE As Date, ByVal STRSOLUTION As String) As SBEAPERRORLOGRow
            Dim rowSBEAPERRORLOGRow As SBEAPERRORLOGRow = CType(Me.NewRow,SBEAPERRORLOGRow)
            Dim columnValuesArray() As Object = New Object() {STRERRORNUMBER, STRUSER, STRERRORLOCATION, STRERRORMESSAGE, DATERRORDATE, STRSOLUTION}
            rowSBEAPERRORLOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPERRORLOGRow)
            Return rowSBEAPERRORLOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPERRORLOGDataTable = CType(MyBase.Clone,SBEAPERRORLOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPERRORLOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTRERRORNUMBER = MyBase.Columns("STRERRORNUMBER")
            Me.columnSTRUSER = MyBase.Columns("STRUSER")
            Me.columnSTRERRORLOCATION = MyBase.Columns("STRERRORLOCATION")
            Me.columnSTRERRORMESSAGE = MyBase.Columns("STRERRORMESSAGE")
            Me.columnDATERRORDATE = MyBase.Columns("DATERRORDATE")
            Me.columnSTRSOLUTION = MyBase.Columns("STRSOLUTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTRERRORNUMBER = New Global.System.Data.DataColumn("STRERRORNUMBER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRERRORNUMBER)
            Me.columnSTRUSER = New Global.System.Data.DataColumn("STRUSER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRUSER)
            Me.columnSTRERRORLOCATION = New Global.System.Data.DataColumn("STRERRORLOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRERRORLOCATION)
            Me.columnSTRERRORMESSAGE = New Global.System.Data.DataColumn("STRERRORMESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRERRORMESSAGE)
            Me.columnDATERRORDATE = New Global.System.Data.DataColumn("DATERRORDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATERRORDATE)
            Me.columnSTRSOLUTION = New Global.System.Data.DataColumn("STRSOLUTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSOLUTION)
            Me.columnSTRUSER.MaxLength = 3
            Me.columnSTRERRORLOCATION.MaxLength = 4000
            Me.columnSTRERRORMESSAGE.MaxLength = 4000
            Me.columnSTRSOLUTION.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPERRORLOGRow() As SBEAPERRORLOGRow
            Return CType(Me.NewRow,SBEAPERRORLOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPERRORLOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPERRORLOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPERRORLOGRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPERRORLOGRowChanged(Me, New SBEAPERRORLOGRowChangeEvent(CType(e.Row,SBEAPERRORLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPERRORLOGRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPERRORLOGRowChanging(Me, New SBEAPERRORLOGRowChangeEvent(CType(e.Row,SBEAPERRORLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPERRORLOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPERRORLOGRowDeleted(Me, New SBEAPERRORLOGRowChangeEvent(CType(e.Row,SBEAPERRORLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPERRORLOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPERRORLOGRowDeleting(Me, New SBEAPERRORLOGRowChangeEvent(CType(e.Row,SBEAPERRORLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPERRORLOGRow(ByVal row As SBEAPERRORLOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPERRORLOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPOTHERLOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPOTHERLOGRow)
        
        Private columnNUMACTIONID As Global.System.Data.DataColumn
        
        Private columnSTRCASENOTES As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPOTHERLOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCASENOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCASENOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPOTHERLOGRow
            Get
                Return CType(Me.Rows(index),SBEAPOTHERLOGRow)
            End Get
        End Property
        
        Public Event SBEAPOTHERLOGRowChanging As SBEAPOTHERLOGRowChangeEventHandler
        
        Public Event SBEAPOTHERLOGRowChanged As SBEAPOTHERLOGRowChangeEventHandler
        
        Public Event SBEAPOTHERLOGRowDeleting As SBEAPOTHERLOGRowChangeEventHandler
        
        Public Event SBEAPOTHERLOGRowDeleted As SBEAPOTHERLOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPOTHERLOGRow(ByVal row As SBEAPOTHERLOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPOTHERLOGRow(ByVal NUMACTIONID As Decimal, ByVal STRCASENOTES As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As Date) As SBEAPOTHERLOGRow
            Dim rowSBEAPOTHERLOGRow As SBEAPOTHERLOGRow = CType(Me.NewRow,SBEAPOTHERLOGRow)
            Dim columnValuesArray() As Object = New Object() {NUMACTIONID, STRCASENOTES, STRMODIFINGSTAFF, DATMODIFINGDATE}
            rowSBEAPOTHERLOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPOTHERLOGRow)
            Return rowSBEAPOTHERLOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPOTHERLOGDataTable = CType(MyBase.Clone,SBEAPOTHERLOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPOTHERLOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACTIONID = MyBase.Columns("NUMACTIONID")
            Me.columnSTRCASENOTES = MyBase.Columns("STRCASENOTES")
            Me.columnSTRMODIFINGSTAFF = MyBase.Columns("STRMODIFINGSTAFF")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACTIONID = New Global.System.Data.DataColumn("NUMACTIONID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONID)
            Me.columnSTRCASENOTES = New Global.System.Data.DataColumn("STRCASENOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCASENOTES)
            Me.columnSTRMODIFINGSTAFF = New Global.System.Data.DataColumn("STRMODIFINGSTAFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGSTAFF)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRCASENOTES.MaxLength = 4000
            Me.columnSTRMODIFINGSTAFF.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPOTHERLOGRow() As SBEAPOTHERLOGRow
            Return CType(Me.NewRow,SBEAPOTHERLOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPOTHERLOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPOTHERLOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPOTHERLOGRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPOTHERLOGRowChanged(Me, New SBEAPOTHERLOGRowChangeEvent(CType(e.Row,SBEAPOTHERLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPOTHERLOGRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPOTHERLOGRowChanging(Me, New SBEAPOTHERLOGRowChangeEvent(CType(e.Row,SBEAPOTHERLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPOTHERLOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPOTHERLOGRowDeleted(Me, New SBEAPOTHERLOGRowChangeEvent(CType(e.Row,SBEAPOTHERLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPOTHERLOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPOTHERLOGRowDeleting(Me, New SBEAPOTHERLOGRowChangeEvent(CType(e.Row,SBEAPOTHERLOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPOTHERLOGRow(ByVal row As SBEAPOTHERLOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPOTHERLOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPPERMISSIONSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPPERMISSIONSRow)
        
        Private columnNUMUSERID As Global.System.Data.DataColumn
        
        Private columnSTRSBEAPPERMISSIONS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPPERMISSIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMUSERIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMUSERID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRSBEAPPERMISSIONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRSBEAPPERMISSIONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPPERMISSIONSRow
            Get
                Return CType(Me.Rows(index),SBEAPPERMISSIONSRow)
            End Get
        End Property
        
        Public Event SBEAPPERMISSIONSRowChanging As SBEAPPERMISSIONSRowChangeEventHandler
        
        Public Event SBEAPPERMISSIONSRowChanged As SBEAPPERMISSIONSRowChangeEventHandler
        
        Public Event SBEAPPERMISSIONSRowDeleting As SBEAPPERMISSIONSRowChangeEventHandler
        
        Public Event SBEAPPERMISSIONSRowDeleted As SBEAPPERMISSIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPPERMISSIONSRow(ByVal row As SBEAPPERMISSIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPPERMISSIONSRow(ByVal NUMUSERID As Decimal, ByVal STRSBEAPPERMISSIONS As String) As SBEAPPERMISSIONSRow
            Dim rowSBEAPPERMISSIONSRow As SBEAPPERMISSIONSRow = CType(Me.NewRow,SBEAPPERMISSIONSRow)
            Dim columnValuesArray() As Object = New Object() {NUMUSERID, STRSBEAPPERMISSIONS}
            rowSBEAPPERMISSIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPPERMISSIONSRow)
            Return rowSBEAPPERMISSIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNUMUSERID(ByVal NUMUSERID As Decimal) As SBEAPPERMISSIONSRow
            Return CType(Me.Rows.Find(New Object() {NUMUSERID}),SBEAPPERMISSIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPPERMISSIONSDataTable = CType(MyBase.Clone,SBEAPPERMISSIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPPERMISSIONSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMUSERID = MyBase.Columns("NUMUSERID")
            Me.columnSTRSBEAPPERMISSIONS = MyBase.Columns("STRSBEAPPERMISSIONS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMUSERID = New Global.System.Data.DataColumn("NUMUSERID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMUSERID)
            Me.columnSTRSBEAPPERMISSIONS = New Global.System.Data.DataColumn("STRSBEAPPERMISSIONS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRSBEAPPERMISSIONS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNUMUSERID}, true))
            Me.columnNUMUSERID.AllowDBNull = false
            Me.columnNUMUSERID.Unique = true
            Me.columnSTRSBEAPPERMISSIONS.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPPERMISSIONSRow() As SBEAPPERMISSIONSRow
            Return CType(Me.NewRow,SBEAPPERMISSIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPPERMISSIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPPERMISSIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPPERMISSIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPPERMISSIONSRowChanged(Me, New SBEAPPERMISSIONSRowChangeEvent(CType(e.Row,SBEAPPERMISSIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPPERMISSIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPPERMISSIONSRowChanging(Me, New SBEAPPERMISSIONSRowChangeEvent(CType(e.Row,SBEAPPERMISSIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPPERMISSIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPPERMISSIONSRowDeleted(Me, New SBEAPPERMISSIONSRowChangeEvent(CType(e.Row,SBEAPPERMISSIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPPERMISSIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPPERMISSIONSRowDeleting(Me, New SBEAPPERMISSIONSRowChangeEvent(CType(e.Row,SBEAPPERMISSIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPPERMISSIONSRow(ByVal row As SBEAPPERMISSIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPPERMISSIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPPHONELOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPPHONELOGRow)
        
        Private columnNUMACTIONID As Global.System.Data.DataColumn
        
        Private columnSTRCALLERINFORMATION As Global.System.Data.DataColumn
        
        Private columnNUMCALLERPHONENUMBER As Global.System.Data.DataColumn
        
        Private columnSTRPHONELOGNOTES As Global.System.Data.DataColumn
        
        Private columnSTRONETIMEASSIST As Global.System.Data.DataColumn
        
        Private columnSTRFRONTDESKCALL As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPPHONELOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRCALLERINFORMATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRCALLERINFORMATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMCALLERPHONENUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMCALLERPHONENUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRPHONELOGNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRPHONELOGNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRONETIMEASSISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRONETIMEASSIST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRFRONTDESKCALLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRFRONTDESKCALL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPPHONELOGRow
            Get
                Return CType(Me.Rows(index),SBEAPPHONELOGRow)
            End Get
        End Property
        
        Public Event SBEAPPHONELOGRowChanging As SBEAPPHONELOGRowChangeEventHandler
        
        Public Event SBEAPPHONELOGRowChanged As SBEAPPHONELOGRowChangeEventHandler
        
        Public Event SBEAPPHONELOGRowDeleting As SBEAPPHONELOGRowChangeEventHandler
        
        Public Event SBEAPPHONELOGRowDeleted As SBEAPPHONELOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPPHONELOGRow(ByVal row As SBEAPPHONELOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPPHONELOGRow(ByVal NUMACTIONID As Decimal, ByVal STRCALLERINFORMATION As String, ByVal NUMCALLERPHONENUMBER As Decimal, ByVal STRPHONELOGNOTES As String, ByVal STRONETIMEASSIST As String, ByVal STRFRONTDESKCALL As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As String) As SBEAPPHONELOGRow
            Dim rowSBEAPPHONELOGRow As SBEAPPHONELOGRow = CType(Me.NewRow,SBEAPPHONELOGRow)
            Dim columnValuesArray() As Object = New Object() {NUMACTIONID, STRCALLERINFORMATION, NUMCALLERPHONENUMBER, STRPHONELOGNOTES, STRONETIMEASSIST, STRFRONTDESKCALL, STRMODIFINGSTAFF, DATMODIFINGDATE}
            rowSBEAPPHONELOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPPHONELOGRow)
            Return rowSBEAPPHONELOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPPHONELOGDataTable = CType(MyBase.Clone,SBEAPPHONELOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPPHONELOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACTIONID = MyBase.Columns("NUMACTIONID")
            Me.columnSTRCALLERINFORMATION = MyBase.Columns("STRCALLERINFORMATION")
            Me.columnNUMCALLERPHONENUMBER = MyBase.Columns("NUMCALLERPHONENUMBER")
            Me.columnSTRPHONELOGNOTES = MyBase.Columns("STRPHONELOGNOTES")
            Me.columnSTRONETIMEASSIST = MyBase.Columns("STRONETIMEASSIST")
            Me.columnSTRFRONTDESKCALL = MyBase.Columns("STRFRONTDESKCALL")
            Me.columnSTRMODIFINGSTAFF = MyBase.Columns("STRMODIFINGSTAFF")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACTIONID = New Global.System.Data.DataColumn("NUMACTIONID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONID)
            Me.columnSTRCALLERINFORMATION = New Global.System.Data.DataColumn("STRCALLERINFORMATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRCALLERINFORMATION)
            Me.columnNUMCALLERPHONENUMBER = New Global.System.Data.DataColumn("NUMCALLERPHONENUMBER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMCALLERPHONENUMBER)
            Me.columnSTRPHONELOGNOTES = New Global.System.Data.DataColumn("STRPHONELOGNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRPHONELOGNOTES)
            Me.columnSTRONETIMEASSIST = New Global.System.Data.DataColumn("STRONETIMEASSIST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRONETIMEASSIST)
            Me.columnSTRFRONTDESKCALL = New Global.System.Data.DataColumn("STRFRONTDESKCALL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRFRONTDESKCALL)
            Me.columnSTRMODIFINGSTAFF = New Global.System.Data.DataColumn("STRMODIFINGSTAFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGSTAFF)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRCALLERINFORMATION.MaxLength = 4000
            Me.columnSTRPHONELOGNOTES.MaxLength = 4000
            Me.columnSTRONETIMEASSIST.MaxLength = 4000
            Me.columnSTRFRONTDESKCALL.MaxLength = 4000
            Me.columnSTRMODIFINGSTAFF.MaxLength = 4000
            Me.columnDATMODIFINGDATE.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPPHONELOGRow() As SBEAPPHONELOGRow
            Return CType(Me.NewRow,SBEAPPHONELOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPPHONELOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPPHONELOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPPHONELOGRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPPHONELOGRowChanged(Me, New SBEAPPHONELOGRowChangeEvent(CType(e.Row,SBEAPPHONELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPPHONELOGRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPPHONELOGRowChanging(Me, New SBEAPPHONELOGRowChangeEvent(CType(e.Row,SBEAPPHONELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPPHONELOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPPHONELOGRowDeleted(Me, New SBEAPPHONELOGRowChangeEvent(CType(e.Row,SBEAPPHONELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPPHONELOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPPHONELOGRowDeleting(Me, New SBEAPPHONELOGRowChangeEvent(CType(e.Row,SBEAPPHONELOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPPHONELOGRow(ByVal row As SBEAPPHONELOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPPHONELOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SBEAPTECHNICALASSISTDataTable
        Inherits Global.System.Data.TypedTableBase(Of SBEAPTECHNICALASSISTRow)
        
        Private columnNUMACTIONID As Global.System.Data.DataColumn
        
        Private columnSTRTECHNICALASSISTTYPE As Global.System.Data.DataColumn
        
        Private columnDATINITIALCONTACTDATE As Global.System.Data.DataColumn
        
        Private columnDATASSISTSTARTDATE As Global.System.Data.DataColumn
        
        Private columnDATASSISTENDDATE As Global.System.Data.DataColumn
        
        Private columnSTRASSISTANCEREQUEST As Global.System.Data.DataColumn
        
        Private columnSTRAIRSNUMBER As Global.System.Data.DataColumn
        
        Private columnSTRTECHNICALASSISTNOTES As Global.System.Data.DataColumn
        
        Private columnSTRMODIFINGSTAFF As Global.System.Data.DataColumn
        
        Private columnDATMODIFINGDATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SBEAPTECHNICALASSIST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NUMACTIONIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNUMACTIONID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRTECHNICALASSISTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRTECHNICALASSISTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATINITIALCONTACTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATINITIALCONTACTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATASSISTSTARTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASSISTSTARTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATASSISTENDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASSISTENDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRASSISTANCEREQUESTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRASSISTANCEREQUEST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRAIRSNUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRAIRSNUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRTECHNICALASSISTNOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRTECHNICALASSISTNOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STRMODIFINGSTAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTRMODIFINGSTAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATMODIFINGDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATMODIFINGDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SBEAPTECHNICALASSISTRow
            Get
                Return CType(Me.Rows(index),SBEAPTECHNICALASSISTRow)
            End Get
        End Property
        
        Public Event SBEAPTECHNICALASSISTRowChanging As SBEAPTECHNICALASSISTRowChangeEventHandler
        
        Public Event SBEAPTECHNICALASSISTRowChanged As SBEAPTECHNICALASSISTRowChangeEventHandler
        
        Public Event SBEAPTECHNICALASSISTRowDeleting As SBEAPTECHNICALASSISTRowChangeEventHandler
        
        Public Event SBEAPTECHNICALASSISTRowDeleted As SBEAPTECHNICALASSISTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSBEAPTECHNICALASSISTRow(ByVal row As SBEAPTECHNICALASSISTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSBEAPTECHNICALASSISTRow(ByVal NUMACTIONID As Decimal, ByVal STRTECHNICALASSISTTYPE As String, ByVal DATINITIALCONTACTDATE As Date, ByVal DATASSISTSTARTDATE As Date, ByVal DATASSISTENDDATE As Date, ByVal STRASSISTANCEREQUEST As String, ByVal STRAIRSNUMBER As String, ByVal STRTECHNICALASSISTNOTES As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As Date) As SBEAPTECHNICALASSISTRow
            Dim rowSBEAPTECHNICALASSISTRow As SBEAPTECHNICALASSISTRow = CType(Me.NewRow,SBEAPTECHNICALASSISTRow)
            Dim columnValuesArray() As Object = New Object() {NUMACTIONID, STRTECHNICALASSISTTYPE, DATINITIALCONTACTDATE, DATASSISTSTARTDATE, DATASSISTENDDATE, STRASSISTANCEREQUEST, STRAIRSNUMBER, STRTECHNICALASSISTNOTES, STRMODIFINGSTAFF, DATMODIFINGDATE}
            rowSBEAPTECHNICALASSISTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSBEAPTECHNICALASSISTRow)
            Return rowSBEAPTECHNICALASSISTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SBEAPTECHNICALASSISTDataTable = CType(MyBase.Clone,SBEAPTECHNICALASSISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SBEAPTECHNICALASSISTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNUMACTIONID = MyBase.Columns("NUMACTIONID")
            Me.columnSTRTECHNICALASSISTTYPE = MyBase.Columns("STRTECHNICALASSISTTYPE")
            Me.columnDATINITIALCONTACTDATE = MyBase.Columns("DATINITIALCONTACTDATE")
            Me.columnDATASSISTSTARTDATE = MyBase.Columns("DATASSISTSTARTDATE")
            Me.columnDATASSISTENDDATE = MyBase.Columns("DATASSISTENDDATE")
            Me.columnSTRASSISTANCEREQUEST = MyBase.Columns("STRASSISTANCEREQUEST")
            Me.columnSTRAIRSNUMBER = MyBase.Columns("STRAIRSNUMBER")
            Me.columnSTRTECHNICALASSISTNOTES = MyBase.Columns("STRTECHNICALASSISTNOTES")
            Me.columnSTRMODIFINGSTAFF = MyBase.Columns("STRMODIFINGSTAFF")
            Me.columnDATMODIFINGDATE = MyBase.Columns("DATMODIFINGDATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNUMACTIONID = New Global.System.Data.DataColumn("NUMACTIONID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNUMACTIONID)
            Me.columnSTRTECHNICALASSISTTYPE = New Global.System.Data.DataColumn("STRTECHNICALASSISTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRTECHNICALASSISTTYPE)
            Me.columnDATINITIALCONTACTDATE = New Global.System.Data.DataColumn("DATINITIALCONTACTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATINITIALCONTACTDATE)
            Me.columnDATASSISTSTARTDATE = New Global.System.Data.DataColumn("DATASSISTSTARTDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASSISTSTARTDATE)
            Me.columnDATASSISTENDDATE = New Global.System.Data.DataColumn("DATASSISTENDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASSISTENDDATE)
            Me.columnSTRASSISTANCEREQUEST = New Global.System.Data.DataColumn("STRASSISTANCEREQUEST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRASSISTANCEREQUEST)
            Me.columnSTRAIRSNUMBER = New Global.System.Data.DataColumn("STRAIRSNUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRAIRSNUMBER)
            Me.columnSTRTECHNICALASSISTNOTES = New Global.System.Data.DataColumn("STRTECHNICALASSISTNOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRTECHNICALASSISTNOTES)
            Me.columnSTRMODIFINGSTAFF = New Global.System.Data.DataColumn("STRMODIFINGSTAFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTRMODIFINGSTAFF)
            Me.columnDATMODIFINGDATE = New Global.System.Data.DataColumn("DATMODIFINGDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATMODIFINGDATE)
            Me.columnSTRTECHNICALASSISTTYPE.MaxLength = 4000
            Me.columnSTRASSISTANCEREQUEST.MaxLength = 4000
            Me.columnSTRAIRSNUMBER.MaxLength = 4000
            Me.columnSTRTECHNICALASSISTNOTES.MaxLength = 4000
            Me.columnSTRMODIFINGSTAFF.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSBEAPTECHNICALASSISTRow() As SBEAPTECHNICALASSISTRow
            Return CType(Me.NewRow,SBEAPTECHNICALASSISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SBEAPTECHNICALASSISTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SBEAPTECHNICALASSISTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SBEAPTECHNICALASSISTRowChangedEvent) Is Nothing) Then
                RaiseEvent SBEAPTECHNICALASSISTRowChanged(Me, New SBEAPTECHNICALASSISTRowChangeEvent(CType(e.Row,SBEAPTECHNICALASSISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SBEAPTECHNICALASSISTRowChangingEvent) Is Nothing) Then
                RaiseEvent SBEAPTECHNICALASSISTRowChanging(Me, New SBEAPTECHNICALASSISTRowChangeEvent(CType(e.Row,SBEAPTECHNICALASSISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SBEAPTECHNICALASSISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SBEAPTECHNICALASSISTRowDeleted(Me, New SBEAPTECHNICALASSISTRowChangeEvent(CType(e.Row,SBEAPTECHNICALASSISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SBEAPTECHNICALASSISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SBEAPTECHNICALASSISTRowDeleting(Me, New SBEAPTECHNICALASSISTRowChangeEvent(CType(e.Row,SBEAPTECHNICALASSISTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSBEAPTECHNICALASSISTRow(ByVal row As SBEAPTECHNICALASSISTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFullSBEAP = New dsFullSBEAP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SBEAPTECHNICALASSISTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOOKUPSBEAPACCOUNTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOOKUPSBEAPACCOUNTS As LOOKUPSBEAPACCOUNTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOOKUPSBEAPACCOUNTS = CType(Me.Table,LOOKUPSBEAPACCOUNTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACCOUNTCODE() As Decimal
            Get
                Return CType(Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMACCOUNTCODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMACCOUNTCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRACCOUNTDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPACCOUNTS.STRACCOUNTDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRACCOUNTDESC' in table 'LOOKUPSBEAPACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPACCOUNTS.STRACCOUNTDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMBRANCHCODE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMBRANCHCODEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMBRANCHCODE' in table 'LOOKUPSBEAPACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMBRANCHCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMPROGRAMCODE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMPROGRAMCODEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMPROGRAMCODE' in table 'LOOKUPSBEAPACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMPROGRAMCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMUNITCODE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMUNITCODEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMUNITCODE' in table 'LOOKUPSBEAPACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMUNITCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFORMACCESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPACCOUNTS.STRFORMACCESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFORMACCESS' in table 'LOOKUPSBEAPACCOUNTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPACCOUNTS.STRFORMACCESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRACCOUNTDESCNull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPACCOUNTS.STRACCOUNTDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRACCOUNTDESCNull()
            Me(Me.tableLOOKUPSBEAPACCOUNTS.STRACCOUNTDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMBRANCHCODENull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPACCOUNTS.NUMBRANCHCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMBRANCHCODENull()
            Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMBRANCHCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMPROGRAMCODENull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPACCOUNTS.NUMPROGRAMCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMPROGRAMCODENull()
            Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMPROGRAMCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMUNITCODENull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPACCOUNTS.NUMUNITCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMUNITCODENull()
            Me(Me.tableLOOKUPSBEAPACCOUNTS.NUMUNITCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFORMACCESSNull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPACCOUNTS.STRFORMACCESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFORMACCESSNull()
            Me(Me.tableLOOKUPSBEAPACCOUNTS.STRFORMACCESSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOOKUPSBEAPCASEWORKRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOOKUPSBEAPCASEWORK As LOOKUPSBEAPCASEWORKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOOKUPSBEAPCASEWORK = CType(Me.Table,LOOKUPSBEAPCASEWORKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONTYPE() As Decimal
            Get
                Return CType(Me(Me.tableLOOKUPSBEAPCASEWORK.NUMACTIONTYPEColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPCASEWORK.NUMACTIONTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRWORKDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPCASEWORK.STRWORKDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRWORKDESCRIPTION' in table 'LOOKUPSBEAPCASEWORK' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPCASEWORK.STRWORKDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRWORKDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPCASEWORK.STRWORKDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRWORKDESCRIPTIONNull()
            Me(Me.tableLOOKUPSBEAPCASEWORK.STRWORKDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LOOKUPSBEAPFORMSRow
        Inherits Global.System.Data.DataRow
        
        Private tableLOOKUPSBEAPFORMS As LOOKUPSBEAPFORMSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOOKUPSBEAPFORMS = CType(Me.Table,LOOKUPSBEAPFORMSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMFORMCODE() As Decimal
            Get
                Return CType(Me(Me.tableLOOKUPSBEAPFORMS.NUMFORMCODEColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPFORMS.NUMFORMCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFORM() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPFORMS.STRFORMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFORM' in table 'LOOKUPSBEAPFORMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPFORMS.STRFORMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFORMDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableLOOKUPSBEAPFORMS.STRFORMDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFORMDESC' in table 'LOOKUPSBEAPFORMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLOOKUPSBEAPFORMS.STRFORMDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFORMNull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPFORMS.STRFORMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFORMNull()
            Me(Me.tableLOOKUPSBEAPFORMS.STRFORMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFORMDESCNull() As Boolean
            Return Me.IsNull(Me.tableLOOKUPSBEAPFORMS.STRFORMDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFORMDESCNull()
            Me(Me.tableLOOKUPSBEAPFORMS.STRFORMDESCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPACTIONLOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPACTIONLOG As SBEAPACTIONLOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPACTIONLOG = CType(Me.Table,SBEAPACTIONLOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.NUMACTIONIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMACTIONID' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.NUMACTIONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCASEID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.NUMCASEIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMCASEID' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.NUMCASEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONTYPE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.NUMACTIONTYPEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMACTIONTYPE' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.NUMACTIONTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMMODIFINGSTAFF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.NUMMODIFINGSTAFFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMMODIFINGSTAFF' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.NUMMODIFINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCREATINGSTAFF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.STRCREATINGSTAFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCREATINGSTAFF' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.STRCREATINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCREATIONDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.DATCREATIONDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCREATIONDATE' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.DATCREATIONDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATACTIONOCCURED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPACTIONLOG.DATACTIONOCCUREDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATACTIONOCCURED' in table 'SBEAPACTIONLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPACTIONLOG.DATACTIONOCCUREDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMACTIONIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.NUMACTIONIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMACTIONIDNull()
            Me(Me.tableSBEAPACTIONLOG.NUMACTIONIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMCASEIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.NUMCASEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMCASEIDNull()
            Me(Me.tableSBEAPACTIONLOG.NUMCASEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMACTIONTYPENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.NUMACTIONTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMACTIONTYPENull()
            Me(Me.tableSBEAPACTIONLOG.NUMACTIONTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMMODIFINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.NUMMODIFINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMMODIFINGSTAFFNull()
            Me(Me.tableSBEAPACTIONLOG.NUMMODIFINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPACTIONLOG.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCREATINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.STRCREATINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCREATINGSTAFFNull()
            Me(Me.tableSBEAPACTIONLOG.STRCREATINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCREATIONDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.DATCREATIONDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCREATIONDATENull()
            Me(Me.tableSBEAPACTIONLOG.DATCREATIONDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATACTIONOCCUREDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPACTIONLOG.DATACTIONOCCUREDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATACTIONOCCUREDNull()
            Me(Me.tableSBEAPACTIONLOG.DATACTIONOCCUREDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCASELOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCASELOG As SBEAPCASELOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCASELOG = CType(Me.Table,SBEAPCASELOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCASEID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.NUMCASEIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMCASEID' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.NUMCASEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMSTAFFRESPONSIBLE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.NUMSTAFFRESPONSIBLEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMSTAFFRESPONSIBLE' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.NUMSTAFFRESPONSIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCASEOPENED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.DATCASEOPENEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCASEOPENED' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.DATCASEOPENEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCASESUMMARY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.STRCASESUMMARYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCASESUMMARY' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.STRCASESUMMARYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.CLIENTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTID' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.CLIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCASECLOSED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.DATCASECLOSEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCASECLOSED' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.DATCASECLOSEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMMODIFINGSTAFF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.NUMMODIFINGSTAFFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMMODIFINGSTAFF' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.NUMMODIFINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRINTERAGENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.STRINTERAGENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRINTERAGENCY' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.STRINTERAGENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRREFERRALCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.STRREFERRALCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRREFERRALCOMMENTS' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.STRREFERRALCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATREFERRALDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.DATREFERRALDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATREFERRALDATE' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.DATREFERRALDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPLAINTBASED() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOG.STRCOMPLAINTBASEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPLAINTBASED' in table 'SBEAPCASELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOG.STRCOMPLAINTBASEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMCASEIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.NUMCASEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMCASEIDNull()
            Me(Me.tableSBEAPCASELOG.NUMCASEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMSTAFFRESPONSIBLENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.NUMSTAFFRESPONSIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMSTAFFRESPONSIBLENull()
            Me(Me.tableSBEAPCASELOG.NUMSTAFFRESPONSIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCASEOPENEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.DATCASEOPENEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCASEOPENEDNull()
            Me(Me.tableSBEAPCASELOG.DATCASEOPENEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCASESUMMARYNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.STRCASESUMMARYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCASESUMMARYNull()
            Me(Me.tableSBEAPCASELOG.STRCASESUMMARYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.CLIENTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTIDNull()
            Me(Me.tableSBEAPCASELOG.CLIENTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCASECLOSEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.DATCASECLOSEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCASECLOSEDNull()
            Me(Me.tableSBEAPCASELOG.DATCASECLOSEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMMODIFINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.NUMMODIFINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMMODIFINGSTAFFNull()
            Me(Me.tableSBEAPCASELOG.NUMMODIFINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPCASELOG.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRINTERAGENCYNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.STRINTERAGENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRINTERAGENCYNull()
            Me(Me.tableSBEAPCASELOG.STRINTERAGENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRREFERRALCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.STRREFERRALCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRREFERRALCOMMENTSNull()
            Me(Me.tableSBEAPCASELOG.STRREFERRALCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATREFERRALDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.DATREFERRALDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATREFERRALDATENull()
            Me(Me.tableSBEAPCASELOG.DATREFERRALDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPLAINTBASEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOG.STRCOMPLAINTBASEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPLAINTBASEDNull()
            Me(Me.tableSBEAPCASELOG.STRCOMPLAINTBASEDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCASELOGLINKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCASELOGLINK As SBEAPCASELOGLINKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCASELOGLINK = CType(Me.Table,SBEAPCASELOGLINKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCASEID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOGLINK.NUMCASEIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMCASEID' in table 'SBEAPCASELOGLINK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOGLINK.NUMCASEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCASELOGLINK.CLIENTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTID' in table 'SBEAPCASELOGLINK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCASELOGLINK.CLIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMCASEIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOGLINK.NUMCASEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMCASEIDNull()
            Me(Me.tableSBEAPCASELOGLINK.NUMCASEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCASELOGLINK.CLIENTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTIDNull()
            Me(Me.tableSBEAPCASELOGLINK.CLIENTIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCLIENTCONTACTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCLIENTCONTACTS As SBEAPCLIENTCONTACTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCLIENTCONTACTS = CType(Me.Table,SBEAPCLIENTCONTACTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTCONTACTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.CLIENTCONTACTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTCONTACTID' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.CLIENTCONTACTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTFIRSTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFIRSTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTFIRSTNAME' in table 'SBEAPCLIENTCONTACTS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFIRSTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTLASTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTLASTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTLASTNAME' in table 'SBEAPCLIENTCONTACTS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTLASTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTSALUTATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSALUTATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTSALUTATION' in table 'SBEAPCLIENTCONTACTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSALUTATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTCREDENTIALS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREDENTIALSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTCREDENTIALS' in table 'SBEAPCLIENTCONTACTS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREDENTIALSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTTITLE' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTPHONENUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTPHONENUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTPHONENUMBER' in table 'SBEAPCLIENTCONTACTS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTPHONENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTCELLPHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCELLPHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTCELLPHONE' in table 'SBEAPCLIENTCONTACTS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCELLPHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTFAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTFAX' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTEMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTEMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTEMAIL' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTEMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTADDRESS' in table 'SBEAPCLIENTCONTACTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTCITY' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTSTATE' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTZIPCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTZIPCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTZIPCODE' in table 'SBEAPCLIENTCONTACTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTCREATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTCREATOR' in table 'SBEAPCLIENTCONTACTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCLIENTCREATED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.DATCLIENTCREATEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCLIENTCREATED' in table 'SBEAPCLIENTCONTACTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.DATCLIENTCREATEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGPERSON() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRMODIFINGPERSONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGPERSON' in table 'SBEAPCLIENTCONTACTS' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRMODIFINGPERSONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONTACTNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTCONTACTS.STRCONTACTNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONTACTNOTES' in table 'SBEAPCLIENTCONTACTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTCONTACTS.STRCONTACTNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTCONTACTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.CLIENTCONTACTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTCONTACTIDNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.CLIENTCONTACTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTFIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFIRSTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTFIRSTNAMENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTLASTNAMENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTLASTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTLASTNAMENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTLASTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTSALUTATIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSALUTATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTSALUTATIONNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSALUTATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTCREDENTIALSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREDENTIALSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTCREDENTIALSNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREDENTIALSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTTITLENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTTITLENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTPHONENUMBERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTPHONENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTPHONENUMBERNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTPHONENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTCELLPHONENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCELLPHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTCELLPHONENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCELLPHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTFAXNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTFAXNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTFAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTEMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTEMAILNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTEMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTADDRESSNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTCITYNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTCITYNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTSTATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTSTATENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTZIPCODENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTZIPCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTZIPCODENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTZIPCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTCREATORNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTCREATORNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCLIENTCREATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCLIENTCREATEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.DATCLIENTCREATEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCLIENTCREATEDNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.DATCLIENTCREATEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGPERSONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRMODIFINGPERSONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGPERSONNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRMODIFINGPERSONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPCLIENTCONTACTS.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONTACTNOTESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTCONTACTS.STRCONTACTNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONTACTNOTESNull()
            Me(Me.tableSBEAPCLIENTCONTACTS.STRCONTACTNOTESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCLIENTDATARow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCLIENTDATA As SBEAPCLIENTDATADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCLIENTDATA = CType(Me.Table,SBEAPCLIENTDATADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.CLIENTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTID' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.CLIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRCLIENTDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTDESCRIPTION' in table 'SBEAPCLIENTDATA' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRCLIENTDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTWEBSITE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRCLIENTWEBSITEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTWEBSITE' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRCLIENTWEBSITEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTSIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRCLIENTSICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTSIC' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRCLIENTSICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTNAICS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRCLIENTNAICSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTNAICS' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRCLIENTNAICSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCLIENTEMPLOYEES() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRCLIENTEMPLOYEESColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCLIENTEMPLOYEES' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRCLIENTEMPLOYEESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRAIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRSNUMBER' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRPROGRAMCODES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRAIRPROGRAMCODESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRPROGRAMCODES' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRAIRPROGRAMCODESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSTATEPROGRAMCODES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRSTATEPROGRAMCODESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSTATEPROGRAMCODES' in table 'SBEAPCLIENTDATA' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRSTATEPROGRAMCODESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGPERSON() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRMODIFINGPERSONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGPERSON' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRMODIFINGPERSONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRMODIFINGCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGCOMMENTS' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRMODIFINGCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRPERMITNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRAIRPERMITNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRPERMITNUMBER' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRAIRPERMITNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSSCPENGINEER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRSSCPENGINEERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSSCPENGINEER' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRSSCPENGINEERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSSCPUNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRSSCPUNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSSCPUNIT' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRSSCPUNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSSPPENGINEER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRSSPPENGINEERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSSPPENGINEER' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRSSPPENGINEERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSSPPUNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRSSPPUNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSSPPUNIT' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRSSPPUNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRISMPENGINEER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRISMPENGINEERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRISMPENGINEER' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRISMPENGINEERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRISMPUNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRISMPUNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRISMPUNIT' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRISMPUNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTDATA.STRAIRDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRDESCRIPTION' in table 'SBEAPCLIENTDATA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTDATA.STRAIRDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.CLIENTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTIDNull()
            Me(Me.tableSBEAPCLIENTDATA.CLIENTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRCLIENTDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTDESCRIPTIONNull()
            Me(Me.tableSBEAPCLIENTDATA.STRCLIENTDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTWEBSITENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRCLIENTWEBSITEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTWEBSITENull()
            Me(Me.tableSBEAPCLIENTDATA.STRCLIENTWEBSITEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTSICNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRCLIENTSICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTSICNull()
            Me(Me.tableSBEAPCLIENTDATA.STRCLIENTSICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTNAICSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRCLIENTNAICSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTNAICSNull()
            Me(Me.tableSBEAPCLIENTDATA.STRCLIENTNAICSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCLIENTEMPLOYEESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRCLIENTEMPLOYEESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCLIENTEMPLOYEESNull()
            Me(Me.tableSBEAPCLIENTDATA.STRCLIENTEMPLOYEESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRAIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRSNUMBERNull()
            Me(Me.tableSBEAPCLIENTDATA.STRAIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRPROGRAMCODESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRAIRPROGRAMCODESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRPROGRAMCODESNull()
            Me(Me.tableSBEAPCLIENTDATA.STRAIRPROGRAMCODESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSTATEPROGRAMCODESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRSTATEPROGRAMCODESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSTATEPROGRAMCODESNull()
            Me(Me.tableSBEAPCLIENTDATA.STRSTATEPROGRAMCODESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGPERSONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRMODIFINGPERSONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGPERSONNull()
            Me(Me.tableSBEAPCLIENTDATA.STRMODIFINGPERSONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPCLIENTDATA.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRMODIFINGCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGCOMMENTSNull()
            Me(Me.tableSBEAPCLIENTDATA.STRMODIFINGCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRPERMITNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRAIRPERMITNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRPERMITNUMBERNull()
            Me(Me.tableSBEAPCLIENTDATA.STRAIRPERMITNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSSCPENGINEERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRSSCPENGINEERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSSCPENGINEERNull()
            Me(Me.tableSBEAPCLIENTDATA.STRSSCPENGINEERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSSCPUNITNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRSSCPUNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSSCPUNITNull()
            Me(Me.tableSBEAPCLIENTDATA.STRSSCPUNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSSPPENGINEERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRSSPPENGINEERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSSPPENGINEERNull()
            Me(Me.tableSBEAPCLIENTDATA.STRSSPPENGINEERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSSPPUNITNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRSSPPUNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSSPPUNITNull()
            Me(Me.tableSBEAPCLIENTDATA.STRSSPPUNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRISMPENGINEERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRISMPENGINEERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRISMPENGINEERNull()
            Me(Me.tableSBEAPCLIENTDATA.STRISMPENGINEERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRISMPUNITNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRISMPUNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRISMPUNITNull()
            Me(Me.tableSBEAPCLIENTDATA.STRISMPUNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTDATA.STRAIRDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRDESCRIPTIONNull()
            Me(Me.tableSBEAPCLIENTDATA.STRAIRDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCLIENTLINKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCLIENTLINK As SBEAPCLIENTLINKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCLIENTLINK = CType(Me.Table,SBEAPCLIENTLINKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTLINK.CLIENTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTID' in table 'SBEAPCLIENTLINK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTLINK.CLIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTCONTACTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTLINK.CLIENTCONTACTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTCONTACTID' in table 'SBEAPCLIENTLINK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTLINK.CLIENTCONTACTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMAINCONTACT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTLINK.STRMAINCONTACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMAINCONTACT' in table 'SBEAPCLIENTLINK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTLINK.STRMAINCONTACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTLINK.CLIENTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTIDNull()
            Me(Me.tableSBEAPCLIENTLINK.CLIENTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTCONTACTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTLINK.CLIENTCONTACTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTCONTACTIDNull()
            Me(Me.tableSBEAPCLIENTLINK.CLIENTCONTACTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMAINCONTACTNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTLINK.STRMAINCONTACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMAINCONTACTNull()
            Me(Me.tableSBEAPCLIENTLINK.STRMAINCONTACTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCLIENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCLIENTS As SBEAPCLIENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCLIENTS = CType(Me.Table,SBEAPCLIENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENTID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.CLIENTIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENTID' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.CLIENTIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYNAME' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATSTARTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.DATSTARTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATSTARTDATE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.DATSTARTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYADDRESS' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYADDRESS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYADDRESS2' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYCITY' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYSTATE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYZIPCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYZIPCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYZIPCODE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYCOUNTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYCOUNTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYCOUNTY' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYCOUNTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYLATITUDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYLATITUDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYLATITUDE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYLATITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYLONGITUDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYLONGITUDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYLONGITUDE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYLONGITUDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMAILINGADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMAILINGADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMAILINGADDRESS' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMAILINGADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMAILINGADDRESS2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMAILINGADDRESS2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMAILINGADDRESS2' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMAILINGADDRESS2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMAILINGCITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMAILINGCITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMAILINGCITY' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMAILINGCITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMAILINGSTATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMAILINGSTATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMAILINGSTATE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMAILINGSTATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMAILINGZIPCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMAILINGZIPCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMAILINGZIPCODE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMAILINGZIPCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCOMPANYCREATOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRCOMPANYCREATORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCOMPANYCREATOR' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRCOMPANYCREATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCOMPANYCREATED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.DATCOMPANYCREATEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCOMPANYCREATED' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.DATCOMPANYCREATEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGPERSON() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMODIFINGPERSONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGPERSON' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMODIFINGPERSONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGCOMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCLIENTS.STRMODIFINGCOMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGCOMMENTS' in table 'SBEAPCLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCLIENTS.STRMODIFINGCOMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENTIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.CLIENTIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENTIDNull()
            Me(Me.tableSBEAPCLIENTS.CLIENTIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYNAMENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYNAMENull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATSTARTDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.DATSTARTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATSTARTDATENull()
            Me(Me.tableSBEAPCLIENTS.DATSTARTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYADDRESSNull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYADDRESS2Null()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYADDRESS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYCITYNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYCITYNull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYSTATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYSTATENull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYZIPCODENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYZIPCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYZIPCODENull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYZIPCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYCOUNTYNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYCOUNTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYCOUNTYNull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYCOUNTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYLATITUDENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYLATITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYLATITUDENull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYLATITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYLONGITUDENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYLONGITUDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYLONGITUDENull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYLONGITUDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMAILINGADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMAILINGADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMAILINGADDRESSNull()
            Me(Me.tableSBEAPCLIENTS.STRMAILINGADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMAILINGADDRESS2Null() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMAILINGADDRESS2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMAILINGADDRESS2Null()
            Me(Me.tableSBEAPCLIENTS.STRMAILINGADDRESS2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMAILINGCITYNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMAILINGCITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMAILINGCITYNull()
            Me(Me.tableSBEAPCLIENTS.STRMAILINGCITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMAILINGSTATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMAILINGSTATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMAILINGSTATENull()
            Me(Me.tableSBEAPCLIENTS.STRMAILINGSTATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMAILINGZIPCODENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMAILINGZIPCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMAILINGZIPCODENull()
            Me(Me.tableSBEAPCLIENTS.STRMAILINGZIPCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCOMPANYCREATORNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRCOMPANYCREATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCOMPANYCREATORNull()
            Me(Me.tableSBEAPCLIENTS.STRCOMPANYCREATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCOMPANYCREATEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.DATCOMPANYCREATEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCOMPANYCREATEDNull()
            Me(Me.tableSBEAPCLIENTS.DATCOMPANYCREATEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGPERSONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMODIFINGPERSONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGPERSONNull()
            Me(Me.tableSBEAPCLIENTS.STRMODIFINGPERSONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPCLIENTS.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCLIENTS.STRMODIFINGCOMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGCOMMENTSNull()
            Me(Me.tableSBEAPCLIENTS.STRMODIFINGCOMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPCONFERENCELOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPCONFERENCELOG As SBEAPCONFERENCELOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPCONFERENCELOG = CType(Me.Table,SBEAPCONFERENCELOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.NUMACTIONIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMACTIONID' in table 'SBEAPCONFERENCELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.NUMACTIONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONFERENCEATTENDED() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEATTENDEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONFERENCEATTENDED' in table 'SBEAPCONFERENCELOG' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEATTENDEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONFERENCELOCATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCELOCATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONFERENCELOCATION' in table 'SBEAPCONFERENCELOG' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCELOCATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONFERENCETOPIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCETOPICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONFERENCETOPIC' in table 'SBEAPCONFERENCELOG' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCETOPICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRATTENDEES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRATTENDEESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRATTENDEES' in table 'SBEAPCONFERENCELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRATTENDEESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCONFERENCESTARTED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.DATCONFERENCESTARTEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCONFERENCESTARTED' in table 'SBEAPCONFERENCELOG' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.DATCONFERENCESTARTEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATCONFERENCEENDED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.DATCONFERENCEENDEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATCONFERENCEENDED' in table 'SBEAPCONFERENCELOG' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.DATCONFERENCEENDEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSBEAPPRESENTATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRSBEAPPRESENTATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSBEAPPRESENTATION' in table 'SBEAPCONFERENCELOG' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRSBEAPPRESENTATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRLISTOFBUSINESSSECTORS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRLISTOFBUSINESSSECTORSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRLISTOFBUSINESSSECTORS' in table 'SBEAPCONFERENCELOG' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRLISTOFBUSINESSSECTORSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCONFERENCEFOLLOWUP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEFOLLOWUPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCONFERENCEFOLLOWUP' in table 'SBEAPCONFERENCELOG' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEFOLLOWUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSTAFFATTENDING() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRSTAFFATTENDINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSTAFFATTENDING' in table 'SBEAPCONFERENCELOG' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRSTAFFATTENDINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGSTAFF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.STRMODIFINGSTAFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGSTAFF' in table 'SBEAPCONFERENCELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.STRMODIFINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPCONFERENCELOG.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPCONFERENCELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPCONFERENCELOG.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMACTIONIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.NUMACTIONIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMACTIONIDNull()
            Me(Me.tableSBEAPCONFERENCELOG.NUMACTIONIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONFERENCEATTENDEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEATTENDEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONFERENCEATTENDEDNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEATTENDEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONFERENCELOCATIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRCONFERENCELOCATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONFERENCELOCATIONNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCELOCATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONFERENCETOPICNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRCONFERENCETOPICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONFERENCETOPICNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCETOPICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRATTENDEESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRATTENDEESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRATTENDEESNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRATTENDEESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCONFERENCESTARTEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.DATCONFERENCESTARTEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCONFERENCESTARTEDNull()
            Me(Me.tableSBEAPCONFERENCELOG.DATCONFERENCESTARTEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATCONFERENCEENDEDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.DATCONFERENCEENDEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATCONFERENCEENDEDNull()
            Me(Me.tableSBEAPCONFERENCELOG.DATCONFERENCEENDEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSBEAPPRESENTATIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRSBEAPPRESENTATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSBEAPPRESENTATIONNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRSBEAPPRESENTATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRLISTOFBUSINESSSECTORSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRLISTOFBUSINESSSECTORSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRLISTOFBUSINESSSECTORSNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRLISTOFBUSINESSSECTORSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCONFERENCEFOLLOWUPNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEFOLLOWUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCONFERENCEFOLLOWUPNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRCONFERENCEFOLLOWUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSTAFFATTENDINGNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRSTAFFATTENDINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSTAFFATTENDINGNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRSTAFFATTENDINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.STRMODIFINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGSTAFFNull()
            Me(Me.tableSBEAPCONFERENCELOG.STRMODIFINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPCONFERENCELOG.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPCONFERENCELOG.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPERRORLOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPERRORLOG As SBEAPERRORLOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPERRORLOG = CType(Me.Table,SBEAPERRORLOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRERRORNUMBER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPERRORLOG.STRERRORNUMBERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRERRORNUMBER' in table 'SBEAPERRORLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPERRORLOG.STRERRORNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRUSER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPERRORLOG.STRUSERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRUSER' in table 'SBEAPERRORLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPERRORLOG.STRUSERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRERRORLOCATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPERRORLOG.STRERRORLOCATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRERRORLOCATION' in table 'SBEAPERRORLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPERRORLOG.STRERRORLOCATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRERRORMESSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPERRORLOG.STRERRORMESSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRERRORMESSAGE' in table 'SBEAPERRORLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPERRORLOG.STRERRORMESSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATERRORDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPERRORLOG.DATERRORDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATERRORDATE' in table 'SBEAPERRORLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPERRORLOG.DATERRORDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSOLUTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPERRORLOG.STRSOLUTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSOLUTION' in table 'SBEAPERRORLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPERRORLOG.STRSOLUTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRERRORNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPERRORLOG.STRERRORNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRERRORNUMBERNull()
            Me(Me.tableSBEAPERRORLOG.STRERRORNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRUSERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPERRORLOG.STRUSERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRUSERNull()
            Me(Me.tableSBEAPERRORLOG.STRUSERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRERRORLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPERRORLOG.STRERRORLOCATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRERRORLOCATIONNull()
            Me(Me.tableSBEAPERRORLOG.STRERRORLOCATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRERRORMESSAGENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPERRORLOG.STRERRORMESSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRERRORMESSAGENull()
            Me(Me.tableSBEAPERRORLOG.STRERRORMESSAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATERRORDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPERRORLOG.DATERRORDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATERRORDATENull()
            Me(Me.tableSBEAPERRORLOG.DATERRORDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSOLUTIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPERRORLOG.STRSOLUTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSOLUTIONNull()
            Me(Me.tableSBEAPERRORLOG.STRSOLUTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPOTHERLOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPOTHERLOG As SBEAPOTHERLOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPOTHERLOG = CType(Me.Table,SBEAPOTHERLOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPOTHERLOG.NUMACTIONIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMACTIONID' in table 'SBEAPOTHERLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPOTHERLOG.NUMACTIONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCASENOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPOTHERLOG.STRCASENOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCASENOTES' in table 'SBEAPOTHERLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPOTHERLOG.STRCASENOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGSTAFF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPOTHERLOG.STRMODIFINGSTAFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGSTAFF' in table 'SBEAPOTHERLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPOTHERLOG.STRMODIFINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPOTHERLOG.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPOTHERLOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPOTHERLOG.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMACTIONIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPOTHERLOG.NUMACTIONIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMACTIONIDNull()
            Me(Me.tableSBEAPOTHERLOG.NUMACTIONIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCASENOTESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPOTHERLOG.STRCASENOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCASENOTESNull()
            Me(Me.tableSBEAPOTHERLOG.STRCASENOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPOTHERLOG.STRMODIFINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGSTAFFNull()
            Me(Me.tableSBEAPOTHERLOG.STRMODIFINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPOTHERLOG.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPOTHERLOG.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPPERMISSIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPPERMISSIONS As SBEAPPERMISSIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPPERMISSIONS = CType(Me.Table,SBEAPPERMISSIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMUSERID() As Decimal
            Get
                Return CType(Me(Me.tableSBEAPPERMISSIONS.NUMUSERIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSBEAPPERMISSIONS.NUMUSERIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRSBEAPPERMISSIONS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPERMISSIONS.STRSBEAPPERMISSIONSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRSBEAPPERMISSIONS' in table 'SBEAPPERMISSIONS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPERMISSIONS.STRSBEAPPERMISSIONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRSBEAPPERMISSIONSNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPERMISSIONS.STRSBEAPPERMISSIONSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRSBEAPPERMISSIONSNull()
            Me(Me.tableSBEAPPERMISSIONS.STRSBEAPPERMISSIONSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPPHONELOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPPHONELOG As SBEAPPHONELOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPPHONELOG = CType(Me.Table,SBEAPPHONELOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.NUMACTIONIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMACTIONID' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.NUMACTIONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRCALLERINFORMATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.STRCALLERINFORMATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRCALLERINFORMATION' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.STRCALLERINFORMATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMCALLERPHONENUMBER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.NUMCALLERPHONENUMBERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMCALLERPHONENUMBER' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.NUMCALLERPHONENUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRPHONELOGNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.STRPHONELOGNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRPHONELOGNOTES' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.STRPHONELOGNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRONETIMEASSIST() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.STRONETIMEASSISTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRONETIMEASSIST' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.STRONETIMEASSISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRFRONTDESKCALL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.STRFRONTDESKCALLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRFRONTDESKCALL' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.STRFRONTDESKCALLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGSTAFF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.STRMODIFINGSTAFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGSTAFF' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.STRMODIFINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPPHONELOG.DATMODIFINGDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPPHONELOG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPPHONELOG.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMACTIONIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.NUMACTIONIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMACTIONIDNull()
            Me(Me.tableSBEAPPHONELOG.NUMACTIONIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRCALLERINFORMATIONNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.STRCALLERINFORMATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRCALLERINFORMATIONNull()
            Me(Me.tableSBEAPPHONELOG.STRCALLERINFORMATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMCALLERPHONENUMBERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.NUMCALLERPHONENUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMCALLERPHONENUMBERNull()
            Me(Me.tableSBEAPPHONELOG.NUMCALLERPHONENUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRPHONELOGNOTESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.STRPHONELOGNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRPHONELOGNOTESNull()
            Me(Me.tableSBEAPPHONELOG.STRPHONELOGNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRONETIMEASSISTNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.STRONETIMEASSISTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRONETIMEASSISTNull()
            Me(Me.tableSBEAPPHONELOG.STRONETIMEASSISTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRFRONTDESKCALLNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.STRFRONTDESKCALLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRFRONTDESKCALLNull()
            Me(Me.tableSBEAPPHONELOG.STRFRONTDESKCALLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.STRMODIFINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGSTAFFNull()
            Me(Me.tableSBEAPPHONELOG.STRMODIFINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPPHONELOG.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPPHONELOG.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SBEAPTECHNICALASSISTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSBEAPTECHNICALASSIST As SBEAPTECHNICALASSISTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSBEAPTECHNICALASSIST = CType(Me.Table,SBEAPTECHNICALASSISTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NUMACTIONID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.NUMACTIONIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NUMACTIONID' in table 'SBEAPTECHNICALASSIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.NUMACTIONIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRTECHNICALASSISTTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRTECHNICALASSISTTYPE' in table 'SBEAPTECHNICALASSIST' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATINITIALCONTACTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.DATINITIALCONTACTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATINITIALCONTACTDATE' in table 'SBEAPTECHNICALASSIST' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.DATINITIALCONTACTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATASSISTSTARTDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.DATASSISTSTARTDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATASSISTSTARTDATE' in table 'SBEAPTECHNICALASSIST' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.DATASSISTSTARTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATASSISTENDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.DATASSISTENDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATASSISTENDDATE' in table 'SBEAPTECHNICALASSIST' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.DATASSISTENDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRASSISTANCEREQUEST() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.STRASSISTANCEREQUESTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRASSISTANCEREQUEST' in table 'SBEAPTECHNICALASSIST' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.STRASSISTANCEREQUESTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRAIRSNUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.STRAIRSNUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRAIRSNUMBER' in table 'SBEAPTECHNICALASSIST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.STRAIRSNUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRTECHNICALASSISTNOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTNOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRTECHNICALASSISTNOTES' in table 'SBEAPTECHNICALASSIST' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTNOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STRMODIFINGSTAFF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.STRMODIFINGSTAFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STRMODIFINGSTAFF' in table 'SBEAPTECHNICALASSIST' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.STRMODIFINGSTAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATMODIFINGDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSBEAPTECHNICALASSIST.DATMODIFINGDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATMODIFINGDATE' in table 'SBEAPTECHNICALASSIST' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSBEAPTECHNICALASSIST.DATMODIFINGDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNUMACTIONIDNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.NUMACTIONIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNUMACTIONIDNull()
            Me(Me.tableSBEAPTECHNICALASSIST.NUMACTIONIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRTECHNICALASSISTTYPENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRTECHNICALASSISTTYPENull()
            Me(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATINITIALCONTACTDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.DATINITIALCONTACTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATINITIALCONTACTDATENull()
            Me(Me.tableSBEAPTECHNICALASSIST.DATINITIALCONTACTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATASSISTSTARTDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.DATASSISTSTARTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATASSISTSTARTDATENull()
            Me(Me.tableSBEAPTECHNICALASSIST.DATASSISTSTARTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATASSISTENDDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.DATASSISTENDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATASSISTENDDATENull()
            Me(Me.tableSBEAPTECHNICALASSIST.DATASSISTENDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRASSISTANCEREQUESTNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.STRASSISTANCEREQUESTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRASSISTANCEREQUESTNull()
            Me(Me.tableSBEAPTECHNICALASSIST.STRASSISTANCEREQUESTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRAIRSNUMBERNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.STRAIRSNUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRAIRSNUMBERNull()
            Me(Me.tableSBEAPTECHNICALASSIST.STRAIRSNUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRTECHNICALASSISTNOTESNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTNOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRTECHNICALASSISTNOTESNull()
            Me(Me.tableSBEAPTECHNICALASSIST.STRTECHNICALASSISTNOTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTRMODIFINGSTAFFNull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.STRMODIFINGSTAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTRMODIFINGSTAFFNull()
            Me(Me.tableSBEAPTECHNICALASSIST.STRMODIFINGSTAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATMODIFINGDATENull() As Boolean
            Return Me.IsNull(Me.tableSBEAPTECHNICALASSIST.DATMODIFINGDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATMODIFINGDATENull()
            Me(Me.tableSBEAPTECHNICALASSIST.DATMODIFINGDATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOOKUPSBEAPACCOUNTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOOKUPSBEAPACCOUNTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOOKUPSBEAPACCOUNTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOOKUPSBEAPACCOUNTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOOKUPSBEAPCASEWORKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOOKUPSBEAPCASEWORKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOOKUPSBEAPCASEWORKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOOKUPSBEAPCASEWORKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LOOKUPSBEAPFORMSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOOKUPSBEAPFORMSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LOOKUPSBEAPFORMSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LOOKUPSBEAPFORMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPACTIONLOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPACTIONLOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPACTIONLOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPACTIONLOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCASELOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCASELOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCASELOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCASELOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCASELOGLINKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCASELOGLINKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCASELOGLINKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCASELOGLINKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCLIENTCONTACTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCLIENTCONTACTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCLIENTCONTACTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCLIENTCONTACTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCLIENTDATARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCLIENTDATARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCLIENTDATARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCLIENTDATARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCLIENTLINKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCLIENTLINKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCLIENTLINKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCLIENTLINKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCLIENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCLIENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCLIENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCLIENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPCONFERENCELOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPCONFERENCELOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPCONFERENCELOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPCONFERENCELOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPERRORLOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPERRORLOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPERRORLOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPERRORLOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPOTHERLOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPOTHERLOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPOTHERLOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPOTHERLOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPPERMISSIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPPERMISSIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPPERMISSIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPPERMISSIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPPHONELOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPPHONELOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPPHONELOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPPHONELOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SBEAPTECHNICALASSISTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SBEAPTECHNICALASSISTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SBEAPTECHNICALASSISTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SBEAPTECHNICALASSISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsFullSBEAPTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOOKUPSBEAPACCOUNTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOOKUPSBEAPACCOUNTS"
            tableMapping.ColumnMappings.Add("NUMACCOUNTCODE", "NUMACCOUNTCODE")
            tableMapping.ColumnMappings.Add("STRACCOUNTDESC", "STRACCOUNTDESC")
            tableMapping.ColumnMappings.Add("NUMBRANCHCODE", "NUMBRANCHCODE")
            tableMapping.ColumnMappings.Add("NUMPROGRAMCODE", "NUMPROGRAMCODE")
            tableMapping.ColumnMappings.Add("NUMUNITCODE", "NUMUNITCODE")
            tableMapping.ColumnMappings.Add("STRFORMACCESS", "STRFORMACCESS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACCOUNTCODE, STRACCOUNTDESC, NUMBRANCHCODE, NUMPROGRAMCODE, NUMUNITCODE"& _ 
                ", STRFORMACCESS FROM AIRBRANCH.LOOKUPSBEAPACCOUNTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.LOOKUPSBEAPACCOUNTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.LOOKUPSBEAPACCOUNTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.LOOKUPSBEAPACCOUNTSDataTable = New dsFullSBEAP.LOOKUPSBEAPACCOUNTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOOKUPSBEAPCASEWORKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOOKUPSBEAPCASEWORK"
            tableMapping.ColumnMappings.Add("NUMACTIONTYPE", "NUMACTIONTYPE")
            tableMapping.ColumnMappings.Add("STRWORKDESCRIPTION", "STRWORKDESCRIPTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AIRBRANCH"".""LOOKUPSBEAPCASEWORK"" WHERE ((""NUMACTIONTYPE"" = :Original"& _ 
                "_NUMACTIONTYPE) AND ((:IsNull_STRWORKDESCRIPTION = 1 AND ""STRWORKDESCRIPTION"" IS"& _ 
                " NULL) OR (""STRWORKDESCRIPTION"" = :Original_STRWORKDESCRIPTION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NUMACTIONTYPE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRWORKDESCRIPTION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRWORKDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRWORKDESCRIPTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRWORKDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""LOOKUPSBEAPCASEWORK"" (""NUMACTIONTYPE"", ""STRWORKDESCRIPTI"& _ 
                "ON"") VALUES (:NUMACTIONTYPE, :STRWORKDESCRIPTION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONTYPE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRWORKDESCRIPTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRWORKDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AIRBRANCH"".""LOOKUPSBEAPCASEWORK"" SET ""NUMACTIONTYPE"" = :NUMACTIONTYPE, ""S"& _ 
                "TRWORKDESCRIPTION"" = :STRWORKDESCRIPTION WHERE ((""NUMACTIONTYPE"" = :Original_NUM"& _ 
                "ACTIONTYPE) AND ((:IsNull_STRWORKDESCRIPTION = 1 AND ""STRWORKDESCRIPTION"" IS NUL"& _ 
                "L) OR (""STRWORKDESCRIPTION"" = :Original_STRWORKDESCRIPTION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONTYPE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRWORKDESCRIPTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRWORKDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NUMACTIONTYPE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRWORKDESCRIPTION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRWORKDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRWORKDESCRIPTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRWORKDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACTIONTYPE, STRWORKDESCRIPTION FROM AIRBRANCH.LOOKUPSBEAPCASEWORK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.LOOKUPSBEAPCASEWORKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.LOOKUPSBEAPCASEWORKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.LOOKUPSBEAPCASEWORKDataTable = New dsFullSBEAP.LOOKUPSBEAPCASEWORKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.LOOKUPSBEAPCASEWORKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "LOOKUPSBEAPCASEWORK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_NUMACTIONTYPE As Decimal, ByVal Original_STRWORKDESCRIPTION As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_NUMACTIONTYPE,Decimal)
            If (Original_STRWORKDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STRWORKDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMACTIONTYPE As Decimal, ByVal STRWORKDESCRIPTION As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMACTIONTYPE,Decimal)
            If (STRWORKDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRWORKDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NUMACTIONTYPE As Decimal, ByVal STRWORKDESCRIPTION As String, ByVal Original_NUMACTIONTYPE As Decimal, ByVal Original_STRWORKDESCRIPTION As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NUMACTIONTYPE,Decimal)
            If (STRWORKDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(STRWORKDESCRIPTION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_NUMACTIONTYPE,Decimal)
            If (Original_STRWORKDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_STRWORKDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STRWORKDESCRIPTION As String, ByVal Original_NUMACTIONTYPE As Decimal, ByVal Original_STRWORKDESCRIPTION As String) As Integer
            Return Me.Update(Original_NUMACTIONTYPE, STRWORKDESCRIPTION, Original_NUMACTIONTYPE, Original_STRWORKDESCRIPTION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOOKUPSBEAPFORMSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOOKUPSBEAPFORMS"
            tableMapping.ColumnMappings.Add("NUMFORMCODE", "NUMFORMCODE")
            tableMapping.ColumnMappings.Add("STRFORM", "STRFORM")
            tableMapping.ColumnMappings.Add("STRFORMDESC", "STRFORMDESC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AIRBRANCH"".""LOOKUPSBEAPFORMS"" WHERE ((""NUMFORMCODE"" = :Original_NUMF"& _ 
                "ORMCODE) AND ((:IsNull_STRFORM = 1 AND ""STRFORM"" IS NULL) OR (""STRFORM"" = :Origi"& _ 
                "nal_STRFORM)) AND ((:IsNull_STRFORMDESC = 1 AND ""STRFORMDESC"" IS NULL) OR (""STRF"& _ 
                "ORMDESC"" = :Original_STRFORMDESC)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NUMFORMCODE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMFORMCODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRFORM", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRFORM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRFORM", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRFORMDESC", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRFORMDESC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRFORMDESC", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORMDESC", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""LOOKUPSBEAPFORMS"" (""NUMFORMCODE"", ""STRFORM"", ""STRFORMDES"& _ 
                "C"") VALUES (:NUMFORMCODE, :STRFORM, :STRFORMDESC)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMFORMCODE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMFORMCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRFORM", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRFORMDESC", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORMDESC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AIRBRANCH"".""LOOKUPSBEAPFORMS"" SET ""NUMFORMCODE"" = :NUMFORMCODE, ""STRFORM"""& _ 
                " = :STRFORM, ""STRFORMDESC"" = :STRFORMDESC WHERE ((""NUMFORMCODE"" = :Original_NUMF"& _ 
                "ORMCODE) AND ((:IsNull_STRFORM = 1 AND ""STRFORM"" IS NULL) OR (""STRFORM"" = :Origi"& _ 
                "nal_STRFORM)) AND ((:IsNull_STRFORMDESC = 1 AND ""STRFORMDESC"" IS NULL) OR (""STRF"& _ 
                "ORMDESC"" = :Original_STRFORMDESC)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMFORMCODE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMFORMCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRFORM", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRFORMDESC", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORMDESC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NUMFORMCODE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMFORMCODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRFORM", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRFORM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRFORM", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRFORMDESC", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRFORMDESC", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRFORMDESC", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFORMDESC", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMFORMCODE, STRFORM, STRFORMDESC FROM AIRBRANCH.LOOKUPSBEAPFORMS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.LOOKUPSBEAPFORMSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.LOOKUPSBEAPFORMSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.LOOKUPSBEAPFORMSDataTable = New dsFullSBEAP.LOOKUPSBEAPFORMSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.LOOKUPSBEAPFORMSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "LOOKUPSBEAPFORMS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_NUMFORMCODE As Decimal, ByVal Original_STRFORM As String, ByVal Original_STRFORMDESC As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_NUMFORMCODE,Decimal)
            If (Original_STRFORM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STRFORM,String)
            End If
            If (Original_STRFORMDESC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_STRFORMDESC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMFORMCODE As Decimal, ByVal STRFORM As String, ByVal STRFORMDESC As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMFORMCODE,Decimal)
            If (STRFORM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRFORM,String)
            End If
            If (STRFORMDESC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRFORMDESC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NUMFORMCODE As Decimal, ByVal STRFORM As String, ByVal STRFORMDESC As String, ByVal Original_NUMFORMCODE As Decimal, ByVal Original_STRFORM As String, ByVal Original_STRFORMDESC As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NUMFORMCODE,Decimal)
            If (STRFORM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(STRFORM,String)
            End If
            If (STRFORMDESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(STRFORMDESC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_NUMFORMCODE,Decimal)
            If (Original_STRFORM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_STRFORM,String)
            End If
            If (Original_STRFORMDESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_STRFORMDESC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STRFORM As String, ByVal STRFORMDESC As String, ByVal Original_NUMFORMCODE As Decimal, ByVal Original_STRFORM As String, ByVal Original_STRFORMDESC As String) As Integer
            Return Me.Update(Original_NUMFORMCODE, STRFORM, STRFORMDESC, Original_NUMFORMCODE, Original_STRFORM, Original_STRFORMDESC)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPACTIONLOGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPACTIONLOG"
            tableMapping.ColumnMappings.Add("NUMACTIONID", "NUMACTIONID")
            tableMapping.ColumnMappings.Add("NUMCASEID", "NUMCASEID")
            tableMapping.ColumnMappings.Add("NUMACTIONTYPE", "NUMACTIONTYPE")
            tableMapping.ColumnMappings.Add("NUMMODIFINGSTAFF", "NUMMODIFINGSTAFF")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            tableMapping.ColumnMappings.Add("STRCREATINGSTAFF", "STRCREATINGSTAFF")
            tableMapping.ColumnMappings.Add("DATCREATIONDATE", "DATCREATIONDATE")
            tableMapping.ColumnMappings.Add("DATACTIONOCCURED", "DATACTIONOCCURED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPACTIONLOG"" (""NUMACTIONID"", ""NUMCASEID"", ""NUMACTIONT"& _ 
                "YPE"", ""NUMMODIFINGSTAFF"", ""DATMODIFINGDATE"", ""STRCREATINGSTAFF"", ""DATCREATIONDAT"& _ 
                "E"", ""DATACTIONOCCURED"") VALUES (:NUMACTIONID, :NUMCASEID, :NUMACTIONTYPE, :NUMMO"& _ 
                "DIFINGSTAFF, :DATMODIFINGDATE, :STRCREATINGSTAFF, :DATCREATIONDATE, :DATACTIONOC"& _ 
                "CURED)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMCASEID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMCASEID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONTYPE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMMODIFINGSTAFF", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMMODIFINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCREATINGSTAFF", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCREATINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCREATIONDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCREATIONDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATACTIONOCCURED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATACTIONOCCURED", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACTIONID, NUMCASEID, NUMACTIONTYPE, NUMMODIFINGSTAFF, DATMODIFINGDATE, "& _ 
                "STRCREATINGSTAFF, DATCREATIONDATE, DATACTIONOCCURED FROM AIRBRANCH.SBEAPACTIONLO"& _ 
                "G"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPACTIONLOGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPACTIONLOGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPACTIONLOGDataTable = New dsFullSBEAP.SBEAPACTIONLOGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPACTIONLOGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPACTIONLOG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMACTIONID As Global.System.Nullable(Of Decimal), ByVal NUMCASEID As Global.System.Nullable(Of Decimal), ByVal NUMACTIONTYPE As Global.System.Nullable(Of Decimal), ByVal NUMMODIFINGSTAFF As Global.System.Nullable(Of Decimal), ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date), ByVal STRCREATINGSTAFF As String, ByVal DATCREATIONDATE As Global.System.Nullable(Of Date), ByVal DATACTIONOCCURED As Global.System.Nullable(Of Date)) As Integer
            If (NUMACTIONID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMACTIONID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NUMCASEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUMCASEID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (NUMACTIONTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NUMACTIONTYPE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (NUMMODIFINGSTAFF.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NUMMODIFINGSTAFF.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (STRCREATINGSTAFF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRCREATINGSTAFF,String)
            End If
            If (DATCREATIONDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DATCREATIONDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATACTIONOCCURED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATACTIONOCCURED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCASELOGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCASELOG"
            tableMapping.ColumnMappings.Add("NUMCASEID", "NUMCASEID")
            tableMapping.ColumnMappings.Add("NUMSTAFFRESPONSIBLE", "NUMSTAFFRESPONSIBLE")
            tableMapping.ColumnMappings.Add("DATCASEOPENED", "DATCASEOPENED")
            tableMapping.ColumnMappings.Add("STRCASESUMMARY", "STRCASESUMMARY")
            tableMapping.ColumnMappings.Add("CLIENTID", "CLIENTID")
            tableMapping.ColumnMappings.Add("DATCASECLOSED", "DATCASECLOSED")
            tableMapping.ColumnMappings.Add("NUMMODIFINGSTAFF", "NUMMODIFINGSTAFF")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            tableMapping.ColumnMappings.Add("STRINTERAGENCY", "STRINTERAGENCY")
            tableMapping.ColumnMappings.Add("STRREFERRALCOMMENTS", "STRREFERRALCOMMENTS")
            tableMapping.ColumnMappings.Add("DATREFERRALDATE", "DATREFERRALDATE")
            tableMapping.ColumnMappings.Add("STRCOMPLAINTBASED", "STRCOMPLAINTBASED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCASELOG"" (""NUMCASEID"", ""NUMSTAFFRESPONSIBLE"", ""DATC"& _ 
                "ASEOPENED"", ""STRCASESUMMARY"", ""CLIENTID"", ""DATCASECLOSED"", ""NUMMODIFINGSTAFF"", """& _ 
                "DATMODIFINGDATE"", ""STRINTERAGENCY"", ""STRREFERRALCOMMENTS"", ""DATREFERRALDATE"", ""S"& _ 
                "TRCOMPLAINTBASED"") VALUES (:NUMCASEID, :NUMSTAFFRESPONSIBLE, :DATCASEOPENED, :ST"& _ 
                "RCASESUMMARY, :CLIENTID, :DATCASECLOSED, :NUMMODIFINGSTAFF, :DATMODIFINGDATE, :S"& _ 
                "TRINTERAGENCY, :STRREFERRALCOMMENTS, :DATREFERRALDATE, :STRCOMPLAINTBASED)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMCASEID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMCASEID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMSTAFFRESPONSIBLE", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMSTAFFRESPONSIBLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCASEOPENED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCASEOPENED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCASESUMMARY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCASESUMMARY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCASECLOSED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCASECLOSED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMMODIFINGSTAFF", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMMODIFINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRINTERAGENCY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRINTERAGENCY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRREFERRALCOMMENTS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRREFERRALCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATREFERRALDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATREFERRALDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPLAINTBASED", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPLAINTBASED", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMCASEID, NUMSTAFFRESPONSIBLE, DATCASEOPENED, STRCASESUMMARY, CLIENTID, D"& _ 
                "ATCASECLOSED, NUMMODIFINGSTAFF, DATMODIFINGDATE, STRINTERAGENCY, STRREFERRALCOMM"& _ 
                "ENTS, DATREFERRALDATE, STRCOMPLAINTBASED FROM AIRBRANCH.SBEAPCASELOG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCASELOGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCASELOGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCASELOGDataTable = New dsFullSBEAP.SBEAPCASELOGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCASELOGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCASELOG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMCASEID As Global.System.Nullable(Of Decimal), ByVal NUMSTAFFRESPONSIBLE As Global.System.Nullable(Of Decimal), ByVal DATCASEOPENED As Global.System.Nullable(Of Date), ByVal STRCASESUMMARY As String, ByVal CLIENTID As Global.System.Nullable(Of Decimal), ByVal DATCASECLOSED As Global.System.Nullable(Of Date), ByVal NUMMODIFINGSTAFF As Global.System.Nullable(Of Decimal), ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date), ByVal STRINTERAGENCY As String, ByVal STRREFERRALCOMMENTS As String, ByVal DATREFERRALDATE As Global.System.Nullable(Of Date), ByVal STRCOMPLAINTBASED As String) As Integer
            If (NUMCASEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMCASEID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (NUMSTAFFRESPONSIBLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NUMSTAFFRESPONSIBLE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DATCASEOPENED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATCASEOPENED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (STRCASESUMMARY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRCASESUMMARY,String)
            End If
            If (CLIENTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CLIENTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DATCASECLOSED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DATCASECLOSED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (NUMMODIFINGSTAFF.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NUMMODIFINGSTAFF.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (STRINTERAGENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRINTERAGENCY,String)
            End If
            If (STRREFERRALCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRREFERRALCOMMENTS,String)
            End If
            If (DATREFERRALDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DATREFERRALDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (STRCOMPLAINTBASED Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRCOMPLAINTBASED,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCASELOGLINKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCASELOGLINK"
            tableMapping.ColumnMappings.Add("NUMCASEID", "NUMCASEID")
            tableMapping.ColumnMappings.Add("CLIENTID", "CLIENTID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCASELOGLINK"" (""NUMCASEID"", ""CLIENTID"") VALUES (:NUM"& _ 
                "CASEID, :CLIENTID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMCASEID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMCASEID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMCASEID, CLIENTID FROM AIRBRANCH.SBEAPCASELOGLINK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCASELOGLINKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCASELOGLINKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCASELOGLINKDataTable = New dsFullSBEAP.SBEAPCASELOGLINKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCASELOGLINKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCASELOGLINK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMCASEID As Global.System.Nullable(Of Decimal), ByVal CLIENTID As Global.System.Nullable(Of Decimal)) As Integer
            If (NUMCASEID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMCASEID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CLIENTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CLIENTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCLIENTCONTACTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCLIENTCONTACTS"
            tableMapping.ColumnMappings.Add("CLIENTCONTACTID", "CLIENTCONTACTID")
            tableMapping.ColumnMappings.Add("STRCLIENTFIRSTNAME", "STRCLIENTFIRSTNAME")
            tableMapping.ColumnMappings.Add("STRCLIENTLASTNAME", "STRCLIENTLASTNAME")
            tableMapping.ColumnMappings.Add("STRCLIENTSALUTATION", "STRCLIENTSALUTATION")
            tableMapping.ColumnMappings.Add("STRCLIENTCREDENTIALS", "STRCLIENTCREDENTIALS")
            tableMapping.ColumnMappings.Add("STRCLIENTTITLE", "STRCLIENTTITLE")
            tableMapping.ColumnMappings.Add("STRCLIENTPHONENUMBER", "STRCLIENTPHONENUMBER")
            tableMapping.ColumnMappings.Add("STRCLIENTCELLPHONE", "STRCLIENTCELLPHONE")
            tableMapping.ColumnMappings.Add("STRCLIENTFAX", "STRCLIENTFAX")
            tableMapping.ColumnMappings.Add("STRCLIENTEMAIL", "STRCLIENTEMAIL")
            tableMapping.ColumnMappings.Add("STRCLIENTADDRESS", "STRCLIENTADDRESS")
            tableMapping.ColumnMappings.Add("STRCLIENTCITY", "STRCLIENTCITY")
            tableMapping.ColumnMappings.Add("STRCLIENTSTATE", "STRCLIENTSTATE")
            tableMapping.ColumnMappings.Add("STRCLIENTZIPCODE", "STRCLIENTZIPCODE")
            tableMapping.ColumnMappings.Add("STRCLIENTCREATOR", "STRCLIENTCREATOR")
            tableMapping.ColumnMappings.Add("DATCLIENTCREATED", "DATCLIENTCREATED")
            tableMapping.ColumnMappings.Add("STRMODIFINGPERSON", "STRMODIFINGPERSON")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            tableMapping.ColumnMappings.Add("STRCONTACTNOTES", "STRCONTACTNOTES")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCLIENTCONTACTS"" (""CLIENTCONTACTID"", ""STRCLIENTFIRST"& _ 
                "NAME"", ""STRCLIENTLASTNAME"", ""STRCLIENTSALUTATION"", ""STRCLIENTCREDENTIALS"", ""STRC"& _ 
                "LIENTTITLE"", ""STRCLIENTPHONENUMBER"", ""STRCLIENTCELLPHONE"", ""STRCLIENTFAX"", ""STRC"& _ 
                "LIENTEMAIL"", ""STRCLIENTADDRESS"", ""STRCLIENTCITY"", ""STRCLIENTSTATE"", ""STRCLIENTZI"& _ 
                "PCODE"", ""STRCLIENTCREATOR"", ""DATCLIENTCREATED"", ""STRMODIFINGPERSON"", ""DATMODIFIN"& _ 
                "GDATE"", ""STRCONTACTNOTES"") VALUES (:CLIENTCONTACTID, :STRCLIENTFIRSTNAME, :STRCL"& _ 
                "IENTLASTNAME, :STRCLIENTSALUTATION, :STRCLIENTCREDENTIALS, :STRCLIENTTITLE, :STR"& _ 
                "CLIENTPHONENUMBER, :STRCLIENTCELLPHONE, :STRCLIENTFAX, :STRCLIENTEMAIL, :STRCLIE"& _ 
                "NTADDRESS, :STRCLIENTCITY, :STRCLIENTSTATE, :STRCLIENTZIPCODE, :STRCLIENTCREATOR"& _ 
                ", :DATCLIENTCREATED, :STRMODIFINGPERSON, :DATMODIFINGDATE, :STRCONTACTNOTES)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTCONTACTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTCONTACTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTFIRSTNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTFIRSTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTLASTNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTLASTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTSALUTATION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTSALUTATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTCREDENTIALS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTCREDENTIALS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTTITLE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTTITLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTPHONENUMBER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTPHONENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTCELLPHONE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTCELLPHONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTFAX", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTFAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTEMAIL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTEMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTADDRESS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTCITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTSTATE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTZIPCODE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTZIPCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTCREATOR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTCREATOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCLIENTCREATED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCLIENTCREATED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGPERSON", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGPERSON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCONTACTNOTES", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCONTACTNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CLIENTCONTACTID, STRCLIENTFIRSTNAME, STRCLIENTLASTNAME, STRCLIENTSALUTATIO"& _ 
                "N, STRCLIENTCREDENTIALS, STRCLIENTTITLE, STRCLIENTPHONENUMBER, STRCLIENTCELLPHON"& _ 
                "E, STRCLIENTFAX, STRCLIENTEMAIL, STRCLIENTADDRESS, STRCLIENTCITY, STRCLIENTSTATE"& _ 
                ", STRCLIENTZIPCODE, STRCLIENTCREATOR, DATCLIENTCREATED, STRMODIFINGPERSON, DATMO"& _ 
                "DIFINGDATE, STRCONTACTNOTES FROM AIRBRANCH.SBEAPCLIENTCONTACTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTCONTACTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCLIENTCONTACTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCLIENTCONTACTSDataTable = New dsFullSBEAP.SBEAPCLIENTCONTACTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTCONTACTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCLIENTCONTACTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CLIENTCONTACTID As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCLIENTFIRSTNAME As String,  _
                    ByVal STRCLIENTLASTNAME As String,  _
                    ByVal STRCLIENTSALUTATION As String,  _
                    ByVal STRCLIENTCREDENTIALS As String,  _
                    ByVal STRCLIENTTITLE As String,  _
                    ByVal STRCLIENTPHONENUMBER As String,  _
                    ByVal STRCLIENTCELLPHONE As String,  _
                    ByVal STRCLIENTFAX As String,  _
                    ByVal STRCLIENTEMAIL As String,  _
                    ByVal STRCLIENTADDRESS As String,  _
                    ByVal STRCLIENTCITY As String,  _
                    ByVal STRCLIENTSTATE As String,  _
                    ByVal STRCLIENTZIPCODE As String,  _
                    ByVal STRCLIENTCREATOR As String,  _
                    ByVal DATCLIENTCREATED As Global.System.Nullable(Of Date),  _
                    ByVal STRMODIFINGPERSON As String,  _
                    ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date),  _
                    ByVal STRCONTACTNOTES As String) As Integer
            If (CLIENTCONTACTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENTCONTACTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRCLIENTFIRSTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRCLIENTFIRSTNAME,String)
            End If
            If (STRCLIENTLASTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRCLIENTLASTNAME,String)
            End If
            If (STRCLIENTSALUTATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRCLIENTSALUTATION,String)
            End If
            If (STRCLIENTCREDENTIALS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRCLIENTCREDENTIALS,String)
            End If
            If (STRCLIENTTITLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRCLIENTTITLE,String)
            End If
            If (STRCLIENTPHONENUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRCLIENTPHONENUMBER,String)
            End If
            If (STRCLIENTCELLPHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRCLIENTCELLPHONE,String)
            End If
            If (STRCLIENTFAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRCLIENTFAX,String)
            End If
            If (STRCLIENTEMAIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRCLIENTEMAIL,String)
            End If
            If (STRCLIENTADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STRCLIENTADDRESS,String)
            End If
            If (STRCLIENTCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRCLIENTCITY,String)
            End If
            If (STRCLIENTSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STRCLIENTSTATE,String)
            End If
            If (STRCLIENTZIPCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STRCLIENTZIPCODE,String)
            End If
            If (STRCLIENTCREATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STRCLIENTCREATOR,String)
            End If
            If (DATCLIENTCREATED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DATCLIENTCREATED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (STRMODIFINGPERSON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STRMODIFINGPERSON,String)
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (STRCONTACTNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(STRCONTACTNOTES,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCLIENTDATATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCLIENTDATA"
            tableMapping.ColumnMappings.Add("CLIENTID", "CLIENTID")
            tableMapping.ColumnMappings.Add("STRCLIENTDESCRIPTION", "STRCLIENTDESCRIPTION")
            tableMapping.ColumnMappings.Add("STRCLIENTWEBSITE", "STRCLIENTWEBSITE")
            tableMapping.ColumnMappings.Add("STRCLIENTSIC", "STRCLIENTSIC")
            tableMapping.ColumnMappings.Add("STRCLIENTNAICS", "STRCLIENTNAICS")
            tableMapping.ColumnMappings.Add("STRCLIENTEMPLOYEES", "STRCLIENTEMPLOYEES")
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRAIRPROGRAMCODES", "STRAIRPROGRAMCODES")
            tableMapping.ColumnMappings.Add("STRSTATEPROGRAMCODES", "STRSTATEPROGRAMCODES")
            tableMapping.ColumnMappings.Add("STRMODIFINGPERSON", "STRMODIFINGPERSON")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            tableMapping.ColumnMappings.Add("STRMODIFINGCOMMENTS", "STRMODIFINGCOMMENTS")
            tableMapping.ColumnMappings.Add("STRAIRPERMITNUMBER", "STRAIRPERMITNUMBER")
            tableMapping.ColumnMappings.Add("STRSSCPENGINEER", "STRSSCPENGINEER")
            tableMapping.ColumnMappings.Add("STRSSCPUNIT", "STRSSCPUNIT")
            tableMapping.ColumnMappings.Add("STRSSPPENGINEER", "STRSSPPENGINEER")
            tableMapping.ColumnMappings.Add("STRSSPPUNIT", "STRSSPPUNIT")
            tableMapping.ColumnMappings.Add("STRISMPENGINEER", "STRISMPENGINEER")
            tableMapping.ColumnMappings.Add("STRISMPUNIT", "STRISMPUNIT")
            tableMapping.ColumnMappings.Add("STRAIRDESCRIPTION", "STRAIRDESCRIPTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCLIENTDATA"" (""CLIENTID"", ""STRCLIENTDESCRIPTION"", ""S"& _ 
                "TRCLIENTWEBSITE"", ""STRCLIENTSIC"", ""STRCLIENTNAICS"", ""STRCLIENTEMPLOYEES"", ""STRAI"& _ 
                "RSNUMBER"", ""STRAIRPROGRAMCODES"", ""STRSTATEPROGRAMCODES"", ""STRMODIFINGPERSON"", ""D"& _ 
                "ATMODIFINGDATE"", ""STRMODIFINGCOMMENTS"", ""STRAIRPERMITNUMBER"", ""STRSSCPENGINEER"","& _ 
                " ""STRSSCPUNIT"", ""STRSSPPENGINEER"", ""STRSSPPUNIT"", ""STRISMPENGINEER"", ""STRISMPUNI"& _ 
                "T"", ""STRAIRDESCRIPTION"") VALUES (:CLIENTID, :STRCLIENTDESCRIPTION, :STRCLIENTWEB"& _ 
                "SITE, :STRCLIENTSIC, :STRCLIENTNAICS, :STRCLIENTEMPLOYEES, :STRAIRSNUMBER, :STRA"& _ 
                "IRPROGRAMCODES, :STRSTATEPROGRAMCODES, :STRMODIFINGPERSON, :DATMODIFINGDATE, :ST"& _ 
                "RMODIFINGCOMMENTS, :STRAIRPERMITNUMBER, :STRSSCPENGINEER, :STRSSCPUNIT, :STRSSPP"& _ 
                "ENGINEER, :STRSSPPUNIT, :STRISMPENGINEER, :STRISMPUNIT, :STRAIRDESCRIPTION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTDESCRIPTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTWEBSITE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTWEBSITE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTSIC", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTSIC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTNAICS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTNAICS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCLIENTEMPLOYEES", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "STRCLIENTEMPLOYEES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRAIRSNUMBER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRAIRPROGRAMCODES", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRAIRPROGRAMCODES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSTATEPROGRAMCODES", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSTATEPROGRAMCODES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGPERSON", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGPERSON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGCOMMENTS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRAIRPERMITNUMBER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRAIRPERMITNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSSCPENGINEER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSSCPENGINEER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSSCPUNIT", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSSCPUNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSSPPENGINEER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSSPPENGINEER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSSPPUNIT", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSSPPUNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRISMPENGINEER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRISMPENGINEER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRISMPUNIT", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRISMPUNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRAIRDESCRIPTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRAIRDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CLIENTID, STRCLIENTDESCRIPTION, STRCLIENTWEBSITE, STRCLIENTSIC, STRCLIENTN"& _ 
                "AICS, STRCLIENTEMPLOYEES, STRAIRSNUMBER, STRAIRPROGRAMCODES, STRSTATEPROGRAMCODE"& _ 
                "S, STRMODIFINGPERSON, DATMODIFINGDATE, STRMODIFINGCOMMENTS, STRAIRPERMITNUMBER, "& _ 
                "STRSSCPENGINEER, STRSSCPUNIT, STRSSPPENGINEER, STRSSPPUNIT, STRISMPENGINEER, STR"& _ 
                "ISMPUNIT, STRAIRDESCRIPTION FROM AIRBRANCH.SBEAPCLIENTDATA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTDATADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCLIENTDATADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCLIENTDATADataTable = New dsFullSBEAP.SBEAPCLIENTDATADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTDATADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCLIENTDATA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CLIENTID As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCLIENTDESCRIPTION As String,  _
                    ByVal STRCLIENTWEBSITE As String,  _
                    ByVal STRCLIENTSIC As String,  _
                    ByVal STRCLIENTNAICS As String,  _
                    ByVal STRCLIENTEMPLOYEES As Global.System.Nullable(Of Decimal),  _
                    ByVal STRAIRSNUMBER As String,  _
                    ByVal STRAIRPROGRAMCODES As String,  _
                    ByVal STRSTATEPROGRAMCODES As String,  _
                    ByVal STRMODIFINGPERSON As String,  _
                    ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date),  _
                    ByVal STRMODIFINGCOMMENTS As String,  _
                    ByVal STRAIRPERMITNUMBER As String,  _
                    ByVal STRSSCPENGINEER As String,  _
                    ByVal STRSSCPUNIT As String,  _
                    ByVal STRSSPPENGINEER As String,  _
                    ByVal STRSSPPUNIT As String,  _
                    ByVal STRISMPENGINEER As String,  _
                    ByVal STRISMPUNIT As String,  _
                    ByVal STRAIRDESCRIPTION As String) As Integer
            If (CLIENTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRCLIENTDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRCLIENTDESCRIPTION,String)
            End If
            If (STRCLIENTWEBSITE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRCLIENTWEBSITE,String)
            End If
            If (STRCLIENTSIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRCLIENTSIC,String)
            End If
            If (STRCLIENTNAICS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRCLIENTNAICS,String)
            End If
            If (STRCLIENTEMPLOYEES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRCLIENTEMPLOYEES.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (STRAIRSNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRAIRSNUMBER,String)
            End If
            If (STRAIRPROGRAMCODES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRAIRPROGRAMCODES,String)
            End If
            If (STRSTATEPROGRAMCODES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRSTATEPROGRAMCODES,String)
            End If
            If (STRMODIFINGPERSON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRMODIFINGPERSON,String)
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (STRMODIFINGCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRMODIFINGCOMMENTS,String)
            End If
            If (STRAIRPERMITNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STRAIRPERMITNUMBER,String)
            End If
            If (STRSSCPENGINEER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STRSSCPENGINEER,String)
            End If
            If (STRSSCPUNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STRSSCPUNIT,String)
            End If
            If (STRSSPPENGINEER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STRSSPPENGINEER,String)
            End If
            If (STRSSPPUNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STRSSPPUNIT,String)
            End If
            If (STRISMPENGINEER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STRISMPENGINEER,String)
            End If
            If (STRISMPUNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(STRISMPUNIT,String)
            End If
            If (STRAIRDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(STRAIRDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCLIENTLINKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCLIENTLINK"
            tableMapping.ColumnMappings.Add("CLIENTID", "CLIENTID")
            tableMapping.ColumnMappings.Add("CLIENTCONTACTID", "CLIENTCONTACTID")
            tableMapping.ColumnMappings.Add("STRMAINCONTACT", "STRMAINCONTACT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCLIENTLINK"" (""CLIENTID"", ""CLIENTCONTACTID"", ""STRMAI"& _ 
                "NCONTACT"") VALUES (:CLIENTID, :CLIENTCONTACTID, :STRMAINCONTACT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTCONTACTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTCONTACTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMAINCONTACT", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMAINCONTACT", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CLIENTID, CLIENTCONTACTID, STRMAINCONTACT FROM AIRBRANCH.SBEAPCLIENTLINK"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTLINKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCLIENTLINKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCLIENTLINKDataTable = New dsFullSBEAP.SBEAPCLIENTLINKDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTLINKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCLIENTLINK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CLIENTID As Global.System.Nullable(Of Decimal), ByVal CLIENTCONTACTID As Global.System.Nullable(Of Decimal), ByVal STRMAINCONTACT As String) As Integer
            If (CLIENTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CLIENTCONTACTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CLIENTCONTACTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (STRMAINCONTACT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRMAINCONTACT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCLIENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCLIENTS"
            tableMapping.ColumnMappings.Add("CLIENTID", "CLIENTID")
            tableMapping.ColumnMappings.Add("STRCOMPANYNAME", "STRCOMPANYNAME")
            tableMapping.ColumnMappings.Add("DATSTARTDATE", "DATSTARTDATE")
            tableMapping.ColumnMappings.Add("STRCOMPANYADDRESS", "STRCOMPANYADDRESS")
            tableMapping.ColumnMappings.Add("STRCOMPANYADDRESS2", "STRCOMPANYADDRESS2")
            tableMapping.ColumnMappings.Add("STRCOMPANYCITY", "STRCOMPANYCITY")
            tableMapping.ColumnMappings.Add("STRCOMPANYSTATE", "STRCOMPANYSTATE")
            tableMapping.ColumnMappings.Add("STRCOMPANYZIPCODE", "STRCOMPANYZIPCODE")
            tableMapping.ColumnMappings.Add("STRCOMPANYCOUNTY", "STRCOMPANYCOUNTY")
            tableMapping.ColumnMappings.Add("STRCOMPANYLATITUDE", "STRCOMPANYLATITUDE")
            tableMapping.ColumnMappings.Add("STRCOMPANYLONGITUDE", "STRCOMPANYLONGITUDE")
            tableMapping.ColumnMappings.Add("STRMAILINGADDRESS", "STRMAILINGADDRESS")
            tableMapping.ColumnMappings.Add("STRMAILINGADDRESS2", "STRMAILINGADDRESS2")
            tableMapping.ColumnMappings.Add("STRMAILINGCITY", "STRMAILINGCITY")
            tableMapping.ColumnMappings.Add("STRMAILINGSTATE", "STRMAILINGSTATE")
            tableMapping.ColumnMappings.Add("STRMAILINGZIPCODE", "STRMAILINGZIPCODE")
            tableMapping.ColumnMappings.Add("STRCOMPANYCREATOR", "STRCOMPANYCREATOR")
            tableMapping.ColumnMappings.Add("DATCOMPANYCREATED", "DATCOMPANYCREATED")
            tableMapping.ColumnMappings.Add("STRMODIFINGPERSON", "STRMODIFINGPERSON")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            tableMapping.ColumnMappings.Add("STRMODIFINGCOMMENTS", "STRMODIFINGCOMMENTS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCLIENTS"" (""CLIENTID"", ""STRCOMPANYNAME"", ""DATSTARTDA"& _ 
                "TE"", ""STRCOMPANYADDRESS"", ""STRCOMPANYADDRESS2"", ""STRCOMPANYCITY"", ""STRCOMPANYSTA"& _ 
                "TE"", ""STRCOMPANYZIPCODE"", ""STRCOMPANYCOUNTY"", ""STRCOMPANYLATITUDE"", ""STRCOMPANYL"& _ 
                "ONGITUDE"", ""STRMAILINGADDRESS"", ""STRMAILINGADDRESS2"", ""STRMAILINGCITY"", ""STRMAIL"& _ 
                "INGSTATE"", ""STRMAILINGZIPCODE"", ""STRCOMPANYCREATOR"", ""DATCOMPANYCREATED"", ""STRMO"& _ 
                "DIFINGPERSON"", ""DATMODIFINGDATE"", ""STRMODIFINGCOMMENTS"") VALUES (:CLIENTID, :STR"& _ 
                "COMPANYNAME, :DATSTARTDATE, :STRCOMPANYADDRESS, :STRCOMPANYADDRESS2, :STRCOMPANY"& _ 
                "CITY, :STRCOMPANYSTATE, :STRCOMPANYZIPCODE, :STRCOMPANYCOUNTY, :STRCOMPANYLATITU"& _ 
                "DE, :STRCOMPANYLONGITUDE, :STRMAILINGADDRESS, :STRMAILINGADDRESS2, :STRMAILINGCI"& _ 
                "TY, :STRMAILINGSTATE, :STRMAILINGZIPCODE, :STRCOMPANYCREATOR, :DATCOMPANYCREATED"& _ 
                ", :STRMODIFINGPERSON, :DATMODIFINGDATE, :STRMODIFINGCOMMENTS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CLIENTID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CLIENTID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATSTARTDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATSTARTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYADDRESS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYADDRESS2", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYADDRESS2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYCITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYSTATE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYZIPCODE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYZIPCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYCOUNTY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYCOUNTY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYLATITUDE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYLATITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYLONGITUDE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYLONGITUDE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMAILINGADDRESS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMAILINGADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMAILINGADDRESS2", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMAILINGADDRESS2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMAILINGCITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMAILINGCITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMAILINGSTATE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMAILINGSTATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMAILINGZIPCODE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMAILINGZIPCODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCOMPANYCREATOR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCOMPANYCREATOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCOMPANYCREATED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCOMPANYCREATED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGPERSON", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGPERSON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGCOMMENTS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGCOMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CLIENTID, STRCOMPANYNAME, DATSTARTDATE, STRCOMPANYADDRESS, STRCOMPANYADDRE"& _ 
                "SS2, STRCOMPANYCITY, STRCOMPANYSTATE, STRCOMPANYZIPCODE, STRCOMPANYCOUNTY, STRCO"& _ 
                "MPANYLATITUDE, STRCOMPANYLONGITUDE, STRMAILINGADDRESS, STRMAILINGADDRESS2, STRMA"& _ 
                "ILINGCITY, STRMAILINGSTATE, STRMAILINGZIPCODE, STRCOMPANYCREATOR, DATCOMPANYCREA"& _ 
                "TED, STRMODIFINGPERSON, DATMODIFINGDATE, STRMODIFINGCOMMENTS FROM AIRBRANCH.SBEA"& _ 
                "PCLIENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCLIENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCLIENTSDataTable = New dsFullSBEAP.SBEAPCLIENTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCLIENTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCLIENTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CLIENTID As Global.System.Nullable(Of Decimal),  _
                    ByVal STRCOMPANYNAME As String,  _
                    ByVal DATSTARTDATE As Global.System.Nullable(Of Date),  _
                    ByVal STRCOMPANYADDRESS As String,  _
                    ByVal STRCOMPANYADDRESS2 As String,  _
                    ByVal STRCOMPANYCITY As String,  _
                    ByVal STRCOMPANYSTATE As String,  _
                    ByVal STRCOMPANYZIPCODE As String,  _
                    ByVal STRCOMPANYCOUNTY As String,  _
                    ByVal STRCOMPANYLATITUDE As String,  _
                    ByVal STRCOMPANYLONGITUDE As String,  _
                    ByVal STRMAILINGADDRESS As String,  _
                    ByVal STRMAILINGADDRESS2 As String,  _
                    ByVal STRMAILINGCITY As String,  _
                    ByVal STRMAILINGSTATE As String,  _
                    ByVal STRMAILINGZIPCODE As String,  _
                    ByVal STRCOMPANYCREATOR As String,  _
                    ByVal DATCOMPANYCREATED As Global.System.Nullable(Of Date),  _
                    ByVal STRMODIFINGPERSON As String,  _
                    ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date),  _
                    ByVal STRMODIFINGCOMMENTS As String) As Integer
            If (CLIENTID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENTID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRCOMPANYNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRCOMPANYNAME,String)
            End If
            If (DATSTARTDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATSTARTDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (STRCOMPANYADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRCOMPANYADDRESS,String)
            End If
            If (STRCOMPANYADDRESS2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRCOMPANYADDRESS2,String)
            End If
            If (STRCOMPANYCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRCOMPANYCITY,String)
            End If
            If (STRCOMPANYSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRCOMPANYSTATE,String)
            End If
            If (STRCOMPANYZIPCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRCOMPANYZIPCODE,String)
            End If
            If (STRCOMPANYCOUNTY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRCOMPANYCOUNTY,String)
            End If
            If (STRCOMPANYLATITUDE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRCOMPANYLATITUDE,String)
            End If
            If (STRCOMPANYLONGITUDE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STRCOMPANYLONGITUDE,String)
            End If
            If (STRMAILINGADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRMAILINGADDRESS,String)
            End If
            If (STRMAILINGADDRESS2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STRMAILINGADDRESS2,String)
            End If
            If (STRMAILINGCITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STRMAILINGCITY,String)
            End If
            If (STRMAILINGSTATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STRMAILINGSTATE,String)
            End If
            If (STRMAILINGZIPCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STRMAILINGZIPCODE,String)
            End If
            If (STRCOMPANYCREATOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STRCOMPANYCREATOR,String)
            End If
            If (DATCOMPANYCREATED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DATCOMPANYCREATED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (STRMODIFINGPERSON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(STRMODIFINGPERSON,String)
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (STRMODIFINGCOMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(STRMODIFINGCOMMENTS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPCONFERENCELOGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPCONFERENCELOG"
            tableMapping.ColumnMappings.Add("NUMACTIONID", "NUMACTIONID")
            tableMapping.ColumnMappings.Add("STRCONFERENCEATTENDED", "STRCONFERENCEATTENDED")
            tableMapping.ColumnMappings.Add("STRCONFERENCELOCATION", "STRCONFERENCELOCATION")
            tableMapping.ColumnMappings.Add("STRCONFERENCETOPIC", "STRCONFERENCETOPIC")
            tableMapping.ColumnMappings.Add("STRATTENDEES", "STRATTENDEES")
            tableMapping.ColumnMappings.Add("DATCONFERENCESTARTED", "DATCONFERENCESTARTED")
            tableMapping.ColumnMappings.Add("DATCONFERENCEENDED", "DATCONFERENCEENDED")
            tableMapping.ColumnMappings.Add("STRSBEAPPRESENTATION", "STRSBEAPPRESENTATION")
            tableMapping.ColumnMappings.Add("STRLISTOFBUSINESSSECTORS", "STRLISTOFBUSINESSSECTORS")
            tableMapping.ColumnMappings.Add("STRCONFERENCEFOLLOWUP", "STRCONFERENCEFOLLOWUP")
            tableMapping.ColumnMappings.Add("STRSTAFFATTENDING", "STRSTAFFATTENDING")
            tableMapping.ColumnMappings.Add("STRMODIFINGSTAFF", "STRMODIFINGSTAFF")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPCONFERENCELOG"" (""NUMACTIONID"", ""STRCONFERENCEATTEND"& _ 
                "ED"", ""STRCONFERENCELOCATION"", ""STRCONFERENCETOPIC"", ""STRATTENDEES"", ""DATCONFEREN"& _ 
                "CESTARTED"", ""DATCONFERENCEENDED"", ""STRSBEAPPRESENTATION"", ""STRLISTOFBUSINESSSECT"& _ 
                "ORS"", ""STRCONFERENCEFOLLOWUP"", ""STRSTAFFATTENDING"", ""STRMODIFINGSTAFF"", ""DATMODI"& _ 
                "FINGDATE"") VALUES (:NUMACTIONID, :STRCONFERENCEATTENDED, :STRCONFERENCELOCATION,"& _ 
                " :STRCONFERENCETOPIC, :STRATTENDEES, :DATCONFERENCESTARTED, :DATCONFERENCEENDED,"& _ 
                " :STRSBEAPPRESENTATION, :p1, :STRCONFERENCEFOLLOWUP, :STRSTAFFATTENDING, :STRMOD"& _ 
                "IFINGSTAFF, :DATMODIFINGDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCONFERENCEATTENDED", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCONFERENCEATTENDED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCONFERENCELOCATION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCONFERENCELOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCONFERENCETOPIC", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCONFERENCETOPIC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRATTENDEES", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRATTENDEES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCONFERENCESTARTED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCONFERENCESTARTED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATCONFERENCEENDED", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATCONFERENCEENDED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSBEAPPRESENTATION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPRESENTATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("p1", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRLISTOFBUSINESSSECTORS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCONFERENCEFOLLOWUP", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCONFERENCEFOLLOWUP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSTAFFATTENDING", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSTAFFATTENDING", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGSTAFF", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACTIONID, STRCONFERENCEATTENDED, STRCONFERENCELOCATION, STRCONFERENCETO"& _ 
                "PIC, STRATTENDEES, DATCONFERENCESTARTED, DATCONFERENCEENDED, STRSBEAPPRESENTATIO"& _ 
                "N, STRLISTOFBUSINESSSECTORS, STRCONFERENCEFOLLOWUP, STRSTAFFATTENDING, STRMODIFI"& _ 
                "NGSTAFF, DATMODIFINGDATE FROM AIRBRANCH.SBEAPCONFERENCELOG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPCONFERENCELOGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPCONFERENCELOGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPCONFERENCELOGDataTable = New dsFullSBEAP.SBEAPCONFERENCELOGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPCONFERENCELOGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPCONFERENCELOG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMACTIONID As Global.System.Nullable(Of Decimal), ByVal STRCONFERENCEATTENDED As String, ByVal STRCONFERENCELOCATION As String, ByVal STRCONFERENCETOPIC As String, ByVal STRATTENDEES As String, ByVal DATCONFERENCESTARTED As Global.System.Nullable(Of Date), ByVal DATCONFERENCEENDED As Global.System.Nullable(Of Date), ByVal STRSBEAPPRESENTATION As String, ByVal p1 As String, ByVal STRCONFERENCEFOLLOWUP As String, ByVal STRSTAFFATTENDING As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date)) As Integer
            If (NUMACTIONID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMACTIONID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRCONFERENCEATTENDED Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRCONFERENCEATTENDED,String)
            End If
            If (STRCONFERENCELOCATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRCONFERENCELOCATION,String)
            End If
            If (STRCONFERENCETOPIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRCONFERENCETOPIC,String)
            End If
            If (STRATTENDEES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRATTENDEES,String)
            End If
            If (DATCONFERENCESTARTED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DATCONFERENCESTARTED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DATCONFERENCEENDED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DATCONFERENCEENDED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (STRSBEAPPRESENTATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STRSBEAPPRESENTATION,String)
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p1,String)
            End If
            If (STRCONFERENCEFOLLOWUP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STRCONFERENCEFOLLOWUP,String)
            End If
            If (STRSTAFFATTENDING Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STRSTAFFATTENDING,String)
            End If
            If (STRMODIFINGSTAFF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STRMODIFINGSTAFF,String)
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPERRORLOGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPERRORLOG"
            tableMapping.ColumnMappings.Add("STRERRORNUMBER", "STRERRORNUMBER")
            tableMapping.ColumnMappings.Add("STRUSER", "STRUSER")
            tableMapping.ColumnMappings.Add("STRERRORLOCATION", "STRERRORLOCATION")
            tableMapping.ColumnMappings.Add("STRERRORMESSAGE", "STRERRORMESSAGE")
            tableMapping.ColumnMappings.Add("DATERRORDATE", "DATERRORDATE")
            tableMapping.ColumnMappings.Add("STRSOLUTION", "STRSOLUTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPERRORLOG"" (""STRERRORNUMBER"", ""STRUSER"", ""STRERRORLO"& _ 
                "CATION"", ""STRERRORMESSAGE"", ""DATERRORDATE"", ""STRSOLUTION"") VALUES (:STRERRORNUMB"& _ 
                "ER, :STRUSER, :STRERRORLOCATION, :STRERRORMESSAGE, :DATERRORDATE, :STRSOLUTION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRERRORNUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "STRERRORNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRUSER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRUSER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRERRORLOCATION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRERRORLOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRERRORMESSAGE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRERRORMESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATERRORDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATERRORDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSOLUTION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSOLUTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STRERRORNUMBER, STRUSER, STRERRORLOCATION, STRERRORMESSAGE, DATERRORDATE, "& _ 
                "STRSOLUTION FROM AIRBRANCH.SBEAPERRORLOG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPERRORLOGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPERRORLOGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPERRORLOGDataTable = New dsFullSBEAP.SBEAPERRORLOGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPERRORLOGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPERRORLOG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal STRERRORNUMBER As Global.System.Nullable(Of Decimal), ByVal STRUSER As String, ByVal STRERRORLOCATION As String, ByVal STRERRORMESSAGE As String, ByVal DATERRORDATE As Global.System.Nullable(Of Date), ByVal STRSOLUTION As String) As Integer
            If (STRERRORNUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(STRERRORNUMBER.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRUSER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRUSER,String)
            End If
            If (STRERRORLOCATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRERRORLOCATION,String)
            End If
            If (STRERRORMESSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRERRORMESSAGE,String)
            End If
            If (DATERRORDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATERRORDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (STRSOLUTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRSOLUTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPOTHERLOGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPOTHERLOG"
            tableMapping.ColumnMappings.Add("NUMACTIONID", "NUMACTIONID")
            tableMapping.ColumnMappings.Add("STRCASENOTES", "STRCASENOTES")
            tableMapping.ColumnMappings.Add("STRMODIFINGSTAFF", "STRMODIFINGSTAFF")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPOTHERLOG"" (""NUMACTIONID"", ""STRCASENOTES"", ""STRMODIF"& _ 
                "INGSTAFF"", ""DATMODIFINGDATE"") VALUES (:NUMACTIONID, :STRCASENOTES, :STRMODIFINGS"& _ 
                "TAFF, :DATMODIFINGDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCASENOTES", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCASENOTES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGSTAFF", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACTIONID, STRCASENOTES, STRMODIFINGSTAFF, DATMODIFINGDATE FROM AIRBRANC"& _ 
                "H.SBEAPOTHERLOG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPOTHERLOGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPOTHERLOGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPOTHERLOGDataTable = New dsFullSBEAP.SBEAPOTHERLOGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPOTHERLOGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPOTHERLOG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMACTIONID As Global.System.Nullable(Of Decimal), ByVal STRCASENOTES As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date)) As Integer
            If (NUMACTIONID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMACTIONID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRCASENOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRCASENOTES,String)
            End If
            If (STRMODIFINGSTAFF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(STRMODIFINGSTAFF,String)
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPPERMISSIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPPERMISSIONS"
            tableMapping.ColumnMappings.Add("NUMUSERID", "NUMUSERID")
            tableMapping.ColumnMappings.Add("STRSBEAPPERMISSIONS", "STRSBEAPPERMISSIONS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AIRBRANCH"".""SBEAPPERMISSIONS"" WHERE ((""NUMUSERID"" = :Original_NUMUSE"& _ 
                "RID) AND ((:IsNull_STRSBEAPPERMISSIONS = 1 AND ""STRSBEAPPERMISSIONS"" IS NULL) OR"& _ 
                " (""STRSBEAPPERMISSIONS"" = :Original_STRSBEAPPERMISSIONS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NUMUSERID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMUSERID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRSBEAPPERMISSIONS", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPERMISSIONS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRSBEAPPERMISSIONS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPERMISSIONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPPERMISSIONS"" (""NUMUSERID"", ""STRSBEAPPERMISSIONS"") V"& _ 
                "ALUES (:NUMUSERID, :STRSBEAPPERMISSIONS)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMUSERID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMUSERID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSBEAPPERMISSIONS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPERMISSIONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AIRBRANCH"".""SBEAPPERMISSIONS"" SET ""NUMUSERID"" = :NUMUSERID, ""STRSBEAPPERM"& _ 
                "ISSIONS"" = :STRSBEAPPERMISSIONS WHERE ((""NUMUSERID"" = :Original_NUMUSERID) AND ("& _ 
                "(:IsNull_STRSBEAPPERMISSIONS = 1 AND ""STRSBEAPPERMISSIONS"" IS NULL) OR (""STRSBEA"& _ 
                "PPERMISSIONS"" = :Original_STRSBEAPPERMISSIONS)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMUSERID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMUSERID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRSBEAPPERMISSIONS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPERMISSIONS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NUMUSERID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMUSERID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_STRSBEAPPERMISSIONS", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPERMISSIONS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STRSBEAPPERMISSIONS", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRSBEAPPERMISSIONS", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMUSERID, STRSBEAPPERMISSIONS FROM AIRBRANCH.SBEAPPERMISSIONS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPPERMISSIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPPERMISSIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPPERMISSIONSDataTable = New dsFullSBEAP.SBEAPPERMISSIONSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPPERMISSIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPPERMISSIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_NUMUSERID As Decimal, ByVal Original_STRSBEAPPERMISSIONS As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_NUMUSERID,Decimal)
            If (Original_STRSBEAPPERMISSIONS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_STRSBEAPPERMISSIONS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMUSERID As Decimal, ByVal STRSBEAPPERMISSIONS As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMUSERID,Decimal)
            If (STRSBEAPPERMISSIONS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRSBEAPPERMISSIONS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NUMUSERID As Decimal, ByVal STRSBEAPPERMISSIONS As String, ByVal Original_NUMUSERID As Decimal, ByVal Original_STRSBEAPPERMISSIONS As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NUMUSERID,Decimal)
            If (STRSBEAPPERMISSIONS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(STRSBEAPPERMISSIONS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_NUMUSERID,Decimal)
            If (Original_STRSBEAPPERMISSIONS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_STRSBEAPPERMISSIONS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal STRSBEAPPERMISSIONS As String, ByVal Original_NUMUSERID As Decimal, ByVal Original_STRSBEAPPERMISSIONS As String) As Integer
            Return Me.Update(Original_NUMUSERID, STRSBEAPPERMISSIONS, Original_NUMUSERID, Original_STRSBEAPPERMISSIONS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPPHONELOGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPPHONELOG"
            tableMapping.ColumnMappings.Add("NUMACTIONID", "NUMACTIONID")
            tableMapping.ColumnMappings.Add("STRCALLERINFORMATION", "STRCALLERINFORMATION")
            tableMapping.ColumnMappings.Add("NUMCALLERPHONENUMBER", "NUMCALLERPHONENUMBER")
            tableMapping.ColumnMappings.Add("STRPHONELOGNOTES", "STRPHONELOGNOTES")
            tableMapping.ColumnMappings.Add("STRONETIMEASSIST", "STRONETIMEASSIST")
            tableMapping.ColumnMappings.Add("STRFRONTDESKCALL", "STRFRONTDESKCALL")
            tableMapping.ColumnMappings.Add("STRMODIFINGSTAFF", "STRMODIFINGSTAFF")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPPHONELOG"" (""NUMACTIONID"", ""STRCALLERINFORMATION"", """& _ 
                "NUMCALLERPHONENUMBER"", ""STRPHONELOGNOTES"", ""STRONETIMEASSIST"", ""STRFRONTDESKCALL"& _ 
                """, ""STRMODIFINGSTAFF"", ""DATMODIFINGDATE"") VALUES (:NUMACTIONID, :STRCALLERINFORM"& _ 
                "ATION, :NUMCALLERPHONENUMBER, :STRPHONELOGNOTES, :STRONETIMEASSIST, :STRFRONTDES"& _ 
                "KCALL, :STRMODIFINGSTAFF, :DATMODIFINGDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRCALLERINFORMATION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRCALLERINFORMATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMCALLERPHONENUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMCALLERPHONENUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRPHONELOGNOTES", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRPHONELOGNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRONETIMEASSIST", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRONETIMEASSIST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRFRONTDESKCALL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRFRONTDESKCALL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGSTAFF", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACTIONID, STRCALLERINFORMATION, NUMCALLERPHONENUMBER, STRPHONELOGNOTES,"& _ 
                " STRONETIMEASSIST, STRFRONTDESKCALL, STRMODIFINGSTAFF, DATMODIFINGDATE FROM AIRB"& _ 
                "RANCH.SBEAPPHONELOG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPPHONELOGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPPHONELOGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPPHONELOGDataTable = New dsFullSBEAP.SBEAPPHONELOGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPPHONELOGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPPHONELOG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMACTIONID As Global.System.Nullable(Of Decimal), ByVal STRCALLERINFORMATION As String, ByVal NUMCALLERPHONENUMBER As Global.System.Nullable(Of Decimal), ByVal STRPHONELOGNOTES As String, ByVal STRONETIMEASSIST As String, ByVal STRFRONTDESKCALL As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As String) As Integer
            If (NUMACTIONID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMACTIONID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (STRCALLERINFORMATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(STRCALLERINFORMATION,String)
            End If
            If (NUMCALLERPHONENUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NUMCALLERPHONENUMBER.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (STRPHONELOGNOTES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STRPHONELOGNOTES,String)
            End If
            If (STRONETIMEASSIST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STRONETIMEASSIST,String)
            End If
            If (STRFRONTDESKCALL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRFRONTDESKCALL,String)
            End If
            If (STRMODIFINGSTAFF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRMODIFINGSTAFF,String)
            End If
            If (DATMODIFINGDATE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATMODIFINGDATE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SBEAPTECHNICALASSISTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SBEAPTECHNICALASSIST"
            tableMapping.ColumnMappings.Add("NUMACTIONID", "NUMACTIONID")
            tableMapping.ColumnMappings.Add("STRTECHNICALASSISTTYPE", "STRTECHNICALASSISTTYPE")
            tableMapping.ColumnMappings.Add("DATINITIALCONTACTDATE", "DATINITIALCONTACTDATE")
            tableMapping.ColumnMappings.Add("DATASSISTSTARTDATE", "DATASSISTSTARTDATE")
            tableMapping.ColumnMappings.Add("DATASSISTENDDATE", "DATASSISTENDDATE")
            tableMapping.ColumnMappings.Add("STRASSISTANCEREQUEST", "STRASSISTANCEREQUEST")
            tableMapping.ColumnMappings.Add("STRAIRSNUMBER", "STRAIRSNUMBER")
            tableMapping.ColumnMappings.Add("STRTECHNICALASSISTNOTES", "STRTECHNICALASSISTNOTES")
            tableMapping.ColumnMappings.Add("STRMODIFINGSTAFF", "STRMODIFINGSTAFF")
            tableMapping.ColumnMappings.Add("DATMODIFINGDATE", "DATMODIFINGDATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AIRBRANCH"".""SBEAPTECHNICALASSIST"" (""NUMACTIONID"", ""STRTECHNICALASSIS"& _ 
                "TTYPE"", ""DATINITIALCONTACTDATE"", ""DATASSISTSTARTDATE"", ""DATASSISTENDDATE"", ""STRA"& _ 
                "SSISTANCEREQUEST"", ""STRAIRSNUMBER"", ""STRTECHNICALASSISTNOTES"", ""STRMODIFINGSTAFF"& _ 
                """, ""DATMODIFINGDATE"") VALUES (:NUMACTIONID, :p1, :DATINITIALCONTACTDATE, :DATASS"& _ 
                "ISTSTARTDATE, :DATASSISTENDDATE, :STRASSISTANCEREQUEST, :STRAIRSNUMBER, :p4, :ST"& _ 
                "RMODIFINGSTAFF, :DATMODIFINGDATE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NUMACTIONID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "NUMACTIONID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("p1", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRTECHNICALASSISTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATINITIALCONTACTDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATINITIALCONTACTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATASSISTSTARTDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATASSISTSTARTDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATASSISTENDDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATASSISTENDDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRASSISTANCEREQUEST", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRASSISTANCEREQUEST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRAIRSNUMBER", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRAIRSNUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("p4", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRTECHNICALASSISTNOTES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STRMODIFINGSTAFF", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STRMODIFINGSTAFF", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DATMODIFINGDATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "DATMODIFINGDATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Sbeap.My.MySettings.Default.SBEAPconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NUMACTIONID, STRTECHNICALASSISTTYPE, DATINITIALCONTACTDATE, DATASSISTSTART"& _ 
                "DATE, DATASSISTENDDATE, STRASSISTANCEREQUEST, STRAIRSNUMBER, STRTECHNICALASSISTN"& _ 
                "OTES, STRMODIFINGSTAFF, DATMODIFINGDATE FROM AIRBRANCH.SBEAPTECHNICALASSIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsFullSBEAP.SBEAPTECHNICALASSISTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsFullSBEAP.SBEAPTECHNICALASSISTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsFullSBEAP.SBEAPTECHNICALASSISTDataTable = New dsFullSBEAP.SBEAPTECHNICALASSISTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsFullSBEAP.SBEAPTECHNICALASSISTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsFullSBEAP) As Integer
            Return Me.Adapter.Update(dataSet, "SBEAPTECHNICALASSIST")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NUMACTIONID As Global.System.Nullable(Of Decimal), ByVal p1 As String, ByVal DATINITIALCONTACTDATE As Global.System.Nullable(Of Date), ByVal DATASSISTSTARTDATE As Global.System.Nullable(Of Date), ByVal DATASSISTENDDATE As Global.System.Nullable(Of Date), ByVal STRASSISTANCEREQUEST As String, ByVal STRAIRSNUMBER As String, ByVal p4 As String, ByVal STRMODIFINGSTAFF As String, ByVal DATMODIFINGDATE As Global.System.Nullable(Of Date)) As Integer
            If (NUMACTIONID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NUMACTIONID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p1,String)
            End If
            If (DATINITIALCONTACTDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DATINITIALCONTACTDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DATASSISTSTARTDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DATASSISTSTARTDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DATASSISTENDDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATASSISTENDDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (STRASSISTANCEREQUEST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(STRASSISTANCEREQUEST,String)
            End If
            If (STRAIRSNUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(STRAIRSNUMBER,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p4,String)
            End If
            If (STRMODIFINGSTAFF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STRMODIFINGSTAFF,String)
            End If
            If (DATMODIFINGDATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(DATMODIFINGDATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _lOOKUPSBEAPCASEWORKTableAdapter As LOOKUPSBEAPCASEWORKTableAdapter
        
        Private _lOOKUPSBEAPFORMSTableAdapter As LOOKUPSBEAPFORMSTableAdapter
        
        Private _sBEAPACTIONLOGTableAdapter As SBEAPACTIONLOGTableAdapter
        
        Private _sBEAPCASELOGTableAdapter As SBEAPCASELOGTableAdapter
        
        Private _sBEAPCASELOGLINKTableAdapter As SBEAPCASELOGLINKTableAdapter
        
        Private _sBEAPCLIENTCONTACTSTableAdapter As SBEAPCLIENTCONTACTSTableAdapter
        
        Private _sBEAPCLIENTDATATableAdapter As SBEAPCLIENTDATATableAdapter
        
        Private _sBEAPCLIENTLINKTableAdapter As SBEAPCLIENTLINKTableAdapter
        
        Private _sBEAPCLIENTSTableAdapter As SBEAPCLIENTSTableAdapter
        
        Private _sBEAPCONFERENCELOGTableAdapter As SBEAPCONFERENCELOGTableAdapter
        
        Private _sBEAPERRORLOGTableAdapter As SBEAPERRORLOGTableAdapter
        
        Private _sBEAPOTHERLOGTableAdapter As SBEAPOTHERLOGTableAdapter
        
        Private _sBEAPPERMISSIONSTableAdapter As SBEAPPERMISSIONSTableAdapter
        
        Private _sBEAPPHONELOGTableAdapter As SBEAPPHONELOGTableAdapter
        
        Private _sBEAPTECHNICALASSISTTableAdapter As SBEAPTECHNICALASSISTTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOOKUPSBEAPCASEWORKTableAdapter() As LOOKUPSBEAPCASEWORKTableAdapter
            Get
                Return Me._lOOKUPSBEAPCASEWORKTableAdapter
            End Get
            Set
                Me._lOOKUPSBEAPCASEWORKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOOKUPSBEAPFORMSTableAdapter() As LOOKUPSBEAPFORMSTableAdapter
            Get
                Return Me._lOOKUPSBEAPFORMSTableAdapter
            End Get
            Set
                Me._lOOKUPSBEAPFORMSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPACTIONLOGTableAdapter() As SBEAPACTIONLOGTableAdapter
            Get
                Return Me._sBEAPACTIONLOGTableAdapter
            End Get
            Set
                Me._sBEAPACTIONLOGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCASELOGTableAdapter() As SBEAPCASELOGTableAdapter
            Get
                Return Me._sBEAPCASELOGTableAdapter
            End Get
            Set
                Me._sBEAPCASELOGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCASELOGLINKTableAdapter() As SBEAPCASELOGLINKTableAdapter
            Get
                Return Me._sBEAPCASELOGLINKTableAdapter
            End Get
            Set
                Me._sBEAPCASELOGLINKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCLIENTCONTACTSTableAdapter() As SBEAPCLIENTCONTACTSTableAdapter
            Get
                Return Me._sBEAPCLIENTCONTACTSTableAdapter
            End Get
            Set
                Me._sBEAPCLIENTCONTACTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCLIENTDATATableAdapter() As SBEAPCLIENTDATATableAdapter
            Get
                Return Me._sBEAPCLIENTDATATableAdapter
            End Get
            Set
                Me._sBEAPCLIENTDATATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCLIENTLINKTableAdapter() As SBEAPCLIENTLINKTableAdapter
            Get
                Return Me._sBEAPCLIENTLINKTableAdapter
            End Get
            Set
                Me._sBEAPCLIENTLINKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCLIENTSTableAdapter() As SBEAPCLIENTSTableAdapter
            Get
                Return Me._sBEAPCLIENTSTableAdapter
            End Get
            Set
                Me._sBEAPCLIENTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPCONFERENCELOGTableAdapter() As SBEAPCONFERENCELOGTableAdapter
            Get
                Return Me._sBEAPCONFERENCELOGTableAdapter
            End Get
            Set
                Me._sBEAPCONFERENCELOGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPERRORLOGTableAdapter() As SBEAPERRORLOGTableAdapter
            Get
                Return Me._sBEAPERRORLOGTableAdapter
            End Get
            Set
                Me._sBEAPERRORLOGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPOTHERLOGTableAdapter() As SBEAPOTHERLOGTableAdapter
            Get
                Return Me._sBEAPOTHERLOGTableAdapter
            End Get
            Set
                Me._sBEAPOTHERLOGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPPERMISSIONSTableAdapter() As SBEAPPERMISSIONSTableAdapter
            Get
                Return Me._sBEAPPERMISSIONSTableAdapter
            End Get
            Set
                Me._sBEAPPERMISSIONSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPPHONELOGTableAdapter() As SBEAPPHONELOGTableAdapter
            Get
                Return Me._sBEAPPHONELOGTableAdapter
            End Get
            Set
                Me._sBEAPPHONELOGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SBEAPTECHNICALASSISTTableAdapter() As SBEAPTECHNICALASSISTTableAdapter
            Get
                Return Me._sBEAPTECHNICALASSISTTableAdapter
            End Get
            Set
                Me._sBEAPTECHNICALASSISTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOOKUPSBEAPCASEWORKTableAdapter.Connection
                End If
                If ((Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOOKUPSBEAPFORMSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOOKUPSBEAPFORMSTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPACTIONLOGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPACTIONLOGTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCASELOGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCASELOGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCASELOGTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCASELOGLINKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCASELOGLINKTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCLIENTCONTACTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCLIENTCONTACTSTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCLIENTDATATableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCLIENTDATATableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCLIENTLINKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCLIENTLINKTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCLIENTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCLIENTSTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPCONFERENCELOGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPCONFERENCELOGTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPERRORLOGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPERRORLOGTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPOTHERLOGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPOTHERLOGTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPPERMISSIONSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPPERMISSIONSTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPPHONELOGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPPHONELOGTableAdapter.Connection
                End If
                If ((Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sBEAPTECHNICALASSISTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sBEAPTECHNICALASSISTTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCASELOGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsFullSBEAP, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCONFERENCELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCONFERENCELOGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPERRORLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPERRORLOGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTLINK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTLINKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPPHONELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPPHONELOGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPTECHNICALASSIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPTECHNICALASSISTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPOTHERLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPOTHERLOGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPPERMISSIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPPERMISSIONSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOOKUPSBEAPFORMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOOKUPSBEAPFORMSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPACTIONLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPACTIONLOGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOOKUPSBEAPCASEWORK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOOKUPSBEAPCASEWORKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTCONTACTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTCONTACTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTDATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTDATATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPCASELOGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCASELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCASELOGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SBEAPCASELOGLINK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sBEAPCASELOGLINKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsFullSBEAP, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCONFERENCELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCONFERENCELOGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPERRORLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPERRORLOGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTLINK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTLINKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPPHONELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPPHONELOGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPTECHNICALASSIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPTECHNICALASSISTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPOTHERLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPOTHERLOGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPPERMISSIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPPERMISSIONSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOOKUPSBEAPFORMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOOKUPSBEAPFORMSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPACTIONLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPACTIONLOGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOOKUPSBEAPCASEWORK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOOKUPSBEAPCASEWORKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTCONTACTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTCONTACTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTDATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTDATATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPCASELOGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCASELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCASELOGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SBEAPCASELOGLINK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sBEAPCASELOGLINKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsFullSBEAP, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCASELOGLINK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCASELOGLINKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPCASELOGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCASELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCASELOGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTDATA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTDATATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTCONTACTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTCONTACTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOOKUPSBEAPCASEWORK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOOKUPSBEAPCASEWORKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPACTIONLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPACTIONLOGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOOKUPSBEAPFORMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOOKUPSBEAPFORMSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPPERMISSIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPPERMISSIONSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPOTHERLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPOTHERLOGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPTECHNICALASSIST.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPTECHNICALASSISTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPPHONELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPPHONELOGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCLIENTLINK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCLIENTLINKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPERRORLOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPERRORLOGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SBEAPCONFERENCELOG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sBEAPCONFERENCELOGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsFullSBEAP) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOOKUPSBEAPCASEWORKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOOKUPSBEAPFORMSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPACTIONLOGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCASELOGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCASELOGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCASELOGLINKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCLIENTCONTACTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCLIENTDATATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCLIENTLINKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCLIENTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPCONFERENCELOGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPERRORLOGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPOTHERLOGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPPERMISSIONSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPPHONELOGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sBEAPTECHNICALASSISTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOOKUPSBEAPCASEWORKTableAdapter, Me._lOOKUPSBEAPCASEWORKTableAdapter.Connection)
                    Me._lOOKUPSBEAPCASEWORKTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._lOOKUPSBEAPCASEWORKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._lOOKUPSBEAPCASEWORKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOOKUPSBEAPCASEWORKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOOKUPSBEAPCASEWORKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOOKUPSBEAPFORMSTableAdapter, Me._lOOKUPSBEAPFORMSTableAdapter.Connection)
                    Me._lOOKUPSBEAPFORMSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._lOOKUPSBEAPFORMSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._lOOKUPSBEAPFORMSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOOKUPSBEAPFORMSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOOKUPSBEAPFORMSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPACTIONLOGTableAdapter, Me._sBEAPACTIONLOGTableAdapter.Connection)
                    Me._sBEAPACTIONLOGTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPACTIONLOGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPACTIONLOGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPACTIONLOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPACTIONLOGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCASELOGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCASELOGTableAdapter, Me._sBEAPCASELOGTableAdapter.Connection)
                    Me._sBEAPCASELOGTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCASELOGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCASELOGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCASELOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCASELOGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCASELOGLINKTableAdapter, Me._sBEAPCASELOGLINKTableAdapter.Connection)
                    Me._sBEAPCASELOGLINKTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCASELOGLINKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCASELOGLINKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCASELOGLINKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCASELOGLINKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCLIENTCONTACTSTableAdapter, Me._sBEAPCLIENTCONTACTSTableAdapter.Connection)
                    Me._sBEAPCLIENTCONTACTSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTCONTACTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCLIENTCONTACTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCLIENTCONTACTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCLIENTCONTACTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCLIENTDATATableAdapter, Me._sBEAPCLIENTDATATableAdapter.Connection)
                    Me._sBEAPCLIENTDATATableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTDATATableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCLIENTDATATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCLIENTDATATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCLIENTDATATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCLIENTLINKTableAdapter, Me._sBEAPCLIENTLINKTableAdapter.Connection)
                    Me._sBEAPCLIENTLINKTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTLINKTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCLIENTLINKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCLIENTLINKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCLIENTLINKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCLIENTSTableAdapter, Me._sBEAPCLIENTSTableAdapter.Connection)
                    Me._sBEAPCLIENTSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCLIENTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCLIENTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCLIENTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPCONFERENCELOGTableAdapter, Me._sBEAPCONFERENCELOGTableAdapter.Connection)
                    Me._sBEAPCONFERENCELOGTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCONFERENCELOGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPCONFERENCELOGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPCONFERENCELOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPCONFERENCELOGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPERRORLOGTableAdapter, Me._sBEAPERRORLOGTableAdapter.Connection)
                    Me._sBEAPERRORLOGTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPERRORLOGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPERRORLOGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPERRORLOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPERRORLOGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPOTHERLOGTableAdapter, Me._sBEAPOTHERLOGTableAdapter.Connection)
                    Me._sBEAPOTHERLOGTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPOTHERLOGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPOTHERLOGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPOTHERLOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPOTHERLOGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPPERMISSIONSTableAdapter, Me._sBEAPPERMISSIONSTableAdapter.Connection)
                    Me._sBEAPPERMISSIONSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPPERMISSIONSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPPERMISSIONSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPPERMISSIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPPERMISSIONSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPPHONELOGTableAdapter, Me._sBEAPPHONELOGTableAdapter.Connection)
                    Me._sBEAPPHONELOGTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPPHONELOGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPPHONELOGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPPHONELOGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPPHONELOGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sBEAPTECHNICALASSISTTableAdapter, Me._sBEAPTECHNICALASSISTTableAdapter.Connection)
                    Me._sBEAPTECHNICALASSISTTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPTECHNICALASSISTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sBEAPTECHNICALASSISTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sBEAPTECHNICALASSISTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sBEAPTECHNICALASSISTTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._lOOKUPSBEAPCASEWORKTableAdapter) Is Nothing) Then
                    Me._lOOKUPSBEAPCASEWORKTableAdapter.Connection = CType(revertConnections(Me._lOOKUPSBEAPCASEWORKTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._lOOKUPSBEAPCASEWORKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOOKUPSBEAPFORMSTableAdapter) Is Nothing) Then
                    Me._lOOKUPSBEAPFORMSTableAdapter.Connection = CType(revertConnections(Me._lOOKUPSBEAPFORMSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._lOOKUPSBEAPFORMSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPACTIONLOGTableAdapter) Is Nothing) Then
                    Me._sBEAPACTIONLOGTableAdapter.Connection = CType(revertConnections(Me._sBEAPACTIONLOGTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPACTIONLOGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCASELOGTableAdapter) Is Nothing) Then
                    Me._sBEAPCASELOGTableAdapter.Connection = CType(revertConnections(Me._sBEAPCASELOGTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCASELOGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCASELOGLINKTableAdapter) Is Nothing) Then
                    Me._sBEAPCASELOGLINKTableAdapter.Connection = CType(revertConnections(Me._sBEAPCASELOGLINKTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCASELOGLINKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCLIENTCONTACTSTableAdapter) Is Nothing) Then
                    Me._sBEAPCLIENTCONTACTSTableAdapter.Connection = CType(revertConnections(Me._sBEAPCLIENTCONTACTSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTCONTACTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCLIENTDATATableAdapter) Is Nothing) Then
                    Me._sBEAPCLIENTDATATableAdapter.Connection = CType(revertConnections(Me._sBEAPCLIENTDATATableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTDATATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCLIENTLINKTableAdapter) Is Nothing) Then
                    Me._sBEAPCLIENTLINKTableAdapter.Connection = CType(revertConnections(Me._sBEAPCLIENTLINKTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTLINKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCLIENTSTableAdapter) Is Nothing) Then
                    Me._sBEAPCLIENTSTableAdapter.Connection = CType(revertConnections(Me._sBEAPCLIENTSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCLIENTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPCONFERENCELOGTableAdapter) Is Nothing) Then
                    Me._sBEAPCONFERENCELOGTableAdapter.Connection = CType(revertConnections(Me._sBEAPCONFERENCELOGTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPCONFERENCELOGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPERRORLOGTableAdapter) Is Nothing) Then
                    Me._sBEAPERRORLOGTableAdapter.Connection = CType(revertConnections(Me._sBEAPERRORLOGTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPERRORLOGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPOTHERLOGTableAdapter) Is Nothing) Then
                    Me._sBEAPOTHERLOGTableAdapter.Connection = CType(revertConnections(Me._sBEAPOTHERLOGTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPOTHERLOGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPPERMISSIONSTableAdapter) Is Nothing) Then
                    Me._sBEAPPERMISSIONSTableAdapter.Connection = CType(revertConnections(Me._sBEAPPERMISSIONSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPPERMISSIONSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPPHONELOGTableAdapter) Is Nothing) Then
                    Me._sBEAPPHONELOGTableAdapter.Connection = CType(revertConnections(Me._sBEAPPHONELOGTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPPHONELOGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sBEAPTECHNICALASSISTTableAdapter) Is Nothing) Then
                    Me._sBEAPTECHNICALASSISTTableAdapter.Connection = CType(revertConnections(Me._sBEAPTECHNICALASSISTTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sBEAPTECHNICALASSISTTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
